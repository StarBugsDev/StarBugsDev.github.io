<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第 180 期 - 未來看見 bug 記得想起我們，謝謝大家！</title>
      <link href="/2023/08/08/180-goodbye/"/>
      <url>/2023/08/08/180-goodbye/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-JavaScript-玩轉設計模式-你一定用過但可能不知道的-Facade-Pattern（外觀模式）"><a href="#用-JavaScript-玩轉設計模式-你一定用過但可能不知道的-Facade-Pattern（外觀模式）" class="headerlink" title="用 JavaScript 玩轉設計模式 - 你一定用過但可能不知道的 Facade Pattern（外觀模式）"></a><a href="https://medium.com/starbugs/%E7%94%A8-javascript-%E7%8E%A9%E8%BD%89%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E4%BD%A0%E4%B8%80%E5%AE%9A%E7%94%A8%E9%81%8E%E4%BD%86%E5%8F%AF%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-facade-pattern-%E5%A4%96%E8%A7%80%E6%A8%A1%E5%BC%8F-cfb5926ad1c6" target="_blank" rel="noopener">用 JavaScript 玩轉設計模式 - 你一定用過但可能不知道的 Facade Pattern（外觀模式）</a></h3><p>在程式設計的時候，我們經常會將各個行為獨立拆開（例如文章例子中的取得資料、檢查權限邏輯、檢查），這麼做會得到的好處是能夠在只需要該功能時單獨使用，或是更容易地與其他行為做組合，例如：其他地方如果需要檢查某些東西，可以單獨使用某個類別。壞處就是在使用時，你必須了解到這群方法和類別該如何正確互動，且每次使用時都需要承擔使用三種類別或方法的複雜度。</p><p>那有辦法讓這件事情看起來簡單一點嗎？可以！就用 Facade Pattern！Facade Pattern 通常會在「當你想要替一些複雜的操作，提供一個簡單的使用方式」時使用。</p><blockquote><p>Larry：</p><p>大家好，我是 Larry，這是最後一次在 Starbugs 推薦文章了。星巴哥成立了三年多，這段時間能透過週刊的方式時常分享技術新知、還有寫一些文章給大家看，對我來說是很棒的經驗，也是很寶貴的回憶。</p><p>雖然 Starbugs 要結束了，但我必須說如果沒有讀者們的支持，那就沒有今天的週刊，所以想在這裡謝謝你們的一路相伴。在 Starbugs 結束之後，未來我還是會不定期寫文章、分享有趣的內容，希望以後還能用不同的方式，繼續與大家交流～</p></blockquote><blockquote><p>神 Q 超人：</p><p>Hi！大家好，我是神 Q 超人！本來打了很多好捨不得之類的言論，但畢竟我是個大人了，所以又全部把它們全都刪掉。</p><p>最後道別的話我不太會說，但是真的非常感謝這幾年來大家的支持。</p></blockquote><blockquote><p>Luka:</p><p>感謝各位讀者三年多一路的陪伴，直到現在都還有很多人訂閱著星巴哥技術週刊，真的很感動。同時也謝謝願意將文章發到星巴哥的每一位技術寫作者，沒有你們就沒有星巴哥。沒想到這麼快來到了最後一期，心中無限不捨。感傷之餘，感謝所有默默支持我們的人，希望你們未來順利。StarBugs Weekly 星巴哥技術週刊下台一鞠躬。</p></blockquote><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="React-Server-Components-–-How-and-Why-You-Should-Use-Them-in-Your-Code"><a href="#React-Server-Components-–-How-and-Why-You-Should-Use-Them-in-Your-Code" class="headerlink" title="React Server Components – How and Why You Should Use Them in Your Code"></a><a href="https://www.freecodecamp.org/news/how-to-use-react-server-components/" target="_blank" rel="noopener">React Server Components – How and Why You Should Use Them in Your Code</a></h3><p>這篇文章先是介紹了當前 React 的 component 面臨到哪些瓶頸，像是因為非同步請求產生的 render 問題，或是可維護性方面的狀況。接著會開始介紹 react client component 和 react server component 各是什麼，還會講解 react server component 的限制，以及該如何利用 react server component 與 react client component 建立更好的結構！最後還有提供範例，真的很讚！</p><h3 id="Mastering-JavaScript-Shorthands"><a href="#Mastering-JavaScript-Shorthands" class="headerlink" title="Mastering JavaScript Shorthands"></a><a href="https://hackernoon.com/mastering-javascript-shorthand-tips-for-beginners?source=rss" target="_blank" rel="noopener">Mastering JavaScript Shorthands</a></h3><p>在 JavaScript 裡面，會有許多方便的寫法可以讓開發者避免寫下許多條件判斷，讓程式碼更精簡（當然是在合理範圍內的精簡 😂），例如：物件的解構、透過短路來決定是否執行方法，和問號判斷 null 及 undefined 都非常好用！那還有什麼其他的簡寫方式呢？快看看文章中還列了哪些吧！</p><h3 id="Chrome-Debugger-is-easier-to-use-than-you-might-think"><a href="#Chrome-Debugger-is-easier-to-use-than-you-might-think" class="headerlink" title="Chrome Debugger is easier to use than you might think"></a><a href="https://dev.to/this-is-learning/chrome-debugger-is-easier-to-use-than-you-might-think-c8" target="_blank" rel="noopener">Chrome Debugger is easier to use than you might think</a></h3><p>雖然目前已經很少在用 debugger 配合 Chrome 的開發者工具來除錯了，但是記得剛從 asp.net 轉到前端工程師時，真的很懷念那可以讓我一行一行執行，然後看每個變數現在值是什麼，以及現在跑到哪的中斷點。也許現在都較習慣用 console.log，不過有時候在找 bug 時就是需要一些靈感，所以將這些工具都先放到包包裡，總會有某個靈機一動的時機讓你想起來還有它！</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="快速上手-Grafana-k6-壓力測試工具"><a href="#快速上手-Grafana-k6-壓力測試工具" class="headerlink" title="快速上手 Grafana k6 壓力測試工具"></a><a href="https://blog.miniasp.com/post/2023/08/01/Getting-Started-with-Grafana-k6-Load-testing-tool" target="_blank" rel="noopener">快速上手 Grafana k6 壓力測試工具</a></h3><p>台灣的軟體工程師應該沒有人不知道保哥。保哥這篇文章介紹了一款超簡單、超方便、五分鐘就能學會的壓力測試工具 k6，而且壓力測試的邏輯還是用 JavaScript 寫的。如果你從來沒有試過壓力測試工具，那可以參考看看這篇文章，應該很快就能學會了～</p><h3 id="Top-6-message-queues-for-distributed-architectures"><a href="#Top-6-message-queues-for-distributed-architectures" class="headerlink" title="Top 6 message queues for distributed architectures"></a><a href="https://icepanel.medium.com/top-6-message-queues-for-distributed-architectures-a3cbabf08993" target="_blank" rel="noopener">Top 6 message queues for distributed architectures</a></h3><p>Message Queue 在後端領域中是非常重要的工具，但 MQ 那麼多種，究竟該怎麼挑呢？這篇文章從開源的 RabbitMQ、Kafka 講到雲端的 Amazon SQS 跟 GCP Pub/Sub，每一種都有其獨特的優勢和要面臨挑戰。如果你還不太確定這些工具之間有什麼差別，那這篇文章很適合你讀～</p><h3 id="How-to-Design-a-Scalable-Rate-Limiting-Algorithm-with-Kong-API"><a href="#How-to-Design-a-Scalable-Rate-Limiting-Algorithm-with-Kong-API" class="headerlink" title="How to Design a Scalable Rate Limiting Algorithm with Kong API"></a><a href="https://konghq.com/blog/engineering/how-to-design-a-scalable-rate-limiting-algorithm" target="_blank" rel="noopener">How to Design a Scalable Rate Limiting Algorithm with Kong API</a></h3><p>身為後端工程師，當然要知道怎麼做 Rate Limiting。這篇文章說明了幾種比較常見方法的優缺點，以及怎麼在分散式系統中做 Rate Limiting（還有幫自家產品打一下廣告XD）。如果你平時很常在開發 API，這篇文章絕對值得你一讀。</p><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 179 期 - 星巴哥成立後的第一個颱風！</title>
      <link href="/2023/07/25/179-first-typhoon-after-starbugs/"/>
      <url>/2023/07/25/179-first-typhoon-after-starbugs/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Refactor-這-3-個重構技巧我很喜歡，推薦給你-feat-JavaScript"><a href="#Refactor-這-3-個重構技巧我很喜歡，推薦給你-feat-JavaScript" class="headerlink" title="Refactor | 這 3 個重構技巧我很喜歡，推薦給你 feat. JavaScript"></a><a href="https://medium.com/starbugs/refactor-%E9%80%99-3-%E5%80%8B%E9%87%8D%E6%A7%8B%E6%8A%80%E5%B7%A7%E6%88%91%E5%BE%88%E5%96%9C%E6%AD%A1-%E6%8E%A8%E8%96%A6%E7%B5%A6%E4%BD%A0-feat-javascript-849718b19c5e" target="_blank" rel="noopener">Refactor | 這 3 個重構技巧我很喜歡，推薦給你 feat. JavaScript</a></h3><p>在本週的專欄中，神 Q 超人要跟大家分享他前陣子讀了鼎鼎大名的「重構｜改善既有程式的設計」後，覺得很喜歡的幾個重構技巧。</p><p>雖然文中的範例都是用 JavaScript 寫的，但不論你寫的是什麼語言、是新手還是老手，只要你對程式碼的可讀性和可維護性有所追求，那麼這篇文章就絕對值得你一讀。快跟著神 Q 一起進入重構的世界，學習更多有趣的技巧吧！</p><h2 id="GenAI"><a href="#GenAI" class="headerlink" title="GenAI"></a>GenAI</h2><h3 id="假如生成式-AI-產生的程式碼都可以直接使用的話…"><a href="#假如生成式-AI-產生的程式碼都可以直接使用的話…" class="headerlink" title="假如生成式 AI 產生的程式碼都可以直接使用的話…"></a><a href="https://blog.blackhc.net/2022/12/llm_software_engineering/" target="_blank" rel="noopener">假如生成式 AI 產生的程式碼都可以直接使用的話…</a></h3><p>雖然自己有透 GitHub Copilot 和 ChatGPT 來增加生產力，但其實他產生出來的程式碼還是需要人工來檢查、修改，才能真正使用。最近看到一個叫做 LLM Strategy 工具提出來的想法滿不錯的，當工程師在撰寫 Python 時，只需要在程式碼上面加上 Decorator，例如: @llm_strategy(OpenAI(max_tokens=256))，那麼在接下來的 Class Method 中就只需要寫上需求註解，不需要撰寫程式碼，GenAI 就會幫你把需要的程式碼補完 (看附圖應該可以更好理解)<br>或許在不久的將來，當 GenAI 產生的程式碼都可以直接使用時，工程師就可以專注在需求上，而不需要花時間在撰寫程式碼上，寫程式的門檻也會更低！</p><h3 id="有沒有-On-Premise-的-ChatGPT-啊？！"><a href="#有沒有-On-Premise-的-ChatGPT-啊？！" class="headerlink" title="有沒有 On Premise 的 ChatGPT 啊？！"></a><a href="https://github.com/imartinez/privateGPT" target="_blank" rel="noopener">有沒有 On Premise 的 ChatGPT 啊？！</a></h3><p>在雲端世界的解決方案中，企業常常因為資料安全性的考量，而不願意將資料上傳到雲端，這時候就會需要採購 On Premise 的版本，那在生成式 AI 的領域裡有沒有類似 ChatGPT 的 On Premise 的版本呢？<br>答案當然是肯定的，目前有看到幾個比較多人使用的專案，分別是 ColossalChat, privateGPT,  localGPT，其中 privateGPT 使用的 LLM 為 GPT4All，localGPT 則是使用 Vicuna-7B，推薦給有類似需求的人</p><ul><li><a href="https://github.com/hpcaitech/ColossalAI/tree/main/applications/Chat" target="_blank" rel="noopener">ColossalChat</a></li><li><a href="https://github.com/imartinez/privateGPT" target="_blank" rel="noopener">privateGPT</a></li><li><a href="https://github.com/PromtEngineer/localGPT" target="_blank" rel="noopener">localGPT</a></li></ul><h3 id="開發-AI-應用服務要怎麼抓蟲"><a href="#開發-AI-應用服務要怎麼抓蟲" class="headerlink" title="開發 AI 應用服務要怎麼抓蟲?"></a><a href="https://blog.langchain.dev/announcing-langsmith/" target="_blank" rel="noopener">開發 AI 應用服務要怎麼抓蟲?</a></h3><p>一般來說，開發 Web 或是 Mobile App 時，都會使用諸如 Sentry 或是 Rollbar 的服務來協助追蹤程式遇到的問題，那在開發 AI App 時，要怎麼抓蟲和監控問題的發生呢?</p><p>在生成式 AI 開發框架中，相信不少人都是使用 #LangChain，而其實它也有推出類似的服務產品，也就是今天要提到的 #LangSmith，底下將介紹他所提供的重要功能</p><ul><li>Debugging: 視覺化使用者與 AI App 互動過程中每一個步驟輸入以及輸出 AI Model 的資訊，同時還會給出不預期的結果，錯誤，延遲時間，Token 的使用量，讓開發者有線索可以去找出可能是哪個地方出了問題；並且讓開發者可以直接從 LangSmith 的 UI 去做範例的測試，不用再複製貼上去 OpenAI Playground</li><li>Testing: 軟體測試最直接的方式，不外乎就是修改程式碼，然後把資料丟進去後觀察輸出有沒有符合預期，而 AI App 測試時，會需要比較多的輸入資料，LangSmith 讓開發者可以快速從正在追蹤的問題，或是透過手動上傳的方式來建立資料集，開發者就可以立刻輕鬆的使用他們來測試撰寫的 Chain 和 Prompt 是否符合預期</li><li>Monitoring: 程式當然不會再開發完成就結束了，當服務在線上持續運行時，時時刻刻監控其狀態是相當重要的，透過 LangSmith 可以去監控 AI App 的運行效能，例如延遲和成本，同時也要追蹤 Model 和 Chain 的運行效能，並且可以建立儀表板來了解目前使用者的使用狀況與體驗</li></ul><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-End-of-Front-End-Development"><a href="#The-End-of-Front-End-Development" class="headerlink" title="The End of Front-End Development"></a><a href="https://www.joshwcomeau.com/blog/the-end-of-frontend-development/" target="_blank" rel="noopener">The End of Front-End Development</a></h3><p>近幾年來 AI 急速成長，有許多前端工程師都會認為自己會被 AI 所取代，因為他們甚至能夠根據畫在紙上的 UI，產生對應的 HTML、CSS 和 JavaScript，這聽起來非常可怕，也讓許多前端工程師開始焦慮自己是否要繼續走下去。但是作者在這篇文章中指出，早在 CSS 誕生後的兩年內，第一個號稱不需要寫任何程式碼就能建構網站的 Homestead 就誕生了，但是現在前端工程師絕種了嗎？並沒有。而作者也有從其他面向去討論 AI 對軟體工程師的影響，最推薦的是最後一段寫給有熱忱的開發者的一段話。早上醒來看完這篇文章，心裡的暖都分不清到底是來自於作者的文字還是夏天的太陽。</p><h3 id="The-modern-way-of-serving-images"><a href="#The-modern-way-of-serving-images" class="headerlink" title="The modern way of serving images"></a><a href="https://kurtextrem.de/posts/modern-way-of-img" target="_blank" rel="noopener">The modern way of serving images</a></h3><p>文章中一開始用數據表示，從 HTTP Archive 收集到的資訊當中，至少 70% 的網站都利用當作網站裡最吸引人的部分，但只有 34% 使用了 <code>&lt;img srcset&gt;</code> 建立響應式和高效能的圖片顯示。作者會在文章中解釋為什麼我們會需要建立響應式的圖片，以及我們要如何利用 <code>&lt;img srcset&gt;</code> 和 <code>&lt;picture&gt;</code> 改善顯示或載入圖片時，在網頁遇到的常見問題以及使用者體驗！</p><h3 id="Zedux-Is-this-the-one"><a href="#Zedux-Is-this-the-one" class="headerlink" title="Zedux: Is this the one?"></a><a href="https://omnistac.github.io/zedux/blog/zedux-is-this-the-one" target="_blank" rel="noopener">Zedux: Is this the one?</a></h3><p>Zedux 是為最自由的 React 所建立的狀態管理工具，它潛伏了 5 年多仔細研究 React 狀態管理工具的生態，然後將各種狀態管理工具的優點全部 all for one 到自己身上。Zedux 中的 atom 參考了 Recoil，也吸收了 React Query 擁有簡單版本的 query 和 mutation，其中也包含 Redux 和 Jotai 的所有功能。那看來只要學習這套，之後怎麼鬼轉其他狀態管理工具都沒問題了。 😂</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Caching-Golang-tests-in-CI"><a href="#Caching-Golang-tests-in-CI" class="headerlink" title="Caching Golang tests in CI"></a><a href="https://www.airplane.dev/blog/caching-golang-tests-in-ci" target="_blank" rel="noopener">Caching Golang tests in CI</a></h3><p>這篇文章作者的公司 Airplane 用 Go 來開發產品，並且在每次有新 commit 時就在 Github Action 上跑單元測試。但因為單元測試跑得時間太久了（可能測試寫太多了，真是一間好公司XD），因此他們用了 cache 來大幅加速。如果你的公司也有測試太多要跑很久的問題，那也可以參考看看這篇文章的做法哦～</p><h3 id="Built-in-functions-in-Go-1-21"><a href="#Built-in-functions-in-Go-1-21" class="headerlink" title="Built-in functions in Go 1.21"></a><a href="https://antonz.org/go-1-21-builtins/" target="_blank" rel="noopener">Built-in functions in Go 1.21</a></h3><p>Go 從版本 1.21 開始又多了 min、max、clear 三個內建函數，這篇文章用很簡短的幾個例子帶你看看他們，以後寫程式的時候就可以直接拿來用啦！</p><h3 id="Random-testing-in-Go"><a href="#Random-testing-in-Go" class="headerlink" title="Random testing in Go"></a><a href="https://bitfieldconsulting.com/golang/random-testing" target="_blank" rel="noopener">Random testing in Go</a></h3><p>這一系列講 Go Fuzzing Test 的四篇文章終於寫完啦，看完這四篇，除了會對 Fuzzing Test 有基本的認識之外，應該也會知道怎麼用他來找出一些奇怪的 bug。如果你對 Go 的基本語法還有單元測試已經非常熟悉，那現在來學 Fuzzing Test 剛剛好。</p><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 178 期 - 月光照亮你的眼睛</title>
      <link href="/2023/07/11/178-fighting/"/>
      <url>/2023/07/11/178-fighting/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="開源專案讀起來-你看過計算機的裡面嗎？"><a href="#開源專案讀起來-你看過計算機的裡面嗎？" class="headerlink" title="開源專案讀起來 | 你看過計算機的裡面嗎？"></a><a href="https://medium.com/starbugs/99882574152f" target="_blank" rel="noopener">開源專案讀起來 | 你看過計算機的裡面嗎？</a></h3><p>繼上次的<a href="https://medium.com/starbugs/%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%E8%AE%80%E8%B5%B7%E4%BE%86-%E9%97%9C%E6%96%BC%E5%9C%88%E5%9C%88%E5%8F%89%E5%8F%89%E7%9A%84%E9%9B%85%E9%87%8F-4587d130d326" target="_blank" rel="noopener">「關於圈圈叉叉的雅量」</a>之後，神 Q 的新文章「開源專案讀起來 | 你看過計算機的裡面嗎？」要再度帶你進入開源專案的世界。以計算機為主題，帶你看看三個開源專案分別是怎麼用 JavaScript 去實作加減乘除，以及他們的思路有什麼不同。</p><p>如果你想看更多開源專案的導讀，請趕快到文章下方留言告訴神 Q 你想了解哪個開源專案，讓神 Q 來幫你研究研究，下次就能看到你想看的題目囉～</p><h2 id="職涯規劃"><a href="#職涯規劃" class="headerlink" title="職涯規劃"></a>職涯規劃</h2><h3 id="博弈公司的工程師生活：揭開神秘面紗，機會與挑戰並存"><a href="#博弈公司的工程師生活：揭開神秘面紗，機會與挑戰並存" class="headerlink" title="博弈公司的工程師生活：揭開神秘面紗，機會與挑戰並存"></a><a href="https://israynotarray.com/other/20230626/4076164354/" target="_blank" rel="noopener">博弈公司的工程師生活：揭開神秘面紗，機會與挑戰並存</a></h3><p>對博弈產業倒底在做什麼很好奇嗎？六角學院的 Ray 以自身經驗和朋友的見聞，揭開了這個神秘產業的面紗。從工作內容、技術需求，再到待遇和風險，都有詳細的解釋和分析。如果你對博弈產業有興趣，這篇文章非常值得一讀！</p><h3 id="How-to-have-a-Successful-Software-Engineering-Internship"><a href="#How-to-have-a-Successful-Software-Engineering-Internship" class="headerlink" title="How to have a Successful Software Engineering Internship"></a><a href="https://www.yangshuntay.com/blog/how-to-have-successful-software-engineering-internship" target="_blank" rel="noopener">How to have a Successful Software Engineering Internship</a></h3><p>好不容易拿到了在軟體公司實習的機會，但又怕自己的表現不好嗎？這篇文章提供了一系列實用的建議，如果最近正好在暑假實習，那也許可以參考看看文中的作法，讓自己在實習過程中可以學到最多的東西。</p><h3 id="想提升演算法面試的實力嗎？來參加程式競賽吧！"><a href="#想提升演算法面試的實力嗎？來參加程式競賽吧！" class="headerlink" title="想提升演算法面試的實力嗎？來參加程式競賽吧！"></a><a href="https://link.medium.com/xHT5OxIbFAb" target="_blank" rel="noopener">想提升演算法面試的實力嗎？來參加程式競賽吧！</a></h3><p>如果想要讓自己的演算法實力大幅提升，以通過面試中的 coding test，那不妨參加看看演算法競賽。但作者在文中也提到，雖然演算法競賽和 coding test 看似相似，但其實有很大的差異，特別是在溝通和表達能力上。因此除了把演算法練扎實之外，還是得花一些時間練習表達自己的思路，才可以在面試中過關斬將。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-End-of-Front-End-Development"><a href="#The-End-of-Front-End-Development" class="headerlink" title="The End of Front-End Development"></a><a href="https://www.joshwcomeau.com/blog/the-end-of-frontend-development/" target="_blank" rel="noopener">The End of Front-End Development</a></h3><p>近幾年來 AI 急速成長，有許多前端工程師都會認為自己會被 AI 所取代，因為他們甚至能夠根據畫在紙上的 UI，產生對應的 HTML、CSS 和 JavaScript，這聽起來非常可怕，也讓許多前端工程師開始焦慮自己是否要繼續走下去。但是作者在這篇文章中指出，早在 CSS 誕生後的兩年內，第一個號稱不需要寫任何程式碼就能建構網站的 Homestead 就誕生了，但是現在前端工程師絕種了嗎？並沒有。而作者也有從其他面向去討論 AI 對軟體工程師的影響，最推薦的是最後一段寫給有熱忱的開發者的一段話。早上醒來看完這篇文章，心裡的暖都分不清到底是來自於作者的文字還是夏天的太陽。</p><h3 id="The-modern-way-of-serving-images"><a href="#The-modern-way-of-serving-images" class="headerlink" title="The modern way of serving images"></a><a href="https://kurtextrem.de/posts/modern-way-of-img" target="_blank" rel="noopener">The modern way of serving images</a></h3><p>文章中一開始用數據表示，從 HTTP Archive 收集到的資訊當中，至少 70% 的網站都利用當作網站裡最吸引人的部分，但只有 34% 使用了 <code>&lt;img srcset&gt;</code> 建立響應式和高效能的圖片顯示。作者會在文章中解釋為什麼我們會需要建立響應式的圖片，以及我們要如何利用 <code>&lt;img srcset&gt;</code> 和 <code>&lt;picture&gt;</code> 改善顯示或載入圖片時，在網頁遇到的常見問題以及使用者體驗！</p><h3 id="Zedux-Is-this-the-one"><a href="#Zedux-Is-this-the-one" class="headerlink" title="Zedux: Is this the one?"></a><a href="https://omnistac.github.io/zedux/blog/zedux-is-this-the-one" target="_blank" rel="noopener">Zedux: Is this the one?</a></h3><p>Zedux 是為最自由的 React 所建立的狀態管理工具，它潛伏了 5 年多仔細研究 React 狀態管理工具的生態，然後將各種狀態管理工具的優點全部 all for one 到自己身上。Zedux 中的 atom 參考了 Recoil，也吸收了 React Query 擁有簡單版本的 query 和 mutation，其中也包含 Redux 和 Jotai 的所有功能。那看來只要學習這套，之後怎麼鬼轉其他狀態管理工具都沒問題了。 😂</p><p>Writer:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 177 期 - 你掉的是這個金 Bug 還是銀 Bug?</title>
      <link href="/2023/06/27/177-gold-bug-or-silver-bug/"/>
      <url>/2023/06/27/177-gold-bug-or-silver-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="兩大-bundler-交鋒：Vite-與-Turbopack-的技術角力賽"><a href="#兩大-bundler-交鋒：Vite-與-Turbopack-的技術角力賽" class="headerlink" title="兩大 bundler 交鋒：Vite 與 Turbopack 的技術角力賽"></a><a href="https://medium.com/starbugs/vite-vs-turbopack-1e139c222557" target="_blank" rel="noopener">兩大 bundler 交鋒：Vite 與 Turbopack 的技術角力賽</a></h3><p>本週的專欄是由 Writer Leo 發佈的「兩大 Bundler 交鋒：Vite 與 Turbopack 的技術角力賽」。在這篇文章中，Leo 要跟大家介紹由 Vue.js 作者尤雨溪創建的 Vite、以及 Next.js 團隊用 Rust 寫成的 Turbopack 這兩個前端 Bundler，是如何在效能和開發體驗上各顯神通，展開激烈的角力！</p><p>如果你對前端開發有興趣，這篇文章絕對值得一讀，讓你一窺兩大 Bundler 的秘密武器，也讓你了解他們在社群中引起的風波。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="Reducing-Complexity-in-Front-End-Development"><a href="#Reducing-Complexity-in-Front-End-Development" class="headerlink" title="Reducing Complexity in Front End Development"></a><a href="https://css-irl.info/reducing-complexity-in-front-end-development/" target="_blank" rel="noopener">Reducing Complexity in Front End Development</a></h3><p>這篇文章主要是在分享作者在 <a href="https://heypresents.com/conferences/2023" target="_blank" rel="noopener">All Day Hey</a> 裡面最喜歡的一個議程 <a href="https://heypresents.com/talks/abstractions-complexities-and-off-ramps" target="_blank" rel="noopener">Abstractions, complexities and off-ramps</a>，議程內容主要是在說，現代開發都會傾向於尋找現有的解決方案，然後從 npm 把第三方套件下載下來使用，但如此一來前端的專案其實是失去掌控的，因為在那些第三方套件中有太多複雜性，你不確定他何時和什麼原因會使專案出錯。此議程會帶你分析這些複雜性，以及提供你能夠逐步解決的方式。推薦大家可以點進文章看看！如果有時間也可以看完整個議程！ 🙌</p><h3 id="useHooks"><a href="#useHooks" class="headerlink" title="useHooks"></a><a href="https://usehooks.com/" target="_blank" rel="noopener">useHooks</a></h3><p>相信有在使用 React 的開發者，對於自己寫 hooks 來說應該是家常便飯了，而這個意外看到的 repository 就是將各種常用的操作，像是 debounce、toggle、mouse 等等，然後把它們的邏輯包成方便使用的 Hooks！且網站中的每個 hooks 都有對應的 Demo 和程式碼，如果不想要下載整個套件也可以直接複製到專案用！</p><h3 id="👋-Say-Goodbye-to-Spread-Operator-Use-Default-Composer"><a href="#👋-Say-Goodbye-to-Spread-Operator-Use-Default-Composer" class="headerlink" title="👋 Say Goodbye to Spread Operator: Use Default Composer"></a><a href="https://aralroca.com/blog/default-composer" target="_blank" rel="noopener">👋 Say Goodbye to Spread Operator: Use Default Composer</a></h3><p>在 JavaScript 裡面使用解構產生新的物件賦值是很常見的操作，還能夠用一個有預設值的物件搭配有值的物件做到組合的效果，產生出一個「有更新值就用新值，沒有的話就用預設值」的物件出來，但如果是單層的物件還好操作，如果是巢狀的物件就會有點麻煩了，這篇文章就是在介紹 <a href="https://github.com/aralroca/default-composer" target="_blank" rel="noopener">default-composer</a> 這個第三方套件，讓我們可以更容易地做到相同的事情。</p><h2 id="System-Design"><a href="#System-Design" class="headerlink" title="System Design"></a>System Design</h2><h3 id="Redis-與作者-antirez-的故事"><a href="#Redis-與作者-antirez-的故事" class="headerlink" title="Redis 與作者 antirez 的故事"></a><a href="https://blog.brachiosoft.com/redis" target="_blank" rel="noopener">Redis 與作者 antirez 的故事</a></h3><p>軟體考古系列又來啦！這次的主角是大家都和熟悉的 Redis。這篇文章就像一部電影，帶你走過 antirez 的早年生活，看他如何從一個資料庫的門外漢，變成創造出 Redis 的英雄。如果你對資料庫有興趣，或者你也是一個狂熱的 Redis 迷，那千萬不能錯過這篇文章！</p><h3 id="System-Design-—-Scaling-from-Zero-to-Millions-Of-Users"><a href="#System-Design-—-Scaling-from-Zero-to-Millions-Of-Users" class="headerlink" title="System Design — Scaling from Zero to Millions Of Users"></a><a href="https://medium.com/geekculture/system-design-scaling-from-zero-to-millions-of-users-deca270ef784" target="_blank" rel="noopener">System Design — Scaling from Zero to Millions Of Users</a></h3><p>從單一 user 到數百萬 user，這篇文章將帶你一步步了解如何水平擴展你的系統。不管是 Cache、CDN 還是 Message Queue，在這篇文章都有很清楚的解釋跟例子。如果你對系統設計完全沒有概念，那從這篇文章開始讀剛剛好！</p><h3 id="Migrating-Netflix-to-GraphQL-Safely"><a href="#Migrating-Netflix-to-GraphQL-Safely" class="headerlink" title="Migrating Netflix to GraphQL Safely"></a><a href="https://netflixtechblog.com/migrating-netflix-to-graphql-safely-8e1e4d4f1e72" target="_blank" rel="noopener">Migrating Netflix to GraphQL Safely</a></h3><p>這篇文章出自 Netflix 的技術部落格，裡面說到 Netflix 是怎麼在 zero downtime 的情況下，將他的架構從 Falcor migrate 到 GraphQL，並分享了 migrate 過程中遇到的問題。如果你對 migration 或是 Netflix 用到的技術又興趣，那一定要讀讀這篇文章！</p><p>Writer:</p><ul><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Leo，熱愛研究如何造輪子的前端工程師</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 176 期 - Bug 最近會不會也開始因為業力引爆？</title>
      <link href="/2023/06/13/176-will-karma-explode-bug/"/>
      <url>/2023/06/13/176-will-karma-explode-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="什麼-元件竟然也有分可控制與不可控制-探討-React-Controlled-以及-Uncontrolled-Component"><a href="#什麼-元件竟然也有分可控制與不可控制-探討-React-Controlled-以及-Uncontrolled-Component" class="headerlink" title="什麼?!元件竟然也有分可控制與不可控制 - 探討 React Controlled 以及 Uncontrolled Component"></a><a href="https://medium.com/starbugs/%E4%BB%80%E9%BA%BC-%E5%85%83%E4%BB%B6%E7%AB%9F%E7%84%B6%E4%B9%9F%E6%9C%89%E5%88%86%E5%8F%AF%E6%8E%A7%E5%88%B6%E8%88%87%E4%B8%8D%E5%8F%AF%E6%8E%A7%E5%88%B6-%E6%8E%A2%E8%A8%8E-react-controlled-%E4%BB%A5%E5%8F%8A-uncontrolled-component-d6b8285d8939" target="_blank" rel="noopener">什麼?!元件竟然也有分可控制與不可控制 - 探討 React Controlled 以及 Uncontrolled Component</a></h3><p>在 React.js 的世界中有分成 Controlled 以及 Uncontrolled 兩種 Component，Andy 本篇文章除了介紹這兩種 Component 外也會介紹一些常用的 form 套件是如何控制其底下的 component，對於想要更深入了解 React.js 的朋友可以參考看看～</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="SOLID-Principles-with-Go-Examples-Every-Developer-Should-Master"><a href="#SOLID-Principles-with-Go-Examples-Every-Developer-Should-Master" class="headerlink" title="SOLID Principles with Go Examples Every Developer Should Master"></a><a href="https://towardsdev.com/solid-principles-with-go-examples-every-developer-should-master-6bc6f9f2b6ab" target="_blank" rel="noopener">SOLID Principles with Go Examples Every Developer Should Master</a></h3><p>大家應該都聽過 SOLID 中的五個原則，他們目的就是為了讓你的程式碼更好維護。但知道歸知道，能不能實際運用又是另外一回事，所以這篇文章就用了超多例子來講解怎麼在 Go 中符合 SOLID 的程式碼。雖然 Go 不是一個典型 OOP 的語言也沒有所謂繼承，但用 interface 還有 composition 還是一樣可以寫出很漂亮的程式碼！</p><h3 id="ChatGPT-Wardley-and-Go"><a href="#ChatGPT-Wardley-and-Go" class="headerlink" title="ChatGPT, Wardley and Go"></a><a href="https://blog.owulveryck.info/2023/05/30/chatgpt-wardley-and-go.html" target="_blank" rel="noopener">ChatGPT, Wardley and Go</a></h3><p>自從 ChatGPT 開放 plugin 功能之後，各種 plugin 就如雨後春筍般一直冒出來，而這篇文章正是教你怎麼用 Go 寫一個自己的 plugin。看完這篇文章後，你就能知道 ChatGPT 跟 plugin 的溝通流程，還有怎麼在 ChatGPT 上面畫圖XD，是非常有趣的一篇文章～</p><h3 id="Finding-The-Best-Go-Project-Structure"><a href="#Finding-The-Best-Go-Project-Structure" class="headerlink" title="Finding The Best Go Project Structure"></a><a href="https://avivcarmi.com/finding-the-best-go-project-structure-part-1/" target="_blank" rel="noopener">Finding The Best Go Project Structure</a></h3><p>關於怎麼規劃專案的目錄結構，一直以來都是個沒有標準答案的問題，而這個系列文嘗試比較了各種目錄結構的優缺點，如果你最近有打算開一個新專案的話，可以先參考看看這個系列文，讓你的程式碼更好管理。</p><h2 id="Backend-amp-Data-Engineering"><a href="#Backend-amp-Data-Engineering" class="headerlink" title="Backend &amp; Data Engineering"></a>Backend &amp; Data Engineering</h2><h3 id="中-Backend-for-Front-End-BFF"><a href="#中-Backend-for-Front-End-BFF" class="headerlink" title="[中] Backend for Front-End (BFF)"></a><a href="https://lukatw.medium.com/dc8fdcae1208" target="_blank" rel="noopener">[中] Backend for Front-End (BFF)</a></h3><p>在過去，應用程式相對簡單，瀏覽器向網路應用程式端點發送請求，後者從資料庫中擷取資料並回傳響應。然而，隨著移動客戶端與其他應用程式整合，這種簡單性被打破。本文介紹了一種處理這種複雜性的解決方案。</p><p>傳統方法中，應用程式返回所有資料，然後由各個客戶端過濾不需要的部分。然而，移動客戶端的頻寬有限，且不是所有手機都支援高速網路。因此，這種過度提取的方法不可行。</p><p>面對這個問題，提出了面向前端的後端（BFF）的解決方案。BFF 將每個微服務中的邏輯移至一個專用的部署端點。這個端點負責從所需的微服務中擷取資料，過濾相關部分，將它們聚合並以符合特定客戶端需求的格式回傳。</p><p>BFF 的概念是由負責前端的團隊開發和管理，這樣可以在提高開發速度的同時，提供與微服務相同的彈性。BFF 可以被視為獨立部署單元或 API 網關的一部分，取決於組織的需求。</p><p>在性能方面，與巨石應用程式相比，使用 BFF 會增加額外的請求時間，但這些請求可以並行處理，因此對使用者體驗的影響相對較小。</p><p>然而，每個組織都有不同的需求和情況，實施 BFF 之前應該仔細考慮系統架構、團隊組織和性能目標。</p><h3 id="中-資料工程師看台灣職場觀察與回顧：Data-Engineering-是個有挑戰＆變化的領域"><a href="#中-資料工程師看台灣職場觀察與回顧：Data-Engineering-是個有挑戰＆變化的領域" class="headerlink" title="[中] 資料工程師看台灣職場觀察與回顧：Data Engineering 是個有挑戰＆變化的領域"></a><a href="https://www.technice.com.tw/experience/5349/" target="_blank" rel="noopener">[中] 資料工程師看台灣職場觀察與回顧：Data Engineering 是個有挑戰＆變化的領域</a></h3><p>這篇文章是一位台灣資料工程師經歷的精彩冒險！作者畢業於國立大學資工系，對人工智慧充滿興趣。儘管在畢業專題時自學了類神經網路，卻被評為效果平平。然而，一年後回到現實世界，作者驚訝地發現最新潮的 Deep Learning 原來就是類神經網路的延伸應用！這讓他對資料和機器學習領域充滿了熱情。</p><p>大學時期，作者曾在朋友的幫助下接案開發網站，但工作一年後，他感到了一絲索然無味。於是，他開始追逐自己對資料和機器學習領域的熱愛，經過一段時間的自學後，他慶幸地得到了布丁大大的賞識，並成功轉職為一名資料工程師！從此展開了他精彩刺激的職業生涯。</p><p>資料工程師這個新興領域的範圍非常廣泛，從基礎服務到資料處理應用，甚至連分析和視覺化也可能涉及其中。每家公司對於資料工程師的需求都各不相同，有些想要一個能點石成金的魔法石，有些需要一個能治百病的仙丹，還有些只是需要一個能大肆宣傳的廣告看板。</p><p>相較於後端工程師，資料工程師更像是一位水管工，主要負責串接和維護資料管線。然而，資料工程師的工作並不像後端工程師那樣龐大，而是由許多小元件組成一個完整的架構。不同的資料類型和後續應用對整體架構都有很大的影響，因此沒有一個簡單的最佳實踐方法。不過，近年來各大雲服務提供商提供了越來越完整的相關服務，為起步選擇提供了不錯的選項。</p><p>作者提到，成為一名優秀的資料工程師需要不斷學習和探索，保持對新技術的敏感度。除了技術上的挑戰外，溝通和合作也是非常重要的，因為資料工程師往往需要與不同團隊合作，並將資料轉化為有價值的洞察。</p><p>這位資料工程師的職業生涯展示了一個從追求熱愛到實現夢想的故事，並且強調了資料工程師的重要性和多樣性。無論是對資料和機器學習充滿興趣，還是尋求一個充滿挑戰和成就感的職業，資料工程師都是一個令人嚮往的選擇！</p><h3 id="中-把-RabbitMQ-換成-PostgreSQL-的那篇文章"><a href="#中-把-RabbitMQ-換成-PostgreSQL-的那篇文章" class="headerlink" title="[中] 把 RabbitMQ 換成 PostgreSQL 的那篇文章"></a><a href="https://blog.gslin.org/archives/2023/04/12/11138/%E6%8A%8A-rabbitmq-%E6%8F%9B%E6%88%90-postgresql-%E7%9A%84%E9%82%A3%E7%AF%87%E6%96%87%E7%AB%A0/" target="_blank" rel="noopener">[中] 把 RabbitMQ 換成 PostgreSQL 的那篇文章</a></h3><p>這篇摘要的文章是從 Hacker News 引用的，原文標題為「SQL Maxis: Why We Ditched RabbitMQ and Replaced It with a Postgres Queue」，作者在文章中討論了將 RabbitMQ 替換為 PostgreSQL 的原因和結果。</p><p>文章中指出了一些值得吐槽的點，並且這些點在 Hacker News 上也被提到。其中有人指出他們遇到了一個錯誤（或特性），但沒有解決該錯誤，而是選擇直接改寫程式碼，將其改為使用 PostgreSQL 解決，這種做法很奇怪。另一個吐槽的點是關於量的部分，如果處理的量不大，降低技術堆疊使用 PostgreSQL 可能是一個不錯的決定。然而，有人質疑為什麼一開始要使用 RabbitMQ。同一個討論串中也有人提到處理的量實在太小，甚至開玩笑地說可以使用 Jenkins 來處理。</p><p>此外，一位名叫 Simon Willison 的人提到了 RabbitMQ 到目前為止仍然不支援 ACID 等級的工作排程，特別是耐久性的部分。他認為使用 PostgreSQL 作為佇列的好處是可以利用事務，只有在相關資料已經完全寫入資料庫且不可能發生佇列記錄未寫入的情況下才將工作放入佇列。同時他還推薦使用資料庫中的交易性「暫存」佇列，然後由另一個獨立的過程將其寫入實際佇列。</p><p>總結來說，原文中的公司在遇到 RabbitMQ 消費者程式庫和設定的問題時，決定換成 PostgreSQL，而不是解決問題。這引起了一些討論，並且有人對這種做法表示懷疑。同時，原文還提到了使用 PostgreSQL 作為佇列後端的優勢，特別是能夠利用事務來確保資料的完整性。然而，人們也提出了一些關於處理量和選擇技術堆疊的問題。</p><p>Writer:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@AndyChen</a> - 嗨嗨我是Andy，用嘴巴工作的工程師😂，喜歡學習不同領域的內容，專長為網頁開發，歡迎大家跟我聊技術～</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 175 期 - 當我 walking on the street，看到 Medium 被人帶走</title>
      <link href="/2023/05/31/175-when-i-walking-on-the-streat/"/>
      <url>/2023/05/31/175-when-i-walking-on-the-streat/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Replacing-Medium-with-Hexo"><a href="#Replacing-Medium-with-Hexo" class="headerlink" title="Replacing Medium with Hexo"></a><a href="https://medium.com/starbugs/replacing-medium-with-hexo-ea5406a06fe" target="_blank" rel="noopener">Replacing Medium with Hexo</a></h3><p>本文介紹了一個幾乎沒有額外負擔的取代 Medium 的完整解決方案。作者過去一年半的時間每週發佈一篇文章，旨在獲得更多持續的曝光並吸引軟體工程師進行討論。然而，作者發現文章曝光的演算法需要大幅修改，儘管追隨者數超過 1,000，但實際閱讀數非常有限。因此，作者決定建立自己的 blog，並提出了對 blog 的幾項要求。</p><p>作者最終選擇使用 Hexo 和 Github Pages 來構建自己的網站。Hexo 具有內建功能，生成的靜態網站可以直接作為 Github Pages 呈現，無需額外操作。通過整合 Github Action，寫完 Markdown 文件後，只需將其推送到 Github，就可以自動發佈，這與在 Medium 上發佈文章的過程幾乎相同。為了實現對圖表和 Mermaid 的支援，作者選擇了 NexT 主題。此外，作者還使用 VS Code 和 Paste Image 插件實現了剪貼板上傳圖片的功能。</p><p>整篇文章介紹了 Hexo、Hexo Action 和 NexT 主題的基本用法，並提供了在 Github Pages 上快速生成 blog 的 SOP。作者還解釋了如何在 Hexo 中處理圖片並使用剪貼板上傳圖片。通過結合這些組件，作者能夠以比在 Medium 上更高效的方式撰寫文章，並消除了複製貼上 Mermaid 和表格的困擾。</p><p>總之，通過結合 Hexo、Github Action、Github Pages 和 NexT 等工具，作者能夠以更有效的方式撰寫文章，並解決了在 Medium 上的一些限制。作者計劃根據收集的追蹤數據逐步調整發佈頻率和內容。這是作者作為一名數據架構師對 Medium 和自己擁有的 blog 的實驗。</p><h2 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h2><h3 id="Load-Balancing-Introduction"><a href="#Load-Balancing-Introduction" class="headerlink" title="Load Balancing - Introduction"></a><a href="https://samwho.dev/load-balancing/" target="_blank" rel="noopener">Load Balancing - Introduction</a></h3><p>（由 <a href="https://kashiwachen.substack.com/" target="_blank" rel="noopener">Kashiwa</a> 推薦）這篇文章言簡意賅地介紹了負載均衡於網頁請求和返回之間的關係，並且分析了負載均衡所想要解決的問題：dropped request 和 latency。而且文章還有很多圖片跟動畫幫助你理解，如果想了解 Load Balancing 更多的話很推薦這篇文章</p><h3 id="PostgreSQL-技術筆記-跟疾管署沒有關係的-CDC"><a href="#PostgreSQL-技術筆記-跟疾管署沒有關係的-CDC" class="headerlink" title="PostgreSQL 技術筆記: 跟疾管署沒有關係的 CDC"></a><a href="https://medium.com/dcardlab/218e27eb363d" target="_blank" rel="noopener">PostgreSQL 技術筆記: 跟疾管署沒有關係的 CDC</a></h3><p>本文介紹了 Dcard 中使用 PostgreSQL CDC（Change Data Capture）的運作原理。Dcard 的系統架構中，許多服務元件使用 PostgreSQL 進行資料儲存。為了避免直接使用生產資料庫對效能和安全性造成影響，Dcard 採用了 Microservices 架構，將不同服務獨立部署在各自的 PostgreSQL 資料庫中。</p><p>為了方便管理和查詢，Dcard 的開發團隊開發了一個 OfflineDB Proxy 服務，通過該服務可以使用特定的 on-demand 服務來存取和管理 PostgreSQL 複本資料庫。在此基礎上，開發了 PostgreSQL CDC 技術，使複本資料庫能夠提供近乎即時的資料。通過 CDC 服務，許多其他服務元件可以通過數據流的方式獲取資料庫的異動資料，從而保證了服務間的流程設計的完整性，提供更可靠和穩定的 Dcard 服務。</p><p>文章介紹了各個模組間的設計概念，包括 OfflineDB Proxy、Snapshot Rotate Job、Postgres Protocol Handle 和 Resource Controller 等。此外，還介紹了使用 PostgreSQL Replication 機制來獲取異動資料，以及使用 Apache Pulsar 作為儲存 Change Data 的消息隊列服務。文章還提到了 pg2pulsar 和 pulsar2pg 兩個程序，用於處理 Change Data 的儲存和同步。最後，介紹了 CDC Stream Gateway，通過這個服務可以簡化應用程式與消息隊列之間的處理，提供給各種不同的流式應用程式使用。</p><p>整個系統的架構和流程如圖所示，包括 OfflineDB Proxy、CDC、和 Stream Gateway。通過這些模塊的搭建和運作，可以實現 Dcard 的即時性和異動資料的同步更新，並提供給各種不同的應用程式使用。</p><p>文章最後提到，目前 Dcard 已經在數十個 CDC Stream 應用中使用了這些技術，並且不斷進行優化和探索。同時，Dcard 還在計劃和開發其他類型資料庫的 CDC 服務，如 MongoDB 等。</p><h3 id="課程筆記-即使通訊與傳輸（realtime、streaming、websocket）"><a href="#課程筆記-即使通訊與傳輸（realtime、streaming、websocket）" class="headerlink" title="課程筆記 - 即使通訊與傳輸（realtime、streaming、websocket）"></a><a href="https://pjchender.dev/webdev/course-fem-realtime/" target="_blank" rel="noopener">課程筆記 - 即使通訊與傳輸（realtime、streaming、websocket）</a></h3><p>本篇摘要整理自 Frontend Masters 的 “Complete Intro to Real-Time” 課程。</p><p>簡介了以下主題：Long Polling（輪詢）、使用 setTimeout、requestAnimationFrame、Backoff and Retry（放棄或重試）、HTTP/2 Push、WebSocket、以及 Socket.IO。</p><p>在 Long Polling（輪詢）中，透過 AJAX 方式持續向服務器發送請求。使用 setTimeout 而非 setInterval 來進行輪詢，避免在 API 回應慢時打多次 API 請求。另外，也介紹了 requestAnimationFrame 來替代 setTimeout，以達到更好的性能和節能效果。</p><p>在 Backoff and Retry（放棄或重試）中，介紹了當 API 請求失敗時的處理機制，建議使用 backoff and retry 的方式，即在每次失敗後延遲一段時間再重試，並逐漸增加延遲時間。</p><p>在 HTTP/2 Push 中，說明了建立 WebSocket 連線的過程，包括使用 self-signed 的憑證、回傳特定的 headers 等。並介紹了如何在後端和前端進行相應的程式碼實現，以及如何處理資料的傳遞。</p><p>在自己實作 WebSocket 部分，提到了使用 WebSocket 和 HTTP 之間的協定升級過程，以及如何在後端和前端進行程式碼的實現。還提到了 WebSocket 中資料交換的格式和解析方法。</p><p>最後，介紹了使用 Socket.IO 來進行即時通訊的方式，並且提到了 Socket.IO 相對於 WebSocket 和 ws 套件的優勢，包括自動重新連線、兼容性等。</p><p>以上是本篇摘要。詳細內容可參考相應的課程和資料來源。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Step-up-Your-Go-App-Testing-Game-With-the-Testify-Framework"><a href="#Step-up-Your-Go-App-Testing-Game-With-the-Testify-Framework" class="headerlink" title="Step up Your Go App Testing Game With the Testify Framework"></a><a href="https://semaphoreci.com/blog/testify-go" target="_blank" rel="noopener">Step up Your Go App Testing Game With the Testify Framework</a></h3><p>如果你才剛開始在學 Go，那你絕對不能不知道 Testify 這個好用的 testing library，他幫你簡化了很多常用的操作譬如說 <code>assert.Equal</code> 跟 <code>assert.noError</code> 等等，讓你可以更快寫出正確的測試。除此之外，他也讓你可以輕鬆的造出一個 mock object，所以別猶豫，趕快讓 Testify 成為你的好幫手，讓你的測試寫起來更漂亮！</p><h3 id="Go-當中的-sync-pattern"><a href="#Go-當中的-sync-pattern" class="headerlink" title="Go 當中的 sync pattern"></a><a href="https://code-pilot.me/synchronization-patterns-in-go" target="_blank" rel="noopener">Go 當中的 sync pattern</a></h3><p>這篇文章比較進階一點，文中從 Mutex、Semaphore 講到 Channel，帶你看看這些不同的 sync pattern 各自有什麼優缺點。看完這篇文章之後，你就會知道在 Go 裡面要怎麼解決各種 multi thread 的問題！</p><h3 id="SwissMap-A-smaller-faster-Golang-Hash-Table"><a href="#SwissMap-A-smaller-faster-Golang-Hash-Table" class="headerlink" title="SwissMap: A smaller, faster Golang Hash Table"></a><a href="https://www.dolthub.com/blog/2023-03-28-swiss-map/" target="_blank" rel="noopener">SwissMap: A smaller, faster Golang Hash Table</a></h3><p>SwissMap 聽起來像某一款高級巧克力的名字，但實際上，他是一個 Go 的 Hash Table package。他號稱比 Go 內建的 map 更快、記憶體的使用量也更少，是 Dolt 為了解決自身的問題而設計出來的。這篇文章講解了他們是怎麼設計跟實作 SwissMap，而且也提供了 Benchmark 給你參考，證明他們設計的這個 Hash Table 真的很不錯。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="4-Tools-that-Make-it-Easy-to-manage-your-Kubernetes-Cluster"><a href="#4-Tools-that-Make-it-Easy-to-manage-your-Kubernetes-Cluster" class="headerlink" title="4 Tools that Make it Easy to manage your Kubernetes Cluster"></a><a href="https://medium.com/@onai.rotich/4-tools-that-make-it-easy-to-manage-your-kubernetes-cluster-be252847cd85" target="_blank" rel="noopener">4 Tools that Make it Easy to manage your Kubernetes Cluster</a></h3><p>作者介紹了四個 Kubernetes 工具，K8sgpt、K9s、Lens 和 Rancher。其中最吸引的莫過於 K8sgpt，他會掃描整個 Kubrenetes 叢集後給予人性化的 troubleshooting 解答，也可以讓非維運人員看懂哪裡出問題。</p><!-- summary --><h3 id="Recover-your-Amazon-EC2-instance-when-SSH-key-pair-is-lost"><a href="#Recover-your-Amazon-EC2-instance-when-SSH-key-pair-is-lost" class="headerlink" title="Recover your Amazon EC2 instance when SSH key pair is lost"></a><a href="https://awstip.com/recover-your-amazon-ec2-instance-when-ssh-key-pair-is-lost-fd0626d02c19" target="_blank" rel="noopener">Recover your Amazon EC2 instance when SSH key pair is lost</a></h3><p>新手剛開始使用 AWS 有很高機率遺失 ssh key，這篇文章一步一步帶著讀者怎麼挽救，原理就是把原本機器上的硬碟掛載到另外一台機器上（中間有許多小障礙文章都有解法），之後把新的 .ssh/authorized_keys 複製到硬碟上，再把硬碟掛載回舊的機器即可用新的 ssh key 連線到舊機器了。</p><h3 id="How-to-Learn-Linux-Shell-Scripting-for-DevOps"><a href="#How-to-Learn-Linux-Shell-Scripting-for-DevOps" class="headerlink" title="How to Learn Linux Shell Scripting for DevOps?"></a><a href="https://devopscube.com/linux-shell-scripting-for-devops/" target="_blank" rel="noopener">How to Learn Linux Shell Scripting for DevOps?</a></h3><p>Linux shell script 是到哪裡都很萬用的工具，作者彙整了有關 shell script 學習資源、現實場景的範例、可能需要 shell script 的場景或面試時可能會遇到的問題。</p><p>Writer:</p><ul><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 174 期 - 不如我們也來辦抽獎，只要分享並留言 Tag 好友就抽 Bug 嘛</title>
      <link href="/2023/05/16/174-share-the-post-for-a-chance-to-draw/"/>
      <url>/2023/05/16/174-share-the-post-for-a-chance-to-draw/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從-Linux-Kernel-觀察現代處理器特性-—-分支篇"><a href="#從-Linux-Kernel-觀察現代處理器特性-—-分支篇" class="headerlink" title="從 Linux Kernel 觀察現代處理器特性 — 分支篇"></a><a href="https://medium.com/starbugs/%E5%BE%9E-linux-kernel-%E8%A7%80%E5%AF%9F%E7%8F%BE%E4%BB%A3%E8%99%95%E7%90%86%E5%99%A8%E7%89%B9%E6%80%A7-%E5%88%86%E6%94%AF%E7%AF%87-7f30f75446bc" target="_blank" rel="noopener">從 Linux Kernel 觀察現代處理器特性 — 分支篇</a></h3><p>如果你對於 Linux Kernel 的最佳化有興趣，那麼一定要看看 Ian 寫的這篇文章。</p><p>Ian 透過研究 likely 與 unlikely 這兩個 C/C++ macro，解釋了如何利用這兩個標記去影響 compiler 的編譯結果，進而讓程式跑起來更快。但在這篇文章中也提到，現代處理器幾乎都帶有分支預測的功能，因此 likely 與 unlikely 對於現代處理器的效能上幾乎沒有幫助。雖然如此，如果你想知道 Linux Kernel 是怎麼把 CPU 的效能壓榨到極致，那這篇文章還是非常值得看！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="CSS-Blend-Modes"><a href="#CSS-Blend-Modes" class="headerlink" title="CSS Blend Modes"></a><a href="https://garden.bradwoods.io/notes/css/blend-modes" target="_blank" rel="noopener">CSS Blend Modes</a></h3><p>CSS 的應用一直是開發 Web 時很迷人的部分，在寫 CSS 的時候都會有種自己是藝術家而不是工程是的錯覺。這篇文章介紹了 CSS 中的 <code>background-blend-mode</code> 和 <code>mix-blend-mode</code> 語法，他們能夠讓你去混合兩個元素重疊的像素，讓原圖擁有新的效果，有點像 <code>filter</code> 但效果又更強了！</p><!-- summary --><h3 id="Naming-Every-Developer’s-Nightmare"><a href="#Naming-Every-Developer’s-Nightmare" class="headerlink" title="Naming: Every Developer’s Nightmare"></a><a href="https://dev.to/samuel-braun/naming-every-developers-nightmare-3ge8" target="_blank" rel="noopener">Naming: Every Developer’s Nightmare</a></h3><p>這篇文章主要在討論命名的重要性，也有提供一個他在工作上遇到的例子，以及如何去改善。其中作者也有提供他自己整理的命名規則給大家參考，只要有個模式去思考命名，就不會每次要命名的時候都要苦惱很久。</p><h3 id="The-Most-Common-Mistakes-When-Using-React"><a href="#The-Most-Common-Mistakes-When-Using-React" class="headerlink" title="The Most Common Mistakes When Using React"></a><a href="https://claritydev.net/blog/the-most-common-mistakes-when-using-react" target="_blank" rel="noopener">The Most Common Mistakes When Using React</a></h3><p>文章中介紹幾個剛在學習 React 的時候常會碰到的一些誤區，如果不小心踩到的話還可能會影導致 bug 或是網頁直接 crash，如果你曾經踩過幾個 React 的雷，不如看一下文章中還有沒有自己可能漏掉的部分。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="The-Go-1-19-Atomic-Wrappers-and-why-to-use-them"><a href="#The-Go-1-19-Atomic-Wrappers-and-why-to-use-them" class="headerlink" title="The Go 1.19 Atomic Wrappers and why to use them"></a><a href="https://medium.com/@deckarep/the-go-1-19-atomic-wrappers-and-why-to-use-them-ae14c1177ad8" target="_blank" rel="noopener">The Go 1.19 Atomic Wrappers and why to use them</a></h3><p>自從 Go 1.19 開始，就有像是 <code>atomic.Int64</code> 這樣的型別，可以防止有人對變數做不是 atomic 的操作。譬如程式碼中有一個 <code>var counter atomic.Int64</code>，但你的同事忘記這個 <code>counter</code> 會被多個 goroutine 共用，所以他寫了 <code>counter++</code>，這時候 Go compiler 就會噴錯告訴你不可以這樣用，要乖乖寫 <code>counter.Add(1)</code> 才可以避免 data race，真的是很不錯的新功能～</p><h3 id="6-Tips-on-High-Performance-Go-—-Advanced-Go-Topics"><a href="#6-Tips-on-High-Performance-Go-—-Advanced-Go-Topics" class="headerlink" title="6 Tips on High Performance Go — Advanced Go Topics"></a><a href="https://link.medium.com/H1s1blbsJzb" target="_blank" rel="noopener">6 Tips on High Performance Go — Advanced Go Topics</a></h3><p>想要寫出更高效能的 Go 程式碼嗎？這篇文章講了幾個技巧跟工具，譬如說內建的 profiling tool 跟 benchmark，幫助你找出 Go 程式中潛在的效能問題。如果想讓你的 Go 功力更上一層樓，那可以看看這篇文章。</p><h3 id="Go-Generic-Repo"><a href="#Go-Generic-Repo" class="headerlink" title="Go Generic Repo"></a><a href="https://link.medium.com/RNYVq0x56yb" target="_blank" rel="noopener">Go Generic Repo</a></h3><p>Go 從 1.18 開始支援泛型，但在實務上還是不常看到泛型的運用。而這篇文章給了一個很不錯的例子，用非常少的程式碼寫出一個通用的 Repository 跟 Model，不只寫起來漂亮，而且也非常好維護呢～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="4-Core-Principles-of-GitOps"><a href="#4-Core-Principles-of-GitOps" class="headerlink" title="4 Core Principles of GitOps"></a><a href="https://thenewstack.io/4-core-principles-of-gitops/" target="_blank" rel="noopener">4 Core Principles of GitOps</a></h3><p>OpenGitOps 社群表示 GitOps 的四個核心原則：</p><!-- summary --><ol><li>GitOps 是宣告式的</li><li>GitOps 是有版本控管且不可變動的。期望的狀態是要能夠歷史追蹤的</li><li>GitOps 的服務能夠自動拉式部署的（GitOps 很多都是 pull-based 的方式部署）。例如使用 Flux 持續且漸進部署解決方案，而且兼具資安、迅速和可靠</li><li>GitOps 的服務能夠持續性的和解（Reconciled）。能夠持續觀察系統狀態並且達到期望狀態，目前社群還在定義中，因為跟拉式部署的想法接近</li></ol><h3 id="Kubernetes-Community-A-Guide-to-Open-Source-Localization"><a href="#Kubernetes-Community-A-Guide-to-Open-Source-Localization" class="headerlink" title="Kubernetes Community: A Guide to Open Source Localization"></a><a href="https://thenewstack.io/kubernetes-community-a-guide-to-open-source-localization/" target="_blank" rel="noopener">Kubernetes Community: A Guide to Open Source Localization</a></h3><p>軟體技術的確還是以英文為大宗，在推廣的過程中語言仍是個隔閡，除了打破語言的限制，在地化也十分重要，而 Kubernetes 在地化就給大家很好的例子學習。</p><h3 id="Introducing-“Implement-DNS-in-a-Weekend”"><a href="#Introducing-“Implement-DNS-in-a-Weekend”" class="headerlink" title="Introducing “Implement DNS in a Weekend”"></a><a href="https://jvns.ca/blog/2023/05/12/introducing-implement-dns-in-a-weekend/" target="_blank" rel="noopener">Introducing “Implement DNS in a Weekend”</a></h3><p>作者用 Python 實作了 DNS 域名解析的小工具，從中複習 DNS 本身是怎麼運作的，而為了練習，只有用到標準的函式庫。作者也有開放大家下載程式碼，大約 200 多行。</p><p>Writer:</p><ul><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">Ian Chen</a> - I’m a Graduate Student, Software Engineer, Technical post writer, and Open-Source contributor.</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 173 期 - 勞動節放假，程式碼當然也要一起休息</title>
      <link href="/2023/05/02/173-labor-day/"/>
      <url>/2023/05/02/173-labor-day/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="找回那些被-Docker-吃掉的磁碟空間"><a href="#找回那些被-Docker-吃掉的磁碟空間" class="headerlink" title="找回那些被 Docker 吃掉的磁碟空間"></a><a href="https://medium.com/starbugs/%E6%89%BE%E5%9B%9E%E9%82%A3%E4%BA%9B%E8%A2%AB-docker-%E5%90%83%E6%8E%89%E7%9A%84%E7%A3%81%E7%A2%9F%E7%A9%BA%E9%96%93-6912cdb24dc0" target="_blank" rel="noopener">找回那些被 Docker 吃掉的磁碟空間</a></h3><p>都 2023 年了，身為工程師，應該不可能還沒用過 Docker 吧！Docker 用久了，有時候會遇到硬碟空間不足的問題，但是直接用 docker image prune 來清空間又很容易錯殺無辜。所以 Ian 這篇文章提出了一些非常具體的作法，讓你在不刪除所有 unused image 的情況下有效地釋放空間。如果你也是 Docker 的使用者，千萬不要錯過這篇文章！</p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><h3 id="軟體考古系列：JSON-的故事"><a href="#軟體考古系列：JSON-的故事" class="headerlink" title="軟體考古系列：JSON 的故事"></a><a href="https://www.ptt.cc/bbs/Soft_Job/M.1681181114.A.E85.html" target="_blank" rel="noopener">軟體考古系列：JSON 的故事</a></h3><p>前陣子在 PTT Soft_Job 版上看到一個軟體考古系列覺得很有趣，這篇是在講說 JSON 這個世界通用的資料格式究竟是怎麼出現的，而且文中也有講到 JavaScript 跟 Java 到底是什麼關係。雖然沒有什麼技術含量，但偶爾看一些軟體業的江湖軼事還滿好玩的XD。</p><h3 id="6-Advanced-TypeScript-tricks-for-Clean-Code"><a href="#6-Advanced-TypeScript-tricks-for-Clean-Code" class="headerlink" title="6 Advanced TypeScript tricks for Clean Code"></a><a href="https://link.medium.com/WAobjk8nazb" target="_blank" rel="noopener">6 Advanced TypeScript tricks for Clean Code</a></h3><p>TypeScript 在前後端領域的生態已經非常成熟，現在甚至很少聽到有公司是直接寫 JavaScript 的了。而身為 TS 的開法者，如果你想要讓自己對於 TypeScript 的掌握度更高、寫出更好維護的程式碼，那這篇文章講解了 TS 裡面比較進階的幾個小技巧。保證可以讓你寫出來的程式碼更漂亮！</p><h3 id="Handling-errors-like-a-pro-in-TypeScript"><a href="#Handling-errors-like-a-pro-in-TypeScript" class="headerlink" title="Handling errors like a pro in TypeScript"></a><a href="https://engineering.udacity.com/handling-errors-like-a-pro-in-typescript-d7a314ad4991" target="_blank" rel="noopener">Handling errors like a pro in TypeScript</a></h3><p>要把錯誤處理做得漂亮一直以來都不是容易的事，這篇文章的作者以他多年的經驗，提出了一套設計模式來幫助你把 TypeScript 中的錯誤處理寫得更漂亮，雖然不一定適合每個人的</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="No-one-should-ever-write-a-single-line-of-Terraform-code"><a href="#No-one-should-ever-write-a-single-line-of-Terraform-code" class="headerlink" title="No one should ever write a single line of Terraform code"></a><a href="https://medium.com/@mike_tyson_cloud/no-one-should-ever-write-a-single-line-of-terrafom-code-5488d95211a8" target="_blank" rel="noopener">No one should ever write a single line of Terraform code</a></h3><p>標題下「不應該有人撰寫任何一行 Terraform 程式碼」真是直擊我心，作者介紹 Terraform Cloud 的限制，並介紹用圖像表示 infra 的 <a href="https://www.brainboard.co/" target="_blank" rel="noopener">Brainboard</a>，可以讓非專攻 infra 的人可以一目了然整個架構，降低溝通的高牆。</p><h3 id="KubeCon-Panel-How-Platform-Engineering-Benefits-Developers"><a href="#KubeCon-Panel-How-Platform-Engineering-Benefits-Developers" class="headerlink" title="KubeCon Panel: How Platform Engineering Benefits Developers"></a><a href="https://thenewstack.io/kubecon-panel-how-platform-engineering-benefits-developers/" target="_blank" rel="noopener">KubeCon Panel: How Platform Engineering Benefits Developers</a></h3><p>在歐洲舉辦的 KubeCon + CloudNativeCon 其中議程探討 platform engineering（平台工程）如何幫助開發人員，大方向依舊是替企業創造價值，讓開發人員隨心所欲，但是一切都符合 security、企業合規和公司文化等等的要求，甚至 GiaLab 自己用的 platform 就是產品本身，以身作則。最近 platform engineering 在這三年崛起，是時候擁抱這股趨勢。</p><h3 id="Cloud-native-projects-usage-stats-in-2022-based-on-CNCF-Survey-data"><a href="#Cloud-native-projects-usage-stats-in-2022-based-on-CNCF-Survey-data" class="headerlink" title="Cloud-native projects usage stats in 2022 based on CNCF Survey data"></a><a href="https://blog.palark.com/cncf-cloud-native-projects-usage-stats-2022/" target="_blank" rel="noopener">Cloud-native projects usage stats in 2022 based on CNCF Survey data</a></h3><p>CNCF 基金會調查市場 Cloud Native 專案使用狀況，執得一提的是 CloudEvents 從 6.8% 升到 21.8% 的 production 環境使用率，這次的成長或許會影響台灣對工具的選擇。而不用說 Kubernetes, Helm 和 Prometheus 使用率還是非常的高，而 security 相關的專案使用率都偏低，也看得出大家對 security 的優先順序是偏低的。</p><p>Writer:</p><ul><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">Ian Chen</a> - I’m a Graduate Student, Software Engineer, Technical post writer, and Open-Source contributor.</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 172 期 - 發動我風光的引擎</title>
      <link href="/2023/04/18/172-engine/"/>
      <url>/2023/04/18/172-engine/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Payment-System-實戰系列（二）：盤點各大支付系統（Stripe-Apple-IAP-Google-IAB）"><a href="#Payment-System-實戰系列（二）：盤點各大支付系統（Stripe-Apple-IAP-Google-IAB）" class="headerlink" title="Payment System 實戰系列（二）：盤點各大支付系統（Stripe / Apple IAP / Google IAB）"></a><a href="https://medium.com/starbugs/f2f5da5569b0" target="_blank" rel="noopener">Payment System 實戰系列（二）：盤點各大支付系統（Stripe / Apple IAP / Google IAB）</a></h3><p>本文介紹了三個主要的支付系統：Stripe、Apple IAP、Google IAB。在選擇支付系統時，需要注意哪些必要元素，例如可測試的環境、良好的後台以及良好的文件。</p><p>對於 Stripe 而言，它提供了獨立且完整的測試環境，後台 Dashboard 也相當完整，因此非常方便使用。Apple IAP 的優點是與 iOS APP 操作上無縫，使用者體驗較好，但文件散落各處，後台 Dashboard 也較不佳。Google IAB 在 Android APP 操作上無縫，使用者體驗較好，但是測試環境不健全，後台 Dashboard 也較不好用。</p><p>最後，作者提醒大家，如果要上架 APP 到 App Store，而 APP 又有應用程式內付費，一定要接 Apple IAP，否則不會通過審核。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="英-JavaScript-等於等於踩地雷遊戲"><a href="#英-JavaScript-等於等於踩地雷遊戲" class="headerlink" title="[英]JavaScript 等於等於踩地雷遊戲"></a><a href="https://eqeq.js.org/" target="_blank" rel="noopener">[英]JavaScript 等於等於踩地雷遊戲</a></h3><p>在提醒了 JavaScript 的 == 的恐懼之後，踩地雷遊戲將感覺像在公園散步一樣輕鬆。如果您需要深入瞭解，ECMAScript 規範的 7.2.14 節將對您有所幫助，否則呢？除非您有充分的理由，否則請使用三個等號（===）。</p><h3 id="英-2023-Web-Framework-Performance-Report-Astro"><a href="#英-2023-Web-Framework-Performance-Report-Astro" class="headerlink" title="[英] 2023 Web Framework Performance Report | Astro"></a><a href="https://astro.build/blog/2023-web-framework-performance-report/" target="_blank" rel="noopener">[英] 2023 Web Framework Performance Report | Astro</a></h3><p>此報告的目的是通過現實世界的數據來更好地了解框架選擇、性能和實際用戶體驗在 Web 上的關係。我們將嘗試回答一些關鍵問題：</p><ul><li>現代 Web 框架在現實使用和性能方面的比較如何？</li><li>框架選擇是否會影響網站的核心 Web 視覺效果？</li><li>框架選擇與 JavaScript 載荷大小有多大關聯，以及其影響如何？</li></ul><p>為此，我們查看了三個不同的公開可用數據集：</p><ul><li><a href="https://developer.chrome.com/docs/crux/" target="_blank" rel="noopener">Chrome 用戶體驗報告（CrUX）</a> 提供了有關實際 Chrome 用戶在 Web 上體驗熱門目的地的用戶體驗指標。</li><li><a href="https://httparchive.org/" target="_blank" rel="noopener">HTTP 存檔</a> 通過定期收集 Lighthouse 性能數據來跟踪和報告超過 1500 萬個網站的性能。</li><li><a href="https://discuss.httparchive.org/t/new-dashboard-the-core-web-vitals-technology-report/2178" target="_blank" rel="noopener">核心 Web 視覺效果技術報告</a> 收集了前兩個數據集中的有用見解。</li></ul><h3 id="英-A-Business-Case-for-SvelteKit"><a href="#英-A-Business-Case-for-SvelteKit" class="headerlink" title="[英]A Business Case for SvelteKit"></a><a href="https://elliscs.hashnode.dev/a-business-case-for-sveltekit" target="_blank" rel="noopener">[英]A Business Case for SvelteKit</a></h3><p>這篇文章講述了作者在 XtendOps 工作期間，如何將公司的技術堆棧轉換為 SvelteKit 框架的過程。文章詳細介紹了作者在評估 SvelteKit 可行性時需要解決的問題，並分享了他們如何應對這些問題的解決方案。通過使用 SvelteKit，作者的團隊成功地實現了更好的開發體驗和技術性能，並且對公司的業務產生了實際影響。文章最後還提供了一些有用的建議，以協助其他公司在轉換到 SvelteKit 時取得成功。</p><h2 id="System-Design"><a href="#System-Design" class="headerlink" title="System Design"></a>System Design</h2><h3 id="RESTful-API-How-to-design-paths-and-identify-resources"><a href="#RESTful-API-How-to-design-paths-and-identify-resources" class="headerlink" title="RESTful API: How to design paths and identify resources"></a><a href="https://homuchen.com/posts/restful-api-how-to-design-paths-and-identify-resources/" target="_blank" rel="noopener">RESTful API: How to design paths and identify resources</a></h3><p>設計 RESTful API 應該已經是後端工程師的必備技能了，這篇文章會教你怎麼從「資源」的角度下去進行設計，讓 Client 在使用時更加方便、符合直覺。</p><h3 id="Instagram-System-Design"><a href="#Instagram-System-Design" class="headerlink" title="Instagram System Design"></a><a href="https://link.medium.com/YigXEzFQEyb" target="_blank" rel="noopener">Instagram System Design</a></h3><p>大家應該都用過 Instagram，如果想要自己寫一個 Instagram，那你會怎麼實作呢？這篇文章講了怎麼設計一個類似 Instagram 的 App，另外，文中也有提到怎麼進行容量估算、以及如何做資料庫的設計等等，如果對於大型系統的設計有興趣，那一定要看看這篇文章！</p><h3 id="Blue-Green-Deployment-for-Node-js-Without-Kubernetes"><a href="#Blue-Green-Deployment-for-Node-js-Without-Kubernetes" class="headerlink" title="Blue Green Deployment for Node.js Without Kubernetes"></a><a href="https://semaphoreci.com/blog/blue-green-deployment-nodejs" target="_blank" rel="noopener">Blue Green Deployment for Node.js Without Kubernetes</a></h3><p>如果你對於怎麼用 CI/CD 來做藍綠部署有興趣，那你來對地方了！這篇文章介紹了藍綠部署的基本原理，並且跟你說在沒有 K8s 的情況下，要怎麼自己把藍綠部署的流程串起來，不管是理論還是實務方面都講得非常完整哦～</p><h2 id="AI"><a href="#AI" class="headerlink" title="AI"></a>AI</h2><h3 id="英-Elon-Musk-悄悄啟動新的人工智慧公司-X-AI，挑戰-OpenAI"><a href="#英-Elon-Musk-悄悄啟動新的人工智慧公司-X-AI，挑戰-OpenAI" class="headerlink" title="[英]Elon Musk 悄悄啟動新的人工智慧公司 X.AI，挑戰 OpenAI"></a><a href="https://venturebeat.com/ai/elon-musk-quietly-starts-x-ai-a-new-artificial-intelligence-company-to-challenge-openai/" target="_blank" rel="noopener">[英]Elon Musk 悄悄啟動新的人工智慧公司 X.AI，挑戰 OpenAI</a></h3><p>根據最新報導，特斯拉創始人 Elon Musk 將推出一家名為 X.AI 的新人工智慧（AI）初創公司，直接競爭 OpenAI。據《金融時報》報導，Musk 已經開始組建 AI 研究和工程師團隊，並與 SpaceX 和 Tesla 的幾位投資者談過支持他的新 AI 初創公司的事宜。此外，他還購買了約 1 萬個圖形處理單元（GPU）來為新的 AI 項目提供支持。然而，這一決定引起了 OpenAI 聯合創始人 Sam Altman 的擔憂。此前，Musk 在 OpenAI 的董事會上辭職，並批評該組織追求人工通用智慧（AGI）的做法。這次，Musk 的新冒險是在他表達對人工智慧潛在危險的擔憂和對監管和監督的需要之後而進行的。</p><h3 id="英-為什麼負責任的-AI-導致更準確和有效的-AI-模型？"><a href="#英-為什麼負責任的-AI-導致更準確和有效的-AI-模型？" class="headerlink" title="[英] 為什麼負責任的 AI 導致更準確和有效的 AI 模型？"></a><a href="https://venturebeat.com/ai/algorithms-auditing-algorithms-gpt-4-responsible-ai-beyond-human-scale/" target="_blank" rel="noopener">[英] 為什麼負責任的 AI 導致更準確和有效的 AI 模型？</a></h3><p>負責任的 AI 定義了在設計、開發和部署 AI 模型時確保安全、公平和道德的承諾。通過確保模型按預期運行 - 並且不會產生不良結果 - 負責任的 AI 可以幫助增加信任，保護免受損害，並提高模型表現。</p><p>為了負責，AI 必須是可理解的。這已經不是人類規模的問題了；我們需要算法來幫助我們理解算法。</p><p><a href="https://openai.com/research/gpt-4" target="_blank" rel="noopener">GPT-4</a>，OpenAI 的 <a href="https://venturebeat.com/ai/whats-next-in-large-language-model-llm-research-heres-whats-coming-down-the-ml-pike/" target="_blank" rel="noopener">大型語言模型（LLM）</a> 的最新版本，是基於互聯網的文本和圖像進行訓練的，而我們都知道，互聯網充滿了不精確之處，從小的錯誤說法到完全的杜撰。儘管這些錯誤本身可能很危險，但它們也必然產生不太準確和智能的 AI 模型。負責任的 AI 可以幫助我們解決這些問題，並朝著開發更好的 AI 前進。具體而言，負責任的 AI 可以：</p><ol><li>** 減少偏見 **：負責任的 AI 專注於解決開發過程中可能被建立到 AI 模型中的偏見。通過積極努力在數據收集、訓練和實施過程中消除偏見，AI 系統變得更加準確，為更廣泛的用戶提供更好的結果。</li><li>** 增強普遍性 **：負責任的 AI 鼓勵開發在不同情境和不同人群中表現良好的模型。通過確保 AI 系統在各種情況下進行測試和驗證，可以增強這些模型的普遍性，從而產生更有效和適應性的解決方案。</li><li>** 確保透明度 **：負責任的 AI 強調 AI 系統的透明度的重要性，使用戶和利益相關者更容易理解決策是如何做出的以及 AI 的運作方式。這包括提供算法、數據來源和潛在限制的可理解解釋。通過促進透明度，負責任的 AI 促進了信任和責任，使用戶能夠做出知情決策，促進了對 AI 模型的有效評估和改進。</li></ol><h3 id="英-OpenAI-的首席執行官表示，巨型-AI-模型的時代即將結束；GPU-危機可能是其中一個原因。"><a href="#英-OpenAI-的首席執行官表示，巨型-AI-模型的時代即將結束；GPU-危機可能是其中一個原因。" class="headerlink" title="[英]OpenAI 的首席執行官表示，巨型 AI 模型的時代即將結束；GPU 危機可能是其中一個原因。"></a><a href="https://venturebeat.com/ai/openai-chief-says-age-of-giant-ai-models-is-ending-a-gpu-crisis-could-be-one-reason-why/" target="_blank" rel="noopener">[英]OpenAI 的首席執行官表示，巨型 AI 模型的時代即將結束；GPU 危機可能是其中一個原因。</a></h3><p>OpenAI CEO Sam Altman 認為，人工智能模型不斷變大的時代即將結束。Skyworth AI 應用研發技術中心副總經理陳瑩認為，在大數據時代，人工智能的「三高」問題——高成本、高門檻和高風險——是制約人工智能發展的主要阻礙。成本問題是人工智能發展的瓶頸之一。如今，隨著大數據的快速增長，人工智能的計算需求越來越高，計算成本也不斷增加。目前，以 Nvidia 為代表的 GPU 廠商正在推出一系列面向人工智能的 GPU。這些 GPU 的價格高昂，單價甚至可以達到 3 萬美元以上。此外，GPU 的使用壽命也較短，需要不斷更新。</p><p>Writer:</p><ul><li><a href="https://medium.com/@louisby0123" target="_blank" rel="noopener">@louisby0123</a> - Googler. UC Berkeley EECS Master Student. System Architect &amp; Backend Engineer. President of 7th Mei-chu Hackathon, founder of Hackathon Taiwan Junior.</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 171 期 - 好想回到上禮拜五晚上</title>
      <link href="/2023/04/04/171-want-to-back-to-the-last-friday-night/"/>
      <url>/2023/04/04/171-want-to-back-to-the-last-friday-night/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Payment-System-實戰系列（一）：工程師要先和老闆對話＆破除迷失"><a href="#Payment-System-實戰系列（一）：工程師要先和老闆對話＆破除迷失" class="headerlink" title="Payment System 實戰系列（一）：工程師要先和老闆對話＆破除迷失"></a><a href="https://medium.com/starbugs/payment-system-%E5%AF%A6%E6%88%B0%E7%B3%BB%E5%88%97-%E4%B8%80-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E8%A6%81%E5%85%88%E5%92%8C%E8%80%81%E9%97%86%E5%B0%8D%E8%A9%B1-%E7%A0%B4%E9%99%A4%E8%BF%B7%E5%A4%B1-ca8f3394d137" target="_blank" rel="noopener">Payment System 實戰系列（一）：工程師要先和老闆對話＆破除迷失</a></h3><p>隨著 B2C 、 E-Commerce、OTT ……網路平台興起，在網站上、手機上完成付費作業，讓顧客可以直接取得供應商服務，幾乎是現在網路新創必碰的難題，筆者相信在讀文章的各位，也正面臨串接金流服務的痛苦 😭</p><p>於是本系列文章，<strong>會試著從業務端角度，試圖回推工程開發上</strong>，所需要具備的知識涵養與基本概念，然後帶領實作部分的串接細節，順便說說這些年踩過的大小雷，希望讓正要入手的工程師能更快、更穩掌握技術內涵。那事不宜遲，就從三部曲中的第一篇開始讀起吧！</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="加速-JavaScript-的生態系統：npm-Scripts"><a href="#加速-JavaScript-的生態系統：npm-Scripts" class="headerlink" title="加速 JavaScript 的生態系統：npm Scripts"></a><a href="https://javascriptweekly.com/link/137370/web" target="_blank" rel="noopener">加速 JavaScript 的生態系統：npm Scripts</a></h3><p>這是一系列關於提升 JavaScript 生態系統性能的有趣系列的最新作品。作者 Marvin 這樣解釋：</p><blockquote><p><code>npm scripts</code> 是 JavaScript 開發人員經常執行的。<br>儘管它們使用頻率很高，但它們沒有進行，而且增加了約 400 毫秒的開銷。<br>在本文中，我們將其降低到了約 22 毫秒。</p></blockquote><p>Marvin 在這裡所做的是所有開發人員都應該學習的一項寶貴技能。- from JS Weekly</p><h3 id="Playwright-v1-32-–-現在有-UI-模式了"><a href="#Playwright-v1-32-–-現在有-UI-模式了" class="headerlink" title="Playwright v1.32 – 現在有 UI 模式了"></a><a href="https://javascriptweekly.com/link/137372/web" target="_blank" rel="noopener">Playwright v1.32 – 現在有 UI 模式了</a></h3><p>這個熱門的 Web 測試和自動化框架正在向 Cypress 等，前端測試工具，提供更多的基礎建設。最新的「UI 模式」，讓你在 UI 環境中探索、運行和調試測試。<a href="https://javascriptweekly.com/link/137373/web" target="_blank" rel="noopener">▶️ 這個影片</a> 提供了一個很好的介紹。- from JS Weekly</p><h3 id="我們為什麼要添加對-Deno-中的-package-json-的支持"><a href="#我們為什麼要添加對-Deno-中的-package-json-的支持" class="headerlink" title="我們為什麼要添加對 Deno 中的 package.json 的支持"></a><a href="https://javascriptweekly.com/link/137374/web" target="_blank" rel="noopener">我們為什麼要添加對 Deno 中的 <code>package.json</code> 的支持</a></h3><p><a href="https://javascriptweekly.com/link/137375/web" target="_blank" rel="noopener">Deno 1.32</a> 已經發布，改進了 <code>package.json</code> 的支持和更多內容。Deno 與 Node.js 有一些相似之處，但直到最近，它還沒有專注於支持 npm 模塊等 Node 功能。但隨著 Node 和 npm 的兼容性開始改善，團隊面臨了關於運行時優先級的問題。Ryan Dahl 在這裡闡述了更多關於他們的思想。 - from JS Weekly</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Defer-your-mutex-Unlocks"><a href="#Defer-your-mutex-Unlocks" class="headerlink" title="Defer your mutex Unlocks"></a><a href="https://www.ribice.ba/defer-mutex-unlocks/" target="_blank" rel="noopener">Defer your mutex Unlocks</a></h3><p>不得不說 Go 的 defer 真的是一個很好用的功能，除了避免不小心忘記釋放資源，如果 function 在執行的過程中意外發生了 panic，defer 還是會在正確的時間執行，所以不管在什麼情況下，只要是要釋放資源，都推薦使用 defer。</p><h3 id="Uber-Go-Style-Guide"><a href="#Uber-Go-Style-Guide" class="headerlink" title="Uber Go Style Guide"></a><a href="https://github.com/uber-go/guide/blob/master/style.md" target="_blank" rel="noopener">Uber Go Style Guide</a></h3><p>想知道大組織怎麼管理他們的程式碼風格嗎？這份文件是 Uber 在公司內實施的 Go guideline，透過這些規範可以讓他們避免一些常見的可讀性以及效能問題。</p><h3 id="SOLID-Principles-Explained-with-Golang-Examples"><a href="#SOLID-Principles-Explained-with-Golang-Examples" class="headerlink" title="SOLID Principles: Explained with Golang Examples"></a><a href="https://dev.to/ansu/solid-principles-explained-with-golang-examples-5eh" target="_blank" rel="noopener">SOLID Principles: Explained with Golang Examples</a></h3><p>SOLID 原則應該大家都聽過，但如果要應用到 Go 裡面，會有哪些地方需要注意呢？這篇文章舉了非常多例子，教你怎麼寫出 SOLID 的 Go 程式碼。為了在三個月後還看得懂自己寫的程式碼，當然要趕快學起來！</p><p>Writer:</p><ul><li><a href="https://medium.com/@louisby0123" target="_blank" rel="noopener">@louisby0123</a> - Googler. UC Berkeley EECS Master Student. System Architect &amp; Backend Engineer. President of 7th Mei-chu Hackathon, founder of Hackathon Taiwan Junior.</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 170 期 - 哇～這碗麵裡面有加蛋耶！</title>
      <link href="/2023/03/21/170-eggs-are-delicacy/"/>
      <url>/2023/03/21/170-eggs-are-delicacy/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="半路出家的軟體工程師英國求職分享（上）"><a href="#半路出家的軟體工程師英國求職分享（上）" class="headerlink" title="半路出家的軟體工程師英國求職分享（上）"></a><a href="https://medium.com/starbugs/702eaf750fdf" target="_blank" rel="noopener">半路出家的軟體工程師英國求職分享（上）</a></h3><p>本文作者 ukyen 是一個半路出家的軟體工程師。原本的職位是客戶支援工程師，雖然工作上有機會編寫一些簡單的腳本及工作站管理，但離純軟的工作還有一大段距離。出國工作一直是他的夢想，在這個大軟體時代，純軟的技能能大大增加出國的機會，所以就開始Python的自學之路。自學一段時間之後，開始嘗試投遞履歷英國、德國的軟體公司，但都因簽證關而係沒有下文。在2019年的時候，很幸運的抽中YMS Tier 5打工度假簽證，正式開啟出國求職的大門。</p><h3 id="半路出家的軟體工程師英國求職分享（下）"><a href="#半路出家的軟體工程師英國求職分享（下）" class="headerlink" title="半路出家的軟體工程師英國求職分享（下）"></a><a href="https://medium.com/starbugs/528a19888bad" target="_blank" rel="noopener">半路出家的軟體工程師英國求職分享（下）</a></h3><p>上篇敘述了大多數面試通用的流程，而這篇記錄著的是去面試每一家英國的公司的面試流程與經驗。文章的最後，作者 ukyen 經過工作一段時間後也順利的將工作簽證辦下來了，恭喜恭喜！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Introducing-react-dev"><a href="#Introducing-react-dev" class="headerlink" title="Introducing react.dev"></a><a href="https://react.dev/blog/2023/03/16/introducing-react-dev" target="_blank" rel="noopener">Introducing react.dev</a></h3><p>React 團隊籌備已久的新文件總算是上線了！新的文件裡面移除了舊文件中保留的 Class Component 的介紹，讓讀者可以直接從 Hooks 開始學習 React，且除了基本的介紹以外，還會有挑戰的區塊，讓你驗證理解內容是否正確，當然也不會少了漂亮的圖來幫助釐清難懂的部分！</p><h3 id="6-CSS-snippets-every-front-end-developer-should-know-in-2023"><a href="#6-CSS-snippets-every-front-end-developer-should-know-in-2023" class="headerlink" title="6 CSS snippets every front-end developer should know in 2023"></a><a href="https://web.dev/6-css-snippets-every-front-end-developer-should-know-in-2023/" target="_blank" rel="noopener">6 CSS snippets every front-end developer should know in 2023</a></h3><p>文章中提到了以下幾個 CSS 的用法，可以用更少的語法來達到一些特定的效果，文章裡除了 Demo 外，還有特別註記該用法的瀏覽器支援度：</p><ol><li>A container query</li><li>Scroll snap</li><li>Grid pile</li><li>Quick circle</li><li>Control variants with @layer</li><li>Memorize less and reach more with logical properties</li></ol><h3 id="Send-large-files-from-frontend-to-the-backend"><a href="#Send-large-files-from-frontend-to-the-backend" class="headerlink" title="Send large files from frontend to the backend"></a><a href="https://hsnice16.medium.com/send-large-files-from-frontend-to-the-backend-2f5f2414cc7c" target="_blank" rel="noopener">Send large files from frontend to the backend</a></h3><p>文章中介紹了前端工程師如何利用 JavaScript 的 FileReader，將大型檔案的內容切分小塊傳給後端。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="自動升級更新執行中的-Docker-容器解決方案-watchtower"><a href="#自動升級更新執行中的-Docker-容器解決方案-watchtower" class="headerlink" title="自動升級更新執行中的 Docker 容器解決方案 - watchtower"></a><a href="https://blog.wu-boy.com/2023/02/automating-docker-container-base-image-updates-cht/" target="_blank" rel="noopener">自動升級更新執行中的 Docker 容器解決方案 - watchtower</a></h3><p>之前就有用過 watchtower 這個小工具，他會定期去幫你檢查 DockerHub（或其他 registry）是不是有新的 image 可以用，如果有的話他就會幫你拉下來重新啟動 container，所以他可以讓你的 container 隨時保持在最新的狀態。因此，我們可以用他來簡化部署流程：先把 watchtower 跑在你的 remote server 上，從此只要把新的 image 上傳到 registry 上，就會自動被部署到 production 上，真的很方便哦。</p><h3 id="淺談各種資料庫cache策略-cache-aside、read-through、write-through、write-back"><a href="#淺談各種資料庫cache策略-cache-aside、read-through、write-through、write-back" class="headerlink" title="淺談各種資料庫cache策略: cache aside、read through、write through、write back"></a><a href="https://homuchen.com/posts/databse-chache-strategies/" target="_blank" rel="noopener">淺談各種資料庫cache策略: cache aside、read through、write through、write back</a></h3><p>以前跟 cache 還不熟的時候，從來沒有想過後端的 cache 有這麼多種可能。這篇文章簡單介紹了 cache aside、read through、write through、write back 這四種策略，並且比較他們各自的優缺點（一致性、讀取效能、寫入效能等等），如果你已經用過 Redis/Memcached，想更深入了解他們在各種情境的使用方式，那這篇文章一定要看看！</p><h3 id="The-technology-behind-GitHub’s-new-code-search"><a href="#The-technology-behind-GitHub’s-new-code-search" class="headerlink" title="The technology behind GitHub’s new code search"></a><a href="https://github.blog/2023-02-06-the-technology-behind-githubs-new-code-search/" target="_blank" rel="noopener">The technology behind GitHub’s new code search</a></h3><p>這篇文章的技術含量滿高的，在講 Github 後端是怎麼是怎麼做 code search 的功能，因為他們儲存了非常大量的程式碼，所以必須用特別的方式去儲存，才能很快地把結果搜尋出來～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-to-build-test-and-deploy-your-application-using-Azure-and-GitHub"><a href="#How-to-build-test-and-deploy-your-application-using-Azure-and-GitHub" class="headerlink" title="How to build, test and deploy your application using Azure and GitHub"></a><a href="https://devblogs.microsoft.com/devops/how-to-build-test-and-deploy-your-application-using-azure-and-github/" target="_blank" rel="noopener">How to build, test and deploy your application using Azure and GitHub</a></h3><p>當你使用的 git repository 是 GitHub、雲服務用 Azure 且剛好是用 Go 語言的話可以看看這篇入門部署教學，豐富詳盡的圖文手把手部署教學保證可以快速上手。</p><h3 id="Linkerd-and-ingress-controllers-bringing-the-outside-world-in"><a href="#Linkerd-and-ingress-controllers-bringing-the-outside-world-in" class="headerlink" title="Linkerd and ingress controllers: bringing the outside world in"></a><a href="https://www.cncf.io/blog/2023/03/15/linkerd-and-ingress-controllers-bringing-the-outside-world-in/" target="_blank" rel="noopener">Linkerd and ingress controllers: bringing the outside world in</a></h3><p>Kubernetes Ingress 選擇繁多，為何 Linkerd 可以嶄露頭角呢？他帶來了無痛的 Service Mesh 使用體驗，但為了看到 client IP 我們還是得設定 <code>skip-incoming-ports</code> 不然就會看到 Linkerd 為連線的源頭。Linkerd 也會把封包送往 <code>Service</code> IP 而非 <code>Pod</code>，除非另外設定直接送往 <code>Pod</code> IP。文末也有提供 Linkerd 與其他受歡迎的 Ingress 工具比較，但不外乎都要設定的概念都大同小異。</p><h3 id="How-to-use-Kubernetes-events-for-effective-alerting-and-monitoring"><a href="#How-to-use-Kubernetes-events-for-effective-alerting-and-monitoring" class="headerlink" title="How to use Kubernetes events for effective alerting and monitoring"></a><a href="https://www.cncf.io/blog/2023/03/13/how-to-use-kubernetes-events-for-effective-alerting-and-monitoring/" target="_blank" rel="noopener">How to use Kubernetes events for effective alerting and monitoring</a></h3><p>Kubernetes <code>Events</code> 是常用但比較少探討的主題（就代表是直觀好用的設計），這些可以靠 Grafana agent + Loki 做監控，而 <code>Events</code> 常見的有：</p><ol><li>狀態改變：像是 <code>Pod</code> 有生成新的、pending、確定產生成功或失敗</li><li>設定改變：像是節點水平擴張、垂直擴張的增加記憶體或硬碟等等</li><li>調度：像是是否能夠下載容器 image、容器有沒有足夠的 cpu or memory 或容器 liveness or readiness 探針採樣失敗</li></ol><p>Events 的種類則有：</p><ol><li>失敗</li><li>驅逐</li><li>調度失敗</li><li>硬碟</li><li>節點</li></ol><p>Writer:</p><ul><li><a href="https://medium.com/@wucean" target="_blank" rel="noopener">@ukyen</a> - I like to share what I learned. I enjoy writing and believe it is the best way to preserve knowledge.</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 169 期 - 大雨淅瀝瀝 淋得我心輕鬆</title>
      <link href="/2023/03/07/169-rain/"/>
      <url>/2023/03/07/169-rain/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Microservices-start-Here-Chassis-Pattern"><a href="#Microservices-start-Here-Chassis-Pattern" class="headerlink" title="Microservices start Here: Chassis Pattern"></a><a href="https://medium.com/p/f1be783c522b" target="_blank" rel="noopener">Microservices start Here: Chassis Pattern</a></h3><p>如果你待的公司夠大，而且採用的是 microservice 架構，那整個公司的所有產品可能有上千個 microservice。如果這每個 microservice 專案在起步時都要一步一步把各種 config 跟 script 給建起來，那花費的時間一定是相當可觀。</p><p>為了解決這個問題，俊廷在本週的專欄中想要跟大家介紹 Chassis Pattern，也就是把常用的 toolset 做成一個 microservice template，當你要開一個新的 microservice 時，就直接拿來用就可以了～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Tips-for-Better-Web-Development"><a href="#CSS-Tips-for-Better-Web-Development" class="headerlink" title="CSS Tips for Better Web Development"></a><a href="https://www.builder.io/blog/css-tips-for-better-web-development" target="_blank" rel="noopener">CSS Tips for Better Web Development</a></h3><p>這篇文章列出一些 CSS 技巧，可以幫助開發者進一步優化網頁的設計和性能。以下是文章中提到的一些重點：</p><ol><li>使用 <code>scroll-snap</code> 來實作絲滑般的滑動輪播效果</li><li>使用 <code>position</code> 和 <code>grid</code> 處理網頁的 header 和 footer</li><li>利用 <code>position</code> 的 <code>sticky</code> 在捲軸時固定畫面中的某個區塊</li><li>透過 <code>backdrop-filter</code> 處理圖片的各種濾鏡</li><li>使用 <code>:before</code> 和 <code>:after</code> 的組合，或是 <code>clip-path</code> 裁切元素的任何形狀</li></ol><h3 id="Scroll-Animation"><a href="#Scroll-Animation" class="headerlink" title="Scroll Animation"></a><a href="https://css-tricks.com/books/greatest-css-tricks/scroll-animation/" target="_blank" rel="noopener">Scroll Animation</a></h3><p>本文講解了如何只用一個 JavaScript 的語法來提供當前頁面捲動的百分比，就能透過 CSS 實現隨著捲軸移動產生的動畫效果。一開先介紹如何通過 JavaScript 來設置 CSS 自定義屬性 <code>--scroll</code>，並且將這個值用於 CSS 中。接著展示如何使用 <code>animation-delay</code> 來實現圖像的旋轉，並通過調整 CSS 中的動畫延遲來實現基於捲動位置的動畫效果。最後也提供了一個範例，示範在 <code>:root</code> 中設置 <code>animation-delay</code> 屬性，控制頁面上的所有動畫。</p><h3 id="Debugging-JavaScript-Like-a-Pro-Tools-and-Techniques-for-Finding-and-Fixing-Bugs"><a href="#Debugging-JavaScript-Like-a-Pro-Tools-and-Techniques-for-Finding-and-Fixing-Bugs" class="headerlink" title="Debugging JavaScript Like a Pro: Tools and Techniques for Finding and Fixing Bugs"></a><a href="https://dev.to/iayeshasahar/debugging-javascript-like-a-pro-tools-and-techniques-for-finding-and-fixing-bugs-2lf5" target="_blank" rel="noopener">Debugging JavaScript Like a Pro: Tools and Techniques for Finding and Fixing Bugs</a></h3><p>在文章裡提供了一些 JavaScript 的除錯工具和技巧，幫助開發者更快地找到和修復錯誤。作者分享的技巧和工具包括了瀏覽器開發者工具、console.log、debugger、linting 和單元測試等。除此之外還提到了常見的 JavaScript 錯誤，像是變數作用域、非同步問題等等，也提供解決這些問題的對應技巧。</p><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><h3 id="淺談-Database-Partition-Centralized-and-Distributed"><a href="#淺談-Database-Partition-Centralized-and-Distributed" class="headerlink" title="淺談 Database Partition. Centralized and Distributed."></a><a href="https://homuchen.com/posts/what-is-database-partition-sharding/" target="_blank" rel="noopener">淺談 Database Partition. Centralized and Distributed.</a></h3><p>不得不說資料庫這領域真的是有很多學問，好幾年前我對資料庫還不太了解時，一直以為 sharding 跟 replication 是一樣的東西，反正就是開好幾台 DB instance 共同存放那些資料嘛XD。是後來慢慢深入了解後才知道兩個在概念上是完全不同的，如果你對 sharding、replication、partition 這些名詞還有點模糊的話，這篇文章解釋得很好哦～</p><h3 id="Database-一代代的演化和傳承"><a href="#Database-一代代的演化和傳承" class="headerlink" title="Database 一代代的演化和傳承"></a><a href="https://tachunwu.github.io/posts/db-history/" target="_blank" rel="noopener">Database 一代代的演化和傳承</a></h3><p>早在電腦發明以前，就已經有儲存資料的需求，因此關於資料庫的理論從好幾十年前就開始有了。如果你對資料庫的演進有興趣的話，這篇文章會從 1980 年代的資料庫開始介紹起，一直講到近幾年比較新的資料庫，讓你知道每個時代的資料庫系統想要解決什麼問題，以及又有什麼相對應的優缺點。</p><h3 id="Is-offset-pagination-dead-Why-cursor-pagination-is-taking-over"><a href="#Is-offset-pagination-dead-Why-cursor-pagination-is-taking-over" class="headerlink" title="Is offset pagination dead? Why cursor pagination is taking over"></a><a href="https://uxdesign.cc/why-facebook-says-cursor-pagination-is-the-greatest-d6b98d86b6c0" target="_blank" rel="noopener">Is offset pagination dead? Why cursor pagination is taking over</a></h3><p>如果你有在後端實作過分頁功能，那你應該會知道有分成 offset based 跟 cursor based 兩種做法，這兩種做法各有他們的優缺點，如果你跟他們還不太熟悉的話，這篇文章有各種示意圖跟圖表，保證你看完就懂哦（這篇文真的寫得很好，但他是 member-only 的文章，所以可譨會需要開無痕模式來讀）</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-Spotify-Adopted-and-Outsourced-Its-Platform-Mindset"><a href="#How-Spotify-Adopted-and-Outsourced-Its-Platform-Mindset" class="headerlink" title="How Spotify Adopted and Outsourced Its Platform Mindset"></a><a href="https://thenewstack.io/how-spotlify-adopted-platform-engineering-culture/" target="_blank" rel="noopener">How Spotify Adopted and Outsourced Its Platform Mindset</a></h3><p>Spotify 的 Platform Mission 團隊把全公司 6000 工程師連結起來合作更有效率，讓新員工更上軌道的資料、文件和工具其實都不是 Platform Mission 團隊創造的，都是輔助其他部門撰寫，行銷團隊也會行銷內部工具促成團隊之間的合作。也有關於每位員工的職責是什麼的文件好讓跨團隊合作，甚至也有內部的使用者體驗調查。</p><h3 id="The-Broker-Pattern-amp-how-it-works"><a href="#The-Broker-Pattern-amp-how-it-works" class="headerlink" title="The Broker Pattern &amp; how it works"></a><a href="https://blog.devgenius.io/clean-architecture-s-broker-pattern-10bc08f57753" target="_blank" rel="noopener">The Broker Pattern &amp; how it works</a></h3><p>一個大型架構勢必會有 borker 的存在，此篇撰寫了 borker 介紹、使用時機、功能和優缺點。基本上 borker 在現在架構中扮演重要的角色，可以讓 client 和 server 之間做解藕，減少依賴性，增加擴充性。</p><h3 id="Introducing-Patcher-a-new-tool-for-keeping-infrastructure-code-up-to-date"><a href="#Introducing-Patcher-a-new-tool-for-keeping-infrastructure-code-up-to-date" class="headerlink" title="Introducing Patcher, a new tool for keeping infrastructure code up-to-date!"></a><a href="https://medium.com/gruntwork/introducing-patcher-a-new-tool-for-keeping-infrastructure-code-up-to-date-e65b0c203b6b" target="_blank" rel="noopener">Introducing Patcher, a new tool for keeping infrastructure code up-to-date!</a></h3><p>IaC 使用套件的管理是鮮少人探討的，例如 Terraform 使用的 modules，而 Gruntwork Patcher 會幫忙查找是否有新使用的套件版本後決定是否更新，之後使用者可以審視變更並且部署。</p><p>Writer:</p><ul><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 168 期 - 浪漫哪天突然間變成苦澀的 Bug</title>
      <link href="/2023/02/21/168-romance-suddenly-turned-into-bitter-bug/"/>
      <url>/2023/02/21/168-romance-suddenly-turned-into-bitter-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Render-來試試用來取代-Heroku-的服務吧-Render-的網路服務部署介紹！"><a href="#Render-來試試用來取代-Heroku-的服務吧-Render-的網路服務部署介紹！" class="headerlink" title="Render | 來試試用來取代 Heroku 的服務吧 - Render 的網路服務部署介紹！"></a><a href="https://medium.com/starbugs/render-%E4%BE%86%E8%A9%A6%E8%A9%A6%E7%94%A8%E4%BE%86%E5%8F%96%E4%BB%A3-heroku-%E7%9A%84%E6%9C%8D%E5%8B%99%E5%90%A7-render-%E7%9A%84%E7%B6%B2%E8%B7%AF%E6%9C%8D%E5%8B%99%E9%83%A8%E7%BD%B2%E4%BB%8B%E7%B4%B9-b728e86d5716" target="_blank" rel="noopener">Render | 來試試用來取代 Heroku 的服務吧 - Render 的網路服務部署介紹！</a></h3><h3 id="cyclic-來試試用來取代-Heroku-的服務吧-cyclic-的網路服務部署介紹！"><a href="#cyclic-來試試用來取代-Heroku-的服務吧-cyclic-的網路服務部署介紹！" class="headerlink" title="cyclic | 來試試用來取代 Heroku 的服務吧 - cyclic 的網路服務部署介紹！"></a><a href="https://medium.com/starbugs/cyclic-%E4%BE%86%E8%A9%A6%E8%A9%A6%E7%94%A8%E4%BE%86%E5%8F%96%E4%BB%A3-heroku-%E7%9A%84%E6%9C%8D%E5%8B%99%E5%90%A7-cyclic-%E7%9A%84%E7%B6%B2%E8%B7%AF%E6%9C%8D%E5%8B%99%E9%83%A8%E7%BD%B2%E4%BB%8B%E7%B4%B9-97ecc57f39e6" target="_blank" rel="noopener">cyclic | 來試試用來取代 Heroku 的服務吧 - cyclic 的網路服務部署介紹！</a></h3><p>Hi！大家好，我是神 Q 超人！相信有許多人在去年 2022 <a href="https://www.heroku.com/" target="_blank" rel="noopener">Heroku</a> 說要取消免費計劃的同時，就開始尋覓下個能夠繼續免費使用的平台 😂。就我來說畢竟也是有一些食之無味，棄之可惜的作品服務在那上面放著，而它們也都在免費計畫結束後就都掛了，像變心的女朋友一樣，不論給什麼 request 永遠等不到 response 回來。</p><p>如果各位也有遇到相同的問題，就來看看本週的「來試試用來取代 Heroku 的服務吧！」系列的兩篇文章吧！如果時間不多的話也可以直接到文章下方，都有關於該服務的優缺點懶人包唷！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="Moving-Backgrounds"><a href="#Moving-Backgrounds" class="headerlink" title="Moving Backgrounds"></a><a href="https://css-tricks.com/moving-backgrounds/" target="_blank" rel="noopener">Moving Backgrounds</a></h3><p>相信各位平常在逛一些購物網站的時候，都會有一些產品的圖片可以看，且當你滑鼠移到圖片上面時，還可以根據目前滑鼠在的位置局部放大圖片，並且根據滑鼠移動改變放大的位置，這篇文章就是要來聊聊該如何實現這件事情！</p><!-- summary --><h3 id="Use-Maps-more-and-Objects-less"><a href="#Use-Maps-more-and-Objects-less" class="headerlink" title="Use Maps more and Objects less"></a><a href="https://www.builder.io/blog/maps" target="_blank" rel="noopener">Use Maps more and Objects less</a></h3><p>在 JavaScript 裡面，我們可以輕鬆的用 Object 來做到 key 和 value 的對照，但是即使這個方法很容易做到，也不代表你得這麼做。文章中介紹了 Map，可以在你需要操作類似 key 和 value 的對照時使用，並且從效能、使用限制、用 for 讀 key、內置排序等等許多面向探討 Map 與 Object 的不同。</p><h3 id="Advanced-TypeScript"><a href="#Advanced-TypeScript" class="headerlink" title="Advanced TypeScript"></a><a href="https://angularexperts.io/blog/advanced-typescript" target="_blank" rel="noopener">Advanced TypeScript</a></h3><p>TypeScript 讓身為動態型別的 JavaScript 擁有更嚴禁的型別設定，但是該如何靈活定義這些型別也是需要一番功夫的。這篇文章就介紹了以下幾種設置以及限制型別的方式：</p><ul><li>Union and intersection types</li><li>Keyof</li><li>Typeof</li><li>Conditional types</li><li>Utility types</li><li>Infer type</li><li>Mapped types</li></ul><p>每一種方式都有給出範例的程式碼，並在程式碼中用註解來表示型別帶來的限制。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="把-Github-Issue-當成資料庫來用"><a href="#把-Github-Issue-當成資料庫來用" class="headerlink" title="把 Github Issue 當成資料庫來用"></a><a href="https://www.evanlin.com/go-github-issue/" target="_blank" rel="noopener">把 Github Issue 當成資料庫來用</a></h3><p>想要自己寫一個 Go Application 但又不想花錢租資料庫嗎？這邊提供一個把 Github Issue 拿來當資料庫的方法。只要你的流量不高，對於 DB read/write  的速度也不要太計較，那真的可以用 Github Issue 來當資料庫XD。</p><h3 id="Go-1-20-in-a-nutshell"><a href="#Go-1-20-in-a-nutshell" class="headerlink" title="Go 1.20 in a nutshell"></a><a href="https://appliedgo.com/blog/go-1-20-in-a-nutshell" target="_blank" rel="noopener">Go 1.20 in a nutshell</a></h3><p>前幾週有分享一篇文章講 Go 1.20 有哪些新 feature，但那篇文章比較長，如果你懶得看太多細節，只想看懶人包了解一下 Go 1.20 的話XD，那可以看看這篇文章～</p><h3 id="Go-1-20-Experiment-Memory-Arenas-vs-Traditional-Memory-Management"><a href="#Go-1-20-Experiment-Memory-Arenas-vs-Traditional-Memory-Management" class="headerlink" title="Go 1.20 Experiment: Memory Arenas vs Traditional Memory Management"></a><a href="https://pyroscope.io/blog/go-1-20-memory-arenas/" target="_blank" rel="noopener">Go 1.20 Experiment: Memory Arenas vs Traditional Memory Management</a></h3><p>Go 在 1.20 推出的實驗性 feature - Memory Arenas 究竟能不能幫我們改善記憶體管理以及 GC 的效率呢？如果懶得自己研究的話，那我們來看看別人研究完的結果。結論是 Memory Arenas 在某些極端的情況下，確實可以幫你減少很多 overhead，但因為 Memory Arenas 仍然是實驗性的功能，如果要用在 Production 上的話還是要自己評估看看。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="Back-to-Basics-Installing-NGINX-Open-Source-and-NGINX-Plus"><a href="#Back-to-Basics-Installing-NGINX-Open-Source-and-NGINX-Plus" class="headerlink" title="Back to Basics: Installing NGINX Open Source and NGINX Plus"></a><a href="https://www.nginx.com/blog/back-to-basics-installing-nginx-open-source-and-nginx-plus/" target="_blank" rel="noopener">Back to Basics: Installing NGINX Open Source and NGINX Plus</a></h3><p>想必不少人對 Nginx 的設定依舊一知半解，官方提供的基礎影片以有結構的方式介紹 Nginx 本身與使用，是時候重溫基本功了。除了 open source 版本，也順便介紹 Nginx Plus 的付費版本。</p><!-- summary --><h3 id="How-do-you-gracefully-shut-down-pods-in-kubernetes"><a href="#How-do-you-gracefully-shut-down-pods-in-kubernetes" class="headerlink" title="How do you gracefully shut down pods in kubernetes"></a><a href="https://itnext.io/how-do-you-gracefully-shut-down-pods-in-kubernetes-fb19f617cd67" target="_blank" rel="noopener">How do you gracefully shut down pods in kubernetes</a></h3><p>當你從 terminal 裡下達 kubectl delete pod 時會發生什麼事？發出 request 到 kube-apiserver 後移除 etcd 裡 IP 和 port 的網路資訊，etcd 再通知 CoreDNS、kube-proxy 或 Nginx-ingress 等等也要移除網路資訊。之後節點上的 kubelet 也會收到刪除 pod 的通知開始動作，會先看 preStop 、SIGTERM 最後才強制使用 SIGKILL。</p><h3 id="Secrets-Management"><a href="#Secrets-Management" class="headerlink" title="Secrets Management"></a><a href="https://dzone.com/articles/secrets-management-1" target="_blank" rel="noopener">Secrets Management</a></h3><p>密碼管理永遠是令人頭痛的點，此篇介紹一些該注意的點，不論是生產、測試、內部環境甚至服務本身以及 DevOps 相關的工具全部建議要有 RBAC、使用專門的密碼軟體和時常更新密碼，而且一個密碼軟體不太可能支援所有使用情境，所以選用正確的密碼軟體對應適當的情境。</p><p>Writer:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 167 期 - 元宵節過後，變成一顆間諜氣球了！</title>
      <link href="/2023/02/07/167-become-spy-balloon-after-lantern-festivel/"/>
      <url>/2023/02/07/167-become-spy-balloon-after-lantern-festivel/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Goroutine-的併發治理：掌握生命週期"><a href="#Goroutine-的併發治理：掌握生命週期" class="headerlink" title="Goroutine 的併發治理：掌握生命週期"></a><a href="https://ken00535.medium.com/concurrency-of-go-goroutine-lifetime-8d43e365ba69" target="_blank" rel="noopener">Goroutine 的併發治理：掌握生命週期</a></h3><p>「Goroutine 的併發治理」系列又有新文章了！在這禮拜的專欄中，Ken 會帶大家看一些底層的程式碼來了解 Goroutine 的生命週期，並且提供一些管理 Goroutine 的方法。把握住這些方法，不只可以把程式碼寫得漂亮，也不會在奇怪的地方發生 Goroutine Leak 導致 Out Of Memory。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="High-Definition-CSS-Color-Guide"><a href="#High-Definition-CSS-Color-Guide" class="headerlink" title="High Definition CSS Color Guide"></a><a href="https://developer.chrome.com/articles/high-definition-css-color-guide/" target="_blank" rel="noopener">High Definition CSS Color Guide</a></h3><p>先說文長注意。CSS color 4 帶來了許多用來管理和處理顏色的工具，作者它寫了一篇指南涵蓋了這些新的功能。在指南中會學習到以下幾點：</p><ul><li>什麼是色域？</li><li>人類的視覺範圍。</li><li>什麼是色彩空間？</li><li>如何使用更多顏色、新空間和嘗試結果。</li><li>回顧典型的色彩空間。</li><li>認識新的 Web 色彩空間。</li><li>加權平均顏色。</li><li>Gamut clamping（不知道怎麼翻 🥲）</li><li>選擇色彩空間。</li><li>轉換到 HD CSS 顏色。</li><li>檢查色域和色彩空間支持。</li><li>使用 Chrome DevTools 嘗試顏色。</li></ul><h3 id="Why-React-isn’t-dying"><a href="#Why-React-isn’t-dying" class="headerlink" title="Why React isn’t dying"></a><a href="https://tkdodo.eu/blog/why-react-isnt-dying" target="_blank" rel="noopener">Why React isn’t dying</a></h3><p>文章中作者談論為何現在推特上正出現一些關於 React 正在枯萎，或是其他 Framework 比 React 更好的討論，其實比起文章我更喜歡第一則留言說，如果你不能放棄 100% 的向下相容，那你就會慢慢失去動力，這就是大家認為 React 已死的原因（遠望 Vue3）。</p><h3 id="You’ve-Got-Options-for-Removing-Event-Listeners"><a href="#You’ve-Got-Options-for-Removing-Event-Listeners" class="headerlink" title="You’ve Got Options for Removing Event Listeners"></a><a href="https://www.macarthur.me/posts/options-for-removing-event-listeners" target="_blank" rel="noopener">You’ve Got Options for Removing Event Listeners</a></h3><p>相信大家看到標題都直覺的想到了可以用 <code>removeEventListener</code> 來移除監聽的事件，但除此之外，文章裡還介紹了其他 3 種方法：</p><ul><li>使用 <code>addEventListener</code> 的第三個參數可以設置 once options。</li><li>複製和替換整個節點。</li><li>使用 <code>AbortController</code> 可修改複數的監聽事件。</li></ul><p>文末也有以上 4 種方式的選擇時機，大家可以參考看看！</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Designing-Go-Libraries-The-Talk-The-Article"><a href="#Designing-Go-Libraries-The-Talk-The-Article" class="headerlink" title="Designing Go Libraries: The Talk: The Article"></a><a href="https://abhinavg.net/2022/12/06/designing-go-libraries/" target="_blank" rel="noopener">Designing Go Libraries: The Talk: The Article</a></h3><p>如果你想要實作一個 Go library，不管是開源給外部使用者，還是作為內部 library 給公司專案用，這篇文章都很值得一讀。在這篇文章中有非常多的 case study，雖然文章很長，但讀完之後一定可以讓你設計出更好的 library。</p><h3 id="What’s-New-in-Go-1-20"><a href="#What’s-New-in-Go-1-20" class="headerlink" title="What’s New in Go 1.20"></a><a href="https://blog.carlmjohnson.net/post/2023/golang-120-arenas-errors-responsecontroller/" target="_blank" rel="noopener">What’s New in Go 1.20</a></h3><p>Go 在今年的 2/1 發佈了新版本 1.20，在 Generic、Memory Management、Error Handling 等等方面都有一些改進，如果你跟我一樣是 Go 的粉絲，那麼一定不要錯過這次的更新！</p><h3 id="Writing-Clean-and-Efficient-Table-Driven-Unit-Tests-in-Go"><a href="#Writing-Clean-and-Efficient-Table-Driven-Unit-Tests-in-Go" class="headerlink" title="Writing Clean and Efficient Table-Driven Unit Tests in Go"></a><a href="https://semaphoreci.com/blog/table-driven-unit-tests-go" target="_blank" rel="noopener">Writing Clean and Efficient Table-Driven Unit Tests in Go</a></h3><p>大家都知道要寫測試，但要怎麼把測試寫漂亮呢？這篇文章介紹了 Table-Driven 這種撰寫測試的方式，並且教你怎麼寫出乾淨高效能的測試，如果你從來沒聽過 Table-Driven test 的話，這篇文章短短的而已可以簡單看一下～</p><p>Writer:</p><ul><li><a href="https://ken00535.medium.com/" target="_blank" rel="noopener">@Ken</a> - 興趣是符號學的軟體開發者，喜歡探索事物的本質，偶爾會寫點東西。</li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 166 期 - 好運、幸福通通兔 You</title>
      <link href="/2023/01/24/166-happy-new-year-good-luck-to-you/"/>
      <url>/2023/01/24/166-happy-new-year-good-luck-to-you/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Explaining-Pagination-in-ElasticSearch"><a href="#Explaining-Pagination-in-ElasticSearch" class="headerlink" title="Explaining Pagination in ElasticSearch"></a><a href="https://medium.com/starbugs/explaining-pagination-in-elasticsearch-3ac59656fdd2" target="_blank" rel="noopener">Explaining Pagination in ElasticSearch</a></h3><p>大家好，這週的專欄是 Starbugs Writers 吳俊廷 所分享的 「Explaining Pagination in ElasticSearch」</p><p>Pagination (分頁) 是網頁呈現資料時很常見的技術，因為當需要從後端返回的資料有很多時，他可以減輕後端的負擔，同時改善使用者體驗，文章中跟大家分享三種分頁技術 (Offset, Keyset, Cursor-based) 的實作細節與其優點及缺點；並且闡述如何使用 ElasticSearch 來達成三種分頁技術實作，那麼在實作時該選擇哪一個比較合適呢？相信看完這週專欄文章你的心裡就會有答案了！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="A-cure-for-React-useState-hell"><a href="#A-cure-for-React-useState-hell" class="headerlink" title="A cure for React useState hell?"></a><a href="https://dev.to/builderio/a-cure-for-react-usestate-hell-1ldi" target="_blank" rel="noopener">A cure for React useState hell?</a></h3><p>在 React 裡面，如果要為 component 定義自身的狀態，通常都會直接使用 <code>useState</code>，但如果 state 裡面是保管著物件狀態的話，那在使用 <code>set*</code> 的時候就特別注意要使全新的物件，如果物件裡有許多欄位，那每次更新時都得要注意這件事情。而文章中提到了可以使用 <code>useReducer</code> 改善操作資料的複雜度，也可以在同個地方驗證是否要更新狀態。</p><h3 id="Applying-SOLID-principles-to-TypeScript"><a href="#Applying-SOLID-principles-to-TypeScript" class="headerlink" title="Applying SOLID principles to TypeScript"></a><a href="https://blog.logrocket.com/applying-solid-principles-typescript/" target="_blank" rel="noopener">Applying SOLID principles to TypeScript</a></h3><p>SOLID 原則分別是：</p><ol><li>強調一個類只負責一件事的單一責任</li><li>程式碼應該對擴展開放，但對修改封閉的開放封閉</li><li>子類別要遵從父類別設計的里氏替換</li><li>類別應該只實現它所需要的介面的介面隔離</li><li>用抽象介面解除高低層次模組間依賴關係的依賴反轉</li></ol><p>SOLID 是為了提高物件導向設計的可讀性，適應性，可擴展性和可維護性。文章裡使用 TypeScript 作為範例，說明如何將這幾個原則應用到 TypeScript 中。</p><h3 id="A-Complete-Guide-to-CSS-Grid"><a href="#A-Complete-Guide-to-CSS-Grid" class="headerlink" title="A Complete Guide to CSS Grid"></a><a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="noopener">A Complete Guide to CSS Grid</a></h3><p>我知道你可能看過超過 100 篇在介紹關於如何使用 CSS 的 Grid 的文章，如果你沒有？那沒關係，我也是，但至少 10 篇應該也差不多了，但這篇關於 Grid 的推薦文章應該可以被稱作 Grid 百科，在文章中不只介紹基本用法、Gird 的一些專有名詞和屬性外，還包含程式碼、圖片和超過 60 篇的額外閱讀、6 篇影片和 9 個其他資源，建議存下來，然後可以拿來做前端外交，反正這大概是有生之年系列自己看也看不完。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="更好的選擇？用-JWT-取代-Session-的風險"><a href="#更好的選擇？用-JWT-取代-Session-的風險" class="headerlink" title="更好的選擇？用 JWT 取代 Session 的風險"></a><a href="https://blog.kenwsc.com/posts/2023/jwt-vs-session/" target="_blank" rel="noopener">更好的選擇？用 JWT 取代 Session 的風險</a></h3><p>這篇是我們 Writer Ken 寫的文章，但我是看完才發現是他寫的XD。近年來很多 Web 應用開始用 JSON Web Token(JWT) 來驗證使用者身份，雖然使用 JWT 可以讓 API Server 更接近 Stateless，但並不是完全沒有缺點的，如果還不是很了解 JWT 跟傳統 session 的差異，這篇文章解釋得很不錯</p><h3 id="How-to-Create-a-Public-Notion-Integration-Using-Python"><a href="#How-to-Create-a-Public-Notion-Integration-Using-Python" class="headerlink" title="How to Create a Public Notion Integration Using Python"></a><a href="https://link.medium.com/gxOfVbyIcub" target="_blank" rel="noopener">How to Create a Public Notion Integration Using Python</a></h3><p>最近使用 Notion 的公司好像越來越多了，如果你想要自己寫一個 Notion plugin 並且開放給大家使用，那這邊有一篇圖文並茂的教學。雖然這篇是用 Python 來寫，但概念懂了之後，不管用什麼語言來寫都沒有問題啦</p><h3 id="Discord-如何處理一天數億的訊息"><a href="#Discord-如何處理一天數億的訊息" class="headerlink" title="Discord 如何處理一天數億的訊息"></a><a href="https://tachunwu.github.io/posts/discord-cassandra/" target="_blank" rel="noopener">Discord 如何處理一天數億的訊息</a></h3><p>Discord 之前有寫過一篇文章講他們是怎麼每天處理一天好幾億則的訊息、以及儲存總共數十億則的訊息，而這篇文章把原文經過翻譯、總結，如果想間單了解一下 Discord 是怎麼做到的，那可以花個 5 - 10 分鐘看看這篇文章～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Multi-cluster-management-for-Kubernetes-with-Cluster-API-and-Argo-CD"><a href="#Multi-cluster-management-for-Kubernetes-with-Cluster-API-and-Argo-CD" class="headerlink" title="Multi-cluster management for Kubernetes with Cluster API and Argo CD"></a><a href="https://aws.amazon.com/blogs/containers/multi-cluster-management-for-kubernetes-with-cluster-api-and-argo-cd/" target="_blank" rel="noopener">Multi-cluster management for Kubernetes with Cluster API and Argo CD</a></h3><p>Cluster API 是個專門用來管理多種 Kubernetes 叢集的 CNCF 專案，而本篇介紹使用 Cluster API 和 Argo CD 管理多個 Kubernetes 叢集，示範的架構為在本機 Docker 裡建立 Kind 後安裝 Cluster API 和 Argo CD，並由它們管理背後多個 Kubernetes 叢集。裡面解釋了 AWS IAM 是怎麼授權、CNI 安裝情況以及最後部署簡單的 app。</p><h3 id="Why-Managing-WAFs-at-Scale-Requires-Centralized-Visibility-and-Configuration-Management"><a href="#Why-Managing-WAFs-at-Scale-Requires-Centralized-Visibility-and-Configuration-Management" class="headerlink" title="Why Managing WAFs at Scale Requires Centralized Visibility and Configuration Management"></a><a href="https://www.nginx.com/blog/why-managing-wafs-at-scale-requires-centralized-visibility-and-configuration-management/" target="_blank" rel="noopener">Why Managing WAFs at Scale Requires Centralized Visibility and Configuration Management</a></h3><p>現在越來越多企業等級的資訊團隊需要集中化式的 Web Application Firewall（WAF）管理監控工具，而 F5 NGINX Management Suite 可以快速以視覺化的方式排查分析，例如最嚴重的攻擊方式、機器人攻擊程度、使用的工具、被攻擊的機器或 CVEs 等等，除了分析外也可以快速集中式的部署新的 Policy 來阻擋攻擊。</p><h3 id="Source-Code-Management-Best-Practices"><a href="#Source-Code-Management-Best-Practices" class="headerlink" title="Source Code Management Best Practices"></a><a href="https://devops.com/source-code-management-best-practices/" target="_blank" rel="noopener">Source Code Management Best Practices</a></h3><p>Source Code Management（SCM）已經是老生常談了，但還是再談一次最佳實踐給大家溫習。</p><ul><li>多 commit</li><li>確保 repository 都是最新的</li><li>詳細寫 commit message</li><li>在 commit 之前先好好審視所有變更</li><li>自動化 workflow 要設計好：前贅字要用 <code>feat</code> 或 <code>fix</code> 等等、使用者權限控管、誰有權限放行可以合併 commit</li><li>資安的設計也不能馬乎：基本的使用者權限、視覺化呈現使用者活躍紀錄、災難復原計畫等等</li></ul><p>Writer:</p><ul><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">Chunting Wu</a> - Architect at SHOPLINE. Experienced in system design, backend development, and embedded systems.<br>Sponsor me if you like: <a href="https://www.buymeacoffee.com/MfGjSk6" target="_blank" rel="noopener">https://www.buymeacoffee.com/MfGjSk6</a></li></ul><p>Maintainers:</p><ul><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 165 期 - 上週沒見到我們是不是覺得哪裡怪怪的</title>
      <link href="/2023/01/10/165-is-it-strange-not-seeing-us-last-week/"/>
      <url>/2023/01/10/165-is-it-strange-not-seeing-us-last-week/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Goroutine-的併發治理：管理-Worker-Pool"><a href="#Goroutine-的併發治理：管理-Worker-Pool" class="headerlink" title="Goroutine 的併發治理：管理 Worker Pool"></a><a href="https://medium.com/starbugs/concurrency-of-go-worker-pool-3fe82a670669" target="_blank" rel="noopener">Goroutine 的併發治理：管理 Worker Pool</a></h3><p>對 Goroutine 有研究的話，應該都知道他是 user level thread 所以調度起來非常輕量，但即便如此，如果 Goroutine 的數量太多還是會影響到效能。因此本週的專欄中，Ken 想跟大家分享怎麼從頭開始建立 Worker Pool 來減少 Goroutine 配置與回收的成本，而且還認真做了 benchmark 來驗證有沒有效能上的提升，最後當然是有，不然可能就沒有這篇文章了XD。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Ditch-the-div-Tag-Use-These-HTML-Tags-Instead"><a href="#Ditch-the-div-Tag-Use-These-HTML-Tags-Instead" class="headerlink" title="Ditch the div Tag: Use These HTML Tags Instead"></a><a href="https://dev.to/arafat4693/ditch-the-div-tag-use-these-tags-instead-2a3c" target="_blank" rel="noopener">Ditch the div Tag: Use These HTML Tags Instead</a></h3><p>雖然 div 在 HTML 中超級萬用，可以劃分頁面中的任何區塊，但是如果在 HTML 裡面有其他標籤能夠為你提供更好的語義時，何不考慮看看呢？但是要記得！這並不是要你放棄或是不使用 div 哦！而是在適當的時候使用對的標籤，就像在對的人要在對的時間遇見一樣。</p><h3 id="Understanding-neumorphism-in-CSS"><a href="#Understanding-neumorphism-in-CSS" class="headerlink" title="Understanding neumorphism in CSS"></a><a href="https://blog.logrocket.com/understanding-neumorphism-css/" target="_blank" rel="noopener">Understanding neumorphism in CSS</a></h3><p>Neumorphism 是一種設計風格，該風格會讓網頁中的物件看起來像是真實世界的 3D 物體，而這篇文章不只說明如何用 CSS 實踐 Neumorphism，也在最後提到了 Neumorphism 對無障礙網頁的影響。</p><h3 id="Getting-Started-With-Vite"><a href="#Getting-Started-With-Vite" class="headerlink" title="Getting Started With Vite"></a><a href="https://blog.openreplay.com/getting-started-with-vite/" target="_blank" rel="noopener">Getting Started With Vite</a></h3><p>這篇文章介紹了如何用 Vite 建立一個 Vue 的專案，並處理了像是圖片的靜態資源，也將專案打包部署上 <a href="https://www.netlify.com/" target="_blank" rel="noopener">netlify</a>，如果還沒有碰過 Vite，但又想試試看的話可以跟著文章一起做，整個過程大概只需要十分鐘左右！</p><h2 id="軟體工程"><a href="#軟體工程" class="headerlink" title="軟體工程"></a>軟體工程</h2><h3 id="至-2022-為止個人的軟體技術觀察"><a href="#至-2022-為止個人的軟體技術觀察" class="headerlink" title="至 2022 為止個人的軟體技術觀察"></a><a href="https://blog.taiwolskit.com/2022-software-technology-development-observation" target="_blank" rel="noopener">至 2022 為止個人的軟體技術觀察</a></h3><p>2022 年咻一下就過了！如果沒時間慢慢追新技術的話，這篇文章簡單整理了 Frontend、Backend、Cloud 等等領域最近的發展，讓你花個五分鐘就可以了解最新的技術潮流～</p><h3 id="Good-API-design-bad-API-design"><a href="#Good-API-design-bad-API-design" class="headerlink" title="Good API design, bad API design"></a><a href="https://levelup.gitconnected.com/good-api-design-bad-api-design-2405dcdde24c" target="_blank" rel="noopener">Good API design, bad API design</a></h3><p>不管你寫的是什麼語言、跑在怎麼樣的環境，當你要讓外部的使用者使用你的服務時，就會需要提供 API。而這篇文章提到了一些在設計 REST API 時的 best practice，只要跟著做，基本上就不會寫出長得太奇怪的 API。</p><h3 id="給新手工程師的幾點建議"><a href="#給新手工程師的幾點建議" class="headerlink" title="給新手工程師的幾點建議"></a><a href="https://codelove.tw/@tony/post/63rlq1" target="_blank" rel="noopener">給新手工程師的幾點建議</a></h3><p>想要成為資深工程師不是程式寫得很好、LeetCode Hard 三分鐘 KO 就可以，而是要對於軟體開發有更宏觀的了解。這篇文章是一名資深的架構師 Jeroen De Dauw 給 Junior 工程師一些寫程式的建議，跟著這篇文章，一起往資深的路上前進吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-To-Fix-Any-Memory-Leak-No-More-Tears"><a href="#How-To-Fix-Any-Memory-Leak-No-More-Tears" class="headerlink" title="How To Fix Any Memory Leak: No More Tears"></a><a href="https://blog.devgenius.io/how-to-fix-any-memory-leak-no-more-tears-3e7fc80342a7" target="_blank" rel="noopener">How To Fix Any Memory Leak: No More Tears</a></h3><p>作者以 JAVA 為例帶讀者走一次當記憶體洩漏時該怎麼做，當事件發生時服務會有怎樣的症狀做判別。使用多種工具幫你抓漏，例如使用 Garbage Collector 的 log 機制、Garbage Collector viewer、開發時看 Visual VM 等等。當事件發生時，此文的流程可以作為參考。</p><h3 id="The-Right-Stuff-for-Really-Remote-Edge-Computing"><a href="#The-Right-Stuff-for-Really-Remote-Edge-Computing" class="headerlink" title="The Right Stuff for Really Remote Edge Computing"></a><a href="https://thenewstack.io/the-right-stuff-for-really-remote-edge-computing/" target="_blank" rel="noopener">The Right Stuff for Really Remote Edge Computing</a></h3><p>在同溫層很難感受到，但在某些工作場合其實網路非常不穩定甚至沒有，所以就有 Edge Computing 解決方案，運用 AWS Snowball 裝置、SpaceX Starlink 網路和 Couchbase NoSQL 資料庫平台做示範，並且比較有無使用 Edge Computing 架構的網路效能差異。</p><h3 id="DevOps-Kubernetes-Help-Desk-or-Self-Driven-Innovation"><a href="#DevOps-Kubernetes-Help-Desk-or-Self-Driven-Innovation" class="headerlink" title="DevOps: Kubernetes Help Desk or Self-Driven Innovation?"></a><a href="https://thenewstack.io/devops-kubernetes-help-desk-or-self-driven-innovation/" target="_blank" rel="noopener">DevOps: Kubernetes Help Desk or Self-Driven Innovation?</a></h3><p>身為 DevOps/SRE 工程師是否常被開發人員的出包煩惱過？親自下去修固然可以但很快就會內耗完畢，太過嚴格的檢查也會拖垮開發效率。文化上應該讓開發人員能夠自己解決問題，而 DevOps/SRE 則是使用劃清界線的 Policy-as-Code 和 CICD pipeline 的工具維持整體開發速度。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li><li><a href="https://ken00535.medium.com/" target="_blank" rel="noopener">@Ken</a> - 興趣是符號學的軟體開發者，喜歡探索事物的本質，偶爾會寫點東西。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 164 期 - 2023 年將會是全新的開始！</title>
      <link href="/2022/12/27/164-new-start-in-2023/"/>
      <url>/2022/12/27/164-new-start-in-2023/</url>
      
        <content type="html"><![CDATA[<p>大家好，2022 即將要結束了，從 2019 年 11 月的第一期的創刊號到現在，星巴哥也陪伴大家有 3 年多的時光囉！明年星巴哥將走向新的經營方式 — 變成兩個禮拜發佈一次的「雙週刊」。會做這個重大決定是為了讓每一期週刊的水準能夠更高、也為了讓 Starbugs 能永續經營下去，希望大家能繼續支持星巴哥，也歡迎大家加入我們的專欄作家（Writer）團隊！</p><h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Goroutine-的併發治理：值是怎麼傳遞？"><a href="#Goroutine-的併發治理：值是怎麼傳遞？" class="headerlink" title="Goroutine 的併發治理：值是怎麼傳遞？"></a><a href="https://medium.com/starbugs/concurrency-of-go-input-and-output-82a8856df3db" target="_blank" rel="noopener">Goroutine 的併發治理：值是怎麼傳遞？</a></h3><p>在 Go 語言中，如果想讓多個 Goroutine 分工合作完成任務，那就得有個機制讓他們互相傳遞必要的資訊。</p><p>但傳遞資訊的方式又有很多種，所以這週的專欄「Goroutine 的併發治理：值是怎麼傳遞？」，要由 Ken 來跟大家分享每一種方式的優缺點，讓你在實務上開發時，可以選擇一種最適合、也最好維護的方式～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Style-Queries"><a href="#CSS-Style-Queries" class="headerlink" title="CSS Style Queries"></a><a href="https://ishadeed.com/article/css-container-style-queries" target="_blank" rel="noopener">CSS Style Queries</a></h3><p>Chrome 團隊最近發布了對 CSS 新查詢語法的實驗室支持！這可以讓我們去查詢 Container 大小和樣式！在文章裡面作者不只是介紹了語法，還給了滿滿的使用情境和 CodePen 的 Demo 可以開起來玩玩看！</p><h3 id="WalkinCat-—-ChatGPT-LineBot-製作懶人包"><a href="#WalkinCat-—-ChatGPT-LineBot-製作懶人包" class="headerlink" title="WalkinCat — ChatGPT LineBot 製作懶人包 "></a><a href="https://walkincat.notion.site/WalkinCat-ChatGPT-LineBot-82e6757b3a0b48858ca56478b8dbe06b" target="_blank" rel="noopener">WalkinCat — ChatGPT LineBot 製作懶人包 </a></h3><p>如果最近有想要做個前端小作品的話，其實串接個 ChatGPT 來玩看看也是滿不錯的，尤其是接下來就要跨年了，如果你聖誕節已經沒有人陪的話，至少還有五天的時間拚一下，這樣跨年的那個晚上至少還有 AI 可以陪聊天，而且這篇文章還是用 Line 去做的機器人，更有聊天的真實感。</p><h3 id="Important-JavaScript-concepts-that-every-developer-should-know"><a href="#Important-JavaScript-concepts-that-every-developer-should-know" class="headerlink" title="Important JavaScript concepts that every developer should know."></a><a href="https://madni.hashnode.dev/important-js-concepts" target="_blank" rel="noopener">Important JavaScript concepts that every developer should know.</a></h3><p>文章內介紹了 11 個關於 JavaScript 的底層原理、開發觀念還有一些符合 JavaScript 語言特性的小用法，都算是滿基本的知識和名詞，如果有不熟的就多看看幾次，不知不覺中就會和它們變成好朋友了！</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="Popular-Node-js-patterns-and-tools-to-re-consider"><a href="#Popular-Node-js-patterns-and-tools-to-re-consider" class="headerlink" title="Popular Node.js patterns and tools to re-consider"></a><a href="https://practica.dev/blog/popular-nodejs-pattern-and-tools-to-reconsider/" target="_blank" rel="noopener">Popular Node.js patterns and tools to re-consider</a></h3><p>在 Node.js 的生態系中，有很多我們慣用的第三方 package 或是常寫的一些 pattern，他們當初可能是為了解決某些問題才出現，但現在已經有點不合時宜。因此這篇文章列出了幾個在採用之前應該重新考慮的模式和工具，讓你在 npm install 之前想想是不是真的需要，或者有更好的替代方案。</p><h3 id="Guidelines-for-choosing-a-Node-js-framework"><a href="#Guidelines-for-choosing-a-Node-js-framework" class="headerlink" title="Guidelines for choosing a Node.js framework"></a><a href="https://simonplend.com/guidelines-for-choosing-a-node-js-framework/" target="_blank" rel="noopener">Guidelines for choosing a Node.js framework</a></h3><p>近年來 Node.js 用來寫 API Server 的框架越來越多了，除了最知名的 Express/Koa 之外，還有 Fastify、Hapi 等等強調速度、易用性的框架。而這篇文章並沒有直接跟你說要選什麼框架，而是跟你說在選擇的時候該考慮哪些問題，譬如說你需不需要 Websocket、有沒有打算用 TypeScript 等等，這些都會決定哪一個框架最適合你</p><h3 id="Best-practices-for-creating-a-modern-npm-package"><a href="#Best-practices-for-creating-a-modern-npm-package" class="headerlink" title="Best practices for creating a modern npm package"></a><a href="https://snyk.io/blog/best-practices-create-modern-npm-package/" target="_blank" rel="noopener">Best practices for creating a modern npm package</a></h3><p>現在要發佈一個可靠的 npm package，可不是把幾個 function 包一包傳上去就好了，你可能還需要加上單元測試、同時支援 ESM 跟 CJS、做安全性檢查等等，這篇文章搜集了這些 best practice（順便推銷他們自己家的工具XD），讓你做為一個專案的維護者，可以發佈出更高品質的 package。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Top-5-API-testing-tools-2022"><a href="#Top-5-API-testing-tools-2022" class="headerlink" title="Top 5 API testing tools 2022"></a><a href="https://dev.to/qbentil/top-5-api-testing-tools-2022-297j" target="_blank" rel="noopener">Top 5 API testing tools 2022</a></h3><p>透過實作 API 可以在不重新設計應用程式的情況之下為 Web 或是 Mobile 應用添加功能，而開發完成的 API當然需要對其進行測試。本文首先提出選擇 API 測試工具的要點：</p><ul><li>Interoperability: 可以運行在不同的平台與作業系統，，並且可以與 CI Pipeline 整合</li><li>API basic requirements: 要可以測試 API 的一般功能，效能與安全性</li><li>Ease of use: 工具要容易上手，幫助使用者節省時間將其花費在測試上</li><li>Cost: 負擔得起的價格，或是有免費的版本</li><li>Multi-tasking: 可以透過非同步的方式執行多個測試來加速</li></ul><p>接著提到五個他推薦的 API 測試工具：</p><ul><li>API Tester</li><li>Postman</li><li>Thunder Client</li><li>Insomnia</li><li>SoapUI</li></ul><h3 id="Infrastructure-as-Code-Vs-Configuration-Management-Vs-Infrastructure-Provisioning"><a href="#Infrastructure-as-Code-Vs-Configuration-Management-Vs-Infrastructure-Provisioning" class="headerlink" title="Infrastructure as Code Vs Configuration Management Vs Infrastructure Provisioning"></a><a href="https://devopscube.com/infrastructure-as-code-configuration-management/" target="_blank" rel="noopener">Infrastructure as Code Vs Configuration Management Vs Infrastructure Provisioning</a></h3><p>文章先從什麼是 Infrastructure as Code 開始介紹起，提到他有哪一些優點，工具，Idempotency 的觀念，以及 IaC 在整個系統中的開發與部署流程，接這開始提到 Infrastructure Provisioning 和 Configuration Management 分別是在做什麼，並且比較他們的不同之處，讓讀者對於如何自動化管理整個系統有更深且全面性的了解。</p><h3 id="Things-I-wish-I-knew-when-I-started-learning-cloud"><a href="#Things-I-wish-I-knew-when-I-started-learning-cloud" class="headerlink" title="Things I wish I knew when I started learning cloud"></a><a href="https://dev.to/hellonehha/things-i-wish-i-knew-when-i-started-learning-cloud-3346" target="_blank" rel="noopener">Things I wish I knew when I started learning cloud</a></h3><p>作者在幾年前是一個前端工程師，對於後端世界的理解有限，但他決定要增進自己的技能，所以在矇矇懂懂的狀況之下開始了他的雲端之旅，而這篇文章想要分享的是他在這段旅程中所學到的一些東西，讓讀者可以在開始學習雲端之前，先了解一些基本的概念</p><ul><li>熟悉哪一種程式語言並不重要</li><li>知道系統是如何運作的，例如 Client, Server 和網路彼此之間的關係</li><li>不需要學會所有的 Cloud Provider，只需要從一個開始學起即可</li><li>只有理論是不夠的，必須要實際操作</li><li>獲取證照是有幫助的，但不是必要的</li><li>是一個持續學習的過程，要花不少時間</li><li>再次重申，沒有任何事情可以取代 Hands-On 所獲得的經驗</li><li>Cloud 無所不在</li><li>有很豐富的學習資源，例如 udemy, youtue 與其他付費課程</li><li>在 Hands-On 之前，記得預留一小筆預算</li></ul><h3 id="GitHub-API-Flow-介紹以及實施"><a href="#GitHub-API-Flow-介紹以及實施" class="headerlink" title="GitHub API Flow 介紹以及實施"></a><a href="https://hazel.style/2022/07/16/GitHub-API-Flow-Introduction-and-Implementation" target="_blank" rel="noopener">GitHub API Flow 介紹以及實施</a></h3><p>2022 年底最後一週 DevOps 推薦文章向大家力推技術圈扛壩子 Hazel 撰寫的三篇精彩文章。此篇使用 Github API 寫一套程式走一次 Github Flow 的流程，因為開發的關係也探討了 git 本身底層的實作原理，程式碼也不藏私的公開給大家，並且有技術做法選擇的探討，值得深讀。</p><h3 id="Terraform-Provider-開發紀錄"><a href="#Terraform-Provider-開發紀錄" class="headerlink" title="Terraform Provider 開發紀錄"></a><a href="https://hazel.style/2022/12/06/Terraform-Provider-Development" target="_blank" rel="noopener">Terraform Provider 開發紀錄</a></h3><p>Terraform 很多人都用過，但是自己創建一個 Terraform Provider 呢？本篇分享如何創建完整的 Terraform Provider 以及後續的 CICD pipeline。</p><h3 id="AWS-to-GCP-site-to-site-VPN-建置紀錄"><a href="#AWS-to-GCP-site-to-site-VPN-建置紀錄" class="headerlink" title="AWS to GCP site-to-site VPN 建置紀錄"></a><a href="https://hazel.style/2022/06/23/AWS-to-GCP-site-to-site-VPN" target="_blank" rel="noopener">AWS to GCP site-to-site VPN 建置紀錄</a></h3><p>本篇以兩個不同的 Cloud provider 的 Site-to-Site VPN 連線來模擬 Hybrid Cloud 兩個 Cloud 互相連線的設定情境，裡面以 AWS 和 GCP 作為範例，裡面也介紹了除了本文之外可以參考的教學文資訊。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li><li><a href="https://ken00535.medium.com/" target="_blank" rel="noopener">@Ken</a> - 興趣是符號學的軟體開發者，喜歡探索事物的本質，偶爾會寫點東西。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 163 期 - 身邊朋友都要出國玩了，沒關係，我有網路就好！</title>
      <link href="/2022/12/20/163-travel-abroad/"/>
      <url>/2022/12/20/163-travel-abroad/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="初探-Linux-Kernel-中的-BPF-與-XDP-技術：以-Tiny-Load-Balancer-為例"><a href="#初探-Linux-Kernel-中的-BPF-與-XDP-技術：以-Tiny-Load-Balancer-為例" class="headerlink" title="初探 Linux Kernel 中的 BPF 與 XDP 技術：以 Tiny Load Balancer 為例"></a><a href="https://medium.com/starbugs/%E5%88%9D%E6%8E%A2-linux-kernel-%E4%B8%AD%E7%9A%84-bpf-%E8%88%87-xdp-%E6%8A%80%E8%A1%93-%E4%BB%A5-tiny-load-balancer-%E7%82%BA%E4%BE%8B-9428c7c1001b" target="_blank" rel="noopener">初探 Linux Kernel 中的 BPF 與 XDP 技術：以 Tiny Load Balancer 為例</a></h3><p>大家好，這週的專欄是由  Starbugs Writer Ian 所發表的「初探 Linux Kernel 中的 BPF 與 XDP 技術：以 Tiny Load Balancer 為例」。</p><p>聽過 BPF 跟 XDP 的人也許不多，但在這個微服務當道的世代，eBPF 與 XDP 其實已經被廣泛應用到許多成熟的專案上。如果你對這兩個底層技術如何增進 Load Balancer 的效能有興趣，而且也熟悉 Linux 跟 C 語言，那一定要趕快點進來看看這週的專欄～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Optimize-Interaction-to-Next-Paint"><a href="#Optimize-Interaction-to-Next-Paint" class="headerlink" title="Optimize Interaction to Next Paint"></a><a href="https://web.dev/optimize-inp/" target="_blank" rel="noopener">Optimize Interaction to Next Paint</a></h3><p>Interaction to Next Paint (INP) 是用來測量回應速度的指標，如果使用者在網頁上進行操作但頁面沒有任何回應的話，那就這個使用者體驗就是差的。而 INP 就是要觀察頁面對使用者做的每一項操作回應的延遲時間。在這篇文章裡面會告訴你該如何測量、分析以及改善 INP 較差的問題。</p><h3 id="Vite-4-0-is-out"><a href="#Vite-4-0-is-out" class="headerlink" title="Vite 4.0 is out!"></a><a href="https://vitejs.dev/blog/announcing-vite4.html" target="_blank" rel="noopener">Vite 4.0 is out!</a></h3><p>Vite 3 在發布之後，每週的下載量暴增到 250 萬，且根據今年 <a href="https://twitter.com/vite_js/status/1589665610119585793" target="_blank" rel="noopener">Jamstack Conf</a> 的問卷顯示，在社群內的使用率也提高到 32%，滿意度也維持在 9.7 高分。那在前作如此好評的狀況下，Vite 4 增修了以下幾點：</p><ul><li>瀏覽器的支援度</li><li>將 .css 作為 string import</li><li>如果環境變數中有 # 或 ` 則需要用 “ 包起來</li><li>減少打包後的尺寸</li><li>升級到 Vite Core</li></ul><p>更詳細的內容就快點進去官方的公告看看吧！</p><h3 id="Web-Performance-Calendar"><a href="#Web-Performance-Calendar" class="headerlink" title="Web Performance Calendar"></a><a href="https://calendar.perfplanet.com/2022/web-performance-apis-appreciation-post/" target="_blank" rel="noopener">Web Performance Calendar</a></h3><p>這篇文章列舉了幾點在 Web 界用來處理效能的酷炫 API：</p><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/PerformanceResourceTiming/renderBlockingStatus" target="_blank" rel="noopener">Render blocking status</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/OffscreenCanvas" target="_blank" rel="noopener">OffscreenCanvas</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decoding" target="_blank" rel="noopener">Async image decoding</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/decode" target="_blank" rel="noopener">Image decode()</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/loading" target="_blank" rel="noopener">loading=lazy</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLImageElement/fetchPriority" target="_blank" rel="noopener">fetchpriority</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Status/103" target="_blank" rel="noopener">103 Early Hints</a></li></ul><p>作者也有在每個 API 下快速介紹並附上目前的支援度，是一篇很好去吸收名詞的好文章！</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="New-in-Go-1-20-wrapping-multiple-errors"><a href="#New-in-Go-1-20-wrapping-multiple-errors" class="headerlink" title="New in Go 1.20: wrapping multiple errors"></a><a href="https://lukas.zapletalovi.com/posts/2022/wrapping-multiple-errors/" target="_blank" rel="noopener">New in Go 1.20: wrapping multiple errors</a></h3><p>如果沒意外的話，Go 在明年二月就會發佈新版本 1.20。從 Go 1.20 開始，我們可以用 <code>errors.Join(err1, err2)</code> 把多個錯誤 join 成一個錯誤、而且 <code>fmt.Errorf</code> 也可以用來把多個錯誤格式化輸出成一個錯誤，讓 Go 的錯誤回傳、處理可以寫得更漂亮</p><h3 id="Test-parallelization-in-Go-Understanding-the-t-Parallel-method"><a href="#Test-parallelization-in-Go-Understanding-the-t-Parallel-method" class="headerlink" title="Test parallelization in Go: Understanding the t.Parallel() method"></a><a href="https://engineering.mercari.com/en/blog/entry/20220408-how_to_use_t_parallel/" target="_blank" rel="noopener">Test parallelization in Go: Understanding the t.Parallel() method</a></h3><p>維持寫測試的習慣固然是好事，但隨著專案中的測試越來越多，每次跑測試所需要的時間也會越來越久。這篇文章介紹了 Go 的平行化測試功能，如果每個測試都是完全獨立、且不影響彼此，那可以試試看用 <code>t.Parallel()</code> 來同時執行多個 test case！</p><h3 id="Making-a-Go-program-run-1-7x-faster-with-a-one-character-change"><a href="#Making-a-Go-program-run-1-7x-faster-with-a-one-character-change" class="headerlink" title="Making a Go program run 1.7x faster with a one character change"></a><a href="https://hmarr.com/blog/go-allocation-hunting/" target="_blank" rel="noopener">Making a Go program run 1.7x faster with a one character change</a></h3><p>在這篇文章中，作者介紹了他如何使用 Go 的 pprof 跟 flamegraphs 工具來分析效能，並且最後只改了一個字元（其實是兩個XD）就提升了 1.7 倍的效能。如果你已經有 Go 的開發經驗，又對效能最佳化感興趣，那麼這篇文章絕對值得一讀！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-DoorDash-Secures-Data-Transfer-Between-Cloud-and-On-Premise-Data-Centers"><a href="#How-DoorDash-Secures-Data-Transfer-Between-Cloud-and-On-Premise-Data-Centers" class="headerlink" title="How DoorDash Secures Data Transfer Between Cloud and On-Premise Data Centers"></a><a href="https://doordash.engineering/2022/11/29/how-doordash-secures-data-transfer-between-cloud-and-on-premise-data-centers/" target="_blank" rel="noopener">How DoorDash Secures Data Transfer Between Cloud and On-Premise Data Centers</a></h3><p>處理底層網路一直都不是簡單的事，DoorDash 因為業務需要跟供應商做介接，但因為供應商敏感的資料不適合暴露於公開的網路，所以評估 AWS Site-to-Site VPN 和 Direct Connect。確定使用 Direct Connect 的實體光纖線路後，發現供應商防火牆的規則會擋掉所有來自內網的 CIDR 範圍，例如 10.0.0.0 到 10.255. 255.255 (Class A) 172.16.0.0 到 172.31. 255.255 (Class B) 192.168.0.0 到 192.168. 255.255 (Class C)，確保流量是來自外部。於是 DoorDash 只好使用 NAT Gateway 嘗試解決，但發現在 Virtual Private Gateway 時沒辦法抓到 NAT Gateway 的 Elastic IP，所以最後使用 <a href="https://docs.aws.amazon.com/whitepapers/latest/building-scalable-secure-multi-vpc-network-infrastructure/private-nat-gateway.html" target="_blank" rel="noopener">Private NAT Gateway</a> 才得以解決。然後 DoorDash 在靠 AWS Transit Gateway 把 Direct Connect 的環境以中心點串到各個 AWS 帳號去。</p><h3 id="Kubernetes-CI-CD-Pipelines-Explained"><a href="#Kubernetes-CI-CD-Pipelines-Explained" class="headerlink" title="Kubernetes CI/CD Pipelines Explained"></a><a href="https://thenewstack.io/kubernetes-ci-cd-pipelines-explained/" target="_blank" rel="noopener">Kubernetes CI/CD Pipelines Explained</a></h3><p>我想大家或許對 Kubernetes CI/CD 工具已經很熟了，但本篇依舊介紹不錯的工具之外，也介紹了最佳實踐，以及推薦自動化、團隊合作、資安和監控工具。是一篇要入門建置 Kubernetes CI/CD pipeline 很不錯的起點文章。</p><h3 id="How-to-Build-a-Fintech-App-Approach-Architecture-and-Scalability"><a href="#How-to-Build-a-Fintech-App-Approach-Architecture-and-Scalability" class="headerlink" title="How to Build a Fintech App: Approach, Architecture, and Scalability"></a><a href="https://mobidev.biz/blog/how-to-build-fintech-app-approach-architecture-scalability" target="_blank" rel="noopener">How to Build a Fintech App: Approach, Architecture, and Scalability</a></h3><p>做金融科技的服務要如何選架構？地點決定法規、商業模式影響系統負載、是否很在意延遲、服務需不需要即時性和系統可靠性容錯率有多少，又或者單體架構（Monolith）、服務導向架構（service-oriented architecture）或微服務架構（Microservices）。作者是建議業務一開始可以循序漸進，因為微服務架構會花很多開發時間，等腳步穩了再改進即可。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="Monorepo-Build-Tools"><a href="#Monorepo-Build-Tools" class="headerlink" title="Monorepo Build Tools"></a><a href="https://earthly.dev/blog/monorepo-tools/" target="_blank" rel="noopener">Monorepo Build Tools</a></h3><p>最近在軟體開發的圈子中，使用 Monorepos 來管理程式碼有變流行的趨勢，Monorepos 指的是單一個 Repository 中包含著許多相關但是不同專案的程式碼，他有不少優點，但這樣的管理方式也帶來不少的挑戰，假設一個 Repo 中有數百個服務，彼此之間存在著相依性，當其中一個服務有變動時，如何讓其他的服務不會全部都被重新測試，編譯和部署？這時就可以依靠 Monorepos 專屬的工具來解決這個問題，在評估相關類型的工具時，通常會需要考慮以下幾個因素：</p><ul><li>Programming Language Support: 確認選擇的工具支援你目前以及未來所使用的程式語言</li><li>Learning Curve: 每個工具的學習成本各有不同，評估工具的複雜度，確認是否適合你的團隊</li><li>Caching: 一個理想的建構工具，對於同一個 Build 不應該被執行兩次，應該要選擇具備在遠端分散式環境執行與支援快取的工具</li><li>Build Introspection: 能夠洞察被構建服務的流程和相依關係，允許工程師去查看構建圖，構建時哪個環節效率不佳，或是變更牽涉到哪一些專案</li><li>Versatility: 構建以外的附加功能，例如相依套件如何被安裝？整合測試如何運行？測試資料庫如何被還原？換句話說，除了從程式碼構建 Artifact 之外的其他問題都需要被考慮進去</li></ul><p>而目前在這個領域中，作者介紹了四個工具供大家選擇，底下根據上面提的選擇要點來做比較 (不過這篇文章是 Earthly 所撰寫，所以不能全信XD):</p><ul><li><p>Bazel: </p><ul><li>Programming Language Support: Java, C++, Python…等</li><li>Learning Curve: 四個工具中最複雜</li><li>Caching: 支援遠端快取和分散式執行 (開源 &amp; 商用版本)</li><li>Build Introspection: 透過 <code>bazel query</code> 和其他相關指令提供強大的 Introspection 功能</li><li>Versatility: 相當受限，只可以在 run 的階段執行整合測試，至於環境設定和自動構建方面則是被認為不在此工具的支援範圍內</li></ul></li><li><p>Pants:</p><ul><li>Programming Language Support: Go, Python, Java…等 (沒有 JavaScript)</li><li>Learning Curve: 透過 Static Introspection，使得他比 Bazel 更易用一些</li><li>Caching: 支援遠端快取和分散式執行 (開源 &amp; 商用版本)</li><li>Build Introspection: 透過 <code>pants dependencies</code> 指令提供良好的 Introspection 功能</li><li>Versatility: 相當受限，環境設定和自動構建方面也是被認為不在此工具的支援範圍內</li></ul></li><li><p>NX:</p><ul><li>Programming Language Support: Javascript, Go, Rust，還有 iOS 和 Android 執行器</li><li>Learning Curve: 對於 JavaScript 開發者來說學習曲線最低</li><li>Caching: 支援遠端快取和分散式執行 (商用版本)</li><li>Build Introspection: 提供一些 Introspection 功能</li><li>Versatility: 透過 npm 腳本支援不可快取的步驟和一次性的構建任務</li></ul></li><li><p>Earthly:</p><ul><li>Programming Language Support: 任何可以運行在 Linux 環境的東西</li><li>Learning Curve: 有點類似 Dockerfile，使用一連串的 RUN 指令來構建，學習曲線最低</li><li>Caching: 支援遠端快取和分散式執行 (開源 &amp; 商用版本)</li><li>Build Introspection: 受限的 Introspection 功能</li><li>Versatility: 透過包裝現有的工具來提供環境設定和自動構建的功能</li></ul></li></ul><h3 id="The-Wordcel’s-Guide-to-Shape-Rotation-using-the-Git-Commit-Graph"><a href="#The-Wordcel’s-Guide-to-Shape-Rotation-using-the-Git-Commit-Graph" class="headerlink" title="The Wordcel’s Guide to Shape Rotation using the Git Commit Graph"></a><a href="https://www.dolthub.com/blog/2022-12-14-wordcels-guide-to-git/" target="_blank" rel="noopener">The Wordcel’s Guide to Shape Rotation using the Git Commit Graph</a></h3><p>活在 2022 年快要結束的這個當下，應該沒有人會質疑 Git 在軟體開發領域的地位，幾乎每個人都需要使用它，但不一定每個人都真的了解他，這篇文章的作者坦承他一開始費了很大的勁去使用 Git，透過了很長時間的研究和練習之後才總算比較會使用一些，也才有辦法分享這篇文章給對於 Git 還不熟的人；文章中使用淺顯的例子加上容易理解的示意圖來解釋了 Git 常用的功能與知識，如 Git Commit, Branch, Merging, 至於 Rebase 呢？作者在最後説 Rebase 一個不被信任的黑暗工具，請大家使用 Merge 就好XD</p><h3 id="How-to-Close-a-Pull-Request-Merge-Commit-vs-Squash-vs-Rebase-on-GitHub"><a href="#How-to-Close-a-Pull-Request-Merge-Commit-vs-Squash-vs-Rebase-on-GitHub" class="headerlink" title="How to Close a Pull Request - Merge Commit vs Squash vs Rebase on GitHub"></a><a href="https://leonardomontini.dev/close-pr-strategy-merge-commit-squash-rebase/" target="_blank" rel="noopener">How to Close a Pull Request - Merge Commit vs Squash vs Rebase on GitHub</a></h3><p>當要把 Pull Request Branch 合併到 Main Branch 的時會看到三個選項，分別是 <strong>“Create a merge commit”</strong>, <strong>“Squash and merge”</strong> 以及 <strong>“Rebase and merge”</strong>，這三個選項分別會如何將 PR Branch 合併到 Main Branch 呢？而究竟哪一個選項是最好的呢？</p><ul><li><p>Create a Merge Commit: Merge Commit 是在 GitHub 最常用也是預設的選項，也是執行 <code>git merge</code> 時的預設行為，PR Branch 中的所有 Commit 歷史都完整地被保留在 Main Branch 中，然後會有一個額外的 Commit 將 PR Branch 的所有變更內容合併到 Main Branch；優點就是可以很容易追蹤到被修改的那一行程式碼是在哪一個 Commit 中，缺點就是當有很多的 Commit 在很多不同的 Branch 時，最終整個 Commit 的歷史紀錄會變得很雜亂，追蹤變更軌跡會是個相當大的挑戰</p></li><li><p>Squash and Merge: 但你真的需要追蹤每一個變更的 Commit 嗎？包含打錯字，漏掉檔案，格式錯誤…等，假如答案是否定的，那你應該考慮使用 Squash Merge，他會忽略掉 PR Branch 中所有的 Commit，然後將所有的變更內容合併成一個 Commit 合併到 Main Branch 中，如此一來，你可以放心的在 PR Branch 中提送任何你想要的 Commit，因為最終只會有一個 Commit 被合併到 Main Branch 中</p></li><li><p>Rebase and Merge: 當你不需要一個額外的 Commit 來得知 Merge 的發生時，而且希望最終所有的 Commit 都線性在單一個 Branch 中時，就可以使用 Rebase and Merge，他會保留所有的 Commit，而且在合併時不會有額外的 Commit；缺點就是在 Rebase 遇到合併衝突時，很容易在無意間遺失部分的程式碼，而且假如你需要追趕上多個 Commit 時，你最後可能需要為每一個 Commit 解決合併衝突，而不像其他的 Merge 選項，只需要解決一次合併衝突</p></li></ul><p>而究竟要選擇哪一個比較好，作者覺得假如 PR Branch 不會開著很久的話，那麼 Squash Merge 是個不錯的選擇，而他本身並不是 Rebase 的粉絲，因為他覺得使用 Rebase 很容易造成失誤，但是在決定要採用哪一個之前，可以先想想看自己和團隊需要去看歷史 Commit 的頻率有多高，團隊中有多少個成員，使用的 CI 工具是否需要完整的 Commit 歷史</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li><li><a href="https://ken00535.medium.com/" target="_blank" rel="noopener">@Ken</a> - 興趣是符號學的軟體開發者，喜歡探索事物的本質，偶爾會寫點東西。</li><li><a href="https://chestermo.medium.com/" target="_blank" rel="noopener">@ChesterMo</a> - 我是Chester，還在求道的後端工程師，相信努力就會有回報。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 162 期 - 梅西加油！</title>
      <link href="/2022/12/13/162-gogo-messi/"/>
      <url>/2022/12/13/162-gogo-messi/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Goroutine-的併發治理：由錯誤處理談起"><a href="#Goroutine-的併發治理：由錯誤處理談起" class="headerlink" title="Goroutine 的併發治理：由錯誤處理談起"></a><a href="https://medium.com/starbugs/concurrency-of-go-error-handling-8c65f642c9a2" target="_blank" rel="noopener">Goroutine 的併發治理：由錯誤處理談起</a></h3><p>在 Go 裡面，使用 Goroutine 併發處理多個任務可以把 CPU 的運算資源發揮到最大，但相對應的錯誤處理也會變得比較複雜。因此在這週的專欄「Goroutine 的併發治理：由錯誤處理談起」中，Ken 要跟我們分享，怎麼把併發的錯誤處理寫得更漂亮，除了讓可讀性更高之外，也降低了發生 dead lock 跟 race condition 的可能性。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="TypeScript-advanced-and-esoteric"><a href="#TypeScript-advanced-and-esoteric" class="headerlink" title="TypeScript: advanced and esoteric"></a><a href="https://levelup.gitconnected.com/typescript-advanced-and-esoteric-d88560f51767" target="_blank" rel="noopener">TypeScript: advanced and esoteric</a></h3><p>作者列出了一些較少人知道的 TypeScript 用法，文章裡面分成兩個部分，第一部分會介紹如何利用泛型建立動態的型別，在這部分會包含幾個用法：</p><ul><li>Property accessors</li><li>Conditional types</li><li>Type inferring</li><li>Recursive types</li></ul><p>第二個部分則是會介紹如何將上述四個用法做實際應用。</p><!-- summary --><h3 id="An-Introduction-To-JavaScript-Maps"><a href="#An-Introduction-To-JavaScript-Maps" class="headerlink" title="An Introduction To JavaScript Maps"></a><a href="https://blog.openreplay.com/an-introduction-to-javascript-maps/" target="_blank" rel="noopener">An Introduction To JavaScript Maps</a></h3><p>在 JavaScript 中，有時候我們會使用 object 來做 key 和 value 之間的對照，但其實早在 ES6 出現的 map 就能更讚的實現這件事情，因為不論是 object 或是 function 都可以拿來當作 key 去對應另一個 value。如果你還不曉得 Map 或是他的更多優點，不妨從這篇文章開始了解它一下吧！</p><h3 id="What-should-a-modern-CSS-boilerplate-look-like"><a href="#What-should-a-modern-CSS-boilerplate-look-like" class="headerlink" title="What should a modern CSS boilerplate look like?"></a><a href="https://blog.logrocket.com/what-should-modern-css-boilerplate-look-like/" target="_blank" rel="noopener">What should a modern CSS boilerplate look like?</a></h3><p>在寫 Web 的時候，通常都會使用一段 CSS 先重置不同瀏覽器之間的初始樣式差異，但有許多自定義重置的 CSS 裡說不定都包含許多多餘的程式碼（雖然應該也多不到哪裡 😂），因此好好了解在重置時需要和不需要什麼的理由是很重要的，這篇文章介紹了幾個重置某些 CSS 屬性時所考慮的事情。</p><h2 id="TypeScript"><a href="#TypeScript" class="headerlink" title="TypeScript"></a>TypeScript</h2><h3 id="Migrating-millions-of-lines-of-code-to-TypeScript"><a href="#Migrating-millions-of-lines-of-code-to-TypeScript" class="headerlink" title="Migrating millions of lines of code to TypeScript"></a><a href="https://stripe.com/blog/migrating-to-typescript" target="_blank" rel="noopener">Migrating millions of lines of code to TypeScript</a></h3><p>大家應該多少有聽過 Stripe 這間公司，他們在今年把他們最大的 JS codebase 總計數百萬行的程式碼從 Flow migrate 到 TypeScript。這篇文章簡單分享了他們為何要這麼做、以及他們 migration 的過程和結果，如果你手上也有專案在考慮要不要為了好維護 migrate 到 TypeScript，這篇文章可以當作一個參考。</p><h3 id="Use-TypeScript-Record-Types-for-Better-Code"><a href="#Use-TypeScript-Record-Types-for-Better-Code" class="headerlink" title="Use TypeScript Record Types for Better Code"></a><a href="https://itnext.io/use-typescript-record-types-for-better-code-ce1768c6cb53" target="_blank" rel="noopener">Use TypeScript Record Types for Better Code</a></h3><p>其實我以前跟 TypeScript 裡面的 Record/Pick/Omit 那些對型別進行運算、運算的 utility 很不熟，是前陣子仔細去讀了 TypeScript 的官方文件後才發現這些東西真是太好用了。而這篇文章就是介紹了 Record 的用法，推薦給跟我一樣的型別苦手們。</p><h3 id="Type-Safe-TypeScript-With-Type-Narrowing"><a href="#Type-Safe-TypeScript-With-Type-Narrowing" class="headerlink" title="Type-Safe TypeScript With Type Narrowing"></a><a href="https://betterprogramming.pub/type-safe-typescript-with-type-narrowing-649450d708df" target="_blank" rel="noopener">Type-Safe TypeScript With Type Narrowing</a></h3><p>TypeScript 寫久了，遲早有一天會覺得 TypeScript 怎麼那麼笨，「我這邊明明就不可能是 XX 型別啊，你一直噴錯是怎樣？」。別氣別氣，只要你懂 TypeScript 的型別推論，你就可以用 type narrowing 把你的程式碼變得更加安全、而且可讀性也更高。不過這算是比較進階的技巧，如果你對 TypeScript 的型別還不是很熟悉，那可以先把這篇文章存起來，過個一年半載再回來看。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="Serverless-vs-Kubernetes-The-People’s-Vote"><a href="#Serverless-vs-Kubernetes-The-People’s-Vote" class="headerlink" title="Serverless vs. Kubernetes: The People’s Vote"></a><a href="https://thenewstack.io/serverless-vs-kubernetes-the-peoples-vote/" target="_blank" rel="noopener">Serverless vs. Kubernetes: The People’s Vote</a></h3><p>AWS Re:Invent 活動上舉辦了 Serverless vs Kubernetes 架構比賽，會依據多個分類角度做票選，分類的項目有：<!-- summary --></p><ol><li>維護性 - Serverless 勝</li><li>成本 - Serverless 勝</li><li>擴展性 - Serverless 勝</li><li>開發友善度 - 雙方平手</li><li>生態系 - Kubernetes 勝</li><li>監控與日誌 - Kubernetes 勝</li><li>資安 - Kubernetes 勝</li></ol><h3 id="BuildRock-A-Build-Platform-at-Slack"><a href="#BuildRock-A-Build-Platform-at-Slack" class="headerlink" title="BuildRock: A Build Platform at Slack"></a><a href="https://slack.engineering/buildrock-a-build-platform-at-slack/" target="_blank" rel="noopener">BuildRock: A Build Platform at Slack</a></h3><p>Slack 一開始的 Jenkins 就和大家的 Jenkins 一樣隨心所欲導致愈來愈多技術債，經過一連串的考量後決定繼續使用 Jenkins，並且開始做左移的測試，在 Kubernetes 上使用臨時的 Jenkins agent，並且用外掛硬碟保存狀態，標準和抽象化讓使用 Jenkins 的體驗好一點，另外也引入 GitOps 概念禁止人們手動改動，改善設定管理，以及放權 ownership 讓 service owner 參與建置 pipeline。</p><h3 id="Looking-to-the-Future-of-Developer-Experience"><a href="#Looking-to-the-Future-of-Developer-Experience" class="headerlink" title="Looking to the Future of Developer Experience"></a><a href="https://devops.com/looking-to-the-future-of-developer-experience/" target="_blank" rel="noopener">Looking to the Future of Developer Experience</a></h3><p>開發體驗就跟使用者體驗一樣非常重要，減輕開發人員精神上的打擊讓生產力能夠提升。打從一開始入職開始、開發、部署時和維護就要時時刻刻注意開發體驗，像是在入職時創帳號時會自動生產需要的密鑰，使用開發工具如 <a href="https://fig.io/" target="_blank" rel="noopener">Fig</a>、<a href="https://github.com/features/copilot" target="_blank" rel="noopener">Github Copilot</a>、low-code 的軟體或者一些自動化工具如 <a href="https://github.com/features/actions" target="_blank" rel="noopener">Githube Action</a>，而維護需要注意的是 dependencies 要能夠自動檢查。</p><h2 id="ChatGPT"><a href="#ChatGPT" class="headerlink" title="ChatGPT"></a>ChatGPT</h2><h3 id="Awesome-ChatGPT"><a href="#Awesome-ChatGPT" class="headerlink" title="Awesome ChatGPT"></a><a href="https://github.com/humanloop/awesome-chatgpt" target="_blank" rel="noopener">Awesome ChatGPT</a></h3><p>有不少人已經開始把 ChatGPT 整合到既有的工具與服務中，例如 Python SDK, Chrome Extension 顯示跟 Google 搜尋結果的對比，GitHub Action 幫忙 Code Review，VSCode extension 幫忙寫程式，各種 Chat Bot 如 Telegram, WhatsApp, Twitter…來回覆對話，所以 Awesome 系列的 GitHub Repository 也有啦！之後可以跑來這個 Repository 看看有什麼有趣的 ChatGPT 專案又被實作出來了!</p><!-- summary --><h3 id="ChatGPT-for-Google"><a href="#ChatGPT-for-Google" class="headerlink" title="ChatGPT for Google"></a><a href="https://github.com/wong2/chat-gpt-google-extension" target="_blank" rel="noopener">ChatGPT for Google</a></h3><p>最近看到大家都一直在討論 ChatGPT，把各種問題丟給他去回答，很多人已經開始叫他寫程式了，感覺 Stack Overflow 的地位岌岌可危🤣 也有開發者想到其實我們現在還很常去找答案的方式就是去問 Google，所以有人寫了這個 Chrome Extension，讓搜尋字串也直接餵給 ChatGPT，不知道再這樣下去，以後 ChatGPT 的回答內容是不是要開始有業配文跟置入性行銷了?!</p><h3 id="Introducing-ChatGPT"><a href="#Introducing-ChatGPT" class="headerlink" title="Introducing ChatGPT!"></a><a href="https://kozyrkov.medium.com/introducing-chatgpt-aa824ad89623" target="_blank" rel="noopener">Introducing ChatGPT!</a></h3><p>Google 的 Chief Decision Scientist “Cassie Kozyrkov” 寫了一篇揭秘 ChatGPT 的文章，文章開頭先解釋了 ChatGPT 的技術原理為 GAN (Generative Adversarial Networks)，接著稍微提了 GAN 的運作原理，然後花了相對多的篇幅來講述 ChatGPT 的回答其實只是碰觸到了部分的現實，其他則是他想像出來的，這聽起來很像是缺點，但這也正是他的強項，因為他不會受限於現實，可以回答出充滿創造力與在框架外的答案，例如你問 ChatGPT 假如他的飛的話他會做什麼，他可能會回答 “我會像雄鷹一樣翱翔在天空，感受我翅膀下的風和飛行的自由”；緊接著提到利用 ChatGPT 寫程式的體驗</p><p>最恐怖的地方要來了，<strong>上面的內容是由 ChatGPT 所產生的，而且是錯誤的</strong>，作者是這樣跟 ChatGPT 說的 “請用 Cassie Kozyrkov 的風格寫一篇揭秘 ChatGPT 的部落格文章，解釋為什麼 ChatGPT 有用，跟 GAN 有什麼關係，以及為什麼 ChatGPT 的回答只是部分切合現實”；<strong>但其實 ChatGPT 根本就不是使用 GAN 實作出來的，他是 Generative Pretrained Transformer</strong>，但我相信假如不是對於這些背景知識很熟的人，應該都已經被騙了 🥲 沒錯，ChatGPT 所產生的部分回答是胡扯的，但他不算是騙子，因為所謂的騙子必須要先知道事情的真相並且去誤導人類，他只是不關心事情真相而胡說八道的角色，而這也是我們必須要先知道的最重要的重點</p><p>其實除了 ChatGPT 不是 GAN 所實作出來的之後，作者其他的論點都是真的，也就是一開始所提的 ChatGPT 的回答只有部分切合現實，因此可以想像我們在接下來的生活中會處在一個比以往都充斥著更多虛假內容的時代，所以會需要對於事實查核投入更多的精力；ChatGPT 確實讓作者留下了深刻的印象，佩服 OpenAI 所取得的非凡成就，而作者也鼓勵大家去使用它，因為他在各個應用領域中都具有相當大的潛力且值得去關注，換言之，吹牛胡扯的人是有用的，只要你知道他們是在吹牛的人就行了😂 但作者也對人類容易相信別人，導致 AI 將為人類帶來的坎坷之旅感到憂心，人類以後必須對於所有的線上資源採用不同的信任方式，避免獲取一堆有意人士製作出來的虛假內容…</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://ken00535.medium.com/" target="_blank" rel="noopener">@Ken</a> - 興趣是符號學的軟體開發者，喜歡探索事物的本質，偶爾會寫點東西。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 161 期 - 我才不會用世足賽之類的當週刊名稱呢</title>
      <link href="/2022/12/06/161-i-would-not-use-world-football-as-a-name/"/>
      <url>/2022/12/06/161-i-would-not-use-world-football-as-a-name/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="設計模式作為一種語言：物件導向的語法要素"><a href="#設計模式作為一種語言：物件導向的語法要素" class="headerlink" title="設計模式作為一種語言：物件導向的語法要素"></a><a href="https://medium.com/starbugs/design-pattern-as-a-language-f9036102e971" target="_blank" rel="noopener">設計模式作為一種語言：物件導向的語法要素</a></h3><p>大家好！這週的專欄是 Starbugs Writers Ken 所發表的「設計模式作為一種語言：物件導向的語法要素」。閱讀這篇文章前三段的時候，突然有種被拉回當初翻開 GoF 設計模式的感覺！舉的例子和譬喻都非常生動且深奧 😂</p><p>文章內容圍繞著語法元素與設計模式之間的關係，在例子中，分別用了 C、Java 和 Go 三種不同的語言循序漸進解說語法要素對整個系統造成的影響也超讚。另外在小結中有一句我有很喜歡的話「設計者需要先理解領域語言，才能設計出正確的系統。而我們可以把設計模式本身當作一套語言」，這是我從來沒有思考過的部分，作者最後也提到「當我們汲取了設計模式的組成規則，且能看懂其他架構師的設計時，也差不多是藝術的起點了。」看到這裡我才想說，這篇文章本身早已是藝術了！OK，既然推薦序都打完了，那我要去買碗排骨酥湯邊喝邊再看一次了。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-State-of-Frontend-in-2022"><a href="#The-State-of-Frontend-in-2022" class="headerlink" title="The State of Frontend in 2022"></a><a href="https://newsletter.pragmaticengineer.com/p/state-of-frontend-2022" target="_blank" rel="noopener">The State of Frontend in 2022</a></h3><p>2022 又要過了，在一年如十年的前端領域中，不曉得前端工程師們都過得如何，在文章中分別從「哪些前端工程師做了問券」、「前端工程師的工作環境」、「工程實作」、「技術」、「工具」和「Vendors」等種類整理許多精彩的問題，裡面也包含了作者對結果的分析。</p><h3 id="An-Interactive-Guide-to-Flexbox"><a href="#An-Interactive-Guide-to-Flexbox" class="headerlink" title="An Interactive Guide to Flexbox"></a><a href="https://www.joshwcomeau.com/css/interactive-guide-to-flexbox/" target="_blank" rel="noopener">An Interactive Guide to Flexbox</a></h3><p>通常像這種介紹排版的文章，就是看程式碼然後搭配圖和解說了解呈現的效果，但這篇文章則是用互動式的方式，讓你可以透過按鈕操作，看看在不同的屬性和寬度下頁面上的元素會如何排列。</p><h3 id="JavaScript-Understanding-CustomEvent-and-dispatchEvent"><a href="#JavaScript-Understanding-CustomEvent-and-dispatchEvent" class="headerlink" title="JavaScript: Understanding CustomEvent and dispatchEvent"></a><a href="https://medium.com/cstech/javascript-understanding-customevent-and-dispatchevent-a33d10075818" target="_blank" rel="noopener">JavaScript: Understanding CustomEvent and dispatchEvent</a></h3><p>在這篇文章中會介紹如何用 Event、CustomEvent 和 dispatchEvent() 來建立和監聽事件，且作者還分享了如何，以及在哪些情境下會使用到自定義的事件。</p><h2 id="Backend"><a href="#Backend" class="headerlink" title="Backend"></a>Backend</h2><h3 id="Prevent-Http-Ddos-With-Cloudflare-黑五檔期-Ddos-防禦筆記"><a href="#Prevent-Http-Ddos-With-Cloudflare-黑五檔期-Ddos-防禦筆記" class="headerlink" title="Prevent Http Ddos With Cloudflare - 黑五檔期 Ddos 防禦筆記"></a><a href="https://blog.markkulab.net/prevent-ddos-part2/" target="_blank" rel="noopener">Prevent Http Ddos With Cloudflare - 黑五檔期 Ddos 防禦筆記</a></h3><p>最近黑五的檔期剛過，而在這段時間，作者的公司網站也遭遇了 DDoS 攻擊。所以作者在文章中提到了他是怎麼設定 Cloudflare 來防禦 DDoS，整篇文章圖文並茂講解得非常詳細，如果你的產品也有遇到 DDoS 攻擊，可以參考一下這篇文章。</p><h3 id="6-Simple-and-Useful-PostgreSQL-Features-that-I-wish-I-knew-when-I-started"><a href="#6-Simple-and-Useful-PostgreSQL-Features-that-I-wish-I-knew-when-I-started" class="headerlink" title="6 Simple and Useful PostgreSQL Features that I wish I knew when I started"></a><a href="https://it.badykov.com/blog/2022/09/12/simple-and-usefull-postgresql-features/" target="_blank" rel="noopener">6 Simple and Useful PostgreSQL Features that I wish I knew when I started</a></h3><p>這篇文章介紹了 PostgreSQL 幾個比較少人知道的功能，這些功能都是作者在使用的過程中發現的，而且這些功能都非常實用，不管你是正要開始學習怎麼用 PostgreSQL 或是已經使用有一段時間了，都很推薦這篇文章～</p><h3 id="MySQL🐬-InnoDB-教我的事：-最近最少使用-LRU-串列的優化"><a href="#MySQL🐬-InnoDB-教我的事：-最近最少使用-LRU-串列的優化" class="headerlink" title="MySQL🐬 InnoDB 教我的事： 最近最少使用 LRU 串列的優化"></a><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/mysql-innodb-%E6%95%99%E6%88%91%E7%9A%84%E4%BA%8B-%E6%9C%80%E8%BF%91%E6%9C%80%E5%B0%91%E4%BD%BF%E7%94%A8-lru-%E4%B8%B2%E5%88%97%E7%9A%84%E5%84%AA%E5%8C%96-fb1781cdc90e" target="_blank" rel="noopener">MySQL🐬 InnoDB 教我的事： 最近最少使用 LRU 串列的優化</a></h3><p>這篇文章分享了 MySQL 的儲存引擎 InnoDB 內部是怎麼對 LRU(Least Recently Used) 演算法做最佳化，雖然涉及演算法難度比較高一點，不過如果你對 MySQL 的儲存引擎有興趣，可以看看這篇文章。</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><h3 id="Kubernetes-1-26-–-What’s-new"><a href="#Kubernetes-1-26-–-What’s-new" class="headerlink" title="Kubernetes 1.26 – What’s new?"></a><a href="https://sysdig.com/blog/kubernetes-1-26-whats-new/" target="_blank" rel="noopener">Kubernetes 1.26 – What’s new?</a></h3><p>K8s 1.26 也差不多要正式發佈了，讓我們跟著 sysdig 來看看這一版有什麼重要更新吧！ 這一版有 37 個增強功能，對比於 1.25 有 40 個，1.24 有 46 個，這 37 個裡面有 11 個會升到穩定版本，10 個的功能還需要持續改善，16 個全新的功能，其中底下幾個是 sysdig 覺得比較重要的更新，更詳細內容可以參閱內文：</p><ul><li>儲存功能: 透過 VolumeSnapshot 功能，從不同 Namespace 的儲存快照建立新的儲存空間</li><li>驗證功能: 構築於 1.25 引進用來驗證 CRD 的 Common Expression Language (CEL)，現在 admission controller 多了一個 ValidatingAdmissionPolicy 型別，讓使用者可以在沒有 webhook 的情況下達成驗證機制</li><li>監控功能: 不再需要透過 Prometheus Exporter，可以直接在 /metrics/slis 提供 Kubernetes 的 SLI Metric</li><li>監控功能: 開始從 CRI API 來獲取 Container 的資訊 (例如 CPU, Memory 使用量)，而不是 cAdvisor，這也意味著會慢慢的將 cAdvisor 給淘汰掉，畢竟 Container Runtime 才是最清楚知道 Container 運行狀況的角色</li><li>管理功能: 既有的 Resource Management 只能針對 CPU 和 Memory 去設定 Limit 和 Request (之後還可以針對 Storage)，不過對於需要做初始化和清理的硬體資源，如 FPGA，或是想要限制硬體資源被存取，如共享的 GPU，這次新增了新的 ResourceClaimTemplate 和 ResourceClass 物件來達成這些需求，讓資源更動態地去分配</li><li>管理功能: 讓 Topology Manager 對於 multi-NUMA (NUMA: non-uniform memory access) 的 Kubernetes 節點有更好的控制權，例如透過控制使用哪一顆實體的 CPU 核心來避免 Memory 在不同晶片暫存或是 Socket 間跳躍，用以獲得大幅度的效能改善</li><li>管理功能: StatefulSet 多了掌控起始 Replica 數目的設定 (spec.ordinals.start)，主要的應用情境會是在跨 Namespace 或是叢集搬遷 StatefulSet 可以達成 0 Downtime 的需求 (建議同時搭配 PodDistruptionBudgets 去做使用)</li><li>管理功能: 讓 Kubernetes 的使用者可以透過 Auth API 獲得自己的使用者資訊，例如有什麼樣的權限，位於哪一些群組…等</li><li>效能改善: 讓 kubernetes-apiserver 提供 API 的完整清單，這樣一來呼叫 kubernetes-apiserver 的 client 就不用自己去查找有哪一些 API 和這些 API 有哪一些版本可以使用</li></ul><h3 id="Kubernetes-Labels-Expert-Guide-with-10-Best-Practices"><a href="#Kubernetes-Labels-Expert-Guide-with-10-Best-Practices" class="headerlink" title="Kubernetes Labels: Expert Guide with 10 Best Practices "></a><a href="https://cast.ai/blog/kubernetes-labels-expert-guide-with-10-best-practices/" target="_blank" rel="noopener">Kubernetes Labels: Expert Guide with 10 Best Practices </a></h3><p>透過 Kubernetes 於資源內所下的 Label，可以讓管理者更快地查找問題，一次將組態變更集體套用到多個資源，用來監控資源的使用狀況與成本，所以這篇文章要跟大家介紹 10 個使用 Label 的最佳實踐</p><ul><li>使用 Kubernetes 本身推薦的 Label (<a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/common-labels/#labels" target="_blank" rel="noopener">Reference</a>) 來對物件分群: K8s 推薦使用 app.kubernetes.io/name 和 app.kubernetes.io/instance 來代表應用程式的名稱和實例；假如是公司內部的應用服務，就可以使用自己公司的 subdomain 來取代 app.kubernetes.io 然後來客製化對應的 Label</li><li>注意 Label 的語法正確性: Label 是 Key Value 的組合，你必須使用 <code>&lt;Prefix&gt;/&lt;Name&gt;</code> 的格式來命名，其中 Prefix 是選擇性的，但假如要使用的話，要注意它必須是 DNS Subdomain 的格式，字數限制為 253 個字元，他可以讓團隊使用多個 Label 而不會產生命名衝突 (試想那些存在於第三方套件的 Label…)，其中 kubernetes.io 和 k8s.io 是 Kubernetes 針對內部核心元件所保留的 Prefix；Name 就是 Label 屬性名稱，例如可以使用 environment 來代表運行的環境，值得部分就可以用 production 或是 testing，Name 有一些使用需求，例如他不能是空的，字數限制為 63 個字元，開頭和結尾必須使用字母與數字 ([a-z0-9A-Z])，中間可以使用字母與數字和 -, _, . 符號混合</li><li>標準化的 Label 命名規則: 不同的團隊間必須要使用一致性的命名規則，不然花在維護 Label 的努力將會白費掉</li><li>避免不必要的 Label 變更: Label 是用來識別和選擇 K8s 中的資源用以達成排程，部署或是管理的目的，所以變更 Label 會造成深遠和不可預見的影響，例如你把某一群 Pod 的 App Label 從值 frontend 修改成 backend，K8s 就會認為你要把這些 Pod 重新部署到 backend 的節點上，這有可能會造成這些 Pod 開始 Crach，最終無法被存取；所以只要在絕對必要時才去修改 Label，並且在進行任何修改之前仔細的評估可能造成的後果，避免遭遇到不可預期的狀況</li><li>使用 Label Selector 來選擇資源: 透過使用相等性或是集合的操作來對資源做選擇，以相等性來說， = 和 == 都代表相等，!= 代表不相等，也可以透過逗號 , 將添加的多個 Label 區隔開來一起使用；而集合的操作有點像是 SQL 語法中的 IN，例如 app in (frontend, backend) 代表 app Label 擁有 frontend 或是 backend 的資源都會被選擇出來</li><li>不要將應用程式的資訊寫入 Label: K8s Label 主要是用來儲存物件的 Metadata，而不是用來當作應用程式的資料儲存區，因為 K8s 的資源的使用時間通常很短，而且跟應用程式沒有緊密的關係，Label 很快就會變的不同步而毫無用處</li><li>不要將機敏資訊寫入 Label: 假如有心人士可以存取你的 K8s 叢集，而你又把諸如密碼， API Credential 或是其他的機敏資訊寫入了 Label，那麼這些資訊就可以在明碼的情況下被輕易取得；建議應該要存放在 K8s Secret 而不是 Label 內，因為在 Secret 內至少是被編碼過的，而且只有需要的 Pod 才能夠去取得它，這樣一來，即使有心人士可以存取你的 K8s 叢集，也不會有機會直接看到這些儲存於 Secret 的機敏資訊 (自己覺得 K8s Secret 還是不夠安全，建議整合第三方的 Secret Management 工具，如 HashiCorp Vault)</li><li>將 Label 加到 Pod Template: 將必要的 Label 添加到運行資源的 Pod Template 中，如此一來 K8s Controller 便可以如你所期望地建立 Pod；目標是只建立對團隊可以帶來價值的 Label 就好，而不是浮濫的建立一堆沒有用處的 Label，建議從小處著手，一開始先在 Template 中建立一個必要 Label 的清單，例如用來識別資源的擁有者，資源運行的環境以及發布資訊</li><li>將 Label 的添加過程自動化: 自動化可以節省大量時間，當然對於標籤的管理也不例外，假如平常就有在使用 CI/CD Pipeline 的話，就可以輕鬆自動化為某些 Label 做橫向的管理工作；使用 CD 工具來添加 Label 是很明智的選擇，因為它可以確保 Label 的一致性，並且提高工程師的生產力，除此之外，也建議通過 CI 工作來檢查 Label 是否正確無誤，當 Label 遺失時就應該讓 CI 工作失敗並且通知相關負責的團隊來處理</li><li>使用 Label 來做成本監控: 標籤對於了解 K8s 的雲端使用成本很有幫助，其實不管是成本監控，資源分配和管理其實都仰賴著妥切的 Label 策略；當多個團隊共享同一個 K8s Cluster 時 (Multi-Tenant)，你就會需要使用相關 Label 來建立成本分佈報告，因為這樣做才可以獲知特定團隊，服務或是應用服務所耗費的成本，這對調查突然激增的使用成本相當地有幫助</li></ul><h3 id="Deploying-Kubernetes-resources-in-a-specific-order-using-Helm-or-werf"><a href="#Deploying-Kubernetes-resources-in-a-specific-order-using-Helm-or-werf" class="headerlink" title="Deploying Kubernetes resources in a specific order using Helm or werf"></a><a href="https://blog.werf.io/deploying-kubernetes-resources-in-a-specific-order-using-helm-or-werf-f8eb8c1a08" target="_blank" rel="noopener">Deploying Kubernetes resources in a specific order using Helm or werf</a></h3><p>假如希望部署 K8s 資源時可以使用某種順序去部署的話，通常是有點挑戰性的，有時候甚至必須要等待外部資源準備完成，假設今天你要部署一個應用服務好了，那就要先等一個外部的 Operator 建立好動態的 K8s Secret，再來開始初始化和設置資料庫，最後才能夠部署應用服務，這篇文章就要跟大家介紹如何使用 Helm 或是 werf 來解決這個問題</p><ul><li>使用 Helm: 主要是透過 initContainers 來達成，透過 init container 來讓不同的元件之間有順序性的部署，講白話一點就是有個插入一個 until xxx; do sleep 1 done 的 shell script，這個 script 會一直去檢查某個相依資源是否存在，如果存在就會可以部署主體資源，如果不存在就會一直等待，直到相依資源存在為止，這樣就可以達到等待某個相依資源的目的</li><li>使用 werf: 首先必須要在 K8s 資源定義中加入 werf 相關的 annotations，這些 annotations 會告訴 werf 這些資源的權重，werf 會根據這些權重來決定資源的部署順序，這樣就可以達到資源部署的順序性</li></ul><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-We-Use-Terraform-At-Slack"><a href="#How-We-Use-Terraform-At-Slack" class="headerlink" title="How We Use Terraform At Slack"></a><a href="https://slack.engineering/how-we-use-terraform-at-slack/" target="_blank" rel="noopener">How We Use Terraform At Slack</a></h3><p>Slack 使用 Terraform 時也是早期從單一個 AWS 帳號逐漸擴展，也會把大型服務拆成多個 Terraform state files 管理，也會分配不同 AWS IAM 權限來提供 sandbox 環境，使用文法檢查工具來輔助 Terraform 多版本讓環境可以逐一升級，Terraform module 從原本相對路徑逐漸改成用 git 抓下來到最後開發工具只可惜更難做測試，也開發了 Terraform Smart Planner 讓還沒 merge 的測試結果印出 output 讓 reviewer 更好審視。這篇文章的結語也說們的 Terraform 之旅離完美還很遠，也不忘在文章最後偷偷徵才。</p><h3 id="How-to-Mentor-Interns-to-Become-Skillful-Engineers"><a href="#How-to-Mentor-Interns-to-Become-Skillful-Engineers" class="headerlink" title="How to Mentor Interns to Become Skillful Engineers"></a><a href="https://slack.engineering/how-to-mentor-interns-to-become-skillful-engineers/" target="_blank" rel="noopener">How to Mentor Interns to Become Skillful Engineers</a></h3><p>如何讓讓實習生快速進入狀況也是 DevOps 的一環，Slack 就分享除了要注意分配給實習生要做什麼專案外，他的 onboarding 流程跟資源是否能讓他快速進入狀況？如何測量實習生的實習成效是成功的？如果實習生有多位 mentors 該怎麼確保他可以溝通順暢？文章對於制定這些計畫有個詳細的紀錄，即使用在正職員工上也很受用。</p><h3 id="A-Day-in-the-Life-of-a-Cloud-Engineer-at-Slack-Australia"><a href="#A-Day-in-the-Life-of-a-Cloud-Engineer-at-Slack-Australia" class="headerlink" title="A Day in the Life of a Cloud Engineer at Slack Australia"></a><a href="https://slack.engineering/a-day-in-the-life-of-a-cloud-engineer-at-slack-australia/" target="_blank" rel="noopener">A Day in the Life of a Cloud Engineer at Slack Australia</a></h3><p>在澳洲的 Slack 的雲端工程師分享他的一天行程，Slack 的雲端團隊有三種分別是 Foundation、VM 和 containers，在 VM 團隊的他表示在每週開會時可以了解其他團隊的事務。公司的溝通風格基本上還是以非同步為主，code review 也是如此，這也有助於跟北美的同事做溝通。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li><li><a href="https://ken00535.medium.com/" target="_blank" rel="noopener">@Ken</a> - 興趣是符號學的軟體開發者，喜歡探索事物的本質，偶爾會寫點東西。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 160 期 - 珍惜一切得來不易的自由</title>
      <link href="/2022/11/29/160-cherish-our-democracy/"/>
      <url>/2022/11/29/160-cherish-our-democracy/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="鐵人賽排行榜-製作小記-2022-版本"><a href="#鐵人賽排行榜-製作小記-2022-版本" class="headerlink" title="鐵人賽排行榜 製作小記 2022 版本"></a><a href="https://lukatw.medium.com/bc2c494d163b" target="_blank" rel="noopener">鐵人賽排行榜 製作小記 2022 版本</a></h3><p>Hi, 大家好，我是 Luka，本週製作了 2022 鐵人賽的人氣排行榜，方便觀看瀏覽好的主題。使用了 Heroku 替代方案 fly.io 來練了一下手感，並且使用 React.js + MUI UI 元件庫來實作前端。分享一下實作筆記、如何設計與製作 side project 的一些小心得。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Working-with-Zustand"><a href="#Working-with-Zustand" class="headerlink" title="Working with Zustand"></a><a href="https://tkdodo.eu/blog/working-with-zustand" target="_blank" rel="noopener">Working with Zustand</a></h3><p><a href="https://github.com/pmndrs/zustand" target="_blank" rel="noopener">Zustand</a> 是一個 React 的狀態管理工具，相較於 <a href="https://react-redux.js.org/" target="_blank" rel="noopener">React Redux</a> 需要準備較複雜的架構來說 <a href="https://github.com/pmndrs/zustand" target="_blank" rel="noopener">Zustand</a> 幾乎不需要另外設置太多東西就可以建立 store，因為沒有太複雜的架構，也很容易和其他非同步套件像是 <a href="https://tanstack.com/query/v4" target="_blank" rel="noopener">TanStack Query v4</a> 一起使用。說了那麼多，還是推薦到文章中仔細閱讀一番！</p><h3 id="New-CSS-functional-pseudo-class-selectors-is-and-where"><a href="#New-CSS-functional-pseudo-class-selectors-is-and-where" class="headerlink" title="New CSS functional pseudo-class selectors :is() and :where()"></a><a href="https://web.dev/css-is-and-where/" target="_blank" rel="noopener">New CSS functional pseudo-class selectors :is() and :where()</a></h3><p>CSS 提供的選擇器越來越多樣化，其中又有兩個使用起來近乎一樣，功能也非常相似的選擇器：<code>:is()</code> 和 <code>:where()</code>。在這篇文章中會解釋這兩個選擇器的用途，和各種 combo 的使用方式，最後也會介紹兩者的不同之處！</p><h3 id="Introduction-to-Micro-frontends"><a href="#Introduction-to-Micro-frontends" class="headerlink" title="Introduction to Micro-frontends"></a><a href="https://medium.com/@rajithacharith/introduction-to-micro-frontends-283aa1e126c5" target="_blank" rel="noopener">Introduction to Micro-frontends</a></h3><p>又是關於微前端的介紹文章！不曉得大家會不會和我一樣，如果很常看到某個技術一直一直出現在眼前，那個非學習不可的壓力就會越來越大 😂。在這篇文章裡除了基本的介紹優點與缺點外，也在開頭列了微前端的核心思想，有興趣的大家可以到文章中瞭解看看！</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Modern-API-design-with-Golang-PostgreSQL-and-Docker"><a href="#Modern-API-design-with-Golang-PostgreSQL-and-Docker" class="headerlink" title="Modern API design with Golang, PostgreSQL and Docker"></a><a href="https://bognov.tech/modern-api-design-with-golang-postgresql-and-docker" target="_blank" rel="noopener">Modern API design with Golang, PostgreSQL and Docker</a></h3><p>如果你最近剛開始學 Go，那你可以看看這篇文章怎麼用 Go, PostgreSQL 跟 Docker 寫出一個簡單又好部署的 API Server。對於 Go 的寫法有點概念之後，再學其他 library 也會更得心應手～</p><h3 id="Struct-Composition-in-Go"><a href="#Struct-Composition-in-Go" class="headerlink" title="Struct Composition in Go"></a><a href="https://medium.com/@muhammadarifineffendi/struct-composition-in-go-80492bd447bd" target="_blank" rel="noopener">Struct Composition in Go</a></h3><p>因為 Go 裡面沒有繼承的語法，如果想在 Go 裡面做到其他 OOP 語言的繼承，那可以試試看用 Struct Composition 的方式，雖然剛開始用可能會不太習慣，但用久了會覺得這樣的設計其實也滿好的～</p><h3 id="奔放的-Golang，卻隱藏著有紀律的架構！-Clean-Architecture-實作篇"><a href="#奔放的-Golang，卻隱藏著有紀律的架構！-Clean-Architecture-實作篇" class="headerlink" title="奔放的 Golang，卻隱藏著有紀律的架構！- Clean Architecture 實作篇"></a><a href="https://ithelp.ithome.com.tw/articles/10240228" target="_blank" rel="noopener">奔放的 Golang，卻隱藏著有紀律的架構！- Clean Architecture 實作篇</a></h3><p>最近在寫 Go 的時候對於各個 package 之間的 boundary 不太確定該怎麼拿捏、還有 interface 該怎麼設計，好像怎麼樣都切不乾淨的感覺。查了一些資料後發現由 Uncle Bob 提出的 Clean Architecture 剛好有講到各個 Layer 之間要怎麼分工才能比較好測試，如果你還沒聽過 Clean Architecture 的話可以看看這系列文的 Day6 到 Day8，也許會有意外的收穫哦。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Twitter-Architecture-2022-vs-2012"><a href="#Twitter-Architecture-2022-vs-2012" class="headerlink" title="Twitter Architecture 2022 vs. 2012"></a><a href="https://twitter.com/alexxubyte/status/1594008281340530688" target="_blank" rel="noopener">Twitter Architecture 2022 vs. 2012</a></h3><p>因 Elon Musk 把 Twitter 架構圖公開，作者就整理了 2022 和 2012 的架構圖讓大家一窺其內部運作。</p><h3 id="How-Zapier-uses-KEDA"><a href="#How-Zapier-uses-KEDA" class="headerlink" title="How Zapier uses KEDA"></a><a href="https://keda.sh/blog/2022-03-10-how-zapier-uses-keda/" target="_blank" rel="noopener">How Zapier uses KEDA</a></h3><p>Zapier 分享他們的 backend worker 原本是靠 CPU loading 做水平擴展，但是此 worker 有很多 blocking I/O 的功能，所以工作量很多時但 CPU 使用量還是很低。也因此團隊開始轉用 <a href="https://keda.sh/" target="_blank" rel="noopener">KEDA</a> 這個 event-driven autoscaling 專案來偵測 RabbitMQ queue 的數量和原本的 CPU loading 來做水平擴展。</p><h3 id="X-509-Certificate-Management-with-Vault"><a href="#X-509-Certificate-Management-with-Vault" class="headerlink" title="X.509 Certificate Management with Vault"></a><a href="https://www.hashicorp.com/blog/certificate-management-with-vault" target="_blank" rel="noopener">X.509 Certificate Management with Vault</a></h3><p>Vault 可以選不同的 secret engine 而千變萬化，這次介紹的是 PKI（Public Key Infrastructure） certificate，可以生產短期的 certificate 後再搭配 Vault agent 可以做到自動更新與撤銷過期 certificates，也可以審計當時發行和撤銷的 certificates。</p><h2 id="Container"><a href="#Container" class="headerlink" title="Container"></a>Container</h2><h3 id="7-Design-Principals-for-Containers"><a href="#7-Design-Principals-for-Containers" class="headerlink" title="7 Design Principals for Containers"></a><a href="https://hemantjain.medium.com/7-design-principals-for-containers-a6135ef13182" target="_blank" rel="noopener">7 Design Principals for Containers</a></h3><p>此篇文章跟大家詳細介紹七個運行在 Cloud Native 所必須具備的 Container 設計準則，讀完突然發現這不就是使用 K8s 的最佳守則嗎？！</p><ul><li>Single Concern Principle: 一個 Container 只做一件事</li><li>High Observability Principle: 讓 Container 滿足各種被監控的需求</li><li>Life-Cycle Conformance Principle: 根據從平台收到的事件來管理 Container 的生命週期</li><li>Image Immutability Principle: 一旦 Container Image 被建立，就不要再修改它</li><li>Process Disposability Principle: 運行的 Container 要可以隨時被替換掉</li><li>Self-Containment Principle: Container 自己本身要能夠獨立運行</li><li>Runtime Confinement Principle: Container 要能夠建議自己執行所需要的資源</li></ul><h3 id="9-Docker-Extensions-Every-Developer-Must-Try"><a href="#9-Docker-Extensions-Every-Developer-Must-Try" class="headerlink" title="9 Docker Extensions Every Developer Must Try"></a><a href="https://dev.to/docker/9-docker-extensions-every-developer-must-try-1no2" target="_blank" rel="noopener">9 Docker Extensions Every Developer Must Try</a></h3><p>還有在使用 Docker Desktop 的人，可以參考這篇文章，讓你知道 Docker Desktop 有哪些 Extension 可以讓開發更加方便</p><ul><li>Drone CI: 無縫與 Drone CI 整合</li><li>Disk Usage: 分析硬碟被 Container 使用的狀況</li><li>vcluster: 建立輕量化的虛擬 K8s 叢集</li><li>Microcks: 整合 Microcks 在本地端 Mock 和測試 API</li><li>OpenShift: 快速將本地端的 Image 部署到遠端的 OpenShift</li><li>Portainer: 透過 Portainer 方便管理本地端的 Container</li><li>Snyk: 協助開發者快速發現 Container Image 的安全問題</li><li>JFrog Xray Scan: 協助開發者快速發現 Container Image 的安全問題</li><li>okteto: 透過 okteto 快速建立本地端所需要的開發環境</li></ul><h3 id="finch"><a href="#finch" class="headerlink" title="finch"></a><a href="https://github.com/runfinch/finch" target="_blank" rel="noopener">finch</a></h3><p>Finch 是一個新的開源專案，他提供一個 CLI Client 來建置，運行和發佈 Linux Container，而且可以很簡單的就安裝在 macOS 系統上，白話來說就是用來取代 Docker Desktop 的工具！看了範例使用起來跟 Docker CLI 有 87% 像，提供給大家一個 Docker Desktop 的替代方案。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li><li><a href="https://ken00535.medium.com/" target="_blank" rel="noopener">@Ken</a> - 興趣是符號學的軟體開發者，喜歡探索事物的本質，偶爾會寫點東西。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 159 期 - 禮拜六就要選舉了，不知道該投給誰？！</title>
      <link href="/2022/11/22/159-three-semantics-of-rabbitmq/"/>
      <url>/2022/11/22/159-three-semantics-of-rabbitmq/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="關於消息的三層語義：以-RabbitMQ-為例"><a href="#關於消息的三層語義：以-RabbitMQ-為例" class="headerlink" title="關於消息的三層語義：以 RabbitMQ 為例"></a><a href="https://medium.com/starbugs/three-semantics-of-rabbitmq-adba5d103e8c" target="_blank" rel="noopener">關於消息的三層語義：以 RabbitMQ 為例</a></h3><p>大家好，這週的專欄是由我們 Starbugs 的新 Writer Ken 所帶來的 「關於消息的三層語義：以 RabbitMQ 為例」。這篇文章跟上週的專欄都是在談在服務之間傳送消息時，要如何做到「只進行一次處理」，不過跟上週比較不一樣的是，今天這篇有實際以 Go + RabbitMQ 的程式碼作為範例，如果對於概念已經瞭解了，想看看在 RabbitMQ 中怎麼實作的話可以讀一讀這篇～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="CSS-Best-Practices-16-Ways-to-Improve-Your-CSS-Skills-Quickly"><a href="#CSS-Best-Practices-16-Ways-to-Improve-Your-CSS-Skills-Quickly" class="headerlink" title="CSS Best Practices: 16 Ways to Improve Your CSS Skills Quickly"></a><a href="https://torquemag.io/2022/11/css-best-practices/" target="_blank" rel="noopener">CSS Best Practices: 16 Ways to Improve Your CSS Skills Quickly</a></h3><p>看了很多關於 JavaScript 的 clean code，也該來看看如何把 CSS 也寫的一樣乾淨且容易維護吧！文章內提出 9 點可以寫出好 CSS 程式碼的 points：</p><ul><li>讓你的 CSS 是可閱讀的</li><li>訂定一些規則，統一 CSS 的編寫格式</li><li>想辦法處理多餘的程式碼</li><li>避免使用 !important</li><li>考慮直接使用 Framework</li><li>善用 reset CSS 消除不同瀏覽器間的設計不一致</li><li>讓網站可被更多群族的使用者使用</li><li>避免在 Wordpress 中編輯 CSS</li><li>最後提供一些關於 CSS 最佳實踐的提示</li></ul><!-- summary --><h3 id="JavaScript-Debounce-vs-Throttle"><a href="#JavaScript-Debounce-vs-Throttle" class="headerlink" title="JavaScript Debounce vs. Throttle"></a><a href="https://www.syncfusion.com/blogs/post/javascript-debounce-vs-throttle.aspx" target="_blank" rel="noopener">JavaScript Debounce vs. Throttle</a></h3><p>Debounce 和 Throttle 都是為了處理網站效能而出現的技術，只要網站效能處理得好，也就能提升使用者的體驗！在這篇文章中會去比較 Debounce 和 Throttle 兩者有什麼不同，以及為何需要他們！</p><h3 id="Learn-Modern-JavaScript-Fundamentals-in-7-Hours—Free-Course"><a href="#Learn-Modern-JavaScript-Fundamentals-in-7-Hours—Free-Course" class="headerlink" title="Learn Modern JavaScript Fundamentals in 7 Hours—Free Course"></a><a href="https://code.tutsplus.com/tutorials/learn-modern-javascript-fundamentals-free-course--cms-93282" target="_blank" rel="noopener">Learn Modern JavaScript Fundamentals in 7 Hours—Free Course</a></h3><p>用 7 個小時學會 JavaScript 的基礎知識，作者很佛心的為每一個段落的知識點標記時間戳，大家可以找到自己有興趣的章節觀看就可以了，這七個小時的影片裡面包含了基本的 JavaScript 的基礎、資料結構、Web API 和非同步的 JavaScript 等等，推薦給自己一點時間好好學習或複習那些可能遺忘的知識吧！</p><h2 id="軟體工程"><a href="#軟體工程" class="headerlink" title="軟體工程"></a>軟體工程</h2><h3 id="GitHub-stars-won’t-pay-your-rent"><a href="#GitHub-stars-won’t-pay-your-rent" class="headerlink" title="GitHub stars won’t pay your rent"></a><a href="https://kitze.io/posts/github-stars-wont-pay-your-rent" target="_blank" rel="noopener">GitHub stars won’t pay your rent</a></h3><p>現在很多的軟體架構跟解決方案之所以能這麼成熟，是因為有很多無私的開發者花自己的下班時間貢獻給 Github 上的開源專案，但這些開源專案的作者、貢獻者卻鮮少能獲得回報，而且做久了甚至會被覺得是理所當然（像是會有人一直開 issue 說：這個 bug 怎麼還沒修好啊！？）。所以希望大家在使用這些開源的 library、Framework 時能夠更友善一點，如果行有餘力，也可以少喝杯飲料，花一點錢錢支持他們～</p><h3 id="The-Architecture-of-a-Modern-Startup"><a href="#The-Architecture-of-a-Modern-Startup" class="headerlink" title="The Architecture of a Modern Startup"></a><a href="https://betterprogramming.pub/architecture-of-modern-startup-abaec235c2eb" target="_blank" rel="noopener">The Architecture of a Modern Startup</a></h3><p>如果你是一間新創公司的 CTO，正準備要開始設計產品的系統架構，那有幾個關鍵可能是你必須要先考慮的，譬如說公司的產品是否要用 Kubernetes、要有 Staging 環境嗎？要用哪個雲端平台等等，這篇文章會帶你了解一些新創公司在設計架構時，需要考慮的一些問題，讓你更有方向的做出一個好的系統。</p><h3 id="How-we-reduced-our-annual-server-costs-by-80-—-from-1M-to-200k-—-by-moving-away-from-AWS"><a href="#How-we-reduced-our-annual-server-costs-by-80-—-from-1M-to-200k-—-by-moving-away-from-AWS" class="headerlink" title="How we reduced our annual server costs by 80% — from $1M to $200k — by moving away from AWS"></a><a href="https://levelup.gitconnected.com/how-we-reduced-our-annual-server-costs-by-80-from-1m-to-200k-by-moving-away-from-aws-2b98cbd21b46" target="_blank" rel="noopener">How we reduced our annual server costs by 80% — from $1M to $200k — by moving away from AWS</a></h3><p>這篇文章記錄了一家公司是怎麼透過搬離 AWS 來節省高達 80% 的花費，不過我個人覺得重點不是省了多少錢XD，而是他們是怎麼做到的。譬如說他們在真的開始搬家之前是怎麼進行規劃、在逐漸搬過去的過程中又是如何對各個服務進行測試，這些都是很值得學習的地方。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="5-New-CNCF-Projects-To-Watch-In-2023"><a href="#5-New-CNCF-Projects-To-Watch-In-2023" class="headerlink" title="5 New CNCF Projects To Watch In 2023"></a><a href="https://itnext.io/5-new-cncf-projects-to-watch-in-2023-af5234ba6e87" target="_blank" rel="noopener">5 New CNCF Projects To Watch In 2023</a></h3><p>介紹 5 款還不錯的 CNCF 新專案，分別為：<!-- summary --></p><ul><li><a href="https://github.com/SpectralOps/Teller" target="_blank" rel="noopener">Teller</a>，更安全的把敏感資訊避免錯誤地使用在 code、shell 或檔案裡，支援 Vault、Consul、AWS Secret Manager 或 Google Secret Manager 等等</li><li><a href="https://github.com/opencost/opencost" target="_blank" rel="noopener">OpenCost</a>，計算 K8s 所產生的費用，前身是 <a href="https://kubecost.com/" target="_blank" rel="noopener">kubecost</a></li><li><a href="https://github.com/OpenFunction/OpenFunction" target="_blank" rel="noopener">OpenFuction</a>，在 K8s 上建立 FAAS（function as a code platform）</li><li><a href="https://github.com/external-secrets/external-secrets" target="_blank" rel="noopener">External-secrets</a>，讓外部的 secret 存入並且自動同步 K8s secret</li><li><a href="https://github.com/clusterpedia-io/clusterpedia" target="_blank" rel="noopener">Clusterpedia</a>，把多個 K8s clusters 的資源以 wikipedia 的方式呈現，可以使用進階的搜尋功能</li></ul><h3 id="AWS-EBS-Volumes-gp2-vs-gp3-io1-vs-io2-which-one-to-choose"><a href="#AWS-EBS-Volumes-gp2-vs-gp3-io1-vs-io2-which-one-to-choose" class="headerlink" title="AWS EBS Volumes gp2 vs gp3, io1 vs io2 which one to choose"></a><a href="https://devopslearning.medium.com/aws-ebs-volumes-gp2-vs-gp3-io1-vs-io2-which-one-to-choose-7177e59fff3c" target="_blank" rel="noopener">AWS EBS Volumes gp2 vs gp3, io1 vs io2 which one to choose</a></h3><p>AWS EBS 類型的選擇是維運人員該注意的，gp2 和 gp3 衡量過後評估要換的話，gp2 是可以直接不用關機改成 gp3 的，只是要注意其會根據容量大小決定修改時間，而 io1 改成 io2 也以此類推。</p><h3 id="Chaos-engineering-101-Principles-process-and-examples"><a href="#Chaos-engineering-101-Principles-process-and-examples" class="headerlink" title="Chaos engineering 101: Principles, process, and examples"></a><a href="https://learningdaily.dev/chaos-engineering-101-principles-process-and-examples-e94355e4e773" target="_blank" rel="noopener">Chaos engineering 101: Principles, process, and examples</a></h3><p>Chaos Engineering 為現今許多大型組織的解決方案，本文簡單介紹一下其原理、工具、原則和流程、扎實的實際範例和如果要鑽研如何開啟下一步。</p><h2 id="IaC"><a href="#IaC" class="headerlink" title="IaC"></a>IaC</h2><h3 id="The-top-programming-languages"><a href="#The-top-programming-languages" class="headerlink" title="The top programming languages"></a><a href="https://octoverse.github.com/2022/top-programming-languages" target="_blank" rel="noopener">The top programming languages</a></h3><p>從最近 GitHub 發布的統計結果發現用來達成 IaC 的 HCL (HashiCorp Configuration Language) 成為過去一年來成長最快的語言，主要是由於 Terraform 此工具的普及，加上自動化管理與部署基礎設施成為被大家廣泛接受的最佳守則，雖然有人覺得他其實不算是一個語言 (<a href="https://news.ycombinator.com/item?id=33556902" target="_blank" rel="noopener">Reference</a>)，但不可否認 HCL 在基礎設施的管理幫助大家節省不少時間與降低人為疏失</p><!-- summary --><h3 id="Infrastructure-as-Code’s-Broken-Promises"><a href="#Infrastructure-as-Code’s-Broken-Promises" class="headerlink" title="Infrastructure as Code’s Broken Promises"></a><a href="https://levelup.gitconnected.com/infrastructure-as-codes-broken-promises-4c9dc86f909c" target="_blank" rel="noopener">Infrastructure as Code’s Broken Promises</a></h3><p>此篇文章的作者常常聽到 Infrastructure as Code 的好處就是採用之後可以解決掉所有管理基礎設施的問題，比起手動管理來的更簡單，寫出來的 IaC 可以被拿來測試，除此之外也可以節省更多的時間；但作者覺得總是有不預期的緊急事件會發生，環境會發生偏移，綜合他自己的經驗來說，基礎設施對比於一般靜態的應用程式就像是活著的生物一般，讓他覺得導入 IaC 之後人生也沒有變得比較簡單，要維護 IaC 反而讓一切變得更複雜而且要花更多的時間</p><p>留言提出不少正向的看法與建議，希望作者不要放棄 IaC XD</p><ul><li>作者對於 IaC 有了錯誤的期待，IaC 並不是要讓任何人的生活變得更簡單，它是要讓基礎設施的管理工作有辦法被重複化，進而變得更可靠，最終提高擴展性</li><li>對待 IaC 也需要跟其他的程式語言一樣，你必須要有單元測試和整合測試，而且不要去接受環境偏移的發生，當因為緊急事件的發生不得以手動處理後，你要盡快讓一切的管理工作再次回到 IaC 的管控之下</li><li>雖然短期要花費比較多的時間和感到痛苦，但長期來說，你的基礎設施會變得更可靠，更容易被管理，進而讓你的團隊可以更專注在開發新的功能上</li></ul><h3 id="5-common-pitfalls-in-Infrastructure-as-Code"><a href="#5-common-pitfalls-in-Infrastructure-as-Code" class="headerlink" title="5 common pitfalls in Infrastructure as Code"></a><a href="https://itnext.io/5-common-pitfalls-in-infrastructure-as-code-3637ab6b02e0" target="_blank" rel="noopener">5 common pitfalls in Infrastructure as Code</a></h3><p>這篇文章作者跟大家分享使用 IaC 時常見五個陷阱，讓大家避免掉這些陷阱，讓 IaC 的管理更加順利</p><ul><li>Pets vs Cattle: 避免像對待伺服器或是基礎設施的固定資源一般，例如給予特定的名字與 IP；而是要將它們視為可以被快速替換的資源，這樣才能讓你的基礎設施更像是應用程序而不是實體伺服器</li><li>Virtualized Data Center: 不要把實體資料中心的概念移植到 IaC 來，很多問題是雲端供應商自己要去擔心的，你應該 100% 的虛擬化的去使用它，例如可以使用多個供應商，根據需求來增加或減少資源達到成本最佳化，將服務的負載量分散到第三方服務去</li><li>Not understanding relation between infrastructure and data: 因為害怕會遺失或是損害資料而導致 IaC 的採用率低下，其實可以透過簡單的分析來得知 IaC 要怎麼安全地應用在有正式環境資料的情境之下</li><li>Breaking Dev and Ops: 透過 IaC 來打破 Dev 與 Ops 的藩籬，讓他們可以一起合作，擁有持續不間斷且自動化的流程</li><li>Using IaC as fancy deployment scripts: IaC 並不是花俏的腳本語言，要從 IaC 中獲取最大的好處，就是要嘗試像對待一般的應用程式語言一樣來對待他，例如要有版本控制，它也要有自己的 CI/CD Pipeline</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li><li><a href="https://ken00535.medium.com/" target="_blank" rel="noopener">@Ken</a> - 興趣是符號學的軟體開發者，喜歡探索事物的本質，偶爾會寫點東西。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 158 期 - 順利度過雙十一了嗎？</title>
      <link href="/2022/11/15/158-safe-1111/"/>
      <url>/2022/11/15/158-safe-1111/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Understanding-Exactly-once-Semantics"><a href="#Understanding-Exactly-once-Semantics" class="headerlink" title="Understanding Exactly-once Semantics"></a><a href="https://medium.com/starbugs/understanding-exactly-once-semantics-338a56d8ba6a" target="_blank" rel="noopener">Understanding Exactly-once Semantics</a></h3><p>大家好，這週的專欄是 Starbugs Writers 俊廷 所發表的 「Understanding Exactly-once Semantics」。在服務與服務之間傳送消息時，因為網路可能會不穩定，所以要做到「只處理一次」消息其實不是一件容易的事情。因此這週的專欄想要跟大家分享「只處理一次」在 Producer、Consumer  跟 Sink 的角度可能會遇到怎麼樣的困難，以及相對應的解決方式。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Why-you-should-never-use-px-to-set-font-size-in-CSS"><a href="#Why-you-should-never-use-px-to-set-font-size-in-CSS" class="headerlink" title="Why you should never use px to set font-size in CSS"></a><a href="https://joshcollinsworth.com/blog/never-use-px-for-font-size" target="_blank" rel="noopener">Why you should never use px to set font-size in CSS</a></h3><p>這有點標題殺人的意味，但是作者只是想在文章裡面表達，開發者要清楚他在 CSS 內所使用的單位意義是什麼是非常重要的事。</p><h3 id="Improve-your-TypeScript-Skills-with-Type-Challenges"><a href="#Improve-your-TypeScript-Skills-with-Type-Challenges" class="headerlink" title="Improve your TypeScript Skills with Type Challenges"></a><a href="https://thenewstack.io/improve-your-typescript-skills-with-type-challenges/" target="_blank" rel="noopener">Improve your TypeScript Skills with Type Challenges</a></h3><p>在 GitHub 上面有一個 <a href="https://github.com/type-challenges/type-challenges" target="_blank" rel="noopener">type-challenges</a>，裡面有許多關於 TypeScript 的型別問題，如果你已經學會基本的 TypeScript 且想要更深入了解型別原理的話，就很適合挑戰這個 repo！</p><h3 id="5-websites-to-learn-Frontend-web-development-faster"><a href="#5-websites-to-learn-Frontend-web-development-faster" class="headerlink" title="5 websites to learn Frontend-web development faster"></a><a href="https://dev.to/qbentil/5-websites-to-learn-frontend-web-development-faster-3cid" target="_blank" rel="noopener">5 websites to learn Frontend-web development faster</a></h3><p>在文章中列出了 5 個網站可以幫助你學習有關前端開發的技能，其中最喜歡的是第一個網站 <a href="https://exercism.org/" target="_blank" rel="noopener">exercism</a> 能夠根據你想學習的技能繪出學習路線，讓在學習時不會突然迷失下一步的方向。</p><h2 id="軟體工程"><a href="#軟體工程" class="headerlink" title="軟體工程"></a>軟體工程</h2><h3 id="團隊協作-Git-Flow"><a href="#團隊協作-Git-Flow" class="headerlink" title="團隊協作 Git Flow"></a><a href="https://link.medium.com/1A7x4xzZjub" target="_blank" rel="noopener">團隊協作 Git Flow</a></h3><p>為了讓工程師們可以有效率的協作，很多公司都會使用 Git Flow 或 Github Flow 來進行開發，這篇文章詳細解釋了 Git Flow 到底解決了什麼問題、已經實際的開發流程會長什麼樣子，推薦給未來可能會進入軟體業的莘莘學子們～</p><h3 id="抽象層-—-重要的幾件事"><a href="#抽象層-—-重要的幾件事" class="headerlink" title="抽象層 — 重要的幾件事"></a><a href="https://blog.heron.me/%E6%8A%BD%E8%B1%A1%E5%B1%A4-%E9%87%8D%E8%A6%81%E7%9A%84%E5%B9%BE%E4%BB%B6%E4%BA%8B-dd354a38c52b" target="_blank" rel="noopener">抽象層 — 重要的幾件事</a></h3><p>程式寫久了，就會發現在寫程式的過程中，常常會需要把底層的東西給抽象化，如此一來我們才可以從更高的層次來思考如何解決問題。而關於抽象化，這篇文章舉了幾個很生活化的例子，文章不長建議大家都可以讀讀看。</p><h3 id="Fundamental-Software-Architectural-Patterns"><a href="#Fundamental-Software-Architectural-Patterns" class="headerlink" title="Fundamental Software Architectural Patterns"></a><a href="https://medium.com/@liams_o/fundamental-software-architectural-patterns-663440c5f9a5" target="_blank" rel="noopener">Fundamental Software Architectural Patterns</a></h3><p>在看很多協定、函式庫的架構時，會發現有一些 pattern 是很常見到的，譬如 TCP/IP 就是以 Layer Pattern 來設計，而 Docker 則是用上了 Client Server Pattern。學習這些 pattern 可以讓我們參考前人的經驗，設計出更好的軟體。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="17-DevOps-Metrics-You-Should-Be-Tracking"><a href="#17-DevOps-Metrics-You-Should-Be-Tracking" class="headerlink" title="17 DevOps Metrics You Should Be Tracking"></a><a href="https://dzone.com/articles/17-devops-metrics-you-should-be-tracking" target="_blank" rel="noopener">17 DevOps Metrics You Should Be Tracking</a></h3><p>除了服務 metrics 之外，作者建議 17 個 DevOps 相關的 metrics 也需要被追蹤，metrics 主要的方向有：<!-- summary --></p><ul><li>DORA Metrics，用於測量組織開發</li><li>Cycle Time，另外一種測量組織開發產能的 metric</li><li>品質，可以整合在 CI pipeline 做測量</li><li>客戶的回饋</li><li>員工滿意度，對於文件、意見是否被聆聽到、組織是否接受失敗等等</li><li>CI 平均所花的時間、一天跑幾次、壞掉的恢復時間、測試失敗率和成功率</li><li>穩定率，用來測量 CICD pipeline 是否會因不明原因失敗</li><li>Code Coverage</li><li>錯誤逃逸率，測量有多少正式生產環境的錯誤是 CICD pipeline 裡沒有偵測到的</li><li>正常運行時間</li><li>SLI（Service Level Indicator）</li><li>平均意外察覺時間，當服務發生意外時，要多久 on-call 人員才會被分配搶救任務</li><li>平均意外發生時間，當新的功能上線後多久才會有意外</li></ul><h3 id="Technology-in-the-Cloud-Native-Maturity-Model"><a href="#Technology-in-the-Cloud-Native-Maturity-Model" class="headerlink" title="Technology in the Cloud Native Maturity Model"></a><a href="https://www.cncf.io/blog/2022/11/09/technology-in-the-cloud-native-maturity-model/" target="_blank" rel="noopener">Technology in the Cloud Native Maturity Model</a></h3><p>CNMM（Cloud Native Maturity Model）用於檢視組織 Cloud Native 轉型是否成熟，並且以 5 個面向來做分析：商業產出、人、政策、流程和技術。除了本文外，可以直接看 CNCF GitHub 有更詳細的<a href="https://github.com/cncf/cartografos/blob/main/reference/prologue.md" target="_blank" rel="noopener">說明</a></p><h3 id="9-Best-Practices-for-Designing-Microservice-Architectures"><a href="#9-Best-Practices-for-Designing-Microservice-Architectures" class="headerlink" title="9 Best Practices for Designing Microservice Architectures"></a><a href="https://traefik.io/blog/9-best-practices-for-designing-microservice-architectures/" target="_blank" rel="noopener">9 Best Practices for Designing Microservice Architectures</a></h3><p>微服務一直都不容易駕馭，作者推薦 9 個實踐方法（但裡面只有 8 點）讓微服務架構設計更成功：</p><ol><li>嘗試事件風暴</li><li>實踐情境繪製</li><li>在一開始規劃好網路</li><li>盡量自動化</li><li>了解遷移到微服務真正的原因是什麼</li><li>工具互動性保持簡單</li><li>架構保持彈性</li><li>考慮使用混沌工程</li></ol><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><h3 id="Why-you-shouldn’t-use-Kubernetes"><a href="#Why-you-shouldn’t-use-Kubernetes" class="headerlink" title="Why you shouldn’t use Kubernetes"></a><a href="https://medium.paulbrissaud.fr/why-you-shouldnt-use-kubernetes-6004493259ae" target="_blank" rel="noopener">Why you shouldn’t use Kubernetes</a></h3><p>其實每過一段時間就會有人提出不一定需要使用 Kubernetes 的想法，這次看到這篇文所提出的論點為 1) 太複雜，因為一座嶄新的 K8s Cluster 其實是無法使用的，你必須要安裝適合自己的 Ingress Controller，或是 Storage Provider 給 Persistent Volume 使用，同理可證，為了監控，安全性或是其他的功能，你就需要再安裝更多的套件，這些額外安裝的東西都會需要有人熟悉且去維護它，除此之外也耗費了不少的 CPU 與 Memory 資源</p><!-- summary --><p>再來是太昂貴，因為 K8s Cluster 就跟其他的分散式系統一樣，會需要更多額外的資源來確保可用性與擴展性，如同前一點所述，你為了讓 K8s 變得堪用，你必須要安裝超多額外的東西，後面當然就是更多反應在帳單的雲端資源，除此之外應用服務的部屬方式也必須要改變，所以作者建議大家可以考慮看看先使用其他的 PaaS 或是 FaaS 平台來滿足需求，而不一定要在一開始就選擇使用 K8s 這麼龐大的解決方案</p><h3 id="Selenium-Grid-Using-K8S"><a href="#Selenium-Grid-Using-K8S" class="headerlink" title="Selenium Grid Using K8S"></a><a href="https://medium.com/@mohdjeeshan007/selenium-grid-using-k8s-fe01e1f84456" target="_blank" rel="noopener">Selenium Grid Using K8S</a></h3><p>對於瀏覽器自動化測試有經驗的人，應該或多或少都會聽過 Selenium，而 Selenium Grid 是可以讓自動化測試平行運行在多台機器中的方式，這篇文章便是要分享如何將 Selenium Grid 整合到 K8s Cluster 中，讓自動化測試可以平行化第運行在 K8s Cluster 中，讓測試人員可以事半功倍！</p><h3 id="How-to-validate-Kubernetes-YAML-files"><a href="#How-to-validate-Kubernetes-YAML-files" class="headerlink" title="How to validate Kubernetes YAML files"></a><a href="https://www.cncf.io/blog/2022/11/11/how-to-validate-kubernetes-yaml-files/" target="_blank" rel="noopener">How to validate Kubernetes YAML files</a></h3><p>活在當年的 IT 領域中應該很難避免去使用 YAML 檔案，甚至有人都會戲謔地稱自以為 YAML 工程師，而這篇發布到 Cloud Native 部落格的文章便想要跟大家分享如何去驗證準備要給 Kubernetes 使用的 YAML 檔案，文中提到驗證的方式可以從幾個面向來看，分別是結構，語義和安全性；而在驗證時的最佳準則就是確保 Shift Left 的精神落實，讓 DevOps 往 DevSecOps 邁進，對於此議題有興趣的朋友可以參閱內文</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 157 期 - 立冬不是張立東</title>
      <link href="/2022/11/08/157-beginning-of-winter/"/>
      <url>/2022/11/08/157-beginning-of-winter/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Hello-Prometheus-Prometheus-from-zero"><a href="#Hello-Prometheus-Prometheus-from-zero" class="headerlink" title="Hello! Prometheus. Prometheus from zero."></a><a href="https://medium.com/starbugs/hello-prometheus-ba26a916bfe9" target="_blank" rel="noopener">Hello! Prometheus. Prometheus from zero.</a></h3><p>Prometheus 目前無疑是 Cloud Native 監控的第一把交椅，此文章從 Prometheus 本身開始介紹起，接著詳細的解說如何讓自己開發的服務可以被 Prometheus 監控，並且透過 Docker Compose 來建立一個 Prometheus + Grafana 的監控環境，讓讀者可以快速的上手 Prometheus</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-New-CSS-Media-Query-Range-Syntax"><a href="#The-New-CSS-Media-Query-Range-Syntax" class="headerlink" title="The New CSS Media Query Range Syntax"></a><a href="https://css-tricks.com/the-new-css-media-query-range-syntax/" target="_blank" rel="noopener">The New CSS Media Query Range Syntax</a></h3><p>在前端切版時，為了實作響應式的網站，我們通常會使用 CSS 提供的 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries" target="_blank" rel="noopener">Media Queries</a> 為目標的條件設置對應的 CSS 給頁面上的元素，而在 Media Queries Level 4 規範出現一種新語法，讓我們可以使用常見的數學運算符（例如：&gt;和 &lt;）來定義作用目標的寬度！今後說不定就和 <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries" target="_blank" rel="noopener">Media Queries</a> 內的 <code>min-width</code> 或 <code>max-width</code> 道別了。</p><h3 id="Understanding-JavaScript-closure-and-JavaScript-scope"><a href="#Understanding-JavaScript-closure-and-JavaScript-scope" class="headerlink" title="Understanding JavaScript closure and JavaScript scope"></a><a href="https://hackernoon.com/understanding-javascript-closure-and-javascript-scope" target="_blank" rel="noopener">Understanding JavaScript closure and JavaScript scope</a></h3><p>在文章裡作者解釋了 JavaScript 的 closure 和變數或函式的作用域，並比較用 ES6 的 const 和 let 宣告的變數對於作用域的範圍有何不同，最後也推薦幾個使用 closure 的實際案例和使用的優缺點。</p><h3 id="JavaScript-Under-The-Hood-Advanced-Concepts-Developers-Should-Know"><a href="#JavaScript-Under-The-Hood-Advanced-Concepts-Developers-Should-Know" class="headerlink" title="JavaScript Under The Hood: Advanced Concepts Developers Should Know"></a><a href="https://blog.bitsrc.io/javascript-under-the-hood-advanced-concepts-developers-should-know-a89ddbb11228" target="_blank" rel="noopener">JavaScript Under The Hood: Advanced Concepts Developers Should Know</a></h3><p>如果你還是 JavaScript 的初學者，而且對一些行為產生的結果感到困惑，那可能就需要花一些時間認識「引擎蓋下的 JavaScript 了」！文中提到幾個在 JavaScript 中重要的原理，其中包含了 Scope Chain、Hoisting、Asynchronous、Execution Context 和 Call Stack。一次讀完可能會有點吃力，建議可以從最近有感受到的部分開始讀就好，不然沒深刻的印象很容易就忘記了。 😂</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="從-graphql-go-轉換到-gqlgen"><a href="#從-graphql-go-轉換到-gqlgen" class="headerlink" title="從 graphql-go 轉換到 gqlgen"></a><a href="https://blog.wu-boy.com/2020/04/switch-graphql-go-to-gqlgen-in-golang/" target="_blank" rel="noopener">從 graphql-go 轉換到 gqlgen</a></h3><p>有在 Go 上寫過 GraphQL Server 的朋友們可能都聽過 <code>graphql-go</code>，雖然他歷史比較悠久，但是他的維護狀況不是很好，所以作者就把他的專案轉移到 gqlgen 上面了，這篇文章就是他的心得分享，如果你也在用 graphql-go，可以參考看看</p><h3 id="CRUD-API-with-Go-and-PostgreSQL"><a href="#CRUD-API-with-Go-and-PostgreSQL" class="headerlink" title="CRUD API with Go and PostgreSQL"></a><a href="https://dev.to/chetansj27/crud-api-with-go-and-postgresql-411n" target="_blank" rel="noopener">CRUD API with Go and PostgreSQL</a></h3><p>如果你才剛開始接觸 Go 的話，這篇文章是一個很簡單的 CRUD API 實作，用到的技術有使用 mux、Gorm 跟 PostgreSQL，如果你想要熟悉一下這幾個技術，可以看這篇文章來快速入門～</p><h3 id="Processing-Large-Files-with-Go"><a href="#Processing-Large-Files-with-Go" class="headerlink" title="Processing Large Files with Go"></a><a href="https://medium.com/@snassr/processing-large-files-in-go-golang-6ea87effbfe2" target="_blank" rel="noopener">Processing Large Files with Go</a></h3><p>大家有使用 Go 來處理大檔案的經驗嗎？這篇文章講了一個處理巨大 csv 範例，而且在處理的過程中也善用了 Goroutine 來把效能榨乾，如果你也有處理大檔案的需求，可以看看這篇文章的實作方式</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-to-Install-and-Run-Jenkins-With-Docker-Compose"><a href="#How-to-Install-and-Run-Jenkins-With-Docker-Compose" class="headerlink" title="How to Install and Run Jenkins With Docker Compose"></a><a href="https://www.cloudbees.com/blog/how-to-install-and-run-jenkins-with-docker-compose" target="_blank" rel="noopener">How to Install and Run Jenkins With Docker Compose</a></h3><p>現在已經有很多 CICD 工具讓人很好上手，但不能否認的是，Jenkins 在業界還是佔有一席之地。假如想要在自己的電腦快速搭建一個 Jenkins 實驗環境該怎麼辦呢？專門提供 Jenkins 服務 CloudBees 公司寫了一篇圖文並茂的以 docker-compose 快速建立環境的文章，方便讓大家做快速的測試。</p><h3 id="Automate-Terraform-documentation-like-a-pro"><a href="#Automate-Terraform-documentation-like-a-pro" class="headerlink" title="Automate Terraform documentation like a pro!"></a><a href="https://medium.com/google-cloud/automate-terraform-documentation-like-a-pro-ed3e19998808" target="_blank" rel="noopener">Automate Terraform documentation like a pro!</a></h3><p>當 Terraform module 開發完畢時總得寫些文件讓其他團隊知道如何使用，於是作者介紹 <a href="https://terraform-docs.io/" target="_blank" rel="noopener">terraform-docs</a> 可以快速生成 Makrdown 或者 AsciiDoc 文件，最好的情況就是把這工具整合進 CI 的流程裡。</p><h3 id="How-DoorDash-Ensures-Velocity-and-Reliability-through-Policy-Automation"><a href="#How-DoorDash-Ensures-Velocity-and-Reliability-through-Policy-Automation" class="headerlink" title="How DoorDash Ensures Velocity and Reliability through Policy Automation"></a><a href="https://doordash.engineering/2022/09/20/how-doordash-ensures-velocity-and-reliability-through-policy-automation/" target="_blank" rel="noopener">How DoorDash Ensures Velocity and Reliability through Policy Automation</a></h3><p>DoorDash 分享了他們 Infrastructure as Code 和 Policy as Code 而工具就是 <a href="https://www.terraform.io/" target="_blank" rel="noopener">Terraform</a> 和 <a href="https://www.openpolicyagent.org/" target="_blank" rel="noopener">OPA</a> 使用的經驗。OPA 內容會使用 <a href="https://www.conftest.dev/" target="_blank" rel="noopener">Conftest</a> 做檢查，在使用 Policy as Code 的建議有：</p><ul><li>重要的 resources 改動應該要給不同相關的團隊做程式碼審查</li><li>Terraform modules 的改動影響 infra 是可以接受的，只要工程師依照 cloud resource 規定就可以讓批准自動化</li><li>特定的操作只能限定在特定的 resources 內</li><li>程式改動必須要有資安團隊審視過</li><li>確保 cloud resources 的 tags 都有被使用到</li><li>成本上的設定可以對 infra 做更改</li><li>對 resource type 做審核，確保工程師寫 IaC 時可以使用到 reserved instances 或者折扣方案</li></ul><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><h3 id="Git-commit-messages-are-useless"><a href="#Git-commit-messages-are-useless" class="headerlink" title="Git commit messages are useless"></a><a href="https://blog.trunk.io/git-commit-messages-are-useless-c2f3c46f678e" target="_blank" rel="noopener">Git commit messages are useless</a></h3><p>作者覺得 Git Commit Message 根本就不被需要，就像沒有人在乎你早餐吃了什麼一樣XD 作者的論述與推薦作法如下，(但 Main Branch 的 Commit Message 還是相當重要的) 大家是否也這樣覺得呢？這篇文章的回覆滿多人不認同作者的觀點的，大家可以去看看。</p><ul><li>因為 Commit Message 在 PR Branch 其實沒有太大的意義，讓 PR 最後被 squash-merged 到 Main Branch 就好，這時設定 GitHub 以 PR 名稱當成 Commit Message 就可以了，而且程式本身的註解才是重點</li><li>Git CLI 最近也添加了一個可以讓開發者不需要寫 Commit Message 的 Flag <code>--allow-empty-message</code>，推薦大家可以使用 command alias 的功能來設定 git commit 指令 <code>git config --global alias.nccommit &#39;commit -a --allow-empty-message -&#39;</code></li><li>最後就是要記得設定 GitHub Branch Protection 不允許任何人直接 Commit 到 Main Branch</li></ul><h3 id="m1guelpf-auto-commit"><a href="#m1guelpf-auto-commit" class="headerlink" title="m1guelpf/auto-commit"></a><a href="https://github.com/m1guelpf/auto-commit" target="_blank" rel="noopener">m1guelpf/auto-commit</a></h3><p>auto-commit 是一個可以根據你寫的程式碼自動產生 Commit Message 的小工具 (其使用 Rust 開發且利用了 OpenAI Codex)，這樣一來就可以不用再去掰要寫什麼 Commit Message 了XD</p><h3 id="Want-Cleaner-Code-Use-the-Rule-of-Six"><a href="#Want-Cleaner-Code-Use-the-Rule-of-Six" class="headerlink" title="Want Cleaner Code? Use the Rule of Six"></a><a href="https://betterprogramming.pub/want-cleaner-code-use-the-rule-of-six-c21635ee2185" target="_blank" rel="noopener">Want Cleaner Code? Use the Rule of Six</a></h3><p>每個人都想要寫出 Clean Code，也有不少書籍在談論這個主題，不過你不用急著把書看完才能夠寫出 Clean Code，這篇文章提供了簡單的規則 (Rule of Six) 與詳細範例，讓開發者輕易寫出不令人感到混淆的程式碼</p><ul><li>一行程式碼盡量只做一件事</li><li>拆解太複雜的程式碼成多行 (SIMPLE: Split Into Multiple Lines)</li><li>將功能一樣的程式碼寫成函示 (MORE: Move Out and Rewrite as a Function)</li><li>多練習同時使用 SIMPLE 與 MORE 來撰寫程式碼</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 156 期 - 萬聖誕節平安</title>
      <link href="/2022/11/01/156-engineers-confuse-halloween-with-christmas/"/>
      <url>/2022/11/01/156-engineers-confuse-halloween-with-christmas/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="善用-Go-Fuzzing，幫助你寫出更完整的單元測試"><a href="#善用-Go-Fuzzing，幫助你寫出更完整的單元測試" class="headerlink" title="善用 Go Fuzzing，幫助你寫出更完整的單元測試"></a><a href="https://medium.com/starbugs/utilize-go-fuzzing-to-write-better-unit-tests-80bd37cd4e38" target="_blank" rel="noopener">善用 Go Fuzzing，幫助你寫出更完整的單元測試</a></h3><p>大家好，又到了一年一度的萬聖節，而工程師最常在這個節日搞混萬聖節跟聖誕節了，因為對工程師而言 OCT 31 就等於 DEC 25 XD</p><p>而這週的專欄，因為前陣子小弟有幸收到 MOPCON 的邀約去擔任講者，分享的題目就是 Go 在今年推出的新 feature — Fuzzing Test。為了讓更多人知道 Fuzzing 這個有趣的新功能，今天的專欄會用幾個簡單的例子，一步一步帶大家認識 Go Fuzzing～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Fully-Typed-Web-Apps"><a href="#Fully-Typed-Web-Apps" class="headerlink" title="Fully Typed Web Apps"></a><a href="https://www.epicweb.dev/fully-typed-web-apps" target="_blank" rel="noopener">Fully Typed Web Apps</a></h3><p>文章中表示 TypeScript 是在 Web 產業中相當重要的技術之一，但對作者來說，TypeScript 的型別不單單只是應用在前端，更是貫穿後端到前端之間的型別！在這篇文章中會講解從端對端（這裡的端對端是指從資料庫的型別通過後端，最後到 UI 上再返回資料庫）的型別安全性有多麼出色以及令人興奮！</p><h3 id="Next-js-13"><a href="#Next-js-13" class="headerlink" title="Next.js 13"></a><a href="https://nextjs.org/blog/next-13" target="_blank" rel="noopener">Next.js 13</a></h3><p>在 <a href="https://nextjs.org/conf" target="_blank" rel="noopener">Next.js Conf</a> 中，官方宣佈 Next.js 13 關於 dynamic without limits 的幾個基礎：</p><ul><li><a href="https://nextjs.org/blog/next-13#app-directory-beta" target="_blank" rel="noopener">app/ Directory (beta)</a> - 更少的 JavaScript 檔案和程式碼</li><li><a href="https://nextjs.org/blog/next-13#introducing-turbopack-alpha" target="_blank" rel="noopener">Turbopack (alpha)</a> - 比 Webpack 和 Vite 速度更快</li><li><a href="https://nextjs.org/blog/next-13#nextimage" target="_blank" rel="noopener">New next/image (stable)</a> - 更容易設計排版的圖片元件</li><li><a href="https://nextjs.org/blog/next-13#nextfont" target="_blank" rel="noopener">New @next/font (beta)</a> - 可以方便地使用所有 Google 字體，並同時兼顧性能和隱私</li><li><a href="https://nextjs.org/blog/next-13#nextlink" target="_blank" rel="noopener">Improved next/link</a> - 不再需要在 <code>Link</code> 裡另外寫 a 標籤了</li></ul><p>如果想瞭解更多，可以到連結中看看有哪些驚奇的進展和更新！</p><h3 id="Introducing-Turbopack-Rust-based-successor-to-Webpack"><a href="#Introducing-Turbopack-Rust-based-successor-to-Webpack" class="headerlink" title="Introducing Turbopack: Rust-based successor to Webpack"></a><a href="https://vercel.com/blog/turbopack" target="_blank" rel="noopener">Introducing Turbopack: Rust-based successor to Webpack</a></h3><p>在 Webpack 的創建者 Tobias Koppers 的帶領下，Turbopack 在文章中宣稱將成為 Web 的新世代的打包工具，在今天開源後，未來會適用於所有框架。快點進文章中看看 Turbopack 到底多快、為什麼那麼快？以及它下一步會是什麼？</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Golang-for-JavaScript-developers"><a href="#Golang-for-JavaScript-developers" class="headerlink" title="Golang for JavaScript developers"></a><a href="https://deepu.tech/golang-for-javascript-developers-part-1/" target="_blank" rel="noopener">Golang for JavaScript developers</a></h3><p>最近想學 Go 的人越來越多了，這邊推薦這一系列文章，主要是在介紹 Golang 跟 JavaScript 的差異，如果你原本就會寫 JavaScript，而且想要開始想要學習 Go，那這兩篇文章可以幫助你快速上手 Go～</p><h3 id="Build-a-Tic-Tac-Toe-Game-In-the-GitHub-README-md-File"><a href="#Build-a-Tic-Tac-Toe-Game-In-the-GitHub-README-md-File" class="headerlink" title="Build a Tic-Tac-Toe Game In the GitHub README.md File"></a><a href="https://betterprogramming.pub/play-tic-tac-toe-from-github-readme-md-file-754539603380" target="_blank" rel="noopener">Build a Tic-Tac-Toe Game In the GitHub README.md File</a></h3><p>這篇文章很有趣，主要是在說要怎麼用 Markdown 跟 Go 在 Github 專案的 README 裡面寫一個真的可以玩的圈圈叉叉遊戲。如果只想玩玩看不想看文章的話，也可以直接滑到文章最底下的 <a href="https://github.com/sridhar-sp/tic-tac-toe" target="_blank" rel="noopener">Frontend — Readme.md</a>，然後直接點進去玩玩看。</p><h3 id="How-to-Write-Accurate-Benchmarks-in-Go"><a href="#How-to-Write-Accurate-Benchmarks-in-Go" class="headerlink" title="How to Write Accurate Benchmarks in Go"></a><a href="https://teivah.medium.com/how-to-write-accurate-benchmarks-in-go-4266d7dd1a95" target="_blank" rel="noopener">How to Write Accurate Benchmarks in Go</a></h3><p>在對 Go 的程式碼做 benchmark 的時候，其實有很多該注意的小地方，像是在設定好測試環境後應該要先重置 timer 才開始進行測試，或是在寫測試時要避免程式碼不小心被編譯器最佳化吃掉，如此一來才能得到真正準確的 benchmark 結果。</p><h2 id="網站開發"><a href="#網站開發" class="headerlink" title="網站開發"></a>網站開發</h2><h3 id="Shell-Script-最佳實踐"><a href="#Shell-Script-最佳實踐" class="headerlink" title="Shell Script 最佳實踐"></a><a href="https://sharats.me/posts/shell-script-best-practices/" target="_blank" rel="noopener">Shell Script 最佳實踐</a></h3><p>作者列出了 15 條原則撰寫 Shell Script 的原則，並且提供了一個模板讓大家參考。裡面的原則包含：</p><ul><li>使用 Bash!讓 Shell Script 具有可移植性和增加 DX 開發者體驗。</li><li>使用 <code>set -o errexit</code> 在第一行，這樣執行失敗的時候會跳出，而非繼續執行其他剩餘的指令。</li></ul><p>還有更多的 Shell Script 撇步在裡面</p><h3 id="Python-3-11-is-much-faster-than-3-8"><a href="#Python-3-11-is-much-faster-than-3-8" class="headerlink" title="Python 3.11 is much faster than 3.8"></a><a href="https://jott.live/markdown/py3.11_vs_3.8" target="_blank" rel="noopener">Python 3.11 is much faster than 3.8</a></h3><p>Python 3.11 問世了，有多快呢？這篇文章不僅比較了 Python 3.8，也與 JavaScript 和 C++ 比較了一番。</p><h3 id="VHS：-Your-CLI-home-video-recorder"><a href="#VHS：-Your-CLI-home-video-recorder" class="headerlink" title="VHS： Your CLI home video recorder"></a><a href="https://github.com/charmbracelet/vhs" target="_blank" rel="noopener">VHS： Your CLI home video recorder</a></h3><p>這個酷東西可以用編寫程式的方式來產生終端機操作指令的 Gif 動畫。對於撰寫教學文件的時候好方便啊。</p><h2 id="Career"><a href="#Career" class="headerlink" title="Career"></a>Career</h2><h3 id="How-Did-I-Double-My-Salary-as-Software-Engineer"><a href="#How-Did-I-Double-My-Salary-as-Software-Engineer" class="headerlink" title="How Did I Double My Salary as Software Engineer"></a><a href="https://medium.com/codex/how-did-i-double-my-salary-as-software-engineer-175bb6098080" target="_blank" rel="noopener">How Did I Double My Salary as Software Engineer</a></h3><p>怎麼讓薪水變成兩倍呢？看到這個標題以為是要談怎麼精進技術或是軟性技能方面的內容，結果作者直接給出那就做兩份工作的答案XD 文中內容主要想跟大家說怎麼達成一次從事兩份工作的訣竅，例如一定要是遠端的工作，盡量要是資深以上的職位，自己本身的各方面能力要有相當的程度，要能夠犧牲週末時間，要能夠在高壓下有效率的產出…等；至於要如何達到這些條件，作者還有提出施行計劃，詳情請參閱內文</p><h3 id="The-Reality-of-Being-a-Staff-Software-Engineer-Salary-Workload-and-How-To-Get-Started-2022"><a href="#The-Reality-of-Being-a-Staff-Software-Engineer-Salary-Workload-and-How-To-Get-Started-2022" class="headerlink" title="The Reality of Being a Staff Software Engineer: Salary, Workload, and How To Get Started (2022)"></a><a href="https://4dayweek.medium.com/the-reality-of-being-a-staff-software-engineer-salary-workload-and-how-to-get-started-2022-ecfd561f6bd2" target="_blank" rel="noopener">The Reality of Being a Staff Software Engineer: Salary, Workload, and How To Get Started (2022)</a></h3><p>雖然最近景氣不佳，但軟體業依然是未來數十年前景相對看好的產業，尤其是以美國來說，所以這篇 4 Day Week 的文章想要跟大家談一談 Staff SoftWare Engineer 這個職位，內容包含薪水的範圍 (10萬到30萬鎂)，工作內容主要會有哪一些 (建立團隊，領導關鍵軟體元件，系統與功能的設計…等)，職涯的發展該如何規劃 (技術軌或是管理軌)</p><h3 id="A-Compensation-Breakdown-From-Amazon-Microsoft-Google"><a href="#A-Compensation-Breakdown-From-Amazon-Microsoft-Google" class="headerlink" title="A Compensation Breakdown From Amazon, Microsoft, Google"></a><a href="https://levelup.gitconnected.com/my-salary-progression-from-amazon-microsoft-google-ec58d0c3ba01" target="_blank" rel="noopener">A Compensation Breakdown From Amazon, Microsoft, Google</a></h3><p>之前有分享過此作者對於 Amazon 與 Google 公司內軟體工程文化的<a href="https://alexcancode.medium.com/150-000-amazon-engineer-vs-300-000-google-engineer-b0976793cf56" target="_blank" rel="noopener">比較文</a>，他的 Medium 滿多跟找工作相關的文章，像這篇就是在分享他位於 Amazon(2020):$112,000，Microsoft(2021):$123,000 與 Google(2022):$169,000 三間公司所拿到的底薪與其詳細的薪資結構，有興趣的人可以直接參閱內文</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 155 期 - 庫拉皮卡總算有一點機會下船了！</title>
      <link href="/2022/10/25/155-container-scanning/"/>
      <url>/2022/10/25/155-container-scanning/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Container-Vulnerability-Scanning-—-Not-Just-Shift-Left-Testing"><a href="#Container-Vulnerability-Scanning-—-Not-Just-Shift-Left-Testing" class="headerlink" title="Container Vulnerability Scanning — Not Just Shift Left Testing"></a><a href="https://medium.com/starbugs/container-vulnerability-scanning-not-just-shift-left-testing-921b351322e1" target="_blank" rel="noopener">Container Vulnerability Scanning — Not Just Shift Left Testing</a></h3><p>近年來 DevSecOps 與 Shift Left Testing 在 DevOps 相關的技術討論中時常被提及，Container Scanning 便是其中一個相當重要的主題，一般想到的直覺做法就是在 CI/CD Pipeline 中加入 Container Image 掃描的步驟，當 Container Image 建置出來的時候就立即執行安全弱點掃描，假如掃描到風險高的安全弱點就將 CI/CD Pipeline 標為失敗，掃描不到具威脅性的安全弱點就允許部署到正式環境中，不過以資訊安全防禦方的角度來看，這樣就真的足夠了嗎？</p><p>答案當然是否定的，那麼要怎麼做會相對更安全，並且讓 DevSecOps 融入在開發流程的基因中，就是這篇文章想要探討的，文章會從什麼是 Container Scanning 開始談起，然後討論 Container 的生命週期，藉此暸解在每一個階段如何確保 Container 的安全無虞，最後提到當在 Container 中發現到安全弱點時該如何處置</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Futuristic-CSS"><a href="#Futuristic-CSS" class="headerlink" title="Futuristic CSS"></a><a href="https://www.smashingmagazine.com/2022/10/futuristic-css/" target="_blank" rel="noopener">Futuristic CSS</a></h3><p>作者他每年都會對開發者進行調查，詢問他們想要使用的工具和想學習的 CSS 技術（如果你也想成為數據之一，可以到<a href="https://survey.devographics.com/survey/state-of-css/2022" target="_blank" rel="noopener">這裡</a>）。而在這篇文章中作者則會推測未來的 CSS 可能會走向什麼趨勢，作者提出來的特性都有想要解決的問題，可以看看哪些痛點也存在你我之間。 😂</p><h3 id="Javascript-Proxy-Using-Javascript-Proxies-like-a-Pro"><a href="#Javascript-Proxy-Using-Javascript-Proxies-like-a-Pro" class="headerlink" title="Javascript Proxy: Using Javascript Proxies like a Pro"></a><a href="https://fjolt.com/article/javascript-proxy-object" target="_blank" rel="noopener">Javascript Proxy: Using Javascript Proxies like a Pro</a></h3><p>在不想要改變原有物件，但又需要在那之上增加一些行為的時候，使用 Proxy Pattern 通常都不失為一種解決方案，而且 Proxy 語法又是 JavaScript 本身提供的，使用起來真的相當方便！一起看看文章中的介紹吧！</p><h3 id="What-is-CORS"><a href="#What-is-CORS" class="headerlink" title="What is CORS?"></a><a href="https://dev.to/jpomykala/what-is-cors-11kf" target="_blank" rel="noopener">What is CORS?</a></h3><p>這篇文章會預設你已經擁有 HTTP 協定的相關知識（如果還不熟的話可以去看之前推薦的 <a href="https://howhttps.works/" target="_blank" rel="noopener">這篇超可愛的文章</a>），並向初學者說明的角度，用清楚的圖片解釋何謂 CORS，以及為什麼我們會碰到與它相關的錯誤。</p><h2 id="軟體工程"><a href="#軟體工程" class="headerlink" title="軟體工程"></a>軟體工程</h2><h3 id="如何進行-Code-Review"><a href="#如何進行-Code-Review" class="headerlink" title="如何進行 Code Review?"></a><a href="https://link.medium.com/lGZQcF4mhub" target="_blank" rel="noopener">如何進行 Code Review?</a></h3><p>為了讓程式碼的品質維持在一定水準之上，code review 這個步驟非常重要。但具體來說，在做 code review 時到底要注意哪些地方呢？這篇文章給出了非常多實質的建議，讓你可以從各個方面去審核程式碼，才不會讓 code review 變成只是 merge 前過過水的固定儀式。</p><h3 id="The-12-factor-App-筆記"><a href="#The-12-factor-App-筆記" class="headerlink" title="The 12 factor App 筆記"></a><a href="https://marcus116.blogspot.com/2020/09/architecture-12-factor-app.html" target="_blank" rel="noopener">The 12 factor App 筆記</a></h3><p>The 12 Factor App 這個概念雖然是好多年前發佈的了，但放到今日的軟體開發上還是非常有參考價值，在真的開始寫程式碼之前可以先參考 The 12 Factor App 的架構做設計，未來在開發、部署、維護的時候也許會比較輕鬆～</p><h3 id="15-fundamental-tips-on-REST-API-design"><a href="#15-fundamental-tips-on-REST-API-design" class="headerlink" title="15 fundamental tips on REST API design"></a><a href="https://medium.com/@liams_o/15-fundamental-tips-on-rest-api-design-9a05bcd42920" target="_blank" rel="noopener">15 fundamental tips on REST API design</a></h3><p>API 要怎麼設計一直都是門學問，有些設計得好那就算不讀文件也知道怎麼用，而有些亂寫一通的 API 就算有文件也是要讀得很辛苦才能搞懂（像是我公司的XD）。為了不想再看到爛 API，這篇文章分享了幾個在設計 REST API 時的重點，照著這個思維下去設計就能做出簡單、易讀、好用的 API Endpoint 喔～</p><h2 id="網頁開發"><a href="#網頁開發" class="headerlink" title="網頁開發"></a>網頁開發</h2><h3 id="When-life-gives-you-lemons-write-better-error-messages"><a href="#When-life-gives-you-lemons-write-better-error-messages" class="headerlink" title="When life gives you lemons, write better error messages"></a><a href="https://wix-ux.com/when-life-gives-you-lemons-write-better-error-messages-46c5223e1a2f" target="_blank" rel="noopener">When life gives you lemons, write better error messages</a></h3><p>怎麼樣的錯誤訊息是好的呢？好的錯誤訊息又可以帶給我們什麼好處？這篇文章示範了什麼是好的錯誤訊息與如何撰寫的原則。由 UX 設計師撰寫的文章，讓錯誤訊息閱讀起來更加的有好的使用者體驗。</p><h3 id="The-HTTP-crash-course-nobody-asked-for"><a href="#The-HTTP-crash-course-nobody-asked-for" class="headerlink" title="The HTTP crash course nobody asked for"></a><a href="https://fasterthanli.me/articles/the-http-crash-course-nobody-asked-for" target="_blank" rel="noopener">The HTTP crash course nobody asked for</a></h3><p>作者以一個 HTTP 維護者的身分，提供了一個 HTTP 的快速攻略。本教學使用的是 Cargo，一個 Rust 的套件管理工具。教學從 HTTP 1.1 開始逐步進化到 HTTP 2 的過程。</p><h3 id="SHA-3-Buffer-Overflow"><a href="#SHA-3-Buffer-Overflow" class="headerlink" title="SHA-3 Buffer Overflow"></a><a href="https://mouha.be/sha-3-buffer-overflow/" target="_blank" rel="noopener">SHA-3 Buffer Overflow</a></h3><p><a href="https://nvd.nist.gov/vuln/detail/CVE-2022-37454" target="_blank" rel="noopener">CVE-2022-37454</a>這個漏洞讓 <a href="https://github.com/python/cpython/issues/98517" target="_blank" rel="noopener">Python</a>, <a href="https://bugs.php.net/bug.php?id=81738" target="_blank" rel="noopener">PHP</a>, <a href="https://foss.heptapod.net/pypy/pypy/-/commit/860b897b2611a4099ef9c63ce848fdec89c74b31" target="_blank" rel="noopener">PyPy</a>, <a href="https://github.com/johanns/sha3/issues/17" target="_blank" rel="noopener">SHA3 for Ruby</a>, and <a href="https://github.com/XKCP/XKCP/security/advisories/GHSA-6w4m-2xhg-2658" target="_blank" rel="noopener">XKCP</a>。而 XKCP 則是 SHA-3 的官方設計者的實作。所以影響的範圍讓 Python, PHP　等等的腳本語言都受到了影響。這篇文章帶我們看看 SHA-3 造成資安問題的原因與過程。</p><h2 id="OpenSource"><a href="#OpenSource" class="headerlink" title="OpenSource"></a>OpenSource</h2><h3 id="Postgres-WASM"><a href="#Postgres-WASM" class="headerlink" title="Postgres WASM"></a><a href="https://github.com/snaplet/postgres-wasm" target="_blank" rel="noopener">Postgres WASM</a></h3><p>Postgres WASM 是一個運行於瀏覽器的 PostgreSQL Server，聽起來也太酷了，只要把該專案 <code>git clone</code> 下來之後執行 <code>cd packages/runtime &amp;&amp; npx serve</code>，就可以使用瀏覽器拜訪 <a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a> 來使用了！</p><h3 id="cidr"><a href="#cidr" class="headerlink" title="cidr"></a><a href="https://github.com/bschaatsbergen/cidr" target="_blank" rel="noopener">cidr</a></h3><p>身為一位 SRE 其實還滿常接觸到 IP Address 的，尤其是在設定防火牆規則的時候，對於 IP 的 CIDR 總是不像坐在旁邊的同事可以一眼就看出來他的範圍嗎？這時候就可以使用這個 cidr CLI 工具來偷作弊了，他可以幫你快速的計算出 CIDR 的範圍，告訴你這個 IP Address 是屬於哪個 CIDR 的！</p><h3 id="Revup"><a href="#Revup" class="headerlink" title="Revup"></a><a href="https://github.com/Skydio/revup" target="_blank" rel="noopener">Revup</a></h3><p>想要成為 10 倍速工程師嗎？那可以考慮看看使用這個 Revup 小工具，他可以協助開發人員平行處理 Git Pull Request，透過對於 Commit Message 動手腳讓開發人員可以在本機端就同時建立多個 Git Pull Request，並且一樣也可以透過 Commit Message 來對於特定的 Pull Requet 去做後續操作，除此之外還有很多跟 Git 相關的功能，可以讓開發人員更有效率的開發。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 154 期 - 工程師不會被同一個 Bug 擊倒兩次</title>
      <link href="/2022/10/18/154-programmer-will-not-be-defeated-twice-by-same-bug/"/>
      <url>/2022/10/18/154-programmer-will-not-be-defeated-twice-by-same-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="CSS-不曉得能不能像洋蔥一層一層的-Cascade-Layers-基本用法"><a href="#CSS-不曉得能不能像洋蔥一層一層的-Cascade-Layers-基本用法" class="headerlink" title="CSS | 不曉得能不能像洋蔥一層一層的 Cascade Layers - 基本用法"></a><a href="https://medium.com/starbugs/css-%E4%B8%8D%E6%9B%89%E5%BE%97%E8%83%BD%E4%B8%8D%E8%83%BD%E5%83%8F%E6%B4%8B%E8%94%A5%E4%B8%80%E5%B1%A4%E4%B8%80%E5%B1%A4%E7%9A%84-cascade-layers-%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95-fa44a1462508" target="_blank" rel="noopener">CSS | 不曉得能不能像洋蔥一層一層的 Cascade Layers - 基本用法</a></h3><p>Hi！大家好，我是神 Q 超人！這篇文章要介紹的 cascade layers ，就可以讓我們用像是圖層的方式定義 CSS，且就像繪圖的例子，不論 CSS selector 的優先級如何，只要是指定在同個元素上，後方圖層定義的樣式都會蓋掉先前的圖層所定義的相同樣式。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Web’s-Next-Transition"><a href="#The-Web’s-Next-Transition" class="headerlink" title="The Web’s Next Transition"></a><a href="https://www.epicweb.dev/the-webs-next-transition" target="_blank" rel="noopener">The Web’s Next Transition</a></h3><p>Web 開發的每個架構都有屬於他的好處以及痛點，而就是那些痛點促使我們不斷的進入到下一個新的架構。在文章會一一以下每種架構的優缺點：</p><ul><li>Multi-Page Apps (MPAs)</li><li>Progressively Enhanced Multi-Page Apps (PEMPAs)</li><li>Single Page Apps (SPAs)</li></ul><p>目前最流行的是 Single Page Apps，但我們正進入到另一個新架構的過渡期當中！</p><h3 id="【MVVM】如何手刻-Vue-的-Text-Interpolations-與-Data-Binding"><a href="#【MVVM】如何手刻-Vue-的-Text-Interpolations-與-Data-Binding" class="headerlink" title="【MVVM】如何手刻 Vue 的 Text Interpolations 與 Data Binding"></a><a href="https://medium.com/codememo/mvvm-%E5%A6%82%E4%BD%95%E6%89%8B%E5%88%BB-vue-%E7%9A%84-text-interpolations-%E8%88%87-data-binding-4f4f8442d1a6" target="_blank" rel="noopener">【MVVM】如何手刻 Vue 的 Text Interpolations 與 Data Binding</a></h3><p>作者會在文章中解釋如何用原生的 JavaScript 實作目前前端框架常見的資料綁定，其中會涉及到以下幾個知識和技術點：</p><ol><li>如何將 data 編譯到 HTML 的標記上 </li><li>如何使用 Array.reduce() 對 template 標記取值</li><li>如何使用 Proxy API 監聽 data 的 setter 以實現響應式數據綁定</li><li>使用訂閱/發佈模式的概念，收集需編譯的依賴文本對象</li><li>使用閉包 (Closure) 的概念，紀錄依賴對像</li><li>如何使用遞迴進行深層遍歷</li><li>如何做到「指哪打哪」的響應式</li></ol><h3 id="TypeScript-Type-Guards"><a href="#TypeScript-Type-Guards" class="headerlink" title="TypeScript: Type Guards"></a><a href="https://www.robinwieruch.de/typescript-type-guard/" target="_blank" rel="noopener">TypeScript: Type Guards</a></h3><p>前一陣子在讀 TypeScript 文件的時候有讀到 this-based type guards，和這篇文章一樣都是用 <code>XXX is Type</code> 檢查使用者自己定義的型別，以確保經過 type guard 的 value 型別。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="Dockerfile-good-practices-for-Node-and-NPM"><a href="#Dockerfile-good-practices-for-Node-and-NPM" class="headerlink" title="Dockerfile good practices for Node and NPM"></a><a href="https://adambrodziak.pl/dockerfile-good-practices-for-node-and-npm" target="_blank" rel="noopener">Dockerfile good practices for Node and NPM</a></h3><p>在幫 NodeJS 寫 Dockerfile 時，其實有滿多小地方都需要注意，像是要把 NODE_ENV 設定好、清 npm cache 讓 image 更小等等，這篇文章把這些小地方都列了出來，讓大家可以回去檢查看看自己的 Dockerfile~</p><h3 id="A-quick-guide-to-cell-phone-vibration-with-JavaScript"><a href="#A-quick-guide-to-cell-phone-vibration-with-JavaScript" class="headerlink" title="A quick guide to cell phone vibration with JavaScript"></a><a href="https://blog.petefowler.dev/a-quick-guide-to-cell-phone-vibration-with-javascript" target="_blank" rel="noopener">A quick guide to cell phone vibration with JavaScript</a></h3><p>原本我以為只有 native app 可以讓手機震動，但想不到現在網頁也可以透過 Vibration API 來讓手機震動了，這篇文章簡單介紹了怎麼寫 JS 讓手機震動、判斷手機支不支援震動、甚至還可以控制震動的持續長短，看完真的有種長知識的感覺</p><h3 id="Node-js-Best-Practices"><a href="#Node-js-Best-Practices" class="headerlink" title="Node.js Best Practices"></a><a href="https://github.com/goldbergyoni/nodebestpractices" target="_blank" rel="noopener">Node.js Best Practices</a></h3><p>這個 Github repo 搜集了非常非常多的 Node.js Best practice，雖然內容很不錯，但因為實在太多了可能要花一個月才能全部看完。建議大家可以收藏起來然後每天看一點點，哪天一不小心可能就看完了～</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><!-- summary --><h3 id="Learn-Kubernetes-The-Easy-Way"><a href="#Learn-Kubernetes-The-Easy-Way" class="headerlink" title="Learn Kubernetes - The Easy Way"></a><a href="https://programmingpercy.tech/blog/learn-kubernetes-the-easy-way" target="_blank" rel="noopener">Learn Kubernetes - The Easy Way</a></h3><p>假如你是一個軟體開發人員，應該時常會聽到 Kubernetes，畢竟他已經成為整個產業中 Container Orchestrator 的標準，作者當初剛開始學習 Kubernetes 時覺得很困難，因為其中有很多的東西需要學習，所以沒多久他就想要放棄了，也因為這個理由，所以他嘗試寫這篇教學文章來慢慢地將整個 K8s 需要知道的知識用簡單且好理解的方式一步一步給走過一輪，最終將可以完成一個提供 API 運行有資料庫的應用程式！</p><!-- summary --><h3 id="Kubernetes-Authentication-Sidecars-A-Revelation-in-Microservice-Architecture"><a href="#Kubernetes-Authentication-Sidecars-A-Revelation-in-Microservice-Architecture" class="headerlink" title="Kubernetes Authentication Sidecars: A Revelation in Microservice Architecture"></a><a href="https://betterprogramming.pub/kubernetes-authentication-sidecars-a-revelation-in-microservice-architecture-12c4608189ab" target="_blank" rel="noopener">Kubernetes Authentication Sidecars: A Revelation in Microservice Architecture</a></h3><p>身為一位軟體開發人員，我們總是花費大把的時間在設定 Authentication 或是除錯有關於 Authentication 的問題，你一定曾經卡在 Authentication 無法符合預期運作的坑裡，而隨著 MicroServiers 的大量採用，有越來越多的服務需要去實作 Authentication，而這篇文章想要跟大家介紹如何透過利用 Sidecar 的方式來統一處理 Authentication 的需求</p><h3 id="Securing-CI-CD-pipelines-through-security-gates-with-Kubescape"><a href="#Securing-CI-CD-pipelines-through-security-gates-with-Kubescape" class="headerlink" title="Securing CI/CD pipelines through security gates with Kubescape "></a><a href="https://www.cncf.io/blog/2022/10/14/securing-ci-cd-pipelines-through-security-gates-with-kubescape/" target="_blank" rel="noopener">Securing CI/CD pipelines through security gates with Kubescape </a></h3><p>DevOps 的概念讓程式碼透過更完善且自動化的 CI/CD 提升了服務的品質，然而在 Security 越來越重要的今天也有更多的 Zero-Day 威脅與錯誤的組態配置被引入到正式環境的系統當中，而在 CI/CD Process 越來越自動化的今天，如何在此過程中加入 Security Gate 來檢查與驗證系統的安全性就變得非常重要，而這篇文章就想要跟大家介紹如何在 CI/CD 的 Process 中透過 Kubescape 來檢查 Kubernetes 的安全性</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 153 期 - 如果你是 HTML，那希望我能是為你增添色彩的 CSS</title>
      <link href="/2022/10/11/153-i-hope-am-css-if-you-are-html/"/>
      <url>/2022/10/11/153-i-hope-am-css-if-you-are-html/</url>
      
        <content type="html"><![CDATA[<h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Future-of-the-Web-is-on-the-Edge"><a href="#The-Future-of-the-Web-is-on-the-Edge" class="headerlink" title="The Future of the Web is on the Edge"></a><a href="https://deno.com/blog/the-future-of-web-is-on-the-edge" target="_blank" rel="noopener">The Future of the Web is on the Edge</a></h3><p>文章標題上的 edge 是指你的網站或 APP 同時給在世界各地的 server 託管，讓 server 可以更靠近使用者一點，算是物理上的拉近使用者與 server 的距離，使得使用者能夠更快的得到 server 的回應，文章中除了比較各地的 TTFB 時間，還針對以下幾點解說 edge 的特性：</p><ul><li>更靠進使用者的 Caching</li><li>更少的 servers，更多的 serverless</li><li>更佳的性能</li><li>更好的安全性</li><li>更棒的開發體驗</li></ul><h3 id="A-Deep-Dive-Into-CSS-Grid-minmax"><a href="#A-Deep-Dive-Into-CSS-Grid-minmax" class="headerlink" title="A Deep Dive Into CSS Grid minmax()"></a><a href="https://ishadeed.com/article/css-grid-minmax/" target="_blank" rel="noopener">A Deep Dive Into CSS Grid minmax()</a></h3><p>CSS 的 grid 排版相當好用！且在 grid 系統裡面有個作者認為非常強大 <code>minmax()</code> 特性，使他寫了一篇文章，來當作一份完整的 <code>minmax()</code> 使用指南。在文章裡，程式碼、圖片、影片全都有！可以花一些時間慢慢看完。</p><h3 id="在-reduce-使用點點點-spread-operator-是效能上的-anti-pattern"><a href="#在-reduce-使用點點點-spread-operator-是效能上的-anti-pattern" class="headerlink" title="在 reduce 使用點點點 spread operator 是效能上的 anti-pattern"></a><a href="https://jason-memo.dev/posts/spread-in-reduce-is-a-perf-antipattern/" target="_blank" rel="noopener">在 reduce 使用點點點 spread operator 是效能上的 anti-pattern</a></h3><p>在一些 reduce 中，常常會為了使每個 object 都是 immutable 的而使用 spread operator 語法產生另一個新的 object，但也因為這樣會導致時間複雜度從 O(n) 變成 O(n^2)，雖然在大部分情況下，這麼做是不會顯著的影響到效能，但在真的需要優化的時候，還是可以注意一下這種寫法所產生出來的額外效能耗損。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="乾淨的-Golang-編碼-Clean-Go-code-系列"><a href="#乾淨的-Golang-編碼-Clean-Go-code-系列" class="headerlink" title="乾淨的 Golang 編碼 (Clean Go code) 系列"></a><a href="https://datapool.tw/2022/09/11/%e8%89%af%e5%a5%bd%e7%9a%84%e4%b9%be%e6%b7%a8%e7%9a%84-golang-%e7%b7%a8%e7%a2%bc-clean-go-code1/" target="_blank" rel="noopener">乾淨的 Golang 編碼 (Clean Go code) 系列</a></h3><p>把程式碼寫得乾淨漂亮從來不是一件容易的事，這一系列文章以 Go 為例分享了怎麼把程式跟註解都寫得更漂亮，讓你的 codebase 更好維護～</p><h3 id="Concurrency-isn’t-Always-Faster-in-Go"><a href="#Concurrency-isn’t-Always-Faster-in-Go" class="headerlink" title="Concurrency isn’t Always Faster in Go"></a><a href="https://link.medium.com/9fVkvAzOktb" target="_blank" rel="noopener">Concurrency isn’t Always Faster in Go</a></h3><p>因為有 Goroutine 的關係，在 Go 裡面很輕易就可以做到併發（Concurrency），但併發並不完全就代表高效能，如果沒有搞清楚各個 thread 什麼時候會執行，那可能還會比 sequential 執行來得更慢哦</p><h3 id="A-practical-approach-to-structuring-Golang-applications"><a href="#A-practical-approach-to-structuring-Golang-applications" class="headerlink" title="A practical approach to structuring Golang applications"></a><a href="https://dev.to/firdavs_kasymov/a-practical-approach-to-structuring-golang-applications-1cc2" target="_blank" rel="noopener">A practical approach to structuring Golang applications</a></h3><p>每次要開新專案時，都很煩惱資料夾的結構應該要怎麼拆分，而這篇文章介紹了一種還不錯的方法，大家可以參考看看</p><h2 id="Career"><a href="#Career" class="headerlink" title="Career"></a>Career</h2><h3 id="🤑-Medium-付費文章-150-000-Amazon-Engineer-vs-300-000-Google-Engineer"><a href="#🤑-Medium-付費文章-150-000-Amazon-Engineer-vs-300-000-Google-Engineer" class="headerlink" title="[🤑 Medium 付費文章] $150,000 Amazon Engineer vs. $300,000 Google Engineer"></a><a href="https://levelup.gitconnected.com/150-000-amazon-engineer-vs-300-000-google-engineer-b0976793cf56" target="_blank" rel="noopener">[🤑 Medium 付費文章] $150,000 Amazon Engineer vs. $300,000 Google Engineer</a></h3><p>作者在 2020 與 2022 分別加入了 Amazon 與 Google 這兩間科技巨頭當軟題工程師，文章中根據他的經驗分享了這兩間公司巨大的文化差異，例如：</p><ul><li>Amazon 外傳有著惡名昭彰的績效改善制度，每年績效墊底的 10% 員工會失去他們的工作，但作者表示他並沒有真的遇到過，但是這種存在於勞動力中的恐懼感阻礙了工程師的發展，畢竟當一個人太擔心如何保住工作，那麼就無法做好工作</li><li>Amazon 有一份希望員工遵守與實踐的工作守則，外傳的 16 項中作者從主管那裡只有聽到三項是一樣的，分別是 Ownership, Dive Deep 與 Customer Obsession，其中前兩項讓作者覺得就是在告訴人要自己把工作搞定，而且比較沒有團隊合作的感覺</li><li>Amazon 對於 Customer Obsession 這項則是讓作者有深刻的體會到 “顧客就是對的！” 這句話，但是當工程師始終把客戶放在首位時，就會會了趕快把東西趕出來而犧牲掉軟體的品質，你會需要為一個客戶的小投訴而放棄自己手頭上本來在做的事情，導致你總是在為客戶優化，而不是整個軟體的建設工作</li><li>Google 沒有所謂的工作領導守則，但內部流行著一句 “Build for Everyone” 的口號，當你是在為了所有人而建構軟體時，你就會開始思考如何去改善整個軟體建設工作，並專注於提升工程方面的生產力</li><li>Google 的內部文件有單一個團隊在負責，而且必須要互相都審視過才能夠更新，這導致了文件的品質相當的高；而且還可以在上廁所時看到寫程式的技巧與工具；有著全自動化的開發環境設定流程；程式碼必須讓具有該語言認證的專業人士審查過才行，因為畢竟 Bug 可以在早期的 Code Review 就被發現，而不是等到上線後才發現</li><li>Google 也特別注重員工福利，例如提供免費午餐與晚餐，還有健身房會員；當員工不用花時間在煮飯與打掃上時，就可以讓工作的時間更有效率；常常運動會讓人從壓力中釋放，保持更好的工作與生活平衡</li></ul><h3 id="🤑-Medium-付費文章-I-Reject-95-of-Developers-in-an-Interview-Here’s-How-to-Become-One-of-the-Top-5"><a href="#🤑-Medium-付費文章-I-Reject-95-of-Developers-in-an-Interview-Here’s-How-to-Become-One-of-the-Top-5" class="headerlink" title="[🤑 Medium 付費文章] I Reject 95% of Developers in an Interview: Here’s How to Become One of the Top 5%"></a><a href="https://betterprogramming.pub/i-reject-95-of-developers-in-an-interview-heres-how-to-become-one-of-the-top-5-aebf70ac427f" target="_blank" rel="noopener">[🤑 Medium 付費文章] I Reject 95% of Developers in an Interview: Here’s How to Become One of the Top 5%</a></h3><p>對於大多數想要尋找 Junior 工程師的公司來說，最好希望聘僱到的並不是一個有著厲害技能的人，而是這個人跟公司文化相吻合，而且未來有著成長的潛力，所以假如你是一個 Junior 工程師，你的長期貢獻遠比目前所具有的技能來的重要，因此面試的目的是需要證明和你工作會是良好的經驗，而且你會是一個有潛力成為優秀工程師的人！這篇文章便是想要跟大家分享如何達成這樣的一個目標，底下稍微列一下文章大綱，詳細內容請參閱原文：</p><ul><li>Communicate Your Intentions</li><li>Be Honest</li><li>Have a Positive Attitude</li><li>Be Trainable</li><li>Be Interested</li></ul><h3 id="Interview-Guide"><a href="#Interview-Guide" class="headerlink" title="Interview Guide"></a><a href="https://interviewguide.dev/" target="_blank" rel="noopener">Interview Guide</a></h3><p>Nick 是一個在微軟的資深軟體工程師，他參與過超過一百場軟體工程師的面試 (包含擔任面試者與面試官)，不管是如 FAANG 科技巨頭或是小新創公司的面試他都通過了，所以他決定把自己主觀的面試經驗寫成這份面試指南來回饋給社群，讓更多的人可以透過這份指南來準備面試，並且提升自己的面試機會！</p><h2 id="Hacker-News"><a href="#Hacker-News" class="headerlink" title="Hacker News"></a>Hacker News</h2><h3 id="Dutch-employee-fired-by-U-S-firm-for-shutting-off-webcam-awarded-€75-000-in-court"><a href="#Dutch-employee-fired-by-U-S-firm-for-shutting-off-webcam-awarded-€75-000-in-court" class="headerlink" title="Dutch employee fired by U.S. firm for shutting off webcam awarded €75,000 in court"></a><a href="https://nltimes.nl/2022/10/09/dutch-employee-fired-us-firm-shutting-webcam-awarded-eu75000-court" target="_blank" rel="noopener">Dutch employee fired by U.S. firm for shutting off webcam awarded €75,000 in court</a></h3><p>一個美國公司的員工，在遠端工作的時候因為拒絕打開事視訊鏡頭而被解雇，而荷蘭法院判定不當解雇而判給他 75000 歐元。該公司是一間叫做 Chetu Inc. 的位於佛羅里達的公司。</p><p>該員工被要求參加一個「糾正行為計畫」的虛擬訓練營，參加的期間必須保持視訊鏡頭的開啟。而當他在開啟兩天後，他覺得他的隱私被侵犯所以關閉了視訊鏡頭，公司因此解雇他。而他一狀告到荷蘭法院，法院判賠他 75000 歐元。</p><h3 id="How-to-catch-and-handle-errors-in-bash"><a href="#How-to-catch-and-handle-errors-in-bash" class="headerlink" title="How to catch and handle errors in bash"></a><a href="https://www.xmodulo.com/catch-handle-errors-bash.html" target="_blank" rel="noopener">How to catch and handle errors in bash</a></h3><p>如何在 Bash 中處理錯誤，這篇文章告訴你怎麼做</p><h3 id="Apple-asks-suppliers-to-shift-AirPods-Beats-production-to-India-Nikkei-Asia"><a href="#Apple-asks-suppliers-to-shift-AirPods-Beats-production-to-India-Nikkei-Asia" class="headerlink" title="Apple asks suppliers to shift AirPods, Beats production to India - Nikkei Asia"></a><a href="https://asia.nikkei.com/Spotlight/Supply-Chain/Apple-asks-suppliers-to-shift-AirPods-Beats-production-to-India" target="_blank" rel="noopener">Apple asks suppliers to shift AirPods, Beats production to India - Nikkei Asia</a></h3><p>蘋果要求供應商將 Airpods 與 Beats 生產線移動到印度，這個動作將全球供應鏈部屬至南亞國家，降低對中國的依賴，以因應中美貿易戰。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 152 期 - 要打！去練舞室打！</title>
      <link href="/2022/10/04/152-go-fighting/"/>
      <url>/2022/10/04/152-go-fighting/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-JavaScript-玩轉設計模式-如果你用了-Tree-結構，就不能錯過-Composite-Pattern（組合模式）"><a href="#用-JavaScript-玩轉設計模式-如果你用了-Tree-結構，就不能錯過-Composite-Pattern（組合模式）" class="headerlink" title="用 JavaScript 玩轉設計模式 | 如果你用了 Tree 結構，就不能錯過 Composite Pattern（組合模式）"></a><a href="https://medium.com/starbugs/%E7%94%A8-javascript-%E7%8E%A9%E8%BD%89%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E5%A6%82%E6%9E%9C%E4%BD%A0%E7%94%A8%E4%BA%86-tree-%E7%B5%90%E6%A7%8B-%E5%B0%B1%E4%B8%8D%E8%83%BD%E9%8C%AF%E9%81%8E-composite-pattern-%E7%B5%84%E5%90%88%E6%A8%A1%E5%BC%8F-8f15d5635d91" target="_blank" rel="noopener">用 JavaScript 玩轉設計模式 | 如果你用了 Tree 結構，就不能錯過 Composite Pattern（組合模式）</a></h3><p>Hi！大家好，我是神 Q 超人！這次要介紹的設計模式是 Composite Pattern（組合模式），當你的需求要求你將資料組成一個類似 tree 的結構時，即使你或是 tree 中的任一個節點都不理解自己以下的結構到底長什麼樣子，也還是能直接透過 tree 的 root 來操作或取得整體的行為或資料。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-write-maintainable-JavaScript-code-in-2023-—-Web-or-Node-js"><a href="#How-to-write-maintainable-JavaScript-code-in-2023-—-Web-or-Node-js" class="headerlink" title="How to write maintainable JavaScript code in 2023 — Web or Node.js"></a><a href="https://blog.devgenius.io/how-to-write-maintainable-javascript-code-in-2023-web-or-node-js-d66d8baead67" target="_blank" rel="noopener">How to write maintainable JavaScript code in 2023 — Web or Node.js</a></h3><p>作者提出幾個他認為寫出可維護的 JavaScript 的幾個要素，以下列出其中幾個：</p><ul><li>善用 TypeScript 帶來的各種好處</li><li>好好學習 JavaScript 和使用的 Framework</li><li>定義好撰寫的程式碼風格</li><li>撰寫單元測試或 E2E 測試</li></ul><p>雖然有些要素看似比較沒那麼重要，但是我也認為在學習一樣新的語言、工具或是 Framework 的話，好好的閱讀文件是絕對需要的！</p><h3 id="Hacking-JWT"><a href="#Hacking-JWT" class="headerlink" title="Hacking JWT"></a><a href="https://systemweakness.com/hacking-jwt-3324cba98210" target="_blank" rel="noopener">Hacking JWT</a></h3><p>JSON Web Tokens 經常用於前端對後端的 API 請求中確認權限，而作者會使用 <a href="https://github.com/ticarpi/jwt_tool" target="_blank" rel="noopener">jwt_tool</a> 來進行各種 JWT 的攻擊，在文章裡會介紹以下幾種攻擊方式：</p><ul><li>None Algorithm</li><li>Weak Secret</li><li>Key Confusion</li><li>Kid Parameter Injection</li><li>JKU Parameter Injection</li></ul><h3 id="HOW-HTTPS-WORKS"><a href="#HOW-HTTPS-WORKS" class="headerlink" title="HOW HTTPS WORKS"></a><a href="https://howhttps.works/" target="_blank" rel="noopener">HOW HTTPS WORKS</a></h3><p>超級無敵宇宙霹靂可愛，如果你在上班閱讀被主管看到還可以說你是在學習 https 的相關知識！這篇網站用漫畫的方式一格一格解釋為什麼需要 https 以及它能夠做什麼！閱讀起來完全沒有負擔，如果你已經受不了看那一堆非常 hardcode 的介紹文章，那絕對不能錯過這個！</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="Rust-and-Neovim-A-Thorough-Guide-and-Walkthrough"><a href="#Rust-and-Neovim-A-Thorough-Guide-and-Walkthrough" class="headerlink" title="Rust and Neovim - A Thorough Guide and Walkthrough"></a><a href="https://rsdlt.github.io/posts/rust-nvim-ide-guide-walkthrough-development-debug/" target="_blank" rel="noopener">Rust and Neovim - A Thorough Guide and Walkthrough</a></h3><p>雖然 Vim 已經是很古老的編輯器，但因為他的 plugin 非常多，而且又可以跟終端機很好的整合，所以還是有很多人在用。而這邊有一篇詳細的教學，教你怎麼把 Neovim + Rust 的開發環境設定好，讓你可以在 Vim 中舒服的寫 Rust～</p><h3 id="6-Recommendations-to-Improve-Your-Rust-Code"><a href="#6-Recommendations-to-Improve-Your-Rust-Code" class="headerlink" title="6 Recommendations to Improve Your Rust Code"></a><a href="https://betterprogramming.pub/rust-beginner-tips-8ecc2503517e" target="_blank" rel="noopener">6 Recommendations to Improve Your Rust Code</a></h3><p>這篇是給 Rust 新手的一些 tips 跟建議，可以讓你寫出更好更漂亮的程式碼，文章不長，但內容很實用～</p><h3 id="試用-Load-testing-工具-Drill"><a href="#試用-Load-testing-工具-Drill" class="headerlink" title="試用 Load testing 工具 - Drill"></a><a href="https://chengweichen.com/2021/07/drill-load-testing.html" target="_blank" rel="noopener">試用 Load testing 工具 - Drill</a></h3><p>因為 Rust 的速度很快，又可以編譯成單一 binary 檔，所以很適合用來寫 CLI 工具，像 Drill 這個 load testing 工具就是用 Rust 寫的，特性是使用起來非常簡單，有流量測試需求的話不妨試試看～</p><h2 id="OpenSource"><a href="#OpenSource" class="headerlink" title="OpenSource"></a>OpenSource</h2><h3 id="workerd"><a href="#workerd" class="headerlink" title="workerd"></a><a href="https://github.com/cloudflare/workerd" target="_blank" rel="noopener">workerd</a></h3><p><a href="https://workers.cloudflare.com/" target="_blank" rel="noopener">workers</a> 是 CloudFlare 所推出的 serverless runtime 解決方案，當初看到時覺得 CDN 這樣算不算撈過界了XD 而官方在最近宣布將其開源了，所以大家可以在自己的環境中使用 workderd 來架設 serverless 服務，不過現在還在 beta 階段，所以還是要小心使用！</p><h3 id="whisper"><a href="#whisper" class="headerlink" title="whisper"></a><a href="https://github.com/openai/whisper" target="_blank" rel="noopener">whisper</a></h3><p>Whisper 是最近由 OpenAI 所發表的自動語音辨識（ASR）系統，他透過大量的語音資料所訓練而來，而且他的模型也是開源的，所以大家可以自己來訓練一個模型，或是直接使用他來做一些有趣的事情，例如我就看到馬上有人利用他來<a href="https://github.com/sensahin/YouWhisper" target="_blank" rel="noopener">將 youtube 影片變成文字版</a>！</p><h3 id="mixctl"><a href="#mixctl" class="headerlink" title="mixctl"></a><a href="https://github.com/inlets/mixctl" target="_blank" rel="noopener">mixctl</a></h3><p>mixctl 是一個使用 golang 所開發的小巧 TCP Load Balancer，他主要是希望可以幫助使用者將架設於不同地方的多個服務透過單一個 TCP Tunnel 給串接起來，使用起來滿簡單的，只需要透過 yaml 格式將 routing 設定好，然後就可以透過 mixctl 來啟動這個 TCP Tunnel 了，感覺是本地端開發的好幫手！</p><h2 id="Hacker-News"><a href="#Hacker-News" class="headerlink" title="Hacker News"></a>Hacker News</h2><h3 id="120-Burned-Out-Tech-CEO-→-Warehouse-Associate"><a href="#120-Burned-Out-Tech-CEO-→-Warehouse-Associate" class="headerlink" title="120: Burned Out Tech CEO → Warehouse Associate"></a><a href="https://www.jasonshen.com/120/" target="_blank" rel="noopener">120: Burned Out Tech CEO → Warehouse Associate</a></h3><p>有著傑出的 23 年經驗的 CEO Philip Su 他對技術感到筋疲力盡(Burned out)了，取而代之的是一個不這麼理想的工作，一個 Amazon 的零售工作。</p><h3 id="Codebase-as-Database-Turning-the-IDE-Inside-Out-with-Datalog-Pete’s-Blog"><a href="#Codebase-as-Database-Turning-the-IDE-Inside-Out-with-Datalog-Pete’s-Blog" class="headerlink" title="Codebase as Database: Turning the IDE Inside Out with Datalog | Pete’s Blog"></a><a href="https://petevilter.me/post/datalog-typechecking/" target="_blank" rel="noopener">Codebase as Database: Turning the IDE Inside Out with Datalog | Pete’s Blog</a></h3><p>作者製作了一個 Datalog 的 IDE，Datalog 是一種大型資料庫的規範，正如 SQL 一樣。這個 IDE 能夠簡化 Datalog 的語法。</p><h3 id="hckr-news-Hacker-News-sorted-by-time"><a href="#hckr-news-Hacker-News-sorted-by-time" class="headerlink" title="hckr news - Hacker News sorted by time"></a><a href="https://hckrnews.com/" target="_blank" rel="noopener">hckr news - Hacker News sorted by time</a></h3><p>hckr news 是一個可以讓你依照時間排序瀏覽 Hacker News 的網站。介面滿舒服的，可以快速看到每天有哪些新的文章。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 151 期 - 希望地震能量已經釋放完畢 🤞</title>
      <link href="/2022/09/27/151-stack-overflow/"/>
      <url>/2022/09/27/151-stack-overflow/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="道理我都懂，但-Stack-到底為什麼會-Overflow"><a href="#道理我都懂，但-Stack-到底為什麼會-Overflow" class="headerlink" title="道理我都懂，但 Stack 到底為什麼會 Overflow"></a><a href="https://medium.com/starbugs/why-does-stack-overflow-occur-1f93e3035e9d" target="_blank" rel="noopener">道理我都懂，但 Stack 到底為什麼會 Overflow</a></h3><p>這週的專欄比較新手向一點。身為工程師，Stack Overflow 這網站大家都是熟到不能再熟。如果沒有他幫忙解決各種莫名其妙的錯誤，可能連設定環境都要搞半天，更不用說要開發了。</p><p>但今天要談的不是那個 Stack Overflow，而是要講程式在使用記憶體時，因為 call stack 堆太高了不小心把記憶體用完，所產生的 overflow。希望大家在看完這週的專欄後，都能夠對 process 的 memory layout 有更多一點的認識～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="React-I-Love-You-But-You’re-Bringing-Me-Down"><a href="#React-I-Love-You-But-You’re-Bringing-Me-Down" class="headerlink" title="React I Love You, But You’re Bringing Me Down"></a><a href="https://marmelab.com/blog/2022/09/20/react-i-love-you.html" target="_blank" rel="noopener">React I Love You, But You’re Bringing Me Down</a></h3><p>這篇文章的內容是作者給 React 的一封信，看看作者是如何從與 React 的初次見面開始，慢慢的對 React 感到失望，其中的問題包含了表單處理、性能問題還有 useEffect 產生的難懂的程式碼等等。這封信很長，可以慢慢看，如果你也和我一樣是從學 React 開始的前端工程師，看到一半真的會有想哭的感覺。 🥲</p><h3 id="前端應該掌握的瀏覽器測試技巧"><a href="#前端應該掌握的瀏覽器測試技巧" class="headerlink" title="前端應該掌握的瀏覽器測試技巧"></a><a href="https://juejin.cn/post/7145256569041584142" target="_blank" rel="noopener">前端應該掌握的瀏覽器測試技巧</a></h3><p>作者曾經認為，曾經的它擁有了一個 console.log 就認為可以解決所有問題，後來當他接觸了 Vue 才發覺還有其他更多才能夠讓更不迷茫，在文章裡面介紹了幾種類型的 debug 方法，其中描述比較多的是關於 breakpoint，是一篇很好學習如何使用 breakpoint 的好文章。</p><h3 id="An-apparent-React-bug"><a href="#An-apparent-React-bug" class="headerlink" title="An apparent React bug"></a><a href="https://phelipetls.github.io/posts/surprising-react-bug/" target="_blank" rel="noopener">An apparent React bug</a></h3><p>雖然文章標題是對 React，但其實內容描述的是從 React 裡的 <a href="https://github.com/facebook/react/issues/15486" target="_blank" rel="noopener">這個 issue</a> 所發現的 bug，該 bug 產生在用狀態控制 HTML 的 details 標籤是否展開。雖然它在 React 發生，但是其他框架也無一倖免，就連 VanillaJS 也會出現同樣的問題。</p><h2 id="軟體工程"><a href="#軟體工程" class="headerlink" title="軟體工程"></a>軟體工程</h2><h3 id="技術翻譯-編寫程式註解的最佳實踐"><a href="#技術翻譯-編寫程式註解的最佳實踐" class="headerlink" title="技術翻譯 - 編寫程式註解的最佳實踐"></a><a href="https://blog.taiwolskit.com/best-practices-for-writing-code-comments" target="_blank" rel="noopener">技術翻譯 - 編寫程式註解的最佳實踐</a></h3><p>寫程式寫得越久，越發現要把註解寫好真的不是一件容易的事。這篇文章分享了幾個在寫註解時的 best practice，希望可以讓大家在適當的時候都寫出更漂亮的註解～</p><h3 id="三款好用的繪圖工具來解決系統架構或流程圖"><a href="#三款好用的繪圖工具來解決系統架構或流程圖" class="headerlink" title="三款好用的繪圖工具來解決系統架構或流程圖"></a><a href="https://blog.wu-boy.com/2022/09/three-tools-design-system-architecture-and-flow/" target="_blank" rel="noopener">三款好用的繪圖工具來解決系統架構或流程圖</a></h3><p>有時在做簡報或是跟同事、主管溝通時，光用敘述的可能不容易讓人了解狀況。如果這時能夠加上一些架構圖、流程圖，就可以很快速精準的表達想法。而這篇文章作者就介紹了自己常用的三個繪圖工具，操作起來都很簡單，就算是工程師也能輕鬆上手～</p><h3 id="How-to-Be-a-10x-Software-Engineer"><a href="#How-to-Be-a-10x-Software-Engineer" class="headerlink" title="How to Be a 10x Software Engineer"></a><a href="https://medium.com/@_michaellin/how-to-be-a-10x-engineer-fdac2a5a1bd5" target="_blank" rel="noopener">How to Be a 10x Software Engineer</a></h3><p>關於 10 倍工程師，每個人都有不同想法。這篇文章的作者認為 10 倍工程師是真實存在的，而且也分享了三個他認為的重點，希望可以幫大家在成為 10 倍工程師的路上走得更順～</p><h2 id="Hacker-News"><a href="#Hacker-News" class="headerlink" title="Hacker News"></a>Hacker News</h2><h3 id="Your-CTO-Should-Actually-Be-Technical"><a href="#Your-CTO-Should-Actually-Be-Technical" class="headerlink" title="Your CTO Should Actually Be Technical"></a><a href="https://blog.southparkcommons.com/your-cto-should-actually-be-technical/" target="_blank" rel="noopener">Your CTO Should Actually Be Technical</a></h3><p>你的 CTO 應該要是一個技術者(開發者).公司的技術領導者應該要有很高的技術水準, 因為 CTO 是了解應徵者的技術水準與優秀之處的唯一途徑.</p><h3 id="Hardvard-Resumes-and-cover-letters-guide"><a href="#Hardvard-Resumes-and-cover-letters-guide" class="headerlink" title="Hardvard Resumes and cover letters guide"></a><a href="https://hwpi.harvard.edu/files/ocs/files/hes-resume-cover-letter-guide.pdf" target="_blank" rel="noopener">Hardvard Resumes and cover letters guide</a></h3><p>不錯的履歷指南，裡面有許多履歷的範例與 cover letter。包含了許多履歷的小秘訣：履歷最容易犯的錯，該做的事情，不該做的事情。</p><h3 id="Outdated-vs-Complete"><a href="#Outdated-vs-Complete" class="headerlink" title="Outdated vs. Complete"></a><a href="https://vivqu.com/blog/2022/09/25/outdated-apps/" target="_blank" rel="noopener">Outdated vs. Complete</a></h3><p>作者開發了一款很穩定的 APP, 三年前就已經屬於穩定狀態，但是最近收到官方的更新通知，官方告訴他如果再不更新就要將他的　APP 標示為過時的。</p><h2 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h2><h3 id="AWS-vs-GCP-reliability-is-wildly-different"><a href="#AWS-vs-GCP-reliability-is-wildly-different" class="headerlink" title="AWS vs GCP reliability is wildly different"></a><a href="https://freeman.vc/notes/aws-vs-gcp-reliability-is-wildly-different" target="_blank" rel="noopener">AWS vs GCP reliability is wildly different</a></h3><p>雖然公有雲用起來讓人覺得它像是不存在一般，例如你可以隨時開關一台機器，而且只需要根據使用量付費，彷彿就像是背後有無窮無盡的資源一樣，但其實事實並非如此，他背後也是實體機房，也會受到晶片短缺的影響才對 (尤其是 GPU)，作者在 GCP 遇到機器開很慢的狀況之後，就想要來試試看同時對 AWS 與 GCP 做開大量 GPU 機器的壓力測試</p><p>結論就是 AWS 的開機時間比 GCP 快 66% 並且少 84 倍遇到開機 Timeout 的機會，實驗方式為在兩週內兩個平台都各自開了 3,000 T4 GPUs，假如開啟時間超過 200s 就算 Timeout，實驗結果 AWS 大勝，平均一個 GPU 在 15秒內 (平均 11.4 秒)，GCP 在 45 秒內 (平均 42.6 秒)，AWS 在兩週內遇到一次明顯的開機 Timeout，而 GCP 則是 84次</p><h3 id="Why-you-should-keep-using-CPU-limits-on-Kubernetes"><a href="#Why-you-should-keep-using-CPU-limits-on-Kubernetes" class="headerlink" title="Why you should keep using CPU limits on Kubernetes"></a><a href="https://dnastacio.medium.com/why-you-should-keep-using-cpu-limits-on-kubernetes-60c4e50dfc61" target="_blank" rel="noopener">Why you should keep using CPU limits on Kubernetes</a></h3><p>大家應該都知道 K8s 的 Workload 可以設定資源的限制，Memory 比較沒有問題，但是對於 CPU 的 Limit 到底要不要設定？前一陣子有一篇文章請大家停止設定 CPU Limit 引起熱烈迴響，文章一開頭就提到在大多數情況之下，設定 CPU Limit 利大於弊 (<a href="https://home.robusta.dev/blog/stop-using-cpu-limits/" target="_blank" rel="noopener">For the love of god, stop using CPU limits on Kubernetes (updated)</a>)；過了一個月之後，也就是這篇文章的作者則是提出反面的看法，他認為 CPU Limit 仍然是有其必要性的，並且提出了一些理由，大家覺得究竟要不要設定呢？</p><h3 id="Best-Tools-to-Visualize-your-Terraform"><a href="#Best-Tools-to-Visualize-your-Terraform" class="headerlink" title="Best Tools to Visualize your Terraform"></a><a href="https://medium.com/@mike_tyson_cloud/best-tools-to-visualize-your-terraform-d4b537f091dc" target="_blank" rel="noopener">Best Tools to Visualize your Terraform</a></h3><p>很多人目前都是使用 Terraform 來做雲端資源做管理，不過畢竟人類是視覺性的動物，所以如果能夠將 Terraform 的資源以視覺化的方式呈現出來，那麼就能夠更容易的理解資源的關係，這篇文章介紹各種可以將 Terraform 程式碼視覺畫的工具，讓大家可以將 Terraform 的資源以視覺化的方式呈現出來</p><ul><li>Brainboard</li><li>Terraform 原生指令</li><li>Blast radius</li><li>Terraform Visual</li><li>Inframap</li><li>Rover</li><li>Diagrams codes</li><li>Structurizr</li><li>Diagrams Mingrammer</li><li>Cloud discovery</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 150 期 - 你會記得自己曾經寫過多少 Bug 嗎？</title>
      <link href="/2022/09/20/150-do-you-remeber-how-many-bug-do-you-made/"/>
      <url>/2022/09/20/150-do-you-remeber-how-many-bug-do-you-made/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-Resource-Management—-伸縮自在的-Cluster"><a href="#Kubernetes-Resource-Management—-伸縮自在的-Cluster" class="headerlink" title="Kubernetes Resource Management— 伸縮自在的 Cluster"></a><a href="https://medium.com/starbugs/kubernetes-resource-management-%E4%BC%B8%E7%B8%AE%E8%87%AA%E5%9C%A8%E7%9A%84-cluster-62abcf0cdfad" target="_blank" rel="noopener">Kubernetes Resource Management— 伸縮自在的 Cluster</a></h3><p>大家應該都對於 HPA, VPA 與 Cluster AutoScaler 相當的熟悉，但是該如何將他們導入，或是要如何設定才能達到最佳效果？剛好目前公司內開發團隊實際遇過這些問題，所以把相關實戰經驗整理成這篇文章分享出來 💪 也希望大家可以一起來討論更多關於 K8s 的擴展問題 😊</p><p>📚 內文先從 K8s 常見資源管理問題開始分析起 (Pod -&gt; Node -&gt; Cluster)<br>📚 並且先假設所有的 Workload 都沒有設定 Resource Request 與 Limit<br>📚 接著一步一步推導要如何透過 Default Limit Range, HPA, VPA 與 Cluster AutoScaler 來將資源管理問題一個一個解決掉<br>📚 同時將自己使用時遇到的設定問題給條列下來，讓想要使用的人可以避開摸索的時間</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Front-end-Testing-Principles"><a href="#Front-end-Testing-Principles" class="headerlink" title="Front-end Testing Principles"></a><a href="https://itnext.io/front-end-testing-principles-c4a3b51aa7e5" target="_blank" rel="noopener">Front-end Testing Principles</a></h3><p><a href="https://kentcdodds.com/" target="_blank" rel="noopener">Kent C. Dodds</a> 是 <a href="https://testing-library.com/docs/react-testing-library/intro/" target="_blank" rel="noopener">React Testing Library</a> 的作者，他經常會發表各種文章表達自己對測試的看法，而這篇文章整理了之前 <a href="https://kentcdodds.com/" target="_blank" rel="noopener">Kent C. Dodds</a> 提到的六個測試原則：</p><ol><li>Test your software in the same way that your users use it</li><li>Avoid testing implementation details</li><li>Write fewer, longer tests</li><li>Write your tests with ease of understanding and maintainability in mind</li><li>Write your tests in isolation</li><li>Be careful with mocks</li></ol><p>在每個原則下也都有附上該原則的說明和文章連結，算是一個整理起來的總集篇！</p><h3 id="React-18-Upgrade-Guide-and-New-Features"><a href="#React-18-Upgrade-Guide-and-New-Features" class="headerlink" title="React 18 Upgrade Guide and New Features"></a><a href="https://refine.hashnode.dev/react-18-upgrade-guide-and-new-features" target="_blank" rel="noopener">React 18 Upgrade Guide and New Features</a></h3><p>文章中先是說明什麼是 React 18，也敘述 React 在 17 時遇到的問題，接著就開始介紹 React 18 出現的幾個新功能，而且都有配合上簡短的程式碼講解哦：</p><ol><li>Client Rendering</li><li>Hydration</li><li>Render Callback</li><li>Automatic Batching</li><li>Transitions</li><li>Dropped support for Internet Explorer</li></ol><h3 id="JavaScript-API-Mocking-Techniques"><a href="#JavaScript-API-Mocking-Techniques" class="headerlink" title="JavaScript API Mocking Techniques"></a><a href="https://www.syncfusion.com/blogs/post/javascript-api-mocking-techniques.aspx" target="_blank" rel="noopener">JavaScript API Mocking Techniques</a></h3><p>有時候需要模擬 API 是為了能夠在與後端討論好資料規格後，先運行一個 local server 串接 API 與 UI 的互動，也有時候模擬 API 是在單元測試時，用來隔離真實的環境。文章中介紹了幾種 JavaScript 裡面常用來模擬 API 的套件，並簡單介紹他們的差別及使用方式。</p><h2 id="Blockchain"><a href="#Blockchain" class="headerlink" title="Blockchain"></a>Blockchain</h2><h3 id="8-年-PoW-宣告終結-》以太坊簡史：V神、中國挖礦業，與-NVIDIA"><a href="#8-年-PoW-宣告終結-》以太坊簡史：V神、中國挖礦業，與-NVIDIA" class="headerlink" title="8 年 PoW 宣告終結 》以太坊簡史：V神、中國挖礦業，與 NVIDIA"></a><a href="https://www.blocktempo.com/end-of-pow-eth-era-and-history-of-mining-in-china-with-nvidia/" target="_blank" rel="noopener">8 年 PoW 宣告終結 》以太坊簡史：V神、中國挖礦業，與 NVIDIA</a></h3><p>這大概是今年區塊鏈領域最大的事情了：以太坊在經過八年的時間後，總算完成了合併，正式從 Pow 轉向 PoS。這篇文章介紹了以太坊的歷史，以及這幾年來全球挖礦業的發展，可以當成故事看看很有趣～</p><h3 id="一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash"><a href="#一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash" class="headerlink" title="一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash"></a><a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c" target="_blank" rel="noopener">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a></h3><p>想要搞懂區塊鏈原理，就必須先懂一些簡單的密碼學，這篇我之前寫的文章介紹了密碼學中的三個基本概念：Encode、Encrypt 跟 Hash，並且用簡單的範例來說明。</p><h3 id="從0開始架構區塊鏈-系列"><a href="#從0開始架構區塊鏈-系列" class="headerlink" title="從0開始架構區塊鏈 系列"></a><a href="https://ithelp.ithome.com.tw/users/20119982/ironman/2255" target="_blank" rel="noopener">從0開始架構區塊鏈 系列</a></h3><p>「從 0 開始架構區塊鏈」這一系列文章總共三十篇，從區塊鏈的誕生開始說起，一路講到挖礦、共識機制、智能合約等等，這系列文章的內容非常豐富，值得一看。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="6-Best-Practices-to-Manage-Pull-Request-Creation-and-Feedback"><a href="#6-Best-Practices-to-Manage-Pull-Request-Creation-and-Feedback" class="headerlink" title="6 Best Practices to Manage Pull Request Creation and Feedback"></a><a href="https://doordash.engineering/2022/08/23/6-best-practices-to-manage-pull-request-creation-and-feedback/" target="_blank" rel="noopener">6 Best Practices to Manage Pull Request Creation and Feedback</a></h3><p>建立好的 PR（Pull Request，或者也可以說 Merge Request）可以減少開發時間，除了要保持簡單、結構完整且一致性以及做好測試這三大基本要素之外，還建議以下幾點：</p><ol><li>命名時需要點敘述性和一致性</li><li>PR 名稱要清楚和描述</li><li>PR 的變動越小越好</li><li>PR 有爭議時請直接詢問對方，減少溝通時間</li><li>動手做之前先做好功課來避免整個 PR 重寫</li><li>多找一些人審查 PR</li></ol><h3 id="7-CNCF-Projects-For-Building-Cloud-Native-Networks"><a href="#7-CNCF-Projects-For-Building-Cloud-Native-Networks" class="headerlink" title="7 CNCF Projects For Building Cloud-Native Networks"></a><a href="https://containerjournal.com/features/7-cncf-projects-for-building-cloud-native-networks/" target="_blank" rel="noopener">7 CNCF Projects For Building Cloud-Native Networks</a></h3><p>本篇介紹 7 個用於建立 Cloud Native 類型網路的 CNCF 專案：</p><ol><li>Antrea - 建立在 Open vSwitch 上的 Kubernetes 網路</li><li>Cilium - 基於 eBPF 的網路、資安和觀測的專案</li><li>Container Network Interface (CNI) - 專門用於 container 的 interface</li><li>CNI-Genie - 讓多個 CNI plugins 可以在運行時同時存在</li><li>Kube-OVN - 適用於大型企業的 Kubernetes 網路構造</li><li>Network Service Mesh - 混合多雲架構的 service mesh</li><li>Submariner - 可 <code>Pod</code> 或 <code>Service</code> 直接在不同 Kubernetes cluster 或不同雲之間互連</li></ol><h3 id="How-Many-Nodes-for-Your-Kubernetes-Control-Plane"><a href="#How-Many-Nodes-for-Your-Kubernetes-Control-Plane" class="headerlink" title="How Many Nodes for Your Kubernetes Control Plane?"></a><a href="https://thenewstack.io/how-many-nodes-for-your-kubernetes-control-plane/" target="_blank" rel="noopener">How Many Nodes for Your Kubernetes Control Plane?</a></h3><p>自架 Kubernetes control plane 需要幾個節點比較洽當？以 etcd 做為叢集狀態儲存工具時，2 個節點比 1 個節點還糟，因為很可能發生腦裂的情況，官方建議 3 或 5 個節點，超過 7 個可能有延遲問題。最後作者分別對 3、5、7、9 個節點做壓測證明延遲問題，以及假如有節點壞了，建議先移除之後再增加新的節點；但如果是節點沒壞，先增加新的節點之後再移除舊的。</p><h2 id="Microservices"><a href="#Microservices" class="headerlink" title="Microservices"></a>Microservices</h2><h3 id="Multi-Cloud-Strategies-Using-Microservices-Architecture"><a href="#Multi-Cloud-Strategies-Using-Microservices-Architecture" class="headerlink" title="Multi-Cloud Strategies Using Microservices Architecture"></a><a href="https://itnext.io/multi-cloud-strategies-using-microservices-architecture-8320aa708c37" target="_blank" rel="noopener">Multi-Cloud Strategies Using Microservices Architecture</a></h3><p>如今在架構設計上已經沒有辦法去避免談到 MicroService，特別是如果你的設計為 Cloud 或是 Multi-Cloud Service，而且必須具有模組化與可擴展的特性；在這篇文章中作者會詳細的解釋 MicroServiec，並且進一步討論在 Multi-Cloud 的情境之下如何去設計應用服務。有興趣的人可以透過閱讀這篇文章跟著作者一起透過詳細的例子來了解 MicroService 的各種 Design Pattern</p><h3 id="Deployment-Patterns-in-Microservices-Architecture"><a href="#Deployment-Patterns-in-Microservices-Architecture" class="headerlink" title="Deployment Patterns in Microservices Architecture"></a><a href="https://www.developer.com/design/deployment-patterns-microservices/" target="_blank" rel="noopener">Deployment Patterns in Microservices Architecture</a></h3><p>Monolithic 的應用程式通常都是以一個不可分割的單元來設計，部署與擴展，在這樣的前提條件之下要部署應用服務通常是相對輕鬆無痛的過程，不過當今天所面對的為 MicroService 架構時，你會面對許多由不同的語言與框架所建立的服務，這樣一來讓部署這件事情變得更具挑戰性，所以這篇文章想要探討在微服務的架構之下會有哪些部署模式，並且分析不同部署模式間的優缺點</p><h3 id="coroot-a-monitoring-and-troubleshooting-tool-for-microservice-architectures"><a href="#coroot-a-monitoring-and-troubleshooting-tool-for-microservice-architectures" class="headerlink" title="coroot - a monitoring and troubleshooting tool for microservice architectures"></a><a href="https://github.com/coroot/coroot" target="_blank" rel="noopener">coroot - a monitoring and troubleshooting tool for microservice architectures</a></h3><p>Coroot 是一個用 Golang 寫的新工具，他主要想要協助維運 MicroService 的人去監控和除錯，看到他的功能介紹後覺得滿好用的，例如：受益於 eBPF 所以 Coroot 可以將服務之間的拓樸圖給輕易地視覺化，能夠不需要額外 Stroage 成本之下去進行 Log 分析，並且可以將服務在 Public Cloud 的網路拓樸也呈現出來，除此之外，他還可以跟既有的監控工具整合再一起，例如 Prometheus！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 149 期 - 颱風別再來了，給條活路</title>
      <link href="/2022/09/14/149-no-more-typhoon-plz/"/>
      <url>/2022/09/14/149-no-more-typhoon-plz/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Home-Assistant-智能家居-二-使用情景大解析"><a href="#Home-Assistant-智能家居-二-使用情景大解析" class="headerlink" title="Home Assistant 智能家居(二) 使用情景大解析"></a><a href="https://medium.com/starbugs/f2b94071a87b" target="_blank" rel="noopener">Home Assistant 智能家居(二) 使用情景大解析</a></h3><p>這篇是系列文的第二篇，筆者使用了 HA (Home Assistant) 實現智慧家庭約三個多月的時間，分享一下我常用的使用場景與使用心得，並且分析一下實現的難度。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Mobile-First-CSS-Is-It-Time-for-a-Rethink"><a href="#Mobile-First-CSS-Is-It-Time-for-a-Rethink" class="headerlink" title="Mobile-First CSS: Is It Time for a Rethink?"></a><a href="https://alistapart.com/article/mobile-first-css-is-it-time-for-a-rethink/" target="_blank" rel="noopener">Mobile-First CSS: Is It Time for a Rethink?</a></h3><p>優先考慮移動設備的 CSS 是很棒的設計方法，因為只要你的頁面有辦法在手機之類的小螢幕上正常顯示資訊，那在更大的螢幕尺寸上就也絕對沒問題！這篇文章會帶大家思考，優先考慮移動設備的設計會有哪些優點和缺點，以及像是在瀏覽器讀取上，或打包和分割 CSS 後可能會有的影響。</p><h3 id="TIL-You-Can-Access-A-User’s-Camera-with-Just-HTML"><a href="#TIL-You-Can-Access-A-User’s-Camera-with-Just-HTML" class="headerlink" title="TIL: You Can Access A User’s Camera with Just HTML"></a><a href="https://austingil.com/html-capture-attribute/" target="_blank" rel="noopener">TIL: You Can Access A User’s Camera with Just HTML</a></h3><p>在 HTML 裡，如果你將 input 標籤內的 capture 設定成 user 或 environment 就能夠開啟使用者的前置或後置鏡頭，雖然它的支援度目前還低到爆，但如果瀏覽器還不支援的話，也會自動退回到顯示選擇文件的 UI。</p><h3 id="JavaScript-Patterns-Workshop"><a href="#JavaScript-Patterns-Workshop" class="headerlink" title="JavaScript Patterns Workshop"></a><a href="https://javascriptpatterns.vercel.app/patterns" target="_blank" rel="noopener">JavaScript Patterns Workshop</a></h3><p>喜歡研究各種設計模式的前端工程師絕對不能錯過這個網站！這個網站與 <a href="https://frontendmasters.com/courses/tour-js-patterns/" target="_blank" rel="noopener">FrontendMasters workshop on JavaScript Patterns</a> 相關，內容也是基於另一個很棒的免費資源 <a href="https://www.patterns.dev/" target="_blank" rel="noopener">patterns.dev</a> 內的模式介紹，不過介紹內容會多一些精緻的圖片，讓讀者更能理解設計模式內的程式碼關聯哦！</p><h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><h3 id="Why-React-Re-Renders"><a href="#Why-React-Re-Renders" class="headerlink" title="Why React Re-Renders"></a><a href="https://www.joshwcomeau.com/react/why-react-re-renders/" target="_blank" rel="noopener">Why React Re-Renders</a></h3><p>如何防止意外觸發 rerender 一直是用 React.js 開發時很重要的議題， 這篇文章會帶大家了解 React 是怎麼決定要不要 rerender，以及在開發時應該要如何避免不必要的 rerender。</p><h3 id="Understanding-useMemo-and-useCallback"><a href="#Understanding-useMemo-and-useCallback" class="headerlink" title="Understanding useMemo and useCallback"></a><a href="https://www.joshwcomeau.com/react/usememo-and-usecallback/" target="_blank" rel="noopener">Understanding useMemo and useCallback</a></h3><p>比起最常見的 useState，useMemo 跟 useCallback 這兩個 hook 算是比較少用也比較複雜一點，但如果用得好的話，他們可以讓程式碼寫起來很漂亮，同時又可以提高效能，推薦給已經寫過 React 想要學習進階技巧的 React 開發者來讀讀～</p><h3 id="Notes-on-maintaining-an-internal-React-component-library"><a href="#Notes-on-maintaining-an-internal-React-component-library" class="headerlink" title="Notes on maintaining an internal React component library"></a><a href="https://www.gabe.pizza/notes-on-component-libraries/" target="_blank" rel="noopener">Notes on maintaining an internal React component library</a></h3><p>許多用 React 開發前端的公司內部都會有自己的一套 component library，這篇文章會介紹一些維護 component library 的心法以及注意事項，包含 props 應該如何設計、怎麼減輕開發的心智負擔等等。雖然文章真的很長（我每天一個段落總共讀了兩個多禮拜），但真的寫得很不錯</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="The-2-minute-test-for-Kubernetes-Pod-security"><a href="#The-2-minute-test-for-Kubernetes-Pod-security" class="headerlink" title="The 2-minute test for Kubernetes Pod security"></a><a href="https://www.cncf.io/blog/2022/09/06/the-2-minute-test-for-kubernetes-pod-security/" target="_blank" rel="noopener">The 2-minute test for Kubernetes Pod security</a></h3><p>本文示範了如何 2 分鐘使用 Kubernetes Pod Security Standards 來檢查 pod 的資安，而且完全不用在 Kubernetes cluster 內安裝多餘的東西，只需要靠 kuberctl 安裝 Kyverno 後掃描 cluster 或 namespace 就可以知道結果了。</p><h3 id="Avoiding-the-Top-10-NGINX-Configuration-Mistakes"><a href="#Avoiding-the-Top-10-NGINX-Configuration-Mistakes" class="headerlink" title="Avoiding the Top 10 NGINX Configuration Mistakes"></a><a href="https://www.nginx.com/blog/avoiding-top-10-nginx-configuration-mistakes/" target="_blank" rel="noopener">Avoiding the Top 10 NGINX Configuration Mistakes</a></h3><p>本文介紹了如何避免 Nginx 10 個常見的設定錯誤：</p><ol><li>每個 worker 的 file descriptors 預設值太低，可以調高，跟連線數有關</li><li>預設 error_log 是不會儲存的，建議可以開啟</li><li>正常設定下每個新請求都要三向交握且會佔用 ports，所以建議開啟 keepalive</li><li>使用者常常忘記個別 path 下的設定會 override 全域的設定</li><li>建議 proxy_buffering 使用預設的打開選項，只有很少數的情境才需要關閉</li><li>避免設定 if 時使用不當</li><li>避免過度地使用 health checks</li><li>避免以不安全的方式存取 metrics，建議使用簡單的帳號密碼和許可或阻擋名單做一定程度的阻擋</li><li>建議在同個 /24 網段下不要使用 ip_hash 演算法，因為它只看前三個八位元組，會無法分散流量，建議使用 hash 演算法。</li><li>應該活用 upstream{} 的好處做全域的設定</li></ol><h3 id="How-a-Cloud-Skills-Shortage-Is-Affecting-Multi-Cloud-Adoption"><a href="#How-a-Cloud-Skills-Shortage-Is-Affecting-Multi-Cloud-Adoption" class="headerlink" title="How a Cloud Skills Shortage Is Affecting Multi-Cloud Adoption"></a><a href="https://www.hashicorp.com/blog/how-a-cloud-skills-shortage-is-affecting-multi-cloud-adoption" target="_blank" rel="noopener">How a Cloud Skills Shortage Is Affecting Multi-Cloud Adoption</a></h3><p>Hachicorp 統計了組織在採用多雲策略時會遇到的阻礙，而平台團隊（platform team）負責什麼任務，同不同意多雲環境自動化的重要性，哪些自動化功能可以幫助多雲策略。</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="GIT-Branching-Strategies-in-2022"><a href="#GIT-Branching-Strategies-in-2022" class="headerlink" title="GIT Branching Strategies in 2022"></a><a href="https://faun.pub/git-branching-strategies-in-2022-83938c5784d8" target="_blank" rel="noopener">GIT Branching Strategies in 2022</a></h3><p>Git 這套版本管理系統賦予軟體開發者能力去追蹤，管理和組織他們的程式碼，但是 Git 本身並沒有提供一個明確的分支策略，這將會導致相對大型的團隊在建立分支及合併程式碼時容易搞的一團亂，因此開發者必須自己去決定如何使用 Git 分支。本文將介紹幾種不同的分支策略，並且提供一些建議，讓你可以選擇最適合你的分支策略。</p><ul><li>GitFlow</li><li>GitHub Flow</li><li>GitLab Flow</li><li>Trunk-based development</li><li>Scaled Trunk-Based Development</li><li>Release Flow</li></ul><h3 id="Sign-your-Git-commits-with-1Password"><a href="#Sign-your-Git-commits-with-1Password" class="headerlink" title="Sign your Git commits with 1Password"></a><a href="https://blog.1password.com/git-commit-signing/" target="_blank" rel="noopener">Sign your Git commits with 1Password</a></h3><p>1Password 除了對一般使用者體驗來說還不錯之外，自己覺得他在近年來也一直推出對於 Developer 很友善的功能，例如之前支援了 <a href="https://developer.1password.com/docs/ssh/" target="_blank" rel="noopener">SSH</a> 還有 <a href="https://blog.1password.com/1password-visual-studio-code" target="_blank" rel="noopener">VIsual Studio Code</a>；而 <a href="https://github.blog/changelog/2022-08-23-ssh-commit-verification-now-supported/" target="_blank" rel="noopener">GitHub 於近期宣布支援透過 SSH Key 去對 Git Commit 做簽章驗證</a> (之前只支援 GPG Key)，1password 這篇文章便是介紹了如何將 SSH Key 儲存於其中，並對 Git Commit 做簽章驗證。</p><h3 id="Merging-two-GitHub-repositories-without-losing-commit-history"><a href="#Merging-two-GitHub-repositories-without-losing-commit-history" class="headerlink" title="Merging two GitHub repositories without losing commit history"></a><a href="https://hacks.mozilla.org/2022/08/merging-two-github-repositories-without-losing-commit-history/" target="_blank" rel="noopener">Merging two GitHub repositories without losing commit history</a></h3><p>自己是有把 Git Repository 搬來搬去的經驗，但是把兩個 Repository 合併在一起的卻還沒有嘗試過，這篇文章介紹了如何將兩個 Repository 合併在一起，並且保留原本的 Commit History。先筆記下來，搞不好將來有一天自己也會使用到</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 148 期 - 月圓人團圓，烤完臉更圓</title>
      <link href="/2022/09/06/148-fat-moon-festival/"/>
      <url>/2022/09/06/148-fat-moon-festival/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="在-React-Native-中以指定父元素絕對定位子元素，打破-View-的-Position-限制"><a href="#在-React-Native-中以指定父元素絕對定位子元素，打破-View-的-Position-限制" class="headerlink" title="在 React Native 中以指定父元素絕對定位子元素，打破 View 的 Position 限制"></a><a href="https://medium.com/starbugs/%E5%9C%A8-react-native-%E4%B8%AD%E4%BB%A5%E6%8C%87%E5%AE%9A%E7%88%B6%E5%85%83%E7%B4%A0%E7%B5%95%E5%B0%8D%E5%AE%9A%E4%BD%8D%E5%AD%90%E5%85%83%E7%B4%A0-%E6%89%93%E7%A0%B4-view-%E7%9A%84-position-%E9%99%90%E5%88%B6-ba9ede1f39d0" target="_blank" rel="noopener">在 React Native 中以指定父元素絕對定位子元素，打破 View 的 Position 限制</a></h3><p>Hi！大家好，我是神Q超人！最近因為工作的關係，又重回 React Native 的懷抱 😂，雖然 React Native 主打可以用貼近開發 Web 的語法去寫手機 APP，但其實真正開發起來面臨到的坑還是挺多的。這篇文章要分享的絕對定位就是在 React Native 內排版時，遇到的狀況，感覺網路上資源不多，就寫下文章來記錄一下處理的過程囉！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Lazy-Load-Images-in-React"><a href="#How-to-Lazy-Load-Images-in-React" class="headerlink" title="How to Lazy Load Images in React"></a><a href="https://www.freecodecamp.org/news/how-to-lazy-load-images-in-react/" target="_blank" rel="noopener">How to Lazy Load Images in React</a></h3><p>優化靜態資源的載入是提高網站效能最好的方式之一，只要處理好這部分的優化，能夠在第一時間快速載入頁面、增強使用者體驗、對 SEO 也有幫助！在文章裡會以 <a href="https://unsplash.com/" target="_blank" rel="noopener">unsplash</a> 網站的圖片 lazy load 為例子，實現與它類似的效果。</p><h3 id="Micro-Frontends"><a href="#Micro-Frontends" class="headerlink" title="Micro Frontends"></a><a href="https://scanskill.com/frontend/micro-frontends/" target="_blank" rel="noopener">Micro Frontends</a></h3><p>最近 Micro Frontends 出現的頻率越來越高了，如果你只是想要先大略知道 Micro Frontends 能夠帶給團隊開發上什麼幫助，或是架構會對專案的影響等等，可以先看這篇文章了解，如果要實作的話可以再參考 Andy 寫的 <a href="https://medium.com/starbugs/%E5%BE%8C%E7%AB%AF%E6%9C%89-microservices-%E9%82%A3%E5%89%8D%E7%AB%AF%E5%91%A2-%E5%88%9D%E6%8E%A2-micro-frontends-%E7%9A%84%E4%B8%96%E7%95%8C-e3c5a4f21798" target="_blank" rel="noopener">後端有 Microservices，那前端呢？初探 Micro Frontends 的世界</a>！</p><h3 id="16-JavaScript-snippets-to-save-your-time"><a href="#16-JavaScript-snippets-to-save-your-time" class="headerlink" title="16+ JavaScript snippets to save your time"></a><a href="https://devdojo.com/posandu/16-javascript-snippets-to-save-your-time" target="_blank" rel="noopener">16+ JavaScript snippets to save your time</a></h3><p>作者整理了 16 種以上的程式碼片段，用來處理一些實務上常見的非常小的需求，好奇的話也可以看看作者如何用簡單的寫法來實現需求，也有些寫法也可以再透過修改，變成新的功能喲！畢竟每則程式碼片段都是最簡短的實現。</p><h2 id="軟體工程"><a href="#軟體工程" class="headerlink" title="軟體工程"></a>軟體工程</h2><h3 id="為了讓世界更好，你應該優先選擇-tab-而不是-space-做程式碼縮排"><a href="#為了讓世界更好，你應該優先選擇-tab-而不是-space-做程式碼縮排" class="headerlink" title="為了讓世界更好，你應該優先選擇 tab 而不是 space 做程式碼縮排"></a><a href="https://jason-memo.dev/posts/prefer-tab-over-space-for-a11y/" target="_blank" rel="noopener">為了讓世界更好，你應該優先選擇 tab 而不是 space 做程式碼縮排</a></h3><p>好久沒有看到這麼有趣又精闢的文章了！雖然現在大部分的程式碼都是用 space 進行縮排，但其實這樣對於有視覺障礙的工程師是非常不友善的，如果我們可以透過像 prettier 的自動排版工具以及稍微改變自己的習慣，就能讓世界變得更好，那何樂而不為呢？</p><h3 id="《A-Philosophy-of-Software-Design》心得-I-—-寫出複雜度低的軟體"><a href="#《A-Philosophy-of-Software-Design》心得-I-—-寫出複雜度低的軟體" class="headerlink" title="《A Philosophy of Software Design》心得 I — 寫出複雜度低的軟體"></a><a href="https://www.explainthis.io/zh-hant/blog/a-philosophy-of-software-design/part1" target="_blank" rel="noopener">《A Philosophy of Software Design》心得 I — 寫出複雜度低的軟體</a></h3><p>當一個專案隨著開發時間越久，程式碼變得越來越多、當中的業務邏輯也會逐漸變得複雜，而且技術債累積久了之後甚至會到難以修改的程度。既然如此，那要怎麼在一開始設計時就避免這種情況呢？這篇讀書心得簡單介紹了 《A Philosophy of Software Design》一書中的一些觀念，也提供了一些實際的範例～</p><h3 id="Dependency-Inversion-vs-Dependency-Injection"><a href="#Dependency-Inversion-vs-Dependency-Injection" class="headerlink" title="Dependency Inversion vs. Dependency Injection"></a><a href="https://betterprogramming.pub/straightforward-simple-dependency-inversion-vs-dependency-injection-7d8c0d0ed28e" target="_blank" rel="noopener">Dependency Inversion vs. Dependency Injection</a></h3><p>在軟體工程裡面很常聽到 Dependency Inversion 跟 Dependency Injection，雖然他們的縮寫都是 DI，但其實有一點不一樣，這篇短短的文章就簡單介紹了這兩個概念，並且提供了一些範例～</p><h2 id="Coding"><a href="#Coding" class="headerlink" title="Coding"></a>Coding</h2><h3 id="Top-10-Celebrities-Who-Code"><a href="#Top-10-Celebrities-Who-Code" class="headerlink" title="Top 10 Celebrities Who Code"></a><a href="https://dev.to/perssondennis/top-10-celebrities-who-code-7g7" target="_blank" rel="noopener">Top 10 Celebrities Who Code</a></h3><p>一開始看到標題覺得好新鮮，仔細看內文才知道原來是個英文諧音笑話梗XD 這篇文章介紹了美國十個最有名而且他們的職涯當中也曾經擔任過開發工程師的名人 (惡搞)</p><ol><li>Mr. JavaBean (Java developer)</li><li>Brad Git (GitOps expert)</li><li>Nathalie Postman (Backend developer)</li><li>Matt Daemon (OS programmer)</li><li>Kanye Jest (Unit tester)</li><li>Taylor Swift (iOS developer)</li><li>Json Mraz (Fullstack developer)</li><li>Vim Diesel (Unix developer)</li><li>Jay-C (C developer)</li><li>Miley Cypress (E2E tester)</li></ol><h3 id="9-No-Code-Tools-You-should-definitely-try-in-2022-🔥💯"><a href="#9-No-Code-Tools-You-should-definitely-try-in-2022-🔥💯" class="headerlink" title="9 No-Code Tools You should definitely try in 2022 🔥💯"></a><a href="https://dev.to/aviyel/9-no-code-tools-you-should-definitely-try-in-2022-33ol" target="_blank" rel="noopener">9 No-Code Tools You should definitely try in 2022 🔥💯</a></h3><p>No-Code 這一兩年來很常被提起，通常被提到的還有 Low-Code，他們兩者分別指 「不需寫任何程式碼」情況下就可以開發應用程式，以及「少量的程式碼」就可以做到程式開發，讓不是專業的軟體工程師也可以開發出應用程式。這篇文章介紹了 9 個 No-Code 工具，讓你可以在不寫程式碼的情況下開發出應用程式。</p><ol><li>Google AppSheet</li><li>Zapier</li><li>Webflow</li><li>Thunkable</li><li>Bravo Studio</li><li>ToolJet</li><li>Knack</li><li>Bubble</li><li>Miro</li></ol><h3 id="15-Best-Data-Structure-Algorithms-and-Programming-Courses-to-Crack-Coding-Interviews-in-2022"><a href="#15-Best-Data-Structure-Algorithms-and-Programming-Courses-to-Crack-Coding-Interviews-in-2022" class="headerlink" title="15 Best Data Structure, Algorithms, and Programming Courses to Crack Coding Interviews in 2022"></a><a href="https://medium.com/javarevisited/10-data-structure-algorithms-and-programming-courses-to-crack-any-coding-interview-e1c50b30b927" target="_blank" rel="noopener">15 Best Data Structure, Algorithms, and Programming Courses to Crack Coding Interviews in 2022</a></h3><p>即將進入年底的換職潮啦！這篇文章條列了 15 個資料結構、演算法和程式設計課程，讓你可以在 2022 年年底前準備好面試～</p><ol><li>Data Structure and Algorithms Analysis — Job Interview</li><li>Grokking the System Design Interview</li><li>Software Engineer Interview Unleashed</li><li>Grokking the Coding Interview: Patterns for Coding Questions</li><li>Master the Coding Interview: Data Structures + Algorithms</li><li>The Coding Interview Bootcamp: Algorithms + Data Structures</li><li>Break Away: Programming And Coding Interviews</li><li>Intro To Dynamic Programming — Coding Interview Preparation</li><li>Python for Data Structures, Algorithms, and Interviews!</li><li>11 Essential Coding Interview Questions + Coding Exercises!</li><li>200+ SQL Interview Questions</li><li>Algorithms and Data Structures — Part 1</li><li>200+ Java Interview Questions for Beginners</li><li>Grokking Dynamic Programming Patterns for Coding Interviews</li><li>50 coding problems</li></ol><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-to-Handle-Kubernetes-Health-Checks"><a href="#How-to-Handle-Kubernetes-Health-Checks" class="headerlink" title="How to Handle Kubernetes Health Checks"></a><a href="https://doordash.engineering/2022/08/09/how-to-handle-kubernetes-health-checks/" target="_blank" rel="noopener">How to Handle Kubernetes Health Checks</a></h3><p>DoorDash 在黑色星期五因為 readiness health check 而導致服務不正常，他們一開始從 metrics 和 tracing 做調查但因 health check request 導致呈現的資訊很雜，最後不得已才去 log 抓出問題。因用 Spring Boot Framework 預設的 health check，而預設它會一次檢查很多地方，其中一個就是 Redis 且剛好檢查的 path 已經是 legacy 的狀態了，所以服務延遲增加導致危機。最後他們有探討應該深度了解 health check 的行為，以及觀測服務應該要消除 health check 雜訊。</p><h3 id="Kubernetes-Removals-and-Major-Changes-In-1-25"><a href="#Kubernetes-Removals-and-Major-Changes-In-1-25" class="headerlink" title="Kubernetes Removals and Major Changes In 1.25"></a><a href="https://kubernetes.io/blog/2022/08/04/upcoming-changes-in-kubernetes-1-25/" target="_blank" rel="noopener">Kubernetes Removals and Major Changes In 1.25</a></h3><p>Kubernetes 1.25 重要的變動有 PodSecurityPolicy 正式被移除因為使用體驗容易讓人困惑，其功能將被 Pod Security Asmission 取代；In-tree CSI （意思是指和 Kuberentes 專案寫在一起的 CSI 功能）將拆出來交給其他專門做儲存廠商的專案；IPTables 裡這些 <code>KUBE-MARK-DROP</code>、<code>KUBE-MARK-MASQ</code> 和 <code>KUBE-POSTROUTING</code>  chains 照理上來說只限於給 Kubernetes 使用才對，但是卻有些工具卻會依賴這些 chains 的行為，所以現在要漸漸改成這些 chains 只給 Kubernetes 內部情境使用。</p><h3 id="Kubernetes-1-25-cgroup-v2-graduates-to-GA"><a href="#Kubernetes-1-25-cgroup-v2-graduates-to-GA" class="headerlink" title="Kubernetes 1.25: cgroup v2 graduates to GA"></a><a href="https://kubernetes.io/blog/2022/08/31/cgroupv2-ga-1-25/" target="_blank" rel="noopener">Kubernetes 1.25: cgroup v2 graduates to GA</a></h3><p>Kubernetes 1.25 版本的 cgroup v2 邁向 GA（general availability），新版本有更好的資源配置外，升級也十分輕鬆，只要 worker node 的作業系統 cgroup v2 是預設的、以及 container runtime 也有支援以及 kubelet 和 container runtime 設定使用 cgroup driver 就可以無痛升級了（強烈建議 cgroup driver 使用 systemd 來運行）。另外升級完畢後也務必更新監控或開發語言的版本以便支援 cgroup v2。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 147 期 - 吃月餅時就不要考慮熱量問題了！</title>
      <link href="/2022/08/30/147-eating-moon-cake/"/>
      <url>/2022/08/30/147-eating-moon-cake/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Stream-Processing-Introduction"><a href="#Stream-Processing-Introduction" class="headerlink" title="Stream Processing Introduction"></a><a href="https://medium.com/starbugs/stream-processing-introduction-796f15061880" target="_blank" rel="noopener">Stream Processing Introduction</a></h3><p>大家好，這週的專欄是 Starbugs Writers 吳俊廷 所分享的 「Stream Processing Introduction」</p><p>當需要處理的資料不是固定數量，而是河流一樣源源不絕的流進來，甚至可能沒有處理完的一天，那處理的方式就要從傳統的「Batch processing」變成「Stream processing」。這週的專欄會簡單介紹一下何謂 Stream Processing，除此之外，針對 Stream 類型的資料，也會講幾種比較常見的處理方式，讓大家對於 Streaming Data 的處理有基本的認識～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="HSemantic-elements-in-HTML-why-use-them"><a href="#HSemantic-elements-in-HTML-why-use-them" class="headerlink" title="HSemantic elements in HTML: why use them"></a><a href="https://blog.openreplay.com/semantic-elements-in-html-why-use-them" target="_blank" rel="noopener">HSemantic elements in HTML: why use them</a></h3><p>語義化在軟體開發上非常重要，因為它能夠使我們的程式碼更容易閱讀。本篇文章列出幾個在 HTML 中的語義元素，並介紹語義元素的優點及它們各自的使用範例。雖然要把所有的 HTML 元素背起來幾乎不可能，但是看過有個印象後，下次就能大概知道這邊好像有個元素可用。 😂</p><h3 id="Algorithms-in-JavaScript-with-visual-examples"><a href="#Algorithms-in-JavaScript-with-visual-examples" class="headerlink" title="Algorithms in JavaScript with visual examples."></a><a href="https://dev.to/swastikyadav/algorithms-in-javascript-with-visual-examples-gh3" target="_blank" rel="noopener">Algorithms in JavaScript with visual examples.</a></h3><p>想要學演算法的前端工程師絕對不能錯過這篇，作者從時間複雜度開始解釋一些日常生活中常見的搜尋或排序演算法，在文章裡面除了程式碼之外，還搭配了圖片、動畫等等，幫助理解各個算法在執行時發生了什麼事情。</p><h3 id="You’re-Not-Using-HTTP-Status-Codes-Right"><a href="#You’re-Not-Using-HTTP-Status-Codes-Right" class="headerlink" title="You’re Not Using HTTP Status Codes Right"></a><a href="https://dev.to/pragativerma18/youre-not-using-http-status-codes-right-pc6" target="_blank" rel="noopener">You’re Not Using HTTP Status Codes Right</a></h3><p>在開發網頁的時候，前端常會和後端討論 API 如果發生什麼事情，應該要回傳什麼 HTTP status codes，比較常見的是 200、400、401、404 等等，但有些 HTTP status codes 提供的意思實在是讓人搞不太清楚，常常誤用了也不曉得，而本篇的作者就會來解釋關於 Empty resource 應該要用什麼 HTTP status codes 表示。另外文章下方留言提到 graphql 的實踐也滿有趣的，看完文章可以順便看看。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Prevent-Logging-Secrets-in-Go-by-Using-Custom-Types"><a href="#Prevent-Logging-Secrets-in-Go-by-Using-Custom-Types" class="headerlink" title="Prevent Logging Secrets in Go by Using Custom Types"></a><a href="https://www.commonfate.io/blog/prevent-logging-secrets-in-go-by-using-custom-types" target="_blank" rel="noopener">Prevent Logging Secrets in Go by Using Custom Types</a></h3><p>在 Go 裡面進行 logging 時，如果一個不注意，可能會不小心把重要的 secret 輸出到 log。為了避免這種情況，這篇文章教你怎麼使用 custom types 來自動幫 secret 打碼，即便不小心輸出了，看起來也會是 ***** 的樣子。</p><h3 id="Trying-Clean-Architecture-on-Golang"><a href="#Trying-Clean-Architecture-on-Golang" class="headerlink" title="Trying Clean Architecture on Golang"></a><a href="https://medium.com/easyread/golang-clean-archithecture-efd6d7c43047" target="_blank" rel="noopener">Trying Clean Architecture on Golang</a></h3><p>有點經驗的工程師應該都聽過所謂 Clean Architecture，因為 Clean Architecture 主要是一種概念而不是告訴你細節該如何實作，所以這篇文章嘗試用自己的方式去實現 Clean Architecture 的精神，而且也把程式碼公開出來給大家參考。</p><h3 id="5-concurrency-patterns-in-Golang"><a href="#5-concurrency-patterns-in-Golang" class="headerlink" title="5 concurrency patterns in Golang"></a><a href="https://vietmle.com/posts/5_con_patterns_go/" target="_blank" rel="noopener">5 concurrency patterns in Golang</a></h3><p>Go 身為一個很擅長做 concurrency 的語言，為了方便對開出來的 goroutine 進行管理，逐漸發展出一些很常見的 pattern，如果你正在煩惱要怎麼有效管理、整合各個 goroutine 的話，也許這篇文章能給你一些靈感。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Why-is-Kafka-fast"><a href="#Why-is-Kafka-fast" class="headerlink" title="Why is Kafka fast?"></a><a href="https://blog.bytebytego.com/p/why-is-kafka-fast" target="_blank" rel="noopener">Why is Kafka fast?</a></h3><p>為什麼 Kafka 這麼快？在進入正文前務必<a href="https://youtu.be/UNUz1-msbOM" target="_blank" rel="noopener">搭配影片</a>一起看可以幫助理解。Kafka 之所以快主要有兩個原因，Kafka 在讀寫硬碟資料時 I/O 的操作是連續性的，可以在使用 HDD 硬碟減少成本的情況下依然有不錯的速度，以及在從硬碟讀取資料要給 consumer 時靠 zero-copy 也就是靠直接記憶體存取 （Direct Memory Access，DMA）減少 system calls。文章只有說減少 system calls 而已，歡迎觀看影片。</p><h3 id="Orchestration-and-choreography"><a href="#Orchestration-and-choreography" class="headerlink" title="Orchestration and choreography"></a><a href="https://blog.bytebytego.com/p/orchestration-and-choreography" target="_blank" rel="noopener">Orchestration and choreography</a></h3><p>微服務之間合作時可以分為 Orchestration 和 Choreography 兩種方式。Orchestration 如常見的交響樂一般，不同樂器的音樂家都看指揮的指示；Choreography 如舞蹈表演，各個舞者跳舞的時候是沒有專門的指揮，要看整體成員的狀況而怎麼跳舞。兩種服務的合作模式各有優缺點，在規劃架構時可以考慮考慮。</p><h3 id="Black-Friday-flash-sale"><a href="#Black-Friday-flash-sale" class="headerlink" title="Black Friday flash sale"></a><a href="https://blog.bytebytego.com/p/black-friday-flash-sale" target="_blank" rel="noopener">Black Friday flash sale</a></h3><p>當黑色星期五時系統應該要做什麼準備？從前端一路到後端我們都要設法加裝各種關卡來處理真正的交易，畢竟網路上機器人太多，像是 reCaptcha、CDN、rate limit 和 lock 機制。另外也得注意處理各個交易時不要因為系統設計造成超賣，甚至可以把服務和快取做獨立，專為黑色星期五的流量做準備。</p><h2 id="ArgoCD"><a href="#ArgoCD" class="headerlink" title="ArgoCD"></a>ArgoCD</h2><h3 id="ArgoCD-ApplicationSet-Generators"><a href="#ArgoCD-ApplicationSet-Generators" class="headerlink" title="ArgoCD ApplicationSet Generators"></a><a href="https://argocd-applicationset.readthedocs.io/en/stable/Generators/" target="_blank" rel="noopener">ArgoCD ApplicationSet Generators</a></h3><p>在 ArgoCD ApplicationSet 推出不久後就開始使用了，那個時候只有三個 Generator，分別是 Cluster Generator, Git Directory Generator 和 Git File Generator (<a href="https://medium.com/starbugs/argo-cd-applicationset-controller-%E4%B8%96%E7%95%8C%E7%82%BA%E6%88%91%E8%80%8C%E8%BD%89%E5%8B%95-a837f9392298" target="_blank" rel="noopener">當時寫的 ArgoCD ApplicationSet 詳細介紹文</a>)，在經過一年多後，現在 Generator 多了不少類型，讓 ApplicationSet 變得更加完整且實用，底下稍微提一下這些新增的 Generator 分別可以達成什麼目的：</p><p>👉 Matrix Generator: 可以把兩種基礎 Generator 混合使用<br>👉 Merge Generator: 讓使用者先採用的基本 Generator，然後再透過其他 Generator 獲得的參數來做覆寫 (感覺使用時要小心)<br>👉 SCM Provider Generator: 用來產生 ArgoCD 所定義的 Repository 資源 (可以把同一個 Git Organization 底下的所有 Repository 都撈出來)<br>👉 Pull Request Generator: 當 Git Pull Request 開啟時，根據 PR 的內容產生測試環境出來<br>👉 Cluster Decision Resource Generator: 用來產生 ArgoCD 所定義的 Cluster 資源</p><p>其中 Pull Request Generator 是我最喜歡的一個，因為如此一來就可以讓 ArgoCD 輕易地達成 Git Pull Request 的開發流程，而 SCM Provider Generator 和 Cluster Decision Resource Generator 自己覺得雖然放在 ArgoCD ApplicationSet 裡面有點突兀，，因為他並不是用來產生 ArgoCD Application，但確實是很實用的功能；除此之外 Git Generator 現在可以對 Path 做 Exclude，自己目前已經使用它來解決 Prometheus CRD 遇到的問題 (<a href="https://github.com/prometheus-operator/prometheus-operator/issues/4439" target="_blank" rel="noopener">GitHub Issue</a>)</p><h3 id="2022-Argo-external-security-audit-Lessons-learned"><a href="#2022-Argo-external-security-audit-Lessons-learned" class="headerlink" title="2022 Argo external security audit: Lessons learned"></a><a href="https://blog.argoproj.io/2022-argo-external-security-audit-lessons-learned-951f80e0450d" target="_blank" rel="noopener">2022 Argo external security audit: Lessons learned</a></h3><p>Argo 團隊和 CNCF 在 2022 年初開始和 Ada Logics 對 Argo 的四個 Project 進行安全稽核，結果確認了 26 個問題，其中 7 個在 Argo CD， 6 個在 Argo Workflow，13 個在 Argo Events</p><p>這些問題當中存在著 9 個 CVE，有 7 個 在 Argo CD 以及 2 個在 Argo Events，至於其他的則被當成 non-CVE，詳細的稽核報告與 CVE 細解可以參閱內文，其中不乏有風險等級來到 Critical 和 High 的 CVE，所以大家一定要記得將使用到的 Argo 相關 Project 進行升級</p><h3 id="Solving-ArgoCD-Secret-Management-with-the-argocd-vault-plugin"><a href="#Solving-ArgoCD-Secret-Management-with-the-argocd-vault-plugin" class="headerlink" title="Solving ArgoCD Secret Management with the argocd-vault-plugin"></a><a href="https://itnext.io/argocd-secret-management-with-argocd-vault-plugin-539f104aff05" target="_blank" rel="noopener">Solving ArgoCD Secret Management with the argocd-vault-plugin</a></h3><p>GitOps 在 2017 由 Weaveworks 提出後，目前已經毫無疑問成為管理 Kubernetes 的主流方式，而每次在 GitOps 相關主題的討論，分享，演講…等，其中一定會被人提出來的問題就是在 GitOps 的架構下要如何去做 Secret Management，而作者的團隊當初選擇使用的 GitOps 工具為 ArgoCD，Secret Management 則為 HashiCorp Vault，在遍尋了既有的工具之後，發現採用的障礙都很高，甚至需要手動加密或是安裝其他的 Operator 來達成，並沒有找到符合自己團隊需求的解決方式</p><p>所以他們就決定自己建立自己的工具，也就是 argocd-vault-plugin，他們透過 ArgoCD 的 Custom Plugin Patten 來開發這個工具，透過他就可以從 HashiCorp Vault 取得 Secret，並將其注入到 Kubernetes 的 YAML 檔案內，實際安裝與使用方式可以參閱內文，這個工具在去年二月誕生，去年五月發布 V1.0 時也一併支援了 AWS Secret Manager(<a href="https://itnext.io/introducing-argocd-vault-plugin-v1-0-708433294b2d" target="_blank" rel="noopener">Reference</a>)，專案也持續活躍的更新當中 (<a href="https://github.com/argoproj-labs/argocd-vault-plugin" target="_blank" rel="noopener">GitHub Repository</a>)，最近也有看到<a href="https://piotrminkowski.com/2022/08/08/manage-secrets-on-kubernetes-with-argocd-and-vault/" target="_blank" rel="noopener">其他人的文章</a>在分享這個工具，分享給有需要將 ArgoCD 與 HashiCorp Vault 整合在一起的人</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 146 期 - 用水氣寫程式</title>
      <link href="/2022/08/23/146-coding-by-steam/"/>
      <url>/2022/08/23/146-coding-by-steam/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="後端有-Microservices，那前端呢？初探-Micro-Frontends-的世界"><a href="#後端有-Microservices，那前端呢？初探-Micro-Frontends-的世界" class="headerlink" title="後端有 Microservices，那前端呢？初探 Micro Frontends 的世界"></a><a href="https://medium.com/starbugs/e3c5a4f21798" target="_blank" rel="noopener">後端有 Microservices，那前端呢？初探 Micro Frontends 的世界</a></h3><p>最近筆者在工作上一直聽到後端工程師們在談論 Microservices 的架構設計，聽到的當下立馬去查詢才知道原來 Microservices 這麼潮，身為前端工程師的我當然也希望前端也可以有這麼新穎的架構，於是這篇文章就要來跟讀者介紹 Micro Frontends。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Debug-Better-with-Chrome"><a href="#How-to-Debug-Better-with-Chrome" class="headerlink" title="How to Debug Better with Chrome"></a><a href="https://blog.flycode.com/how-to-debug-better-with-chrome" target="_blank" rel="noopener">How to Debug Better with Chrome</a></h3><p>debug 是軟體開發中的一部份，而在 debug 的時候，知道如何好好利用工具是很重要的！文章中介紹幾個使用 Chrome devtool 的技巧，讓你能更高效的為網站除錯。</p><h3 id="✋🏼🔥-CS-Visualized-CORS"><a href="#✋🏼🔥-CS-Visualized-CORS" class="headerlink" title="✋🏼🔥 CS Visualized: CORS"></a><a href="https://dev.to/lydiahallie/cs-visualized-cors-5b8h" target="_blank" rel="noopener">✋🏼🔥 CS Visualized: CORS</a></h3><p>如果你是個 Web 工程師，那一定都會遇到關於 CORS 的錯誤，通常這種時候只要在後端上多做個設定就可以解決，但是你了解過什麼是 CORS 嗎？到文章裡看看作者用精美的圖和動畫解釋！</p><h3 id="Big-Changes-Ahead-for-Deno"><a href="#Big-Changes-Ahead-for-Deno" class="headerlink" title="Big Changes Ahead for Deno"></a><a href="https://deno.com/blog/changes" target="_blank" rel="noopener">Big Changes Ahead for Deno</a></h3><p>Deno 要迎來大改版了，主要的目標是與 npm 的套件更兼容、增加一個 http 的 server，成為最快的 JavaScript Web Server 等等，而且還開設一個表單，讓使用 Deno 的公司可以申請，Deno 團隊會盡力地回答你的技術問題。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Easy-memory-saving-tricks-in-Go"><a href="#Easy-memory-saving-tricks-in-Go" class="headerlink" title="Easy memory-saving tricks in Go"></a><a href="https://www.ribice.ba/golang-memory-savings/" target="_blank" rel="noopener">Easy memory-saving tricks in Go</a></h3><p>如果你想把程式跑在比較低階的機器上，譬如說樹莓派或是嵌入式的裝置，那你可能就會需要注意程式的記憶體使用量。這篇文章講了三種的方法來降低 memory usage，都非常簡單很容易就能做到哦～</p><h3 id="GOMEMLIMIT-is-a-game-changer-for-high-memory-applications"><a href="#GOMEMLIMIT-is-a-game-changer-for-high-memory-applications" class="headerlink" title="GOMEMLIMIT is a game changer for high-memory applications"></a><a href="https://weaviate.io/blog/2022/08/GOMEMLIMIT-a-Game-Changer-for-High-Memory-Applications.html" target="_blank" rel="noopener">GOMEMLIMIT is a game changer for high-memory applications</a></h3><p>如果你的 Go 程式會用到很多 memory，三不五時就會 OOM(Out Of Memory)，那從 Go 1.19 開始可以用 GOMEMLIMIT 來限制 memory usage 了，他會在你的使用量在到達上限之前就幫你做 GC，讓你的程式不會因為不小心吃了太多記憶體，就直接被殺掉</p><h3 id="打造-Go-语言最快的排序算法"><a href="#打造-Go-语言最快的排序算法" class="headerlink" title="打造 Go 语言最快的排序算法"></a><a href="https://blog.csdn.net/ByteDanceTech/article/details/124464192" target="_blank" rel="noopener">打造 Go 语言最快的排序算法</a></h3><p>不知道大家有沒有聽說 Go 的 sorting 演算法從 1.19 開始變得更快了，這篇講的是這個更快的排序是怎麼被時做出來的，內容有點深，所以如果沒興趣的話不看也沒關係，只要記得趕快把 Go 升級到 1.19 就好～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-Blockchain-Tech-Can-Improve-DevOps-Practices-in-Web3"><a href="#How-Blockchain-Tech-Can-Improve-DevOps-Practices-in-Web3" class="headerlink" title="How Blockchain Tech Can Improve DevOps Practices in Web3"></a><a href="https://dzone.com/articles/how-blockchain-tech-can-improve-devops-practices-i" target="_blank" rel="noopener">How Blockchain Tech Can Improve DevOps Practices in Web3</a></h3><p>這篇介紹了 DevOps 精神可以幫到 Web3 哪些層面，以 Ethereum 為例，把 DevOps 八字環的回饋、開發、測試、整合、CICD、監控以及維運對應的工具都寫出來，以及區塊鏈特性的關係我們要注意的地方，可以一次窺探 Web3 技術生態系的文章。</p><h3 id="When-docker-images-stop-being-portable"><a href="#When-docker-images-stop-being-portable" class="headerlink" title="When docker images stop being portable"></a><a href="https://mental-reverb.com/blog.php?id=37" target="_blank" rel="noopener">When docker images stop being portable</a></h3><p>作者把 CI 伺服器從 Ubuntu 16.04 升級到 20.04 發現 gnulib 有 path 太長的 bug 導致 container image 無法下載。後來發現這個 bug 一直都有，唯一的變動是 docker 的儲存驅動（Storage Driver）從 aufs 變成 overlay2，就因為 overlay2 比 aufs 多四個字導致 path 超過 4096 bytes 的限制。本文可以看到作者重現 bug 詳細的心路歷程。</p><h3 id="Is-it-time-to-migrate-from-Lens-to-OpenLens-to-manage-your-Kubernetes-clusters"><a href="#Is-it-time-to-migrate-from-Lens-to-OpenLens-to-manage-your-Kubernetes-clusters" class="headerlink" title="Is it time to migrate from Lens to OpenLens to manage your Kubernetes clusters?"></a><a href="https://medium.com/dev-genius/is-it-time-to-migrate-from-lens-to-openlens-75496e5758d8" target="_blank" rel="noopener">Is it time to migrate from Lens to OpenLens to manage your Kubernetes clusters?</a></h3><p>Lens IDE 是 Kubernetes 生態好用的工具之一，不過最近越來越商業化了，所以作者就介紹 OpenLens 這個工具，以及 Lens 與 OpenLens 的關係。使用 OpenLens 有兩個方法，使用社群提供的檔案或者自己安裝，但是不論哪一種都會遇到 Windows 或 macOS 程式碼簽章（Code Signing）的問題，自己個人下載基本上都可以用，但是有些組織的電腦會有資安的要求，運行的軟體必須要有程式碼簽章才可以，所以可以自己跟 Windows 或 Apple 買開發方案，或者捐款給社群讓他們可以付開發方案的費用。</p><h2 id="Terraform"><a href="#Terraform" class="headerlink" title="Terraform"></a>Terraform</h2><h3 id="How-to-manage-multiple-environments-with-Terraform"><a href="#How-to-manage-multiple-environments-with-Terraform" class="headerlink" title="How to manage multiple environments with Terraform"></a><a href="https://blog.gruntwork.io/how-to-manage-multiple-environments-with-terraform-32c7bc5d692" target="_blank" rel="noopener">How to manage multiple environments with Terraform</a></h3><p>一開始使用 Terraform 來部署開發環境時可能沒有多想，東西也都可以正常運行，但當環境開始變多時，問題開始接踵而來，例如一堆重複的程式碼，環境之間的隔離性不足，很難去做 Debug 的工作…等，所以 Gruntwork 的 Co-founder 準備了三篇文章，分別解釋如何使用 <a href="https://blog.gruntwork.io/how-to-manage-multiple-environments-with-terraform-using-workspaces-98680d89a03e" target="_blank" rel="noopener">Terraform WOrkspace</a>, <a href="https://blog.gruntwork.io/how-to-manage-multiple-environments-with-terraform-using-branches-875d1a2ee647" target="_blank" rel="noopener">Git Branches</a> 和 <a href="https://blog.gruntwork.io/how-to-manage-multiple-environments-with-terraform-using-terragrunt-2c3e32fc60a8" target="_blank" rel="noopener">Terragrunt</a> 來達成分離環境的做法，讓大家可以對這個主題有個全面的的了解</p><h3 id="Manage-your-terraform-like-a-container"><a href="#Manage-your-terraform-like-a-container" class="headerlink" title="Manage your terraform like a container"></a><a href="https://medium.com/@dugouchet.a/manage-your-terraform-like-a-container-d2acbc46d7d4" target="_blank" rel="noopener">Manage your terraform like a container</a></h3><p>這篇文章繼續聊 Terraform 環境切分的問題，他覺得部署 Terraform 就像是使用 Container 一樣，大家應該已經習慣同樣一個 Container Image 建置出來之後供所有不同的環境一起使用，然後透過環境變數讓 Container 可以在不同的環境裡面運行成功；其實 Terraform 應該也要是一樣的做法，Terraform Module 要可以讓不同的環境一起使用，只透過不同環境的組態檔案就可以讓他去建置與管理不同環境與帳號的雲端資源</p><h3 id="Design-by-Contract-in-Terraform"><a href="#Design-by-Contract-in-Terraform" class="headerlink" title="Design by Contract in Terraform"></a><a href="https://betterprogramming.pub/design-by-contracts-in-terraform-63467a749c1a" target="_blank" rel="noopener">Design by Contract in Terraform</a></h3><p>在軟體開發中有一種設計方式稱為 Design by Contract (DbC)，這種方法要求軟體設計者為軟體組件定義正式的，精確的並且可驗證的介面，這樣，為傳統的抽象資料類型又增加了先驗條件、後驗條件和不變式。這種方法的名字裡用到的「契約」或者說「契約」是一種比喻，因為它和商業契約的情況有點類似 (<a href="https://zh.wikipedia.org/zh-tw/%E5%A5%91%E7%BA%A6%E5%BC%8F%E8%AE%BE%E8%AE%A1" target="_blank" rel="noopener">Wiki</a>)；而 Terraform 在 v0.13 加入加了輸入參數的驗證功能，在最新 v1.2 也將 precondition 和 postcondition 這兩個功能給加了進來，如此一下在撰寫 Terraform Module 就可以使用 Design by Contract 的設計方式，詳細做法與範例可以參閱此文章</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 145 期 - 被 Bug 替身攻擊了</title>
      <link href="/2022/08/16/145-attacked-by-bug/"/>
      <url>/2022/08/16/145-attacked-by-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="人生不能黑白，終端機當然也是"><a href="#人生不能黑白，終端機當然也是" class="headerlink" title="人生不能黑白，終端機當然也是"></a><a href="https://larry850806.medium.com/use-escape-sequence-to-make-terminal-colorful-3aefd458d391" target="_blank" rel="noopener">人生不能黑白，終端機當然也是</a></h3><p>不知道大家有沒有用過一些五彩繽紛的 CLI 工具或是 logging library， 他們輸出的時候會幫結果上色，讓眼睛看起來更舒服。但那究竟是怎麼做到的呢？這週的專欄要跟大家介紹怎麼用 跳脫字元 來幫輸出上色，雖然不難，但是我個人覺得很有趣～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="React-re-renders-guide-everything-all-at-once"><a href="#React-re-renders-guide-everything-all-at-once" class="headerlink" title="React re-renders guide: everything, all at once"></a><a href="https://www.developerway.com/posts/react-re-renders-guide" target="_blank" rel="noopener">React re-renders guide: everything, all at once</a></h3><p>在 React 中，re-render 可以讓畫面隨著 props 或 state 的資料變化更新，但除了這些必要的 re-render 之外，還有其他可能會造成性能問題的不必要的 re-render。文章裡有搭配許多簡單的圖片和程式碼解釋各種狀況，非常容易理解。</p><h3 id="Apple-Pay-on-Web-Cybersource-串接筆記"><a href="#Apple-Pay-on-Web-Cybersource-串接筆記" class="headerlink" title="Apple Pay on Web + Cybersource 串接筆記"></a><a href="https://blog.markkulab.net/2022/08/10/apple-pay-on-web-cybersource-integration" target="_blank" rel="noopener">Apple Pay on Web + Cybersource 串接筆記</a></h3><p>作者因為工作需要就踏上了串接 Apple Pay 的道路，除了清楚地列出需要準備的事前項目外，在文章裡還圖文並茂，一步步解釋各個設定 Apple Pay 流程，最後也分別列出前後端的範例程式碼。這篇文章很適合在工作有需要時查閱。</p><h3 id="The-60-30-10-color-rule-for-web-design"><a href="#The-60-30-10-color-rule-for-web-design" class="headerlink" title="The 60:30:10 color rule for web design"></a><a href="https://yuricodesbot.hashnode.dev/the-603010-color-rule-for-web-design" target="_blank" rel="noopener">The 60:30:10 color rule for web design</a></h3><p>在網頁設計中，有一種叫做 60:30:10 的色彩規則，他們分別代表著 60% 的主色系、30% 用來輔助主色系的輔助色，以及 10% 用來表達頁面重要資訊的強調色系。那這種色彩規則該如何利用，作者在文章中搭配了 <a href="https://colorhub.vercel.app/" target="_blank" rel="noopener">colorhub</a> 來解釋顏色的佈局。</p><h2 id="職涯規劃"><a href="#職涯規劃" class="headerlink" title="職涯規劃"></a>職涯規劃</h2><h3 id="軟體工程師的修煉與成長-1-—-程式設計-→-軟體工程"><a href="#軟體工程師的修煉與成長-1-—-程式設計-→-軟體工程" class="headerlink" title="軟體工程師的修煉與成長 (1) — 程式設計 → 軟體工程"></a><a href="https://vgod.medium.com/%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E7%9A%84%E4%BF%AE%E7%85%89%E8%88%87%E6%88%90%E9%95%B7-1-7b906f837d74" target="_blank" rel="noopener">軟體工程師的修煉與成長 (1) — 程式設計 → 軟體工程</a></h3><p>跟我一樣有點年紀的軟體工程師應該都看過 vgod 的「追求神乎其技的程式設計之道」，而今年 vgod 又有一系列「軟體工程師的修煉與成長」分享他全職工作後的修煉和成長過程，目前已經更新到第十篇，雖然我才剛看完三四篇，但真的不得不推薦給大家（這篇需要訂閱 Medium 會員，可以用免費額度或是無痕模式打開來看）</p><h3 id="當工程師十年的心得感想"><a href="#當工程師十年的心得感想" class="headerlink" title="當工程師十年的心得感想"></a><a href="https://mz026.medium.com/%E7%95%B6%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%8D%81%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97%E6%84%9F%E6%83%B3-30c1ec688f9f" target="_blank" rel="noopener">當工程師十年的心得感想</a></h3><p>這篇是作者在當了十年的工程師之後，自己得到的種種體悟，雖然每個人的想法多少有不同，但我覺得看看別人的經驗，也許對自己也能有一些不錯的啟發</p><h3 id="軟體開發者的培養"><a href="#軟體開發者的培養" class="headerlink" title="軟體開發者的培養"></a><a href="https://etrexkuo.medium.com/%E8%BB%9F%E9%AB%94%E9%96%8B%E7%99%BC%E8%80%85%E7%9A%84%E5%9F%B9%E9%A4%8A-8fee43c76195" target="_blank" rel="noopener">軟體開發者的培養</a></h3><p>這篇跟上一篇有點類似，不過著重的點是在於作者卡米哥認為軟體開發者應該具有怎麼樣的價值觀，像是你應該要在乎程式碼的修改成本、理解成本、測試成本等等，我自己看完也是覺得收穫很多～</p><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><h3 id="Cloud-Native-Security-Whitepaper-version-1-0-audiobook-release"><a href="#Cloud-Native-Security-Whitepaper-version-1-0-audiobook-release" class="headerlink" title="Cloud Native Security Whitepaper version 1.0 audiobook release"></a><a href="https://www.cncf.io/blog/2022/08/12/cloud-native-security-whitepaper-version-1-0-audiobook-release/" target="_blank" rel="noopener">Cloud Native Security Whitepaper version 1.0 audiobook release</a></h3><p>CNCF 的 Security Technical Advisory Group 最近推出了 Cloud Native Security Whitepaper 的第二版 (<a href="https://github.com/cncf/tag-security/tree/main/security-whitepaper" target="_blank" rel="noopener">GitHub 下載連結</a>)，除此之外還特別準備了 Cloud Native Security Whitepaper 的第一版的 audiobook (<a href="https://soundcloud.com/user-769472014/sets/cncf-tag-security-cloud-native-security-whitepaper-version-v1" target="_blank" rel="noopener">前往聆聽</a>) 讓使用者聽到第一版的講解</p><h3 id="Dependabot-now-alerts-for-vulnerable-GitHub-Actions"><a href="#Dependabot-now-alerts-for-vulnerable-GitHub-Actions" class="headerlink" title="Dependabot now alerts for vulnerable GitHub Actions"></a><a href="https://github.blog/2022-08-09-dependabot-now-alerts-for-vulnerable-github-actions/" target="_blank" rel="noopener">Dependabot now alerts for vulnerable GitHub Actions</a></h3><p>一個安全的 CI/CD 流程對於開發團隊來說是相當重要的一環，GitHub Action 除了讓開發者存放於 GitHub 的程式碼具有原生 CI/CD 的能力之外，最近官方也宣布現在會針對易受攻擊的 GitHub Actions 發出 Dependabot 的告警，用來協助開發者修復 CI/CD 流程中的安全問題</p><h3 id="Amazon-Detective-Supports-Kubernetes-Workloads-on-Amazon-EKS-for-Security-Investigations"><a href="#Amazon-Detective-Supports-Kubernetes-Workloads-on-Amazon-EKS-for-Security-Investigations" class="headerlink" title="Amazon Detective Supports Kubernetes Workloads on Amazon EKS for Security Investigations"></a><a href="https://aws.amazon.com/blogs/aws/amazon-detective-supports-kubernetes-workloads-on-amazon-eks-for-security-investigations/" target="_blank" rel="noopener">Amazon Detective Supports Kubernetes Workloads on Amazon EKS for Security Investigations</a></h3><p>AWS Detective 是 AWS 於 2020 所推出的服務，它可以用來偵測來自 Amazon GuardDyty, AWS Cloudtrail 和 AWS VPC 的嘗試登入事件，API 存取，和網路流量…等，現在他將可以支援 Kubernetes 工作流程，並且支援 AWS EKS 的安全偵測，現在只要開啟這個功能，他就會開始檢查 EKS 的 Audit Log，允許使用者可以快速偵測到運行於 EKS 中的服務是否有潛藏的惡意行為</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="My-Istiod-Pod-Can’t-Communicate-with-the-Kubernetes-API-Server"><a href="#My-Istiod-Pod-Can’t-Communicate-with-the-Kubernetes-API-Server" class="headerlink" title="My Istiod Pod Can’t Communicate with the Kubernetes API Server!"></a><a href="https://thenewstack.io/my-istiod-pod-cant-communicate-with-the-kubernetes-api-server/" target="_blank" rel="noopener">My Istiod Pod Can’t Communicate with the Kubernetes API Server!</a></h3><p>作者示範以 Cilium 和 Istio 防止多個服務之間未經授權的連線，這次展示兩個不同版本的服務不應該能夠互相連線，基本上這個功能靠 Cilium 的 L4 network policy 就可以做到了。於是作者示範假如 pod 無法跟 Kubernetes API 溝通時怎麼辦？這時可以看到 Istio 的 L7 authorization policy 會擋下連線。另外這個示範在本機即可執行。</p><h3 id="4-Ways-to-Optimize-Your-Workflows-with-Docker-Extensions"><a href="#4-Ways-to-Optimize-Your-Workflows-with-Docker-Extensions" class="headerlink" title="4 Ways to Optimize Your Workflows with Docker Extensions"></a><a href="https://thenewstack.io/4-ways-to-optimize-your-workflows-with-docker-extensions/" target="_blank" rel="noopener">4 Ways to Optimize Your Workflows with Docker Extensions</a></h3><p>Docker 桌面版最新釋出的擴充功能可以讓開發更加強大，受歡迎的擴充功能有：硬碟使用量、Tailscale（可以讓外網連線自己在內網環境本機的 container）、Logs Explorer 和 Slim.Ai（分析 container image），眾多擴充都可以在 Docker Marketplace 找到。</p><h3 id="Dashboards-as-code-A-new-approach-to-visualizing-AWS-APIs"><a href="#Dashboards-as-code-A-new-approach-to-visualizing-AWS-APIs" class="headerlink" title="Dashboards as code: A new approach to visualizing AWS APIs"></a><a href="https://aws.amazon.com/blogs/opensource/dashboards-as-code-a-new-approach-to-visualizing-aws-apis/" target="_blank" rel="noopener">Dashboards as code: A new approach to visualizing AWS APIs</a></h3><p>Steampipe 提供 Dashboard as Code 的概念讓使用者可以客製化 AWS dashboard，像是可以定義多個 regions 或多個 AWS accounts。文章裡示範如哪些 iam user 的 access key 的已經超過 90 天沒換，S3 在各個 regions 的數量，IAM user、group 和 policy 的關係，以及合規測試的 dashboard。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 144 期 - 台灣小將好「棒」！</title>
      <link href="/2022/08/09/144-taiwan-baseball-is-great/"/>
      <url>/2022/08/09/144-taiwan-baseball-is-great/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="沒技術系列-—-軟體工程師主管要寫程式嗎？"><a href="#沒技術系列-—-軟體工程師主管要寫程式嗎？" class="headerlink" title="沒技術系列 — 軟體工程師主管要寫程式嗎？"></a><a href="https://medium.com/starbugs/%E6%B2%92%E6%8A%80%E8%A1%93%E7%B3%BB%E5%88%97-%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%B8%BB%E7%AE%A1%E8%A6%81%E5%AF%AB%E7%A8%8B%E5%BC%8F%E5%97%8E-2f2e3ca50612" target="_blank" rel="noopener">沒技術系列 — 軟體工程師主管要寫程式嗎？</a></h3><p>幾年前自己剛出社會時覺得當主管很威風，現在倒是覺得當主管很可憐 🥲 當一個資深工程師開始兼任 (Team Lead) 或是正式轉任 (Engineering Manager) 管理職的時候，心中或多或少都會有一個疑問，就是還該不該繼續寫程式？關於這個問題想要將自己的所見所聞透過這篇文章記錄下來，文章會分成兩個部分，上半段談的是想法，下半段提的是做法</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Micro-frontend-with-React-and-Next-js"><a href="#Micro-frontend-with-React-and-Next-js" class="headerlink" title="Micro-frontend with React and Next.js"></a><a href="https://blog.logrocket.com/micro-frontend-react-next-js/" target="_blank" rel="noopener">Micro-frontend with React and Next.js</a></h3><p>本篇文章提到的 Micro-frontend 是避免在專案變得越來越大的時候，造成團隊的管理變得困難的一種架構。微前端可以將專案的各個功能以小模組開發和管理，本文將會用 React 及 Next 建立一個簡單的微前端專案。</p><h3 id="Why-you-should-use-SWC-and-not-Babel"><a href="#Why-you-should-use-SWC-and-not-Babel" class="headerlink" title="Why you should use SWC (and not Babel)"></a><a href="https://blog.logrocket.com/why-you-should-use-swc/" target="_blank" rel="noopener">Why you should use SWC (and not Babel)</a></h3><p>Babel 可以幫我們把那些寫得很潮的 JavaScript 酷東西，轉換成大多瀏覽器都通用的語法。但是除了 Babel，還有另外一個使用以性能和可靠性聞名的 Rust 所寫的 SWC，文章裡從為什麼需要編譯器開始介紹，如果你也好奇 Babel 外的其他選擇，可以看看文章喲！ 🙌</p><h3 id="I-stopped-using-Visual-Studio-Code"><a href="#I-stopped-using-Visual-Studio-Code" class="headerlink" title="I stopped using Visual Studio Code"></a><a href="https://h.daily-dev-tips.com/i-stopped-using-visual-studio-code" target="_blank" rel="noopener">I stopped using Visual Studio Code</a></h3><p>本人我已經不只一次被推坑使用 Webstorm，還有些朋友邊推邊 show 爆一堆不明覺厲的快捷鍵和功能，實在是讓我看得眼花撩亂 😂，雖然文章沒有介紹很多，但是作者還是有提到一些在開發上很實用的功能！</p><h2 id="遠端工作"><a href="#遠端工作" class="headerlink" title="遠端工作"></a>遠端工作</h2><h3 id="遠端工作元年-系列"><a href="#遠端工作元年-系列" class="headerlink" title="遠端工作元年 系列"></a><a href="https://ithelp.ithome.com.tw/articles/10237587" target="_blank" rel="noopener">遠端工作元年 系列</a></h3><p>因為疫情的關係，使得這幾年來遠端工作的機會大幅增加，而且很多公司為了招攬來自世界各地的人才，就算疫情已經趨緩了也還是繼續實行遠端工作。如果你也對遠端工作有興趣，那可以看看這系列文章，了解一下最近遠端工作的生態跟趨勢。</p><h3 id="程式設計自由工作者的勞保與國民年金優劣比較"><a href="#程式設計自由工作者的勞保與國民年金優劣比較" class="headerlink" title="程式設計自由工作者的勞保與國民年金優劣比較"></a><a href="https://hi-upchen.medium.com/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88%E8%87%AA%E7%94%B1%E5%B7%A5%E4%BD%9C%E8%80%85%E7%9A%84%E5%8B%9E%E4%BF%9D%E8%88%87%E5%9C%8B%E6%B0%91%E5%B9%B4%E9%87%91%E5%84%AA%E5%8A%A3%E6%AF%94%E8%BC%83-eaf22e2512b3" target="_blank" rel="noopener">程式設計自由工作者的勞保與國民年金優劣比較</a></h3><p>如果你很幸運找到一份遠端工作，卻發現你的公司並沒有在台灣設立分公司，所以沒辦法在台灣幫你保勞健保，那你就得認真算一下是要自己到工會保勞保，還是保國民年金保險比較划算。先講結論，我自己是覺得還是保勞保比較划算一點，不過還是可以看一下他們各自的好處壞處，再決定要怎麼做。</p><h3 id="Dcard-怎麼-WFH？很少人知道的-Backend-Team-日常"><a href="#Dcard-怎麼-WFH？很少人知道的-Backend-Team-日常" class="headerlink" title="Dcard 怎麼 WFH？很少人知道的 Backend Team 日常"></a><a href="https://medium.com/dcardlab/dcard-%E6%80%8E%E9%BA%BC-wfh-%E5%BE%88%E5%B0%91%E4%BA%BA%E7%9F%A5%E9%81%93%E7%9A%84-backend-team-%E6%97%A5%E5%B8%B8-53770dcdbe42" target="_blank" rel="noopener">Dcard 怎麼 WFH？很少人知道的 Backend Team 日常</a></h3><p>如果曾經 Work From Home 過，就會發現在家工作時同事間的協作方式會變得不太一樣，譬如說大家不會再一起出去吃午餐，因此少了許多閒聊的機會，或是你要找的人剛好去吃飯或睡午覺，你也沒辦法直接到他座位旁看他在不在。因此工作的模式也必須要有所改變，才能保持高效率的完成任務。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="SRE-From-Theory-to-Practice-What’s-Difficult-About-On-Call"><a href="#SRE-From-Theory-to-Practice-What’s-Difficult-About-On-Call" class="headerlink" title="SRE From Theory to Practice: What’s Difficult About On-Call?"></a><a href="https://dzone.com/articles/sre-from-theory-to-practice-whats-difficult-about" target="_blank" rel="noopener">SRE From Theory to Practice: What’s Difficult About On-Call?</a></h3><p>造成 on-call 困難的原因不外乎是沒有完好的文件、責任歸屬不清、透明度不足和花在 on-call 時間上的比例等等，要如何實踐健康的 on-call 機制可以從這三點上改善：</p><ul><li>內部的 on-call 要跟影響到客戶的外部 on-call 一樣重要，建議可以從 SLIs 和 SLOs 上著手</li><li>客戶們的使用情況可以分析不同服務的重要性，另外不確定服務的運作原理不必感到挫折或羞恥地尋求幫助！</li><li>如上所述，營造無究責的文化（blameless culture）非常重要<!-- summary --></li></ul><h3 id="Top-25-Nginx-Tips-and-Tricks-From-Practical-Experience"><a href="#Top-25-Nginx-Tips-and-Tricks-From-Practical-Experience" class="headerlink" title="Top 25 Nginx Tips and Tricks From Practical Experience"></a><a href="https://hackernoon.com/top-25-nginx-tips-and-tricks-from-practical-experience" target="_blank" rel="noopener">Top 25 Nginx Tips and Tricks From Practical Experience</a></h3><p>本文介紹 Nginx 的基本程式架構，解釋為什麼改設定的時候可以讓使用者察覺不到，並且提供許多作者實際工作上好用的 Nginx 使用訣竅，對於維運工程師是個很實用的文章，工作常用的設定都有。</p><h3 id="What-is-a-Platform-Orchestrator"><a href="#What-is-a-Platform-Orchestrator" class="headerlink" title="What is a Platform Orchestrator?"></a><a href="https://www.cncf.io/blog/2022/08/04/what-is-a-platform-orchestrator/" target="_blank" rel="noopener">What is a Platform Orchestrator?</a></h3><p>本文介紹 platform orchestrator 的精髓與要解決的痛點，其本質是建立在 Declarative Application Model 上，也是大家熟悉的 pull model，這些是可以動態更新的。而最主要解決的原先的是以靜態的方式建立 application，例如靜態設定很容易在不同環境中飄移，很難維護且很難標準化。最後還有假如要建立 platform orchestrator 的話會遇到的細節整理。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 143 期 - 米奇妙妙屋真恐怖！</title>
      <link href="/2022/08/02/143-mickey-mouse-clubhouse/"/>
      <url>/2022/08/02/143-mickey-mouse-clubhouse/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="整合-Lighthouse-CI-時遇到的大小事-feat-MSW-amp-Drone-CI"><a href="#整合-Lighthouse-CI-時遇到的大小事-feat-MSW-amp-Drone-CI" class="headerlink" title="整合 Lighthouse CI 時遇到的大小事 feat. MSW &amp; Drone CI"></a><a href="https://medium.com/starbugs/%E6%95%B4%E5%90%88-lighthouse-ci-%E6%99%82%E9%81%87%E5%88%B0%E7%9A%84%E5%A4%A7%E5%B0%8F%E4%BA%8B-feat-msw-drone-ci-794254ab3508" target="_blank" rel="noopener">整合 Lighthouse CI 時遇到的大小事 feat. MSW &amp; Drone CI</a></h3><p>大家好，這週的專欄是由 StarBugs Writer 莫力全 來跟大家分享一些整合 Lighthouse CI 時遇到的大小事。Lighthouse 是一個由 Chrome 推出用來檢測網站的工具，他會幫你評分網站的效能、SEO、Accessibility 等等，讓你知道怎麼去改善。</p><p>為了讓前端專案的品質維持在一定水準之上，老莫花了一些時間在公司專案中整合 Lighthouse CI，雖然過程中踩了很多坑，但也遇到很多有趣的挑戰。如果你也對於使用自動化測試來提高網站品質有興趣的話，就快跟著這篇文章一頭栽進 Lighthouse 的世界吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Style-Queries"><a href="#Style-Queries" class="headerlink" title="Style Queries"></a><a href="https://una.im/style-queries/" target="_blank" rel="noopener">Style Queries</a></h3><p>Style Queries 和 Container Queries 一樣 都是 contains-level-3 規範的一部份，Style Queries 能夠直接查詢頁面裡父元素的樣式內容，並根據父元素的樣式修改子元素的樣式，但為什麼我們需要這麼應用呢？來看看文章怎麼說吧！</p><h3 id="一個前端工程師的婚禮黑客松"><a href="#一個前端工程師的婚禮黑客松" class="headerlink" title="一個前端工程師的婚禮黑客松"></a><a href="https://jason-memo.dev/posts/wedding-hackathon/" target="_blank" rel="noopener">一個前端工程師的婚禮黑客松</a></h3><p>你能夠想像在一場婚禮裡面，一個前端工程師能利用自己的技能做到哪些事情嗎？這篇文章的作者他紀錄了舉辦婚禮時，自己所準備的周邊軟體，雖然比較少程式碼，但也是非常有趣且生活化的實務運用！</p><h3 id="The-End-of-Localhost"><a href="#The-End-of-Localhost" class="headerlink" title="The End of Localhost"></a><a href="https://dx.tips/the-end-of-localhost" target="_blank" rel="noopener">The End of Localhost</a></h3><p>文章裡主要在說明將來大家可能都不會在 local 上開發，也舉出許多公司的系統都已經把開發環境移到雲端上作業，同時也列舉出許多贊成和反對意見的想法，是一篇非常有趣的文章。</p><h2 id="Elixir"><a href="#Elixir" class="headerlink" title="Elixir"></a>Elixir</h2><h3 id="用-Elixir-學習後端煉金術-系列文"><a href="#用-Elixir-學習後端煉金術-系列文" class="headerlink" title="用 Elixir 學習後端煉金術 系列文"></a><a href="https://ithelp.ithome.com.tw/articles/10235287" target="_blank" rel="noopener">用 Elixir 學習後端煉金術 系列文</a></h3><p>最近一直被同事推坑 Elixir，前幾天去 Coscup 又被推一次，越聽越不錯決定花點時間來看看XD，然後就找到了這篇講 Elixir 跟 Phoenix 框架的系列文，有興趣的話也一起來學學新語言吧～</p><h3 id="46-年老技術與-Web-的新火花-Actor-Model-in-Web"><a href="#46-年老技術與-Web-的新火花-Actor-Model-in-Web" class="headerlink" title="46 年老技術與 Web 的新火花 - Actor Model in Web"></a><a href="https://blog.techbridge.cc/2019/06/21/actor-model-in-web/" target="_blank" rel="noopener">46 年老技術與 Web 的新火花 - Actor Model in Web</a></h3><p>Elixir 因為建立在 Erlang 之上，所以也是使用 Actor Model 來進行平行處理。雖然 Actor Model 比較冷門一點，但他的設計概念其實非常好，除了可以將灌注點分離，而且在平行處理時完全不需要上 lock，可以很好的解決需要平行運算的問題。</p><h3 id="CSP-vs-Actor-model-for-concurrency"><a href="#CSP-vs-Actor-model-for-concurrency" class="headerlink" title="CSP vs Actor model for concurrency"></a><a href="https://dev.to/karanpratapsingh/csp-vs-actor-model-for-concurrency-1cpg" target="_blank" rel="noopener">CSP vs Actor model for concurrency</a></h3><p>如果你也有寫 Go 的話，應該會聽過另一個 concurrency model 叫 CSP，其實我覺得 Actor model 跟 CSP 都是很好的想法，比 multi-thread 共用變數然後上 lock 還要好非常多XD。有興趣可以看這篇文章複習一下這兩個 model，也順便看看他們到底哪裡不一樣～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-Kubernetes-Reinvented-Virtual-Machines-in-a-good-sense"><a href="#How-Kubernetes-Reinvented-Virtual-Machines-in-a-good-sense" class="headerlink" title="How Kubernetes Reinvented Virtual Machines (in a good sense)"></a><a href="https://iximiuz.com/en/posts/kubernetes-vs-virtual-machines/" target="_blank" rel="noopener">How Kubernetes Reinvented Virtual Machines (in a good sense)</a></h3><p>這篇文章以實際面的角度切入加上圖片解釋了為什麼要有 Kubernetes 的存在，從最一開始的 VM 遇到的難題開始到 container 解決了什麼問題，以及 container 不能解決的問題，最後延伸到 Kubernetes pod 的特別之處，作者比喻 pod 類似 VM 的概念，所有 container 共享同一個 namespace。當然不免俗的還是要簡單介紹 Kubernetes 常見的 object 例如：Deployment、ReplicaSet 和 Service。</p><h3 id="Core-DevOps-Practices-to-Secure-Your-Infrastructure-as-Code"><a href="#Core-DevOps-Practices-to-Secure-Your-Infrastructure-as-Code" class="headerlink" title="Core DevOps Practices to Secure Your Infrastructure as Code"></a><a href="https://dzone.com/refcardz/iac-security-1" target="_blank" rel="noopener">Core DevOps Practices to Secure Your Infrastructure as Code</a></h3><p>IaC 已經是顯學了，但是 IaC 還是有許多 security 挑戰需要克服，IaC 在 hybrid-cloud 和 multi-cloud 會增加管理 security 的難度；或者 infra 持續的增長但是管理的支出不變或更少；業務上的需求說變就變，infra 必須要跟著因應而增加複雜度。IaC 靜態分析可以讓 security 有所提升，與其讓 developer 自己檢查，還不如用靜態分析來做，況且每家 cloud provider 的機制都不太一樣，文章的最後也有提及怎麼做好 security IaC for multi-cloud。<br>文章也提及 IaC security 除了 IaC CICD pipeline 的整合外，還需要重視使用後的 feedback；把 alerts 做好分類和願意承受的風險，不然團隊很快就會陷入疲勞；另外除了 infra，app 也必須做好靜態和動態的分析。</p><h3 id="Expand-the-Power-of-Traefik-Proxy-with-Custom-Plugins"><a href="#Expand-the-Power-of-Traefik-Proxy-with-Custom-Plugins" class="headerlink" title="Expand the Power of Traefik Proxy with Custom Plugins"></a><a href="https://traefik.io/blog/expand-the-power-of-traefik-proxy-with-custom-plugins/" target="_blank" rel="noopener">Expand the Power of Traefik Proxy with Custom Plugins</a></h3><p>Traefik proxy 是目前很受歡迎的 cloud-native application proxy 之一，其支援使用者安裝另外客製化的 plugin，不論從 dashboard 或從設定檔都可以輕鬆安裝，甚至也會直接給你 YAML 範例讓使用者方便複製貼上，而且這些 plugin 不用特別編譯且跨平台支援。目前看到很有意思的 plugin 有 ldapAuth、DenyIP、Rewrite Body 等等，最後官方也有完整的文章教學怎麼寫一個客製化的 plugin。</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><h3 id="ConfigMap-Reloader-—-Automatically-reload-new-data-from-ConfigMap-Secret-to-deployments"><a href="#ConfigMap-Reloader-—-Automatically-reload-new-data-from-ConfigMap-Secret-to-deployments" class="headerlink" title="ConfigMap Reloader — Automatically reload new data from ConfigMap/Secret to deployments"></a><a href="https://medium.com/linux-shots/configmap-secret-reloader-automatically-add-reload-data-from-configmap-secret-to-deployments-dc245e06b92c" target="_blank" rel="noopener">ConfigMap Reloader — Automatically reload new data from ConfigMap/Secret to deployments</a></h3><p>大家應該都會把一些應用服務要使用到的變數或是組態存放在 K8s Configmap 或是 Secret 中，而這些值一定會有需要修改的時候，不過當他們被修改時，其實滿多應用服務並不會自動去重新讀取新的值，所以這篇文章介紹了一個叫做 Reloader 的 K8s Controller，他會去監看這些 K8s Configmap 跟 Secret，當他們有改變時，他就會去幫忙 Rolling Upgrade 跟這些 Configmap 跟 Secret 有關的 Deployments, StatefulSets 或是 DaemonSets！</p><h3 id="kubebrain"><a href="#kubebrain" class="headerlink" title="kubebrain"></a><a href="https://github.com/kubewharf/kubebrain" target="_blank" rel="noopener">kubebrain</a></h3><p>K8s 已經成為分散式應用服務調度的標準系統，不過他只能穩定的支援 5,000 個 Node，不管是在橫向或是縱向的擴張上，K8s 需要處理運行於其中應用服務狀態的資訊量會不斷的增加，最後造成擴展上的瓶頸，白話文就是說 Etcd 撐不住了，所以作者推出 KubeBrain 的開源專案，想要用來取代 Etcd，根據<a href="https://github.com/kubewharf/kubebrain/blob/main/docs/benchmark.md" target="_blank" rel="noopener">實驗結果</a>看起來讀跟寫的效能比 ETCD 來的好，但是刪除比較弱，需要再繼續最佳化，不過在 K8s Cluster 在實際運行時，需要刪除動作的情況筆記少</p><h3 id="Kubernetes-monitoring-leveraging-4-open-source-toolsets"><a href="#Kubernetes-monitoring-leveraging-4-open-source-toolsets" class="headerlink" title="Kubernetes monitoring: leveraging 4 open-source toolsets"></a><a href="https://www.cncf.io/blog/2022/08/01/kubernetes-monitoring-leveraging-4-open-source-toolsets/" target="_blank" rel="noopener">Kubernetes monitoring: leveraging 4 open-source toolsets</a></h3><p>使用 K8s 的人假如想要有一套綜合的監控工具該如何達成呢？CNCF 這邊建議可以使用 Prometheus 負責 Metrics and Alerting，Jaeger 負責 Tracing，OpenTelemetry 負責標準化的 Metrics, Logs, Traces，Thanos 負責多個叢集和長時間的 Metric 儲存</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 142 期 - 原來國語日報作文班那麼厲害</title>
      <link href="/2022/07/26/142-mandarin-daily-is-cool/"/>
      <url>/2022/07/26/142-mandarin-daily-is-cool/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來讓網頁換換-SKIN-吧！一鍵切換你的網頁設計風格"><a href="#來讓網頁換換-SKIN-吧！一鍵切換你的網頁設計風格" class="headerlink" title="來讓網頁換換 SKIN 吧！一鍵切換你的網頁設計風格."></a><a href="https://medium.com/starbugs/%E4%BE%86%E8%AE%93%E7%B6%B2%E9%A0%81%E6%8F%9B%E6%8F%9B-skin-%E5%90%A7-%E6%B7%BA%E8%AB%87%E5%A6%82%E4%BD%95%E5%AF%A6%E4%BD%9C%E6%8F%9B%E8%86%9A%E5%8A%9F%E8%83%BD-39106e56621a" target="_blank" rel="noopener">來讓網頁換換 SKIN 吧！一鍵切換你的網頁設計風格.</a></h3><p>大家好，這週的專欄是由 StarBugs Writers 00 分享，因為近期 00 公司專案實作了切換主題的功能，想想又好像很少人會接觸到實際產品需要這種功能，就決定來分享一下怎麼簡單實現它。當然所謂的切換主題不只是顏色，就連高度、寬度等雜七雜八的樣式都能換，甚至是能夠在更換樣式時監聽變化！</p><p>如果你也好奇，就跟著文章一步一步完成這個聽起來很酷的東西吧！ 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Fantastic-CSS-border-animation"><a href="#Fantastic-CSS-border-animation" class="headerlink" title="Fantastic CSS border animation"></a><a href="https://dev.to/chokcoco/fantastic-css-border-animation-5166" target="_blank" rel="noopener">Fantastic CSS border animation</a></h3><p>相信大家都一定有用過 CSS 的 border 來完成一些需要框線的 UI，但是你能想像框線還能夠延伸出怎樣的視覺效果或動畫嗎？也許之前你沒想過的，在這篇文章都有！ 🙌</p><h3 id="Code-Smell-149-—-Optional-Chaining"><a href="#Code-Smell-149-—-Optional-Chaining" class="headerlink" title="Code Smell 149 — Optional Chaining"></a><a href="https://levelup.gitconnected.com/code-smell-149-optional-chaining-b8830d7206ae" target="_blank" rel="noopener">Code Smell 149 — Optional Chaining</a></h3><p>文章中主要介紹在 JavaScript 裡，有個 <code>?.</code> 能夠在訪問某個物件屬性前，先判斷物件是否為 <code>null</code> 或 <code>undefined</code>，但在你健全的程式碼當中，怎麼會有一個物件會在訪問時還會是 <code>null</code> 或 <code>undefined</code> 呢？除此之外，這個作者的 Code Smell 系列會把一些有壞味道的程式碼或寫法列出來，有興趣的可以再多看看其他文章哦！但就不一定都是 JavaScript。</p><h3 id="My-Dumbest-CSS-Mistakes"><a href="#My-Dumbest-CSS-Mistakes" class="headerlink" title="My Dumbest CSS Mistakes"></a><a href="https://css-tricks.com/my-dumbest-css-mistakes/" target="_blank" rel="noopener">My Dumbest CSS Mistakes</a></h3><p>作者列出他自己在寫 CSS 的時候常會有的 typo 或是誤會，雖然有些看起來真的是很基本的東西，但都會不經意的寫錯，我自己在看這篇文章的時候，也邊在思考有什麼語法是我每次都一定會弄錯，再改成正確的 😂。大家在看文章時也可以思考看看，然後在列出來面對之後把它們一次改過來！</p><h2 id="資料庫"><a href="#資料庫" class="headerlink" title="資料庫"></a>資料庫</h2><h3 id="複習資料庫的-Isolation-Level-與圖解五個常見的-Race-Conditions"><a href="#複習資料庫的-Isolation-Level-與圖解五個常見的-Race-Conditions" class="headerlink" title="複習資料庫的 Isolation Level 與圖解五個常見的 Race Conditions"></a><a href="https://medium.com/@chester.yw.chu/%E8%A4%87%E7%BF%92%E8%B3%87%E6%96%99%E5%BA%AB%E7%9A%84-isolation-level-%E8%88%87%E5%B8%B8%E8%A6%8B%E7%9A%84%E4%BA%94%E5%80%8B-race-conditions-%E5%9C%96%E8%A7%A3-16e8d472a25c" target="_blank" rel="noopener">複習資料庫的 Isolation Level 與圖解五個常見的 Race Conditions</a></h3><p>最近為了準備面試，又重新回去複習資料庫的 Isolation Level，意外發現這篇文章寫得非常清楚，不只有畫圖給你，而且還舉了非常多的例子，一篇就可以把 Isolation Level 看懂。</p><blockquote><p>註：這篇是 Medium 上的 Member-only story，可以用無痕模式打開來看</p></blockquote><h3 id="RDBMS-關聯式資料庫-ACID-基礎觀念"><a href="#RDBMS-關聯式資料庫-ACID-基礎觀念" class="headerlink" title="RDBMS (關聯式資料庫) - ACID 基礎觀念"></a><a href="https://blog.kennycoder.io/2020/01/21/RDBMS-%E9%97%9C%E8%81%AF%E5%BC%8F%E8%B3%87%E6%96%99%E5%BA%AB-ACID%E5%9F%BA%E7%A4%8E%E8%A7%80%E5%BF%B5/" target="_blank" rel="noopener">RDBMS (關聯式資料庫) - ACID 基礎觀念</a></h3><p>同樣是為了準備面試XD，最近又去把 ACID 分別是什麼複習了一下。如果你是剛開始入門使用 RDBMS，可以先看看這篇文章，會讓你在使用資料庫時對他的設計比較有概念哦。</p><h3 id="What-is-the-difference-between-“INNER-JOIN”-and-“OUTER-JOIN”"><a href="#What-is-the-difference-between-“INNER-JOIN”-and-“OUTER-JOIN”" class="headerlink" title="What is the difference between “INNER JOIN” and “OUTER JOIN”?"></a><a href="https://stackoverflow.com/a/38578/4753060" target="_blank" rel="noopener">What is the difference between “INNER JOIN” and “OUTER JOIN”?</a></h3><p>眾所皆知 SQL 的 JOIN 可以分成 Inner 跟 Outer 兩種，而 Outer 又分成 Left, Right 跟 Full 三種，真的會被搞到霧煞煞。如果你跟我一樣到現在還分不太清楚的話，可以來看看這篇 Stack Overflow 的留言，三分種就把這些搞懂～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-Prometheus-Querying-Works-and-Why-You-Should-Care"><a href="#How-Prometheus-Querying-Works-and-Why-You-Should-Care" class="headerlink" title="How Prometheus Querying Works (and Why You Should Care)"></a><a href="https://www.timescale.com/blog/how-prometheus-querying-works-and-why-you-should-care/" target="_blank" rel="noopener">How Prometheus Querying Works (and Why You Should Care)</a></h3><p>深入 Prometheus 如何查詢資料細節的文章，本文是基於 2022 年歐洲 Prometheus Day 演講做的延伸，裡面有影片可以參考。從 Prometheus data model 以及 indexing 策略到最後的執行查詢，執行查詢有一步一步拆解整體的流程。</p><h3 id="Prometheus-vs-OpenTelemetry-Metrics-A-Complete-Guide"><a href="#Prometheus-vs-OpenTelemetry-Metrics-A-Complete-Guide" class="headerlink" title="Prometheus vs. OpenTelemetry Metrics: A Complete Guide"></a><a href="https://www.timescale.com/blog/prometheus-vs-opentelemetry-metrics-a-complete-guide/" target="_blank" rel="noopener">Prometheus vs. OpenTelemetry Metrics: A Complete Guide</a></h3><p>究竟要使用 Prometheus 還是 OpenTelemetry 呢？本文給了詳盡的建議。此篇是系列文的最後一篇比較文，有興趣可以看前面兩篇介紹 Prometheus 和 OpenTelemetry。這兩個工具最大的差異在於 Prometheus 從收集、儲存和搜尋都做完了，而 OpenTelemetry 本身負責的事情只有收集而已，儲存和搜尋都是交給其他服務去做。</p><h3 id="How-to-quickly-and-successfully-onboard-engineers"><a href="#How-to-quickly-and-successfully-onboard-engineers" class="headerlink" title="How to quickly (and successfully) onboard engineers"></a><a href="https://about.gitlab.com/blog/2022/07/21/quickly-onboarding-engineers-successfully/" target="_blank" rel="noopener">How to quickly (and successfully) onboard engineers</a></h3><p>DevOps 文化的涉略範圍當然也包括加速新進人員的上手過程，時間軸上大致分為四個階段：從新進員工還沒開工前就要開始準備了、第一天的準備、第一週的目標以及一個月後持續的遞交價值。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 141 期 - 沒測到 Bug 反而覺得怪怪的</title>
      <link href="/2022/07/19/141-feel-strange-when-without-bug/"/>
      <url>/2022/07/19/141-feel-strange-when-without-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Consistency-between-Cache-and-Database-Part-2"><a href="#Consistency-between-Cache-and-Database-Part-2" class="headerlink" title="Consistency between Cache and Database, Part 2"></a><a href="https://lazypro.medium.com/consistency-between-cache-and-database-part-2-e28fc7f8a7c3?postPublishedType=repub" target="_blank" rel="noopener">Consistency between Cache and Database, Part 2</a></h3><p>大家好，這週的專欄是 Starbugs Writers 吳俊廷 所分享的 「Consistency between Cache and Database, Part 2」</p><p>在上一篇 <a href="https://medium.com/starbugs/consistency-between-cache-and-database-part-1-f64f4a76720" target="_blank" rel="noopener">Consistency between Cache and Database, Part 1</a> 的文章中，詳細地說明了 Cache Expiry 跟 Read Aside 這兩種 Caching Pattern，而在這邊有關於 Cache 的系列文章會一口氣把 Read Through, Write Through, Write Ahead 和 Double Delete 這四種 Caching Pattern 也都交代清楚</p><p>希望透過此系列文可以讓大家對於解決 Cache 和 Database 間資料的一致性有更深一層的了解，知道為什麼當對於資料一致性要求越高的話，設計出的系統就會越複雜！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="Micro-Frontend—Why-and-How"><a href="#Micro-Frontend—Why-and-How" class="headerlink" title="Micro-Frontend—Why and How?"></a><a href="https://www.syncfusion.com/blogs/post/micro-frontend-why-and-how.aspx" target="_blank" rel="noopener">Micro-Frontend—Why and How?</a></h3><p>微前端的概念類似於微服務，我們可以將整個應用程式分解成更小的應用功能，這些功能可以由各個團隊自主開發，如此一來就能夠讓不同的團隊在不各自影響的狀況下進行開發。這篇文章給了很好的入門觀念和實作方式，如果對微前端架構有興趣的話，可以撥空看一下，並跟著實作！</p><!-- summary --><h3 id="Applying-SOLID-principles-in-React"><a href="#Applying-SOLID-principles-in-React" class="headerlink" title="Applying SOLID principles in React"></a><a href="https://konstantinlebedev.com/solid-in-react/" target="_blank" rel="noopener">Applying SOLID principles in React</a></h3><p>SOLID 在軟體開發中，是非常常看到的設計原則。作者在文章中分別介紹了 SOLID 的意思，並且在某些原則上用了 React 的程式碼範例幫助理解（只少了 Liskov），但是文章的範例都很簡單！就算與 React 不熟也可以讀讀看喲！</p><h3 id="JavaScript-Design-Patterns-–-Explained-with-Examples"><a href="#JavaScript-Design-Patterns-–-Explained-with-Examples" class="headerlink" title="JavaScript Design Patterns – Explained with Examples"></a><a href="https://www.freecodecamp.org/news/javascript-design-patterns-explained/" target="_blank" rel="noopener">JavaScript Design Patterns – Explained with Examples</a></h3><p>我本身算是很喜歡在遇到問題時，使用設計模式去做重構或是思考，但是 JavaScript 畢竟不是 OOP，因此有些設計模式的觀念都再要自己轉換到 JS 中，這時候如果有篇用 JavaScript 為例子講解設計模式的文章，就會覺得挖到寶了趕快來看看，如果你們也一樣的話，就快點進文章中吧！</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><!-- summary --><h3 id="7-Best-Practices-for-Speeding-Up-Code-Reviews"><a href="#7-Best-Practices-for-Speeding-Up-Code-Reviews" class="headerlink" title="7 Best Practices for Speeding Up Code Reviews"></a><a href="https://hackernoon.com/7-best-practices-for-speeding-up-code-reviews" target="_blank" rel="noopener">7 Best Practices for Speeding Up Code Reviews</a></h3><p>Code Review 可能會很痛苦，軟體開發工程師經常會抱怨 Review 的流程緩慢，導致其他相關的任務也跟著被延遲，而且也造成自己在新開的 PR 和下個工作任務之間來回切換；Review 出來的結果也可能會充滿吹毛求疵的回饋，這對所有參加 Code Review 的人來說都是很糟糕的體驗</p><!-- summary --><p>甚至有人建議將 Code Review 直接取消，不過這種作法可能對新創小公司還適合，但作者認為這樣的做法不適合所有的組織，尤其是企業級的大公司，所以作者想要透過這篇文章提出七個關於 Code Review 的最佳實踐，PR Submitter 和 Reviewer 在 Code Review 的過程有更好的體驗</p><h3 id="pocketbase"><a href="#pocketbase" class="headerlink" title="pocketbase"></a><a href="https://github.com/pocketbase/pocketbase" target="_blank" rel="noopener">pocketbase</a></h3><p>PocketBase 是一個開源的 Go 後端框架，可以用來構建後端應用，他由以下元件所組成：即時訂閱功能，檔案和使用者管理，方便的管理員 UI，和 REST-ish API，Client 端 API SDK，讓開發者可以輕鬆地開發後端應用</p><h3 id="tproxy"><a href="#tproxy" class="headerlink" title="tproxy"></a><a href="https://github.com/kevwan/tproxy" target="_blank" rel="noopener">tproxy</a></h3><p>當作者在開發後端服務和 <a href="https://github.com/zeromicro/go-zero" target="_blank" rel="noopener">go-zero</a> 時，常常會需要去監控網路流量，例如監控 gRPC 何時需要連線或是重新連線，監控 MySQL 的 Connection Pool 有多少，以及監控目前有多少的 TCP 連線，這些都是很麻煩的事情，因此作者想要提供一個簡單的工具，可以讓開發者即時監控這些網路相關數據，專注在程式邏輯的開發上面</p><h2 id="系統設計"><a href="#系統設計" class="headerlink" title="系統設計"></a>系統設計</h2><h3 id="CAP定理101—分散式系統，有一好沒兩好"><a href="#CAP定理101—分散式系統，有一好沒兩好" class="headerlink" title="CAP定理101—分散式系統，有一好沒兩好"></a><a href="https://medium.com/%E5%BE%8C%E7%AB%AF%E6%96%B0%E6%89%8B%E6%9D%91/cap%E5%AE%9A%E7%90%86101-3fdd10e0b9a" target="_blank" rel="noopener">CAP定理101—分散式系統，有一好沒兩好</a></h3><p>最近 Larry 我在找工作，所以又重新讀了很多基礎的理論，意外發現這篇很不錯的文章。這篇從為什麼會出現 Partition 開始講起 CAP 定理，一步一步探究為什麼 CAP 三者不可能同時被滿足，最終再解釋 eventually consistency 這個妥協後的解法。</p><h3 id="Unique-Id-generation-in-distributed-systems"><a href="#Unique-Id-generation-in-distributed-systems" class="headerlink" title="Unique Id generation in distributed systems"></a><a href="https://medium.com/nerd-for-tech/unique-id-generation-in-distributed-systems-6f7aaa39c9af" target="_blank" rel="noopener">Unique Id generation in distributed systems</a></h3><p>你有想過在分散式系統中，如果讓不同機器生出不同的 ID 嗎？因為 UUID 實在太長了不符合這篇文章的情境（要讓使用者輸入 ID），所以作者參考了 Twitter snowflake 的設計理念，設計出自己的一套絕對不重複的 ID，很有趣的一篇文章。</p><h3 id="System-Design-—-Top-K-Trending-Hashtags"><a href="#System-Design-—-Top-K-Trending-Hashtags" class="headerlink" title="System Design — Top K Trending Hashtags"></a><a href="https://mecha-mind.medium.com/system-design-top-k-trending-hashtags-4e12de5bb846" target="_blank" rel="noopener">System Design — Top K Trending Hashtags</a></h3><p>如果要你實作一個系統，用來統計近 24 小時內 Instagram 上最熱門的十個 hashtag，那你會怎麼做設計呢？如果想不到的話可以來看看這篇文章，他從資料量跟使用者人數開始進行分析，並且提供了一個簡單（好像也不是那麼簡單？）的解法。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="On-Coordination-Costs-Moving-A-Couch-And-Painting-A-Room"><a href="#On-Coordination-Costs-Moving-A-Couch-And-Painting-A-Room" class="headerlink" title="On Coordination Costs: Moving A Couch, And Painting A Room"></a><a href="https://itrevolution.com/on-coordination-costs-moving-a-couch-and-painting-a-room/" target="_blank" rel="noopener">On Coordination Costs: Moving A Couch, And Painting A Room</a></h3><p>作者探討如何減低組織內的合作成本，以生活例子舉例讓讀者更好理解。第一個方法是以時間做切分，一開始先把令人分心的事物先移開，之後專心做主要任務，結束後再把分心的事物歸回原位。第二個方法為以空間做切分，其用意跟第一個方法無異。雖然本文因生活例子做出發看起來這樣的合作理所當然，但實際上在組織裡困難許多，光是看文章下的留言就略知一二。<!-- summary --></p><h3 id="Why-More-Incidents-Are-Better"><a href="#Why-More-Incidents-Are-Better" class="headerlink" title="Why More Incidents Are Better"></a><a href="https://devops.com/why-more-incidents-are-better/" target="_blank" rel="noopener">Why More Incidents Are Better</a></h3><p>要達到系統上完全沒有事故是不可能的，事實上，有事故反而才是好事，這代表著學習的機會、此次事故有可能避免更糟糕的情況、合作修復事故可以增進團隊文化、修復事故讓 SRE 團隊在組織更有價值。</p><h3 id="How-to-secure-Kubernetes-Ingress"><a href="#How-to-secure-Kubernetes-Ingress" class="headerlink" title="How to secure Kubernetes Ingress?"></a><a href="https://www.cncf.io/blog/2022/07/12/how-to-secure-kubernetes-ingress/" target="_blank" rel="noopener">How to secure Kubernetes Ingress?</a></h3><p>這篇示範 Kubernetes 以 Ingress 接受流量時怎麼做 HTTPS，或許對許多人而言是基本功，不過 Kubernetes Ingress 實踐 SSL/TLS 有很多做法，甚至每家 cloud provider 都整合他們自己的做法，這裡提供不依賴 cloud provider 的做法讓大家參考。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 140 期 - 日子不好過，但祝福大家都能跟著乘載希望的火箭發射出去！</title>
      <link href="/2022/07/12/140-rocket-is-launched/"/>
      <url>/2022/07/12/140-rocket-is-launched/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Consistency-between-Cache-and-Database-Part-1"><a href="#Consistency-between-Cache-and-Database-Part-1" class="headerlink" title="Consistency between Cache and Database, Part 1"></a><a href="https://medium.com/starbugs/consistency-between-cache-and-database-part-1-f64f4a76720" target="_blank" rel="noopener">Consistency between Cache and Database, Part 1</a></h3><p>大家好，這週的專欄是 Starbugs Writers 吳俊廷 所分享的 「Consistency between Cache and Database, Part 1」</p><p>Cache 的重要性不言而喻，當使用者送出請求，假如資料可以在 Cache 裡面找到的話，那麼便不用再跑去 Database 裡面做查詢，除了省時省力之外，也可以降低 Database 這個寶貴資源的負載</p><p>不過要如何確保 Cache 和 Database 間的資料保持一致呢？這中間可就有不少學問可以探究，讓我們跟著此系列文來學習這兩個儲存元件之間為了要保持資料一致性可能會遇到的問題與解決方法！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="前端工程師都在忙些什麼？"><a href="#前端工程師都在忙些什麼？" class="headerlink" title="前端工程師都在忙些什麼？"></a><a href="https://kimtoday.medium.com/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E9%83%BD%E5%9C%A8%E5%BF%99%E4%BA%9B%E4%BB%80%E9%BA%BC-39a066128a" target="_blank" rel="noopener">前端工程師都在忙些什麼？</a></h3><p>作者憑藉著自己的記憶和求證紀錄，在文章中描述了過去十年來前端圈到底發生了哪些事情，文章中將分成以下幾種時期，闡述每個時期間的發展：</p><ul><li>歡樂老時光 — 2007–2009</li><li>混合開發，前端生態 — 2009–2010</li><li>開發體系，模組化 — 2011–2013</li><li>資料流 ，體驗最佳化 — 2014–2016</li><li>可免則免，快狠準 —2017–now</li></ul><p>這些時期在前端圈發展出來的工具非常非常多，很喜歡作者最後說的：「每個工具都有想解決的問題，發展和演進也都有它的原因，去了解它們，不需要想得太複雜，也不用盲目地追求技術」。</p><h3 id="Bun-is-a-fast-all-in-one-JavaScript-runtime"><a href="#Bun-is-a-fast-all-in-one-JavaScript-runtime" class="headerlink" title="Bun is a fast all-in-one JavaScript runtime"></a><a href="https://bun.sh/" target="_blank" rel="noopener">Bun is a fast all-in-one JavaScript runtime</a></h3><p>繼幾年前的 <a href="https://deno.land/" target="_blank" rel="noopener">deno</a> 之後，又出現了一款能夠打包、轉譯、安裝和執行 JavaScript 的 Bun！Bun 使用的 JavaScript 引擎是 <a href="https://github.com/WebKit/WebKit/tree/main/Source/JavaScriptCore" target="_blank" rel="noopener">JavaScriptCore</a>，且大部分的轉譯內容包含 JSX/TypeScript、SQLite client、WebSocket client 等都是從頭寫出來的。還有其他更多特色，到官網中看看有哪些吸引到你的！</p><h3 id="Introduction-to-Defensive-CSS"><a href="#Introduction-to-Defensive-CSS" class="headerlink" title="Introduction to Defensive CSS"></a><a href="https://defensivecss.dev/articles/intro-defensive-css/" target="_blank" rel="noopener">Introduction to Defensive CSS</a></h3><p>在今年初的 114 期週刊中，有推薦一篇 <a href="https://ishadeed.com/article/defensive-css/" target="_blank" rel="noopener">Defensive CSS</a>，而這篇也是以相同概念作延伸，並增加一些 UI 設計師在設計時對版面的思考，以及在工程師端該如何處理內容過多，導致圖片根據版面被撐開造成比例錯誤的狀況。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="List-of-DevOps-Blogs-and-Resources-for-Learning"><a href="#List-of-DevOps-Blogs-and-Resources-for-Learning" class="headerlink" title="List of DevOps Blogs and Resources for Learning"></a><a href="https://devopscube.com/list-of-devops-blogs-and-resources/" target="_blank" rel="noopener">List of DevOps Blogs and Resources for Learning</a></h3><p>這篇目前是我看過最厲害的 DevOps 資源整理，從課程、Github repository（光是這個水就很深）、書籍、blog、social media、podcast、知名人士、白皮書、必看的工程文章 blog、討論區。可以看得出來這篇整理都是精挑細選的，想要精進自己這邊是很好的入口，更不用說筆者我之後的 DevOps 推薦文章也會從裡面找。<!-- summary --></p><h3 id="Understanding-data-transfer-costs-for-AWS-container-services"><a href="#Understanding-data-transfer-costs-for-AWS-container-services" class="headerlink" title="Understanding data transfer costs for AWS container services"></a><a href="https://aws.amazon.com/blogs/containers/understanding-data-transfer-costs-for-aws-container-services/" target="_blank" rel="noopener">Understanding data transfer costs for AWS container services</a></h3><p>這篇解釋在 AWS 上使用 container 服務所花的資料傳輸費用。例如 container deployment 的不同而很難注意到花費，container image registry 是否為 public or private、是否同個 region 都會影響資料傳輸費用。有些 AWS container 服務的特殊性，地端的 nodes 需要跟 AWS 雲上的 control plane 做溝通也會有傳輸費用，更不用說 AZ 之間的傳輸費用。甚至要注意的是 Kubernetes 的設定是不是流量直接到適當的 node 上而不用再請 kube-proxy 轉送。</p><h3 id="Advanced-Features-of-Kubernetes’-Horizontal-Pod-Autoscaler"><a href="#Advanced-Features-of-Kubernetes’-Horizontal-Pod-Autoscaler" class="headerlink" title="Advanced Features of Kubernetes’ Horizontal Pod Autoscaler"></a><a href="https://betterprogramming.pub/advanced-features-of-kubernetes-horizontal-pod-autoscaler-536ebd7893ad" target="_blank" rel="noopener">Advanced Features of Kubernetes’ Horizontal Pod Autoscaler</a></h3><p>本文用 KinD 做測試環境示範進階的 HPA（Horizontal Pod Autoscaler），基本 HPA 常見的基準就是 CPU or memory 使用量，於是作者就示範客製 Prometheus metric 來觸發 HPA，而且可以從 <code>Pods</code> 和 <code>Service</code> 這兩層看情況收集。除了從 application 本身獲取 metric 之外，也可以從它的 backing service 下手，例如 DB 或 queue service。另外也介紹較為特殊的功能如：HPAScaleToZero、HPAContainerMetrics、LogarithmicScaleDown。</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><h3 id="How-Virtual-Kubernetes-Clusters-Can-Speed-Up-Your-Local-Development"><a href="#How-Virtual-Kubernetes-Clusters-Can-Speed-Up-Your-Local-Development" class="headerlink" title="How Virtual Kubernetes Clusters Can Speed Up Your Local Development"></a><a href="https://loft-sh.medium.com/how-virtual-kubernetes-clusters-can-speed-up-your-local-development-e5645614a3c5" target="_blank" rel="noopener">How Virtual Kubernetes Clusters Can Speed Up Your Local Development</a></h3><p><a href="https://github.com/loft-sh/vcluster" target="_blank" rel="noopener">vcluster</a> 是 Loft 的一個專案，他可以將一個虛擬的 K8s Cluster 建立在實體 K8s Cluster 的一個 Namepsace 中 (感覺好像在繞口令)，換句話說就是 Host K8s Cluster -&gt; Namespace -&gt; Virtual K8s Cluster！而這篇文章則是要跟大家介紹如何利用 vcluster 來加速本地端開發流程</p><h3 id="How-to-scale-down-Kubernetes-cluster-workloads-during-off-hours"><a href="#How-to-scale-down-Kubernetes-cluster-workloads-during-off-hours" class="headerlink" title="How to scale down Kubernetes cluster workloads during off-hours"></a><a href="https://tanmay-bhat.medium.com/how-to-scale-down-kubernetes-cluster-workloads-during-off-hours-fe4bc477ed51" target="_blank" rel="noopener">How to scale down Kubernetes cluster workloads during off-hours</a></h3><p>K8s 有沒有可能根據時間把叢集變小？為什麼會想要這樣做呢？因為作者所為維護的服務其實在下班時間沒有什麼流量，尤其在週末更是慘澹，所以假如可以根據時間把 K8s Cluster 縮小的話，就可以解省很多的經費，所以他想要跟大家介紹一個叫做 <a href="https://codeberg.org/hjacobs/kube-downscaler" target="_blank" rel="noopener">Kubernetes Downscaler</a> 的開源專案，讓 K8s 可以根據使用者需求節能省碳</p><h3 id="Cubernetes"><a href="#Cubernetes" class="headerlink" title="Cubernetes"></a><a href="https://www.justingarrison.com/blog/2022-07-06-cubernetes/" target="_blank" rel="noopener">Cubernetes</a></h3><p>有在研究自架 K8s 的人應該有聽過 <a href="https://aws.amazon.com/blogs/containers/getting-started-with-eks-anywhere-on-bare-metal/" target="_blank" rel="noopener">Amazon EKS Anywhere</a>，而作者就利用這個專案花了幾個月的時間自幹的一座 K8s Cluster，並將其取名為 Cubernetes，文中詳細地描述了如何完成這台機器的詳細過程，看起來滿酷的，會有人也想要跟作者一樣也自己來一台嗎XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 139 期 - 薪水跟不上通膨的速度怎麼辦？！</title>
      <link href="/2022/07/05/139-monorepo/"/>
      <url>/2022/07/05/139-monorepo/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="常見的-Monorepo-框架大比較"><a href="#常見的-Monorepo-框架大比較" class="headerlink" title="常見的 Monorepo 框架大比較"></a><a href="https://medium.com/starbugs/%E5%B8%B8%E8%A6%8B%E7%9A%84-monorepo-%E6%A1%86%E6%9E%B6%E5%A4%A7%E6%AF%94%E8%BC%83-bf49f921668a" target="_blank" rel="noopener">常見的 Monorepo 框架大比較</a></h3><p>Hi 大家好我是 Andy，這周的專欄要來更詳細的介紹 Monorepo 更大流派，Monorepo 框架百百種，這篇文章整理了三個最常使用的框架，並且列出這三個框架的優點以及相關缺點提供給讀者參考，在框架的世界中沒有絕對的好框架或者壞框架，希望讀者看完這篇文章後就能選到一個最適合自己的 Monorepo 框架。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="從零開始的前端測試"><a href="#從零開始的前端測試" class="headerlink" title="從零開始的前端測試"></a><a href="https://medium.com/asiayo-engineering/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E7%9A%84%E5%89%8D%E7%AB%AF%E6%B8%AC%E8%A9%A6-b41689b84996" target="_blank" rel="noopener">從零開始的前端測試</a></h3><p>作者的團隊在公司內將網站的前後端分離，並且將大部分元件規劃好後，就開始對它們做單元測試，以及多個元件之間的整合測試。在文章裡會描述作者一開始的思考，和在過程中所碰到的問題，是一篇乾貨滿滿的好文章！</p><h3 id="Are-you-Struggling-with-CSS"><a href="#Are-you-Struggling-with-CSS" class="headerlink" title="Are you Struggling with CSS?"></a><a href="https://blog.reactplay.io/are-you-struggling-with-css" target="_blank" rel="noopener">Are you Struggling with CSS?</a></h3><p>作者表示他自己相當害怕 CSS，也曾試著到處看喜歡網站的原始碼，但是這對他來說只有挫折而已。如果你也常因為 CSS 感到挫敗，不妨看看他覺得這一路熟練 CSS 的過程中，哪些事情是最重要的。</p><h3 id="My-Wonderful-HTML-Email-Workflow"><a href="#My-Wonderful-HTML-Email-Workflow" class="headerlink" title="My Wonderful HTML Email Workflow"></a><a href="https://www.joshwcomeau.com/react/wonderful-emails-with-mjml-and-mdx/#integrating-with-email-service-providers" target="_blank" rel="noopener">My Wonderful HTML Email Workflow</a></h3><p>用 HTML 寫 Email 有許多需要注意的小細節，包含沒有 <code>media</code> 屬性，排版也不能用 <code>flex</code> 或 <code>grid</code> 處理，為了讓這一切變得更容易，作者使用了 <a href="https://mjml.io/" target="_blank" rel="noopener">MJML</a> 套件，並且將所有工作流程都紀錄在文章中。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="A-Closer-Look-at-Go’s-sync-Package"><a href="#A-Closer-Look-at-Go’s-sync-Package" class="headerlink" title="A Closer Look at Go’s sync Package"></a><a href="https://teivah.medium.com/a-closer-look-at-go-sync-package-9f4e4a28c35a" target="_blank" rel="noopener">A Closer Look at Go’s sync Package</a></h3><p>知道怎麼啟動 goroutine 之後，下一個問題是怎麼讓多個 goroutine 分工合作，這時候就會用到 sync 裡面的 Mutex 或是 WaitGroup。這篇文章詳細介紹了 sync package 裡面的東西，先把這篇看完再開始用 goroutine 一定會大有幫助哦</p><h3 id="Custom-GitHub-Action-with-Go"><a href="#Custom-GitHub-Action-with-Go" class="headerlink" title="Custom GitHub Action with Go"></a><a href="https://thedevelopercafe.com/articles/custom-github-action-with-go-29d9ce66e5a8" target="_blank" rel="noopener">Custom GitHub Action with Go</a></h3><p>Github Action 已經推出好一段時間了，應該有不少人都用過了。那有沒有想過要自己寫一個 action 呢？這邊有一篇簡單的教學，只要跟著做很快就可以寫出來哦～</p><h3 id="CSP-vs-Actor-model-for-concurrency"><a href="#CSP-vs-Actor-model-for-concurrency" class="headerlink" title="CSP vs Actor model for concurrency"></a><a href="https://dev.to/karanpratapsingh/csp-vs-actor-model-for-concurrency-1cpg" target="_blank" rel="noopener">CSP vs Actor model for concurrency</a></h3><p>寫 Go 的人應該都知道 Go 的 goroutine 跟 channel 是 CSP model 的具體實現，而有另外一種 concurrency model 叫 actor model 則是可以在 Elixir 中看到，有興趣可以來了解一下他們的差異～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="DevOps-vs-SRE-vs-Platform-Engineering-The-gaps-might-be-smaller-than-you-think"><a href="#DevOps-vs-SRE-vs-Platform-Engineering-The-gaps-might-be-smaller-than-you-think" class="headerlink" title="DevOps vs. SRE vs. Platform Engineering? The gaps might be smaller than you think"></a><a href="https://www.cncf.io/blog/2022/07/01/devops-vs-sre-vs-platform-engineering-the-gaps-might-be-smaller-than-you-think/" target="_blank" rel="noopener">DevOps vs. SRE vs. Platform Engineering? The gaps might be smaller than you think</a></h3><p>DevOps、SRE 和平台工程師究竟差在哪？文中探討了許多組織 DevOps 文化的問題，很多維運工程師轉變成 SRE 後其實沒有什麼差別，開發跟 SRE 還是有個鴻溝，所以內部用平台就是為了實踐 DevOps 精神，而核心精神就是當作真正的產品來維護。</p><h3 id="Why-We-Need-DevOps-for-ML-Data"><a href="#Why-We-Need-DevOps-for-ML-Data" class="headerlink" title="Why We Need DevOps for ML Data"></a><a href="https://www.tecton.ai/blog/devops-ml-data/" target="_blank" rel="noopener">Why We Need DevOps for ML Data</a></h3><p>一般的 application 生命週期在沒有 DevOps 文化的加速下非常地緩慢，更不用說 machine learning，再加上各個部門需求的夾擊下讓迭代又更慢了。裡面提及很多 machine learning 實際開發和交付時會遇上的困難，十分值得一看。</p><h3 id="Terraform-—-Provider"><a href="#Terraform-—-Provider" class="headerlink" title="Terraform — Provider"></a><a href="https://blog.devgenius.io/terraform-provider-aa57ade59eec" target="_blank" rel="noopener">Terraform — Provider</a></h3><p>我們常常使用 Terraform 各式各樣的 providers，但是你知道它怎麼運作的嗎？例如：基礎原理、如何尋找、如何宣告、版本控制、內建 providers 以及同個 provider 放在不同位置，好奇的話務必一探究竟。</p><h2 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h2><!-- summary --><h3 id="A-set-of-modern-Grafana-dashboards-for-Kubernetes"><a href="#A-set-of-modern-Grafana-dashboards-for-Kubernetes" class="headerlink" title="A set of modern Grafana dashboards for Kubernetes"></a><a href="https://medium.com/@dotdc/a-set-of-modern-grafana-dashboards-for-kubernetes-4b989c72a4b2" target="_blank" rel="noopener">A set of modern Grafana dashboards for Kubernetes</a></h3><p>作者在 2018 年擔任 DevOps Engingger 負責多個運行在 GKE 的 Go 微服務效能測試時，便開始使用 Grafana 來視覺化 K8s 運算資源的使用狀態。從那時起他便深深的愛上有關 K8s 相關監控技術而且從未停止鑽研他，也正因為如此才會有今天要介紹的 Grafana Dashboard 開源專案</p><!-- summary --><p>在這個 Grafana Dashbord 開源專案中，作者希望可以做出一系列可以幫助自己快速解決每天維運問題的 Dashboard，他並不想要把所有的 Metric 都放進來，而是希望做出有用且直覺的 Dashboard，因此最後做出了以下幾個可以搭配一起使用的 Dashboard，從範例圖看起來還滿不賴的，感覺滿值得安裝來試試看的</p><ul><li>Kubernetes / Views / Global</li><li>Kubernetes / Views / Namespaces</li><li>Kubernetes / Views / Nodes</li><li>Kubernetes / Views / Pods</li><li>Kubernetes / System / API Server</li><li>Kubernetes / System / CoreDNS</li><li>Kubernetes Addons / Trivy / Starboard Operator</li></ul><h3 id="Vault-Logging-and-Alerting-on-Day-1"><a href="#Vault-Logging-and-Alerting-on-Day-1" class="headerlink" title="Vault Logging and Alerting on Day 1"></a><a href="https://www.hashicorp.com/blog/vault-logging-and-alerting-on-day-1" target="_blank" rel="noopener">Vault Logging and Alerting on Day 1</a></h3><p>Vault 可以算是開源界 Credential Management 的第一把交椅，他可以很安全地保護機敏資料，不過他本身也是一個應用服務，要如何收集分析他的 Log？以及怎麼知道哪一些訊息表示他出問題了，需要有 Alert 通知我們呢？官方的這篇文章提供了一個簡單且免費的解決方案，讓使用者運行此方案在 AWS 環境中，就可以讓 Vault 服務可以簡易的處理 Log 與具備有 Alert 通知功能，有使用 Vault 的人千萬不要錯過了</p><h3 id="OpenTelemetry-Roadmap-and-Latest-Updates"><a href="#OpenTelemetry-Roadmap-and-Latest-Updates" class="headerlink" title="OpenTelemetry Roadmap and Latest Updates"></a><a href="https://horovits.medium.com/opentelemetry-roadmap-and-latest-updates-a389144f3812" target="_blank" rel="noopener">OpenTelemetry Roadmap and Latest Updates</a></h3><p>OpenTelemetry 目前是 CNCF 第二活躍的專案，在 KubeCon Europe 2022 中關於他的最大新聞應該就是 OpenTelemetry Metrics 已經到了 RC 階段，使用 Java, .Net 和 Python 實作的相關 API 和 SDK 也都趨於穩定，OpenTelemetry Protocol 也是越來越穩定，同時他也全面支援 Prometheus，不管是要匯出或是匯入 Prometheus 格式的 Metric 都可以，更多關於 OpenTelemetry 近期更新可以參考詳細內文</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 138 期 - 通透的海，陽光照亮了沿岸</title>
      <link href="/2022/06/28/138-great-sea/"/>
      <url>/2022/06/28/138-great-sea/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來征服資料結構與演算法吧-連-Google-面試都在考的-Binary-Tree"><a href="#來征服資料結構與演算法吧-連-Google-面試都在考的-Binary-Tree" class="headerlink" title="來征服資料結構與演算法吧 | 連 Google 面試都在考的 Binary Tree"></a><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E9%80%A3-google-%E9%9D%A2%E8%A9%A6%E9%83%BD%E5%9C%A8%E8%80%83%E7%9A%84-binary-tree-ae63c27f5969" target="_blank" rel="noopener">來征服資料結構與演算法吧 | 連 Google 面試都在考的 Binary Tree</a></h3><p>Hi！大家好，我是神 Q 超人！在這篇文章裡，會先介紹 binary tree 的資料結構，與如何使用 JavaScript 實作，最後一樣會挑幾題演算法來練練手，學習一下和 Tree 結構形影不離的深度搜尋法（DFS，Depth-first Search）與廣度搜尋法（BFS，Breadth-first Search），希望可以讓大家熟悉 binary tree 的資料結構與用法。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Patterns-for-Building-JavaScript-Websites-in-2022"><a href="#Patterns-for-Building-JavaScript-Websites-in-2022" class="headerlink" title="Patterns for Building JavaScript Websites in 2022"></a><a href="https://dev.to/this-is-learning/patterns-for-building-javascript-websites-in-2022-5a93" target="_blank" rel="noopener">Patterns for Building JavaScript Websites in 2022</a></h3><p>對現代來說，建構一個網站最難的事情是你如何在琳瑯滿目的技術、框架或是套件中，選擇需要的部分進行開發。作者從 Routing、Rendering 和 Hydration 這三個部分，將各種技術和方法用表格加以比較，文章稍難閱讀，因為內容中有滿多專有名詞的。</p><h3 id="Don’t-be-afraid-of-TypeScript"><a href="#Don’t-be-afraid-of-TypeScript" class="headerlink" title="Don’t be afraid of TypeScript"></a><a href="https://codecryrepeat.hashnode.dev/dont-be-afraid-of-typescript" target="_blank" rel="noopener">Don’t be afraid of TypeScript</a></h3><p>越來越多的前端工程師的職缺，都出現了對 TypeScript 的需求，即使不是必要的，也會將他列到加分項目。作者認為對於一個已經掌控 JavaScript 的開發者來說，要再進一步接觸 TypeScript 可能會對他的強制需求感到不知所措，但其實 TypeScript 不難！首先從了解為何需要開始！</p><h3 id="6-Best-Frontend-Communities-to-Join-in-2022"><a href="#6-Best-Frontend-Communities-to-Join-in-2022" class="headerlink" title="6 Best Frontend Communities to Join in 2022"></a><a href="https://cult.honeypot.io/reads/6-best-frontend-communities-to-join-in-2022/" target="_blank" rel="noopener">6 Best Frontend Communities to Join in 2022</a></h3><p>身為工程師就是要不斷的接觸新東西及成長，但如果身邊沒有一個圈子能夠互相討論新技術，或是最近學習了什麼的話，線上社群就會是很棒的一個選擇。文章中介紹的幾個線上社群幾乎都有 discord 的討論群，也有他們這個社群主要在討論的技術內容，如果你還是一個人的話，就選擇一個加入看看吧！</p><h2 id="後端開發-DB-資料庫"><a href="#後端開發-DB-資料庫" class="headerlink" title="後端開發 - DB 資料庫"></a>後端開發 - DB 資料庫</h2><h3 id="How-the-N-1-Query-Can-Burn-Your-Database"><a href="#How-the-N-1-Query-Can-Burn-Your-Database" class="headerlink" title="How the N+1 Query Can Burn Your Database"></a><a href="https://betterprogramming.pub/how-the-n-1-query-can-burn-your-database-3841c93987e5" target="_blank" rel="noopener">How the N+1 Query Can Burn Your Database</a></h3><p>N+1 問題是資料庫領域非常知名的問題，這篇文章詳細解釋了 N+1 問題的成因，以及該如何解決，如果才剛開始碰資料庫或是後端開發，建議可以讀讀看哦～</p><h3 id="Herding-elephants-Lessons-learned-from-sharding-Postgres-at-Notion"><a href="#Herding-elephants-Lessons-learned-from-sharding-Postgres-at-Notion" class="headerlink" title="Herding elephants: Lessons learned from sharding Postgres at Notion"></a><a href="https://www.notion.so/blog/sharding-postgres-at-notion" target="_blank" rel="noopener">Herding elephants: Lessons learned from sharding Postgres at Notion</a></h3><p>應該很多人都聽過 Notion 這個筆記軟體，隨著使用者跟資料量越來越多，他們決定要對 PostgreSQL 建的資料庫做 sharding，這篇文章說明了他們是怎麼做的、過程中遇到什麼困難，非常不錯的文章（但有點長讀起來有點累XD）</p><h3 id="Hosting-SQLite-databases-on-Github-Pages"><a href="#Hosting-SQLite-databases-on-Github-Pages" class="headerlink" title="Hosting SQLite databases on Github Pages"></a><a href="https://phiresky.github.io/blog/2021/hosting-sqlite-databases-on-github-pages/" target="_blank" rel="noopener">Hosting SQLite databases on Github Pages</a></h3><p>你一定知道 SQLite 這個資料庫，但你有想過他可以被架在 Github page 上嗎。這篇的作者先把 SQLite 編譯成 WebAssembly，接著再弄一個 file system 讓他去幫忙抓資料。雖然實用性不高但還滿有趣的XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubeconfig-File-Explained-With-Practical-Examples"><a href="#Kubeconfig-File-Explained-With-Practical-Examples" class="headerlink" title="Kubeconfig File Explained With Practical Examples"></a><a href="https://devopscube.com/kubernetes-kubeconfig-file/" target="_blank" rel="noopener">Kubeconfig File Explained With Practical Examples</a></h3><p>一開始接觸 Kubernetes 想必有很多人會疑惑自己的電腦到底是怎麼連線到 Kubernetes cluster API？其實就是靠 kubeconfig。這篇文章以實際的例子介紹 kubeconfig 的使用方法，例如：怎麼靈活運動 kubeconfig、如何 merge kubeconfig、如何生產 kubeconfig（很多 cloud provider 在這方面都把使用者體驗做得很好）以及一些 FAQs 讓讀者更了解 kubeconfig 知識。</p><h3 id="Continuous-Operations-is-the-Unsung-Hero-of-DevOps"><a href="#Continuous-Operations-is-the-Unsung-Hero-of-DevOps" class="headerlink" title="Continuous Operations is the Unsung Hero of DevOps"></a><a href="https://thenewstack.io/continuous-operations-is-the-unsung-hero-of-devops/" target="_blank" rel="noopener">Continuous Operations is the Unsung Hero of DevOps</a></h3><p>這篇文章的標題「持續維運（Continuous Operations）是 DevOps 文化裡的無名英雄」只要是身為第一線維運人員應該感同身受，其中的概念就提到應該把維運自動化到期望的設定狀態，讓維運人員可以專心在複雜的問題上，或者系統可以持續的掃描和修正錯誤。而持續維運可以解釋為 infrastructure 的持續交付（Continuous Delivery），如果使用 public cloud provider 和 Infrastructure-as-Code 就很容易，但是如果是 on-premises 環境就得花更多心力。</p><h3 id="How-to-run-untrusted-containers-in-Kubernetes"><a href="#How-to-run-untrusted-containers-in-Kubernetes" class="headerlink" title="How to run untrusted containers in Kubernetes"></a><a href="https://blog.sighup.io/how-to-run-untrusted-containers-in-kubernetes/" target="_blank" rel="noopener">How to run untrusted containers in Kubernetes</a></h3><p>我們都知道 container 的隔離性還是有限，所以才會開始有在 Kubernetes 裡跑虛擬機的做法，只要虛擬機有按照 CRI（Container Runtime Iterface）的標準就可以。這邊介紹的 gVisor 可以提供虛擬機環境給 container，讓每個 container 的 kernel 都是獨立的，可以提供更好的獨立性。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li><li><a href="https://lazypro.medium.com/" target="_blank" rel="noopener">@lazypro</a> - 從 embedded 到 kernel，從 device 上雲端，程式無涯、無法靠岸，軟體的求道者。</li><li><a href="https://medium.com/@ianchen0119" target="_blank" rel="noopener">@ianchen0119</a> - 5G 領域研究生，同時也是喜歡學習不同領域技術的工程師。</li><li><a href="https://00-talk.medium.com/" target="_blank" rel="noopener">@00-talk</a> - 我是 00，脖子痠痛的前端生命鬥士。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 137 期 - IE 辛苦了，以後我會用其他工具下載瀏覽器的</title>
      <link href="/2022/06/21/137-goodbye-ie-i-will-choice-other-tool-to-download-browser/"/>
      <url>/2022/06/21/137-goodbye-ie-i-will-choice-other-tool-to-download-browser/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Explain-Redlock-in-Depth"><a href="#Explain-Redlock-in-Depth" class="headerlink" title="Explain Redlock in Depth"></a><a href="https://medium.com/starbugs/explain-redlock-in-depth-dba95c107102" target="_blank" rel="noopener">Explain Redlock in Depth</a></h3><p>大家好，這週的專欄是 Starbugs Writers 的新成員 吳俊廷 所分享的「Explain Redlock in Depth」，也是我們成立兩年多以來第一篇英文專欄。</p><p>身為工程師，就算沒用過一定也多少聽過 Redis，而這週作者要跟大家說說為什麼他並不建議使用 Redlock（基於 Redis 的 distributed lock），文中仔細分析了 Redlock 的概念跟優缺點，就算你從來沒聽說過 Redlock，還是可以讀得懂哦～</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Data-Race-Patterns-in-Go"><a href="#Data-Race-Patterns-in-Go" class="headerlink" title="Data Race Patterns in Go"></a><a href="https://eng.uber.com/data-race-patterns-in-go/" target="_blank" rel="noopener">Data Race Patterns in Go</a></h3><p>Uber 的 Go 專案有超過五千萬行程式碼，工程師從以前到現在也修過超過一千個 data race（他們真的不考慮用 Rust 嗎XD）。而這篇文章就是他們修了這麼多 data race 之後，整理出來最可能犯錯的地方，非常值得讀的一篇文章～</p><h3 id="Options-Pattern-in-Golang"><a href="#Options-Pattern-in-Golang" class="headerlink" title="Options Pattern in Golang"></a><a href="https://link.medium.com/BWX0EmRySqb" target="_blank" rel="noopener">Options Pattern in Golang</a></h3><p>Options pattern 是 Go 裡面很常見的寫法，在很多框架裡面都能見到他的蹤影，一起來看看什麼情況下可以使用這樣的 pattern，以及有什麼好處吧</p><h3 id="Effective-Error-Handling-in-Golang"><a href="#Effective-Error-Handling-in-Golang" class="headerlink" title="Effective Error Handling in Golang"></a><a href="https://earthly.dev/blog/golang-errors/" target="_blank" rel="noopener">Effective Error Handling in Golang</a></h3><p>Go 內建的 error 跟很多語言不一樣，不僅不支援傳統的 try catch，甚至不包含 stack trace，所以用起來有一些不便，但也因此更輕量。如果才剛開始學 Go，來看看如何好好的使用 Go 的 error 吧</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Day-2022"><a href="#CSS-Day-2022" class="headerlink" title="CSS Day 2022"></a><a href="https://css-irl.info/css-day-2022/" target="_blank" rel="noopener">CSS Day 2022</a></h3><p>這篇文章的作者是 <a href="https://cssday.nl/2022" target="_blank" rel="noopener">CSS Day 2022</a> 的其中一位講者，他在文章中分享了第一次參與 CSS Day 的過程，以及在這之中聽見的 CSS 有趣知識，如果沒有時間研究所有議程，可以參考這位講者他感興趣的主題。</p><h3 id="How-to-Solve-the-Parking-Lot-Challenge-in-JavaScript"><a href="#How-to-Solve-the-Parking-Lot-Challenge-in-JavaScript" class="headerlink" title="How to Solve the Parking Lot Challenge in JavaScript"></a><a href="https://www.freecodecamp.org/news/parking-lot-challenge-solved-in-javascript/" target="_blank" rel="noopener">How to Solve the Parking Lot Challenge in JavaScript</a></h3><p>透過一些遊戲的做法來模擬解決現實中的問題，是學習程式語言中讓人感到不會枯燥的一部份，而且身為前端如果能夠再將寫好的核心邏輯已可視化的介面呈現那這個過程就會變得相當有趣。作者在文章中解釋它處理 Parking Lot Challenge 的過程及方式。</p><h3 id="Do-You-Really-Need-a-React-State-Management-Library"><a href="#Do-You-Really-Need-a-React-State-Management-Library" class="headerlink" title="Do You Really Need a React State Management Library?"></a><a href="https://blog.bitsrc.io/react-do-you-really-need-an-external-library-for-state-management-28f67d03ebe5" target="_blank" rel="noopener">Do You Really Need a React State Management Library?</a></h3><p>不論是要另外使用第三方的狀態管理工具（例如 redux），或是直接利用 React 提供的 context API，選擇這些解決方案的思考模式應該是來自於你對專案狀態的理解，熟悉各種解決方式它提供的優缺點，而不單單認為「這個比較好」。</p><h2 id="Monitoring"><a href="#Monitoring" class="headerlink" title="Monitoring"></a>Monitoring</h2><h3 id="Grafana-OnCall-OSS"><a href="#Grafana-OnCall-OSS" class="headerlink" title="Grafana OnCall OSS"></a><a href="https://grafana.com/oss/oncall/" target="_blank" rel="noopener">Grafana OnCall OSS</a></h3><p>Grafana 開源了 On Call 管理工具，就叫做 On Call XD 感覺滿值得一試的！ On Call 需要的功能都已經包含其中，例如整合第三方 Calendar 與通知服務 (Slack, Telegram, Voice, SMS)，Escalation 的設定，Alert 的 Grouping，一個集中化顯示 Alert 的地方…等，有興趣的人可以參考 <a href="https://grafana.com/docs/grafana-cloud/oncall/getting-started/" target="_blank" rel="noopener">Get Started 文件</a> 和他的 <a href="https://github.com/grafana/oncall" target="_blank" rel="noopener">GitHub Repository</a></p><h3 id="What-makes-VictoriaMetrics-the-next-leading-choice-for-open-source-monitoring"><a href="#What-makes-VictoriaMetrics-the-next-leading-choice-for-open-source-monitoring" class="headerlink" title="What makes VictoriaMetrics the next leading choice for open-source monitoring"></a><a href="https://medium.com/everything-full-stack/what-makes-victoriametrics-the-new-de-facto-standard-choice-for-open-source-monitoring-5d2b66b6e292" target="_blank" rel="noopener">What makes VictoriaMetrics the next leading choice for open-source monitoring</a></h3><p>近幾年來談到開源的監控解決方案時，大家應該都會選擇 Prometheus Stack，其中由 Grafana, Alertmanager 和各種 Exporter 所組成，但作為一個快速成長的生態系，他有著一些問題，例如他是一個效能堪憂的單體式應用程式，從設計上就缺乏有關 HA 的考量，擴展性複雜與不足，當保存的資料超過 14 天時就會造成效能降低與擴展困難</p><p>所以作者最近在研究開源監控解決方案時，覺得監控系統應該要具備高效能，高可用，便宜，易擴展，能備份且儲存相對久時間週期的資料 ，再把 Thanos, Cortex, Grafana-Mimir 和 VictoriaMetrics 都拿出來比較過一輪之後覺得 VictoriaMetrics 應該會是最符合這些需求的贏家，想要知道為什麼的人可以參考詳細內文</p><h3 id="How-to-Handle-Terabytes-of-Metrics-in-Kubernetes-Monitoring"><a href="#How-to-Handle-Terabytes-of-Metrics-in-Kubernetes-Monitoring" class="headerlink" title="How to Handle Terabytes of Metrics in Kubernetes Monitoring"></a><a href="https://medium.com/@holidu/how-to-handle-terabytes-of-metrics-in-kubernetes-monitoring-a3056adf92b" target="_blank" rel="noopener">How to Handle Terabytes of Metrics in Kubernetes Monitoring</a></h3><p>在基礎設施中 Monitoring 當然是相當重要的一環，它能夠協助遇見事故的發生，並且避免服務產生不預期的 Downtime，在作者的公司 Holidu 因為不斷增加的客戶導致基礎設施的不斷增長，每秒所產生約 4 萬個 Metric 的樣本資料，導致監控設施不堪負荷且增加了營運的成本；在此挑戰之下，作者的公司顯然需要一個新的可擴展且穩定的監控系統，所以他們將原來使用的 Prometheus 架構透過 Thanos 重新改進，用以順利處理每秒 4 萬個 Metric 的樣本資料，想要知道詳細做法的話，可以參閱詳細內文</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="A-deep-dive-into-OpenTelemetry-metrics"><a href="#A-deep-dive-into-OpenTelemetry-metrics" class="headerlink" title="A deep dive into OpenTelemetry metrics"></a><a href="https://www.cncf.io/blog/2022/06/08/a-deep-dive-into-opentelemetry-metrics/" target="_blank" rel="noopener">A deep dive into OpenTelemetry metrics</a></h3><p>OpenTelemetry 相信大家都不陌生，此篇文章從基本開始分享起，並且解釋收集 metrics 流程的細節，也有解釋同步與非同步的實作上的差異，另外文章裡的各種分類表和 OpenTelemetry SDK 範例也十分受用。</p><h3 id="Troubleshooting-Amazon-EKS-API-servers-with-Prometheus"><a href="#Troubleshooting-Amazon-EKS-API-servers-with-Prometheus" class="headerlink" title="Troubleshooting Amazon EKS API servers with Prometheus"></a><a href="https://aws.amazon.com/blogs/containers/troubleshooting-amazon-eks-api-servers-with-prometheus/" target="_blank" rel="noopener">Troubleshooting Amazon EKS API servers with Prometheus</a></h3><p>文章以圖文並茂的方式教大家怎麼 troubleshooting EKS API。其中提到的 LIST 和 WATCH 的差異，使用 WATCH 可以讓 Kubernetes 規模更大，不過當 object 或 worker nodes 越多也是有負擔，本文也有寫解決方法，另外當有些服務使用過多的 LIST 呼叫時務必加上 limit。維運人員也要注意服務詭異的行爲像是讀跟寫的次數不一致是否是預期的？API 優先程度可以根據服務有所調整，這樣就可以避免有些服務影響到 API server。</p><h3 id="Why-Is-Everyone-Ignoring-the-Day-2-Kubernetes-Problem"><a href="#Why-Is-Everyone-Ignoring-the-Day-2-Kubernetes-Problem" class="headerlink" title="Why Is Everyone Ignoring the Day 2 Kubernetes Problem?"></a><a href="https://thenewstack.io/why-is-everyone-ignoring-the-day-2-kubernetes-problem/" target="_blank" rel="noopener">Why Is Everyone Ignoring the Day 2 Kubernetes Problem?</a></h3><p>單純使用 Kubernetes 的 Deployment、Service 或 Ingress 並不難，最難的是如何持續的維運 cluster，比起技術上的使用，更多的是要了解 Kubernetes 的生態圈，然後在各個面向選擇適合組織的工具。例如：如何標準化 Kubernetes 的更新管理、使用者的權限管理與隔離、監控、審計以及如何整合第三方工具等等。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷 🙌</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 136 期 - 36 年後的我還可以像阿湯哥一樣帥嗎？</title>
      <link href="/2022/06/14/136-as-handsome-as-36yrs-ago/"/>
      <url>/2022/06/14/136-as-handsome-as-36yrs-ago/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="只要十分鐘，帶你看懂-TOTP-2FA-的密碼學原理"><a href="#只要十分鐘，帶你看懂-TOTP-2FA-的密碼學原理" class="headerlink" title="只要十分鐘，帶你看懂 TOTP 2FA 的密碼學原理"></a><a href="https://medium.com/starbugs/totp-2fa-algorithm-in-10-mins-25acc3c35df9" target="_blank" rel="noopener">只要十分鐘，帶你看懂 TOTP 2FA 的密碼學原理</a></h3><p>身為一個工程師，為了提高安全性，應該都會幫自己還有公司的帳號啟用 2FA（Two-Factor Authentication），而今天的主題就是要介紹最近很常見的 TOTP 2FA 他內部是怎麼實現的，又是怎麼在不需要網路傳輸的情況下拿到驗證碼，真的十分鐘就可以讀完哦～</p><p>另外，為了讓 Starbugs 的專欄有更多豐富、優質的內容，我們決定要開始誠徵 Writer 了。如果你本來就有在寫文章，對於文章的品質有要求、而且也樂於分享討論技術，那很歡迎你以 Writer 的身份加入我們。請動動手指頭私訊我們粉專 <a href="https://www.facebook.com/StarbugsWeekly" target="_blank" rel="noopener">星巴哥技術週刊</a>，並附上自我介紹跟最近寫的文章，就有機會加入我們唷～</p><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><h3 id="Implementing-Two-Factor-Authentication-with-NodeJS-and-otplib"><a href="#Implementing-Two-Factor-Authentication-with-NodeJS-and-otplib" class="headerlink" title="Implementing Two-Factor Authentication with NodeJS and otplib"></a><a href="https://soshace.com/implementing-two-factor-authentication-with-nodejs-and-otplib/" target="_blank" rel="noopener">Implementing Two-Factor Authentication with NodeJS and otplib</a></h3><p>看完 TOTP 2FA 的原理之後覺得很有趣，想要幫自己的服務也加上 TOTP 的功能嗎？這邊有一篇教學教你怎麼用現在的 node package otplib 來實作 TOTP，就算沒有想自己做也可以看一下，會對於 TOTP 的內部實作更有概念哦</p><h3 id="聽說不能用明文存密碼，那到底該怎麼存？"><a href="#聽說不能用明文存密碼，那到底該怎麼存？" class="headerlink" title="聽說不能用明文存密碼，那到底該怎麼存？"></a><a href="https://medium.com/starbugs/how-to-store-password-in-database-sefely-6b20f48def92" target="_blank" rel="noopener">聽說不能用明文存密碼，那到底該怎麼存？</a></h3><p>身為一個服務提供者，除了支援 TOTP 外，在儲存使用者密碼時也必須多注意才行，所以這邊講解了到底該用什麼方式儲存使用者的密碼，才是最安全的</p><h3 id="Security-SSL-—-HTTPS-背後的功臣"><a href="#Security-SSL-—-HTTPS-背後的功臣" class="headerlink" title="[Security] SSL — HTTPS 背後的功臣"></a><a href="https://medium.com/starbugs/security-ssl-https-%E8%83%8C%E5%BE%8C%E7%9A%84%E5%8A%9F%E8%87%A3-df714e4df77b" target="_blank" rel="noopener">[Security] SSL — HTTPS 背後的功臣</a></h3><p>大家都知道網站要有 HTTPS 才安全，但你知道他背後的功臣 SSL 是怎麼運作的嗎？如果你好像知道，但又有點不太確定是怎麼樣，那就趕快來讀讀文章複習一下吧～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Monorepo-Building-one-roof-for-your-UI-apps"><a href="#Monorepo-Building-one-roof-for-your-UI-apps" class="headerlink" title="Monorepo. Building one roof for your UI apps."></a><a href="https://sagarpreet.in/monorepo-building-one-roof-for-your-ui-apps" target="_blank" rel="noopener">Monorepo. Building one roof for your UI apps.</a></h3><p>Monorepo 能夠將多個應用程式放在同一個專案中管理，還可以讓多個應用程式都會用到的元件和商務邏輯做共用，也省去了不同專案間的 package.json 包的管理成本。那這個酷東西到底該如何用呢？作者在文章裡闡述了他的導入過程，很值得一看！如果想看中文版的介紹的話，Andy 也有寫一篇文章：<a href="https://medium.com/starbugs/%E6%B7%BA%E8%AB%87-monorepo-%E5%B8%B6%E4%BE%86%E7%9A%84%E6%95%88%E7%9B%8A-%E4%BB%A5-turborepo-%E7%82%BA%E4%BE%8B-615fb4af5ebd" target="_blank" rel="noopener">淺談 Monorepo 帶來的效益：以 Turborepo 為例</a>。</p><h3 id="為何-useEvent-是個糟糕的方案？-更好的在這"><a href="#為何-useEvent-是個糟糕的方案？-更好的在這" class="headerlink" title="為何 useEvent 是個糟糕的方案？(更好的在這)"></a><a href="https://medium.com/@anokyy/%E7%82%BA%E4%BD%95useevent%E6%98%AF%E5%80%8B%E7%B3%9F%E7%B3%95%E7%9A%84%E6%96%B9%E6%A1%88-%E6%9B%B4%E5%A5%BD%E7%9A%84%E5%9C%A8%E9%80%99-de7fc2e509e8" target="_blank" rel="noopener">為何 useEvent 是個糟糕的方案？(更好的在這)</a></h3><p>自 React16 出現以來，只要 React 公布新的 hooks，總會讓各個開發者感到興奮不已，但是本篇文章的作者卻認為，這一次的 useEvent 在解決問題的同時，也帶來了更多的問題。</p><h3 id="探究babel背后的工作原理🤔"><a href="#探究babel背后的工作原理🤔" class="headerlink" title="探究babel背后的工作原理🤔"></a><a href="https://juejin.cn/post/7108268258020556836" target="_blank" rel="noopener">探究babel背后的工作原理🤔</a></h3><p>Babel 是一款 JavaScript 的編譯器，開發者可以容易地透過一些設定和插件，讓 babel 把我們的 JavaScript 編譯為相容性更高的語法，那 babel 究竟是如何對 JavaScript 做解析、編譯和產生最後的 JavaScript 呢？一起看看文章如何介紹吧！</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Cache-made-consistent-Meta’s-cache-invalidation-solution"><a href="#Cache-made-consistent-Meta’s-cache-invalidation-solution" class="headerlink" title="Cache made consistent: Meta’s cache invalidation solution"></a><a href="https://engineering.fb.com/2022/06/08/core-data/cache-invalidation/" target="_blank" rel="noopener">Cache made consistent: Meta’s cache invalidation solution</a></h3><p>Phil Karlton 曾說過在 Computer Science 領域最困難的兩件事情就是 <strong>使暫存失效</strong> 跟 <strong>命名東西</strong>，在 Meta 內部署著某些世界上最大的 Cache 系統，其中包含著 TAO 與 Memcache，而在過去幾年來，他們改善了 TAO 的暫存一致性，將其從 99.9999 % 提升到 99.99999999，對 Cache 改善有興趣的人不要錯過了</p><h3 id="Comparing-Ceph-LINSTOR-Mayastor-and-Vitastor-storage-performance-in-Kubernetes"><a href="#Comparing-Ceph-LINSTOR-Mayastor-and-Vitastor-storage-performance-in-Kubernetes" class="headerlink" title="Comparing Ceph, LINSTOR, Mayastor, and Vitastor storage performance in Kubernetes"></a><a href="https://blog.flant.com/kubernetes-storage-performance-linstor-ceph-mayastor-vitastor/" target="_blank" rel="noopener">Comparing Ceph, LINSTOR, Mayastor, and Vitastor storage performance in Kubernetes</a></h3><p>作者說每一份工作總是會被要求對不同的 SDS 解決方案做基準測試，這次加入 Flant 後也不意外，所以這篇文章便是紀錄 Ceph, LINSTOR, Vitastor 和 Mayastor 在 Kuberneter 環境下大 PK 之後的結果，最後的冠軍為 LINSTOR，根據結果，作者覺得他是最成熟可以應用在正式環境的解決方案，詳細數據請參閱內文</p><h3 id="Linux-Memory-Buffer-vs-Cache"><a href="#Linux-Memory-Buffer-vs-Cache" class="headerlink" title="Linux Memory: Buffer vs Cache"></a><a href="https://medium.com/geekculture/linux-memory-buffer-vs-cache-44d8a187f310" target="_blank" rel="noopener">Linux Memory: Buffer vs Cache</a></h3><p>在 Linux 系統內的 <strong>Buffer</strong> 和 <strong>Cache</strong> 有什麼不同呢？Buffer 會用來當做要寫到磁碟中資料的暫存空間，那麼他會用來暫存從磁碟讀取而來的資料嗎？Cache 是用來暫存從檔案讀取而來的資料，那麼他會用來暫存準備寫到檔案內的資料嗎？假如不知道這些問題答案的話，趕快看一看這篇文章就對了！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Multi-cloud-architecture-pros-and-cons"><a href="#Multi-cloud-architecture-pros-and-cons" class="headerlink" title="Multi-cloud architecture: pros and cons"></a><a href="https://www.cncf.io/blog/2022/06/01/multi-cloud-architecture-pros-and-cons/" target="_blank" rel="noopener">Multi-cloud architecture: pros and cons</a></h3><p>相信大家不論在商業或者技術考量上有想過多雲供應商的架構，每個雲供應商有各自的優勢外，大家最常討論的不外乎還是減少服務停機時間。不過相對地，缺點可說是非常多，成本管理、資安和維運複雜度都會變得十分困難。有鑑於此，文章有列出哪些商業考量的點才需要考慮多雲架構。<!-- summary --></p><h3 id="Service-Mesh-Gets-Boring-and-That’s-a-Good-Thing"><a href="#Service-Mesh-Gets-Boring-and-That’s-a-Good-Thing" class="headerlink" title="Service Mesh Gets Boring and That’s a Good Thing"></a><a href="https://thenewstack.io/service-mesh-gets-boring-and-thats-a-good-thing/" target="_blank" rel="noopener">Service Mesh Gets Boring and That’s a Good Thing</a></h3><p>近期 Cloud Native Computing Foundation 調查指出 service mesh 對於組織在 microservice 和 Kubernetes 上至關重要，與此同時，寫這篇文章的 The New Stack 媒體也發現 service mesh 相關文章的讀者越來越少了，顯示出大家對這議題開始感到無聊，也代表 service mesh 漸漸變成主流的 solution。</p><h3 id="Terraform-1-2-Improves-Exception-Handling-and-Updates-to-the-CLI-driven-Workflow"><a href="#Terraform-1-2-Improves-Exception-Handling-and-Updates-to-the-CLI-driven-Workflow" class="headerlink" title="Terraform 1.2 Improves Exception Handling and Updates to the CLI-driven Workflow"></a><a href="https://www.hashicorp.com/blog/terraform-1-2-improves-exception-handling-and-updates-to-the-cli-driven-workflow" target="_blank" rel="noopener">Terraform 1.2 Improves Exception Handling and Updates to the CLI-driven Workflow</a></h3><p>Terraform 1.2 新增了三大功能，Preconditions &amp; Postconditions 的功能讓 Terraform module 可以驗證動態的 variable input，讓 module 可以更快地跳出 error 給使用者，甚至還有提供<a href="https://learn.hashicorp.com/tutorials/terraform/custom-conditions" target="_blank" rel="noopener">教學</a>。也新增了一些與 Terraform Cloud 相關的環境變數讓設定更彈性，另外 Terraform Cloud Run Tasks 正式 Generally Available，其功能為在 Terraform Cloud workflow 使用第三方的工具。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 135 期 - 姍姍來遲的週刊，對不起各位了 m(_ _)m</title>
      <link href="/2022/06/07/135-on-call-culture/"/>
      <url>/2022/06/07/135-on-call-culture/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="服務總是在半夜出事嗎？-—-令人不再害怕-On-Call-的系統化做法"><a href="#服務總是在半夜出事嗎？-—-令人不再害怕-On-Call-的系統化做法" class="headerlink" title="服務總是在半夜出事嗎？ — 令人不再害怕 On Call 的系統化做法"></a><a href="https://medium.com/starbugs/%E6%9C%8D%E5%8B%99%E7%B8%BD%E6%98%AF%E5%9C%A8%E5%8D%8A%E5%A4%9C%E5%87%BA%E4%BA%8B%E5%97%8E-%E4%BB%A4%E4%BA%BA%E4%B8%8D%E5%86%8D%E5%AE%B3%E6%80%95-on-call-%E7%9A%84%E7%B3%BB%E7%B5%B1%E5%8C%96%E5%81%9A%E6%B3%95-1a1e6497cb13" target="_blank" rel="noopener">服務總是在半夜出事嗎？ — 令人不再害怕 On Call 的系統化做法</a></h3><p>此篇文章主要想談自己公司這一路上逐步將 Incident Response 建立起來所做的事情，整篇文章會依序從監控,組織類型, On Call, Incident Response, Root Cause Analysis 幾個大主題把自己覺得重要的事情提出來，希望大家看完這邊文章，對於 On Call 這件事情可以有一些新的看法與想法</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="不要再滥用css样式-important规则了"><a href="#不要再滥用css样式-important规则了" class="headerlink" title="不要再滥用css样式!important规则了"></a><a href="https://juejin.cn/post/7101671371993776142" target="_blank" rel="noopener">不要再滥用css样式!important规则了</a></h3><p>作者在文章中用簡單的例子帶出 CSS 中的優先級，以及用表格說明該如何計算當前 CSS 對於 element 的優先級，接著再提到 !important 正確的使用情境，文章短短的很適合閱讀後再好好思考。 😂</p><h3 id="The-amazing-HTML5-Picture-Element"><a href="#The-amazing-HTML5-Picture-Element" class="headerlink" title="The amazing HTML5 Picture Element"></a><a href="https://eke.hashnode.dev/the-amazing-html5-picture-element" target="_blank" rel="noopener">The amazing HTML5 Picture Element</a></h3><p><code>picture</code> 是 HTML5 提供的元素，它提供的 media 屬性可以讓開發者在不需要寫 CSS 的狀況下，就能實現根據不同的視窗尺寸顯示圖片的功能，文章裡有簡單的 demo 可以看它呈現的效果。</p><h3 id="35-HTML-404-Page-Templates"><a href="#35-HTML-404-Page-Templates" class="headerlink" title="35+ HTML 404 Page Templates"></a><a href="https://dev.to/stackfindover/35-html-404-page-templates-5bge" target="_blank" rel="noopener">35+ HTML 404 Page Templates</a></h3><p>404 頁面在網頁開發中是很重要的存在，如果使用者不小心輸入錯網址，或是想要點進已經不存在的頁面中，都需要 404 頁面來告知。雖然大多網站的 404 頁面都會是簡單清楚的一兩行文字或圖片，但如果 404 頁面設計得像文章中列出來的特有巧思，說不定會想要特地輸入錯網址看看！ 😂</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="GraphQL-x-Go-淺談-gqlgen-為開發帶來的便利性"><a href="#GraphQL-x-Go-淺談-gqlgen-為開發帶來的便利性" class="headerlink" title="GraphQL x Go! 淺談 gqlgen 為開發帶來的便利性"></a><a href="https://www.yuanlin.dev/posts/628c87a6113d85275a89dcba" target="_blank" rel="noopener">GraphQL x Go! 淺談 gqlgen 為開發帶來的便利性</a></h3><p>為了方便開發跟管理 API，越來越多公司都導入了 GraphQL。雖然網路上很多資源都是在講怎麼用 Node.js 寫一個 GraphQL Server，但畢竟 GraphQL 只是個 query language 而已，所以在 Go 也可以輕鬆做到，而且因為 Go 本身就是強型別語言，跟 GraphQL 的 schema 整合起來也是非常輕鬆哦</p><h3 id="Go-code-refactoring-the-23x-performance-hunt"><a href="#Go-code-refactoring-the-23x-performance-hunt" class="headerlink" title="Go code refactoring : the 23x performance hunt"></a><a href="https://medium.com/@val_deleplace/go-code-refactoring-the-23x-performance-hunt-156746b522f7" target="_blank" rel="noopener">Go code refactoring : the 23x performance hunt</a></h3><p>想要寫出更快的 Go code 嗎，這篇文章用了很多效能分析的方法，一步一步去進行最佳化，最後成功把程式加速了 23 倍，真的非常厲害</p><h3 id="Shell-Completion-with-Cobra-and-Go"><a href="#Shell-Completion-with-Cobra-and-Go" class="headerlink" title="Shell Completion with Cobra and Go"></a><a href="https://blog.devgenius.io/shell-completion-with-cobra-and-go-c8368074d8f7" target="_blank" rel="noopener">Shell Completion with Cobra and Go</a></h3><p>想要用 Go 寫一個自己的 CLI 工具嗎，那一定要來看看 Cobra 這個 library，他可以讓你輕鬆寫出有 shell completion 功能的 CLI 工具哦</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-To-Create-Kubernetes-YAML-Manifests-Quickly"><a href="#How-To-Create-Kubernetes-YAML-Manifests-Quickly" class="headerlink" title="How To Create Kubernetes YAML Manifests Quickly"></a><a href="https://devopscube.com/create-kubernetes-yaml/" target="_blank" rel="noopener">How To Create Kubernetes YAML Manifests Quickly</a></h3><p>你是否曾經遇過突然一時之間需要生產一個 Kubernetes YAML 做個簡單的實驗？但是靠自己記憶刻出一份完整 YAML 讓 Kubernetes API 不會報錯是有那麼一點不切實際的，所以文章介紹了一些工具可以減少人為失誤，其原理都不會很難理解，本文章還有個不錯的用途就是指令範例可以直接拿來複製貼上拿來用。</p><h3 id="Kubernetes-Pod-Priority-PriorityClass-and-Preemption-Explained"><a href="#Kubernetes-Pod-Priority-PriorityClass-and-Preemption-Explained" class="headerlink" title="Kubernetes Pod Priority, PriorityClass, and Preemption Explained"></a><a href="https://devopscube.com/pod-priorityclass-preemption/" target="_blank" rel="noopener">Kubernetes Pod Priority, PriorityClass, and Preemption Explained</a></h3><p>Pod Priority 和 Pod Preemption 是大家相對少用的功能，不過可以用在確保像是 DaemonSet、logging 或金流相關的服務擁有更高的 priority，是情況也會踢除 priority 較低的 pod，這篇文章用簡單明瞭的範例和清晰的運作原理讓讀者輕鬆的理解。</p><h3 id="17-Best-Linux-Networking-and-Troubleshooting-Commands-for-Beginners"><a href="#17-Best-Linux-Networking-and-Troubleshooting-Commands-for-Beginners" class="headerlink" title="17 Best Linux Networking and Troubleshooting Commands for Beginners"></a><a href="https://devopscube.com/list-linux-networking-troubleshooting-and-commands-beginners/" target="_blank" rel="noopener">17 Best Linux Networking and Troubleshooting Commands for Beginners</a></h3><p>身為一位 DevOps or SRE 工程師至少要對網路的除錯工具或多或少要了解一些，這 17 個指令無非是最基本款必須要懂的，有些 protocol 可能不止一個工具支援，再加上每個環境並不是所有網路除錯工具都有，所以多熟悉一點絕不是壞事。</p><h2 id="Kubernetes"><a href="#Kubernetes" class="headerlink" title="Kubernetes"></a>Kubernetes</h2><h3 id="Automate-All-the-Boring-Kubernetes-Operations-With-Python"><a href="#Automate-All-the-Boring-Kubernetes-Operations-With-Python" class="headerlink" title="Automate All the Boring Kubernetes Operations With Python"></a><a href="https://betterprogramming.pub/automate-all-the-boring-kubernetes-operations-with-python-7a31bbf7a387" target="_blank" rel="noopener">Automate All the Boring Kubernetes Operations With Python</a></h3><p>隨著 K8s 的普及度越來越高，大家日常工作上使用到的時間應該也越來越多，因此這篇文章介紹了如何利用 Python K8s Client Library 自動化一些日常維運 K8s 常常會做的操作</p><h3 id="Kubernetes-ephemeral-container-security"><a href="#Kubernetes-ephemeral-container-security" class="headerlink" title="Kubernetes ephemeral container security"></a><a href="https://www.cncf.io/blog/2022/05/24/kubernetes-ephemeral-container-security/" target="_blank" rel="noopener">Kubernetes ephemeral container security</a></h3><p>假如你需要除錯一個 K8s Pod 但是基於安全考量不能夠在其中任意安裝除錯工具，那該如何怎麼辦呢？！好加在 Kubernetes 介紹了一個叫做 Ephemeral Container 的概念來應付此種狀況，透過這篇文章的介紹來了解如何使用此功能</p><h3 id="Don’t-Write-Your-Own-Kubernetes-YAML-Generator"><a href="#Don’t-Write-Your-Own-Kubernetes-YAML-Generator" class="headerlink" title="Don’t Write Your Own Kubernetes YAML Generator"></a><a href="https://matduggan.com/tips-for-making-kubernetes-yaml-less-annoying/" target="_blank" rel="noopener">Don’t Write Your Own Kubernetes YAML Generator</a></h3><p>維運 K8s 的人其實不太需要撰寫程式，但一定會許要撰寫 YAML 檔案來對 K8s Cluster 進行配置，這篇文章在開頭便提出作者為什麼不建議使用 YAML Generator 來做這件事情，而是可以準備好簡易的 YAML 檔案之後，再透過 yq, Kustomize 去做修改，甚至可以透過 client libary 來配置 K8s Cluster</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！<br>不想漏追科技新聞的人，趕緊把 StarBugs Telegram Bot 訂閱起來 <a href="https://t.me/starbugs_weekly_bot" target="_blank" rel="noopener">https://t.me/starbugs_weekly_bot</a> (對機器人說 /subscribe 即可) </p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 134 期 - 框架或工具就像便利商店裡的微波食品</title>
      <link href="/2022/05/24/134-frameworks-or-tools-all-like-quick-foods-in-convenience-store/"/>
      <url>/2022/05/24/134-frameworks-or-tools-all-like-quick-foods-in-convenience-store/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="執行-JavaScript-的-V8-引擎做了什麼？"><a href="#執行-JavaScript-的-V8-引擎做了什麼？" class="headerlink" title="執行 JavaScript 的 V8 引擎做了什麼？"></a><a href="https://medium.com/starbugs/%E5%9F%B7%E8%A1%8C-javascript-%E7%9A%84-v8-%E5%BC%95%E6%93%8E%E5%81%9A%E4%BA%86%E4%BB%80%E9%BA%BC-f97e5b4b3fbe" target="_blank" rel="noopener">執行 JavaScript 的 V8 引擎做了什麼？</a></h3><p>Hi！大家好，我是神 Q 超人！我想點進來的大家應該都聽過，也在瀏覽器或 Node.js 上執行過 JavaScript，但你們有想過 JavaScript 是如何執行的嗎？這背後的功臣就是 JavaScript 引擎，而標題提到的 <a href="https://v8.dev/" target="_blank" rel="noopener">V8 引擎</a> 也是其中之一喲！</p><h2 id="工作職涯"><a href="#工作職涯" class="headerlink" title="工作職涯"></a>工作職涯</h2><h3 id="Many-software-companies-are-a-joke"><a href="#Many-software-companies-are-a-joke" class="headerlink" title="Many software companies are a joke"></a><a href="https://liou28335.medium.com/many-software-companies-are-a-joke-9f4b10378c7a" target="_blank" rel="noopener">Many software companies are a joke</a></h3><p>作者在科技業寫程式二十多年，曾經在各類型的公司中工作過，他的心得就是很多的軟體工程師，尤其是在真正大公司工作的人，他們中很多的人其實只做很少的事情，所以也產生一個問題，就是你在這種工作中能學到的東西並不多，大家也都這樣覺得嗎？</p><h3 id="How-I-got-a-FAANG-offer-without-grinding-Leetcode"><a href="#How-I-got-a-FAANG-offer-without-grinding-Leetcode" class="headerlink" title="How I got a FAANG offer without grinding Leetcode"></a><a href="https://medium.com/@contrapasso/how-i-got-faang-offers-without-grinding-leetcode-7e556243e9ce" target="_blank" rel="noopener">How I got a FAANG offer without grinding Leetcode</a></h3><p>作者表示他並未透過刷 Leetcode 考題就同時從 FAANG 收到實習和畢業 Offer，當然不是因為他已經厲害到不需要任何練習就可以通過面試，其實他很擅長寫程式，只是不擅長刷 Leetcode，為了避免自己為了刷題兒刷題最終導致降低對這個軟體領域的熱情，所以他才沒有去一直刷 Leetcode，而文章主要述說他是如何再不刷 Leetcode 的情況之下，成功獲取 FAANG  Offer 的經驗</p><h3 id="Ten-fastest-growing-apps-in-2022-including-some-you-don’t-know"><a href="#Ten-fastest-growing-apps-in-2022-including-some-you-don’t-know" class="headerlink" title="Ten fastest-growing apps in 2022 (including some you don’t know)"></a><a href="https://blog.curiosity.ai/ten-fastest-growing-apps-in-2022-including-some-you-dont-know-c177e46cc5f1" target="_blank" rel="noopener">Ten fastest-growing apps in 2022 (including some you don’t know)</a></h3><p>這篇文章的作者介紹了在 2022 年成長最快的 Apps，分別是 Notion, TripActions, Postman, Figma, Miro, Keeper, Airtable, Fivetran, monday.com, Gong，稍微看了一下介紹後，發現滿多都跟專案管理與協同合作相關，自己覺得應該跟這兩年來不少人都遠端工作有關係</p><h2 id="軟體工程"><a href="#軟體工程" class="headerlink" title="軟體工程"></a>軟體工程</h2><h3 id="20-年軟體工程生涯所學到的-20-件事"><a href="#20-年軟體工程生涯所學到的-20-件事" class="headerlink" title="20 年軟體工程生涯所學到的 20 件事"></a><a href="https://blog.gcos.me/post/2022-04-03_20-things-ive-learned-in-my-20-years-as-a-software-engineer/" target="_blank" rel="noopener">20 年軟體工程生涯所學到的 20 件事</a></h3><p>要成為一個更好的工程師，除了程式要寫好之外，也需要對軟體工程有相當程度的了解。這篇文章翻譯了「20 Things I’ve Learned in my 20 Years as a Software Engineer」中作者提到自己學到的東西，文章不長而且內容相當精闢，身為工程師都應該要讀一讀。</p><h3 id="Domain-Driven-Design-The-First-15-Years"><a href="#Domain-Driven-Design-The-First-15-Years" class="headerlink" title="Domain-Driven Design: The First 15 Years"></a><a href="https://facebook.com/story.php?story_fbid=10220019719351943&id=1492360517" target="_blank" rel="noopener">Domain-Driven Design: The First 15 Years</a></h3><p>不知道大家有沒有聽過「Domain-Driven Design: The First 15 Years」這本書，DDD 台灣社群兩年前花了時間把他翻譯成繁體中文，而且還是免費的（也可以花錢贊助他們），想了解 DDD 的話一定要來讀一讀</p><h3 id="閒談軟體架構：來煮碗拉麵吧"><a href="#閒談軟體架構：來煮碗拉麵吧" class="headerlink" title="閒談軟體架構：來煮碗拉麵吧"></a><a href="https://medium.com/%E9%96%92%E8%AB%87%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B/%E9%96%92%E8%AB%87%E8%BB%9F%E9%AB%94%E6%9E%B6%E6%A7%8B-%E4%BE%86%E7%85%AE%E7%A2%97%E6%8B%89%E9%BA%B5%E5%90%A7-bf7c61ec8249" target="_blank" rel="noopener">閒談軟體架構：來煮碗拉麵吧</a></h3><p>如果覺得直接啃 DDD 的書太硬了，可以先來看看怎麼把 Domain 融合進去拉麵裡面，有了 Domain 的概念之後，再來看 DDD 的書應該會比較能體會到作者在說什麼哦</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Surprising-Truth-About-Pixels-and-Accessibility"><a href="#The-Surprising-Truth-About-Pixels-and-Accessibility" class="headerlink" title="The Surprising Truth About Pixels and Accessibility"></a><a href="https://www.joshwcomeau.com/css/surprising-truth-about-pixels-and-accessibility/" target="_blank" rel="noopener">The Surprising Truth About Pixels and Accessibility</a></h3><p>你知道 1em 等於幾 px 嗎？如果你的答案是 16px，那你只答對一半，因為 1em 等於 16px 的情況只在於使用者或工程師沒有修改預設字體大小的時候。文章中講解關於 px 與 accessibility 之間的關係，文章很長，但推薦看看。</p><h3 id="客觀評價-TailwindCSS"><a href="#客觀評價-TailwindCSS" class="headerlink" title="客觀評價 TailwindCSS"></a><a href="https://medium.com/@nightspirit622/%E5%AE%A2%E8%A7%80%E8%A9%95%E5%83%B9-tailwindcss-af27581f6d9" target="_blank" rel="noopener">客觀評價 TailwindCSS</a></h3><p>上禮拜在 Facebook 快閃了一場 <a href="https://tailwindcss.com/" target="_blank" rel="noopener">TailwindCSS</a> 之戰，而在這場戰爭後，有許多 TailwindCSS 的開發者也都跳出來分享自己使用的看法，以及 TailwindCSS 究竟是解決了哪些問題。</p><h3 id="useLayoutEffect-Is-a-Powerful-Hook"><a href="#useLayoutEffect-Is-a-Powerful-Hook" class="headerlink" title="useLayoutEffect Is a Powerful Hook"></a><a href="https://www.telerik.com/blogs/uselayouteffect-powerful-hook" target="_blank" rel="noopener">useLayoutEffect Is a Powerful Hook</a></h3><p>React 的 useLayoutEffect 相較於 useEffect 來說比較少有人注意到，大多情境使用 useEffect 就足以完成需求，因此完全沒有用過 useLayoutEffect，但你知道他們兩者的主要區別在哪裡嗎？一起看看文章介紹吧！ 🙌</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="The-most-important-changes-in-Kubernetes-1-24-and-why-they-matter"><a href="#The-most-important-changes-in-Kubernetes-1-24-and-why-they-matter" class="headerlink" title="The most important changes in Kubernetes 1.24 and why they matter"></a><a href="https://www.padok.fr/en/blog/new-kubernetes-changes" target="_blank" rel="noopener">The most important changes in Kubernetes 1.24 and why they matter</a></h3><p>作者幫大家重點整理了新版 Kubernetes 1.24 重要的 7 點改動。最知名的改動不外乎就是 Dockershim 正式的被移除了，雖然裡面寫 Docker 正式不能被使用，但事實上還是有辦法使用，Docker 有推出 cri-dockerd 版本，詳情可以參考我們 Starbugs 131 期寫的<a href="https://starbugs.dev/2022/05/03/131-may-day/">文章推薦</a>。</p><p>還有其他重要的功能如：新的 OOM metric、指定 Load Balancer 類型可以改用 LoadBalancerClass 而不是難設定的 annotation、不能指定 Load Balancer 的 IP address（即便在某些商業需求下很好用）、service account token 為了安全將開始有些限制、RuntimeClass.Overhead 正式進入 stable version 讓 pod 可以設定 cpu + memory、以及 Kubernetes 團隊決定所有 beta 的 API 都不再是預設值（得另外 enable 才行）。</p><h3 id="My-First-Honeypot"><a href="#My-First-Honeypot" class="headerlink" title="My First Honeypot"></a><a href="https://medium.com/@williamlaw2991/my-first-honeypot-f7bfb1d1079a" target="_blank" rel="noopener">My First Honeypot</a></h3><p>作者自己架設了兩種 honeypot 程式來吸引網路上的攻擊並且加以分析，第一個工具 Cowrie 可以看出攻擊者會想要知道系統的基本硬體資訊如 cpu、memory 或硬碟大小等等，也會嘗試使用 Linux 常見的帳號和密碼登入，攻擊者會安裝 busybox 看能不能控制整台機器，當然想盡辦法安裝挖礦軟體也是不可少的，作者也分析攻擊者的 IP 國家位置。</p><p>第二種 honeybot 工具 ADBhoney 用來模擬 Android 裝置，像是手機或電視，可以看出攻擊者也會想要安裝挖礦程式、惡意程式，攻擊者也會偷寫檔案在系統裡來判斷這台機器攻擊過了沒，並且保持挖礦或惡意程式是否運作正常。</p><h3 id="Why-Run-Postgres-in-Kubernetes"><a href="#Why-Run-Postgres-in-Kubernetes" class="headerlink" title="Why Run Postgres in Kubernetes?"></a><a href="https://containerjournal.com/kubecon-cnc-eu-2022/why-run-postgres-in-kubernetes/" target="_blank" rel="noopener">Why Run Postgres in Kubernetes?</a></h3><p>作者解釋普遍業界並不鼓勵直接把 Postgres 安裝在 Kubernetes，但是 Data on Kubernetes 2021 研究顯示 90% 的技術主管認為 Kubernetes 已經準備好跑 stateful 的程式，而且也可以在 Kubernetes 的各種機制上獲得好處，例如更低的災難復原時間，甚至 CICD 也可以有很好的 integration test 整合。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 133 期 - 未吃五月粽，破裘不敢放</title>
      <link href="/2022/05/17/133-plum-rain-season/"/>
      <url>/2022/05/17/133-plum-rain-season/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="MongoDB-explain-實戰—-看看你的-index-是真有在做事，還是佔空間而已"><a href="#MongoDB-explain-實戰—-看看你的-index-是真有在做事，還是佔空間而已" class="headerlink" title="MongoDB explain 實戰— 看看你的 index 是真有在做事，還是佔空間而已"></a><a href="https://medium.com/starbugs/optimize-index-with-mongodb-explain-2337ef50a601" target="_blank" rel="noopener">MongoDB explain 實戰— 看看你的 index 是真有在做事，還是佔空間而已</a></h3><p>哈囉大家好我是 Larry，距離我去當兵之前發的 109 期週刊已經幾個月了，這段時間很感謝隊友們的 cover，也很謝謝繼續訂閱的大家，之後每個月又可以再看到我寫的文章了哦～（大家應該有想看吧 ？🤔🤔🤔）</p><p>進入正題，在使用 MongoDB 時，如果完全沒有幫 collection 建立 index，那在搜尋時就需要把整個 collection 翻過來一個一個找過。就像到小北百貨一樣，如果店家沒有幫你分類成「電腦週邊」、「水電材料」、「衛浴用品」等等好幾大類，那不知道要找多久才能買到你要的東西。</p><p>因此這週的專欄想要跟大家介紹 explain() 這個好用的工具，他會把整個 query 的過程列出來，讓你知道過程中花了多少時間、用了哪些 index。有了這些分析之後就可以為你的 query 留下最適合的 index，也讓那些沒路用的 index 無所遁形。 </p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="MongoDB-Schema-設計指南"><a href="#MongoDB-Schema-設計指南" class="headerlink" title="MongoDB Schema 設計指南"></a><a href="https://blog.toright.com/posts/4483/mongodb-schema-%E8%A8%AD%E8%A8%88%E6%8C%87%E5%8D%97.html" target="_blank" rel="noopener">MongoDB Schema 設計指南</a></h3><p>在使用像 MongoDB 這類 document-based 的 NoSQL 時，因為每筆資料的格式都是 JSON，而且 MongoDB 也支援很多跟 Object、Array 相關的功能，所以在設計 Schema 時會跟傳統的 SQL Database 有點不一樣，不能直接把 SQL 那套理論原封不動搬過來用哦。</p><h3 id="MongoDB-Aggregation-優化"><a href="#MongoDB-Aggregation-優化" class="headerlink" title="MongoDB Aggregation 優化"></a><a href="https://blog.myctw.cc/post/acdb.html" target="_blank" rel="noopener">MongoDB Aggregation 優化</a></h3><p>用過 MongoDB 一陣子之後應該都會接觸到他的 aggregation，他可以把你想要做的一系列操作寫成一個落落長的 pipeline，譬如說先搜尋、統計、最後做排序。而這篇文章提到了在寫 pipeline 有一些要注意的小地方，雖然有些部分 MongoDB 會幫你最佳化，但還是要注意一下讓你的 aggregation 效能更好。</p><h3 id="Do-You-Need-Mongoose-When-Developing-Node-js-and-MongoDB-Applications"><a href="#Do-You-Need-Mongoose-When-Developing-Node-js-and-MongoDB-Applications" class="headerlink" title="Do You Need Mongoose When Developing Node.js and MongoDB Applications?"></a><a href="https://www.mongodb.com/developer/article/mongoose-versus-nodejs-driver/" target="_blank" rel="noopener">Do You Need Mongoose When Developing Node.js and MongoDB Applications?</a></h3><p>有在 Node.js 中用過 MongoDB 的人應該都知道 Mongoose 這套 ODM，他最大的好處就是可以幫你做 schema validation，讓你的資料庫不會有一堆缺值、型別錯誤的資料。但現在的 MongoDB 內建的 schema validation 也逐漸成熟了，所以下個專案也許可以考慮不需要使用 Mongoose，直接用內建的就好。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="State-of-CSS-2022"><a href="#State-of-CSS-2022" class="headerlink" title="State of CSS 2022"></a><a href="https://web.dev/state-of-css-2022/" target="_blank" rel="noopener">State of CSS 2022</a></h3><p>作者 Adam Argyle 把在 <a href="https://io.google/2022/" target="_blank" rel="noopener">Google IO 2022</a> 上所講的議程內容寫成文章，文章中提到 14 個 CSS 在 2022 或之後的新功能，內容不會鑽研得太過艱澀，如果沒時間看文章也可以把議程影片當 podcast 聽，順便練習英聽 😂。</p><h3 id="What-If-Our-Sliders-Actually-Slid"><a href="#What-If-Our-Sliders-Actually-Slid" class="headerlink" title="What If Our Sliders Actually Slid?"></a><a href="https://www.smashingmagazine.com/2022/04/what-if-sliders-actually-slid-html-element-input-range/" target="_blank" rel="noopener">What If Our Sliders Actually Slid?</a></h3><p>這篇文章適合推薦在當你覺得「每天寫的程式都好無聊」或是「工作真無趣」的時候閱讀，作者一個突發奇想想讓 range 使用起來變得有趣而進行的「Creative Coding」</p><p>雖然花了好多時間研究和寫出一個看起來沒屁用的東西，但就是這一切讓 Coding 變得很有趣啊！像作者說的：「it takes a little more for us to think “outside the box” and have fun!」</p><h3 id="Hoisting-in-JavaScript-explained-visually-🔥-😍"><a href="#Hoisting-in-JavaScript-explained-visually-🔥-😍" class="headerlink" title="Hoisting in JavaScript explained visually 🔥 😍"></a><a href="https://webdriphashnode.hashnode.dev/hoisting-in-javascript-explained-visually" target="_blank" rel="noopener">Hoisting in JavaScript explained visually 🔥 😍</a></h3><p>把 JavaScript 內的 Hosting 行為做成動畫和程式碼的行數互相對照，不只講解了 var，還有關於用 let 及 const 在宣告時會有的 temporal dead zone。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="How-I-became-a-Web3-dev-in-just-7-days-and-got-my-first-8000-Web3-contract"><a href="#How-I-became-a-Web3-dev-in-just-7-days-and-got-my-first-8000-Web3-contract" class="headerlink" title="How I became a Web3 dev in just 7 days and got my first 8000$ Web3 contract"></a><a href="https://blog.cryptostars.is/how-i-became-a-web3-dev-in-just-7-days-and-got-my-first-8000-web3-contract-8f554bcb5352" target="_blank" rel="noopener">How I became a Web3 dev in just 7 days and got my first 8000$ Web3 contract</a></h3><p>作者從事 Full-Stack 開發將近六年，而且從來未處理過有關於區塊鏈或是 Web3，但他熱他挑戰，所以他想要分享如何用七天的時間從零知識到寫出一個 Smart Contract</p><h3 id="10-Books-Every-Senior-Engineer-Should-Read"><a href="#10-Books-Every-Senior-Engineer-Should-Read" class="headerlink" title="10 Books Every Senior Engineer Should Read"></a><a href="https://semaphoreci.medium.com/10-books-every-senior-engineer-should-read-a61c1917e2a7" target="_blank" rel="noopener">10 Books Every Senior Engineer Should Read</a></h3><p>這篇文章介紹了十本書籍，其中包含著經典，永垂不朽或是足以改變遊戲規則的出版物，雖然主要是針對資深工程師和開發人員來著，但其實不必是資深工程師，任何對於軟體開發有興趣的人都可以從這份書單中受益，透過閱讀來加強開發技能</p><ol><li>Extreme Programming Explained: Embrace Change (2nd Edition) by Kent Beck</li><li>Continuous Delivery: Reliable Software Releases through Build, Test, and Deployment Automation by Jez Humble and David Farley</li><li>Remote: Office Not Required by Jason Fried and David Heinemeier Hansson</li><li>The Mythical Man-Month by Frederick P. Brooks Jr.</li><li>Getting Real</li><li>Designing Data-Intensive Apps by Martin Kleppmann</li><li>Site Reliability Engineering</li><li>The Phoenix Project by Gene Kim, Kevin Behr, and George Spafford</li><li>Building Microservices: Designing Fine-Grained Systems by Sam Newman</li><li>Modern Software Engineering: Doing What Works to Build Better Software Faster by Dave Farley</li></ol><h3 id="Better-error-handling-in-Golang-Theory-and-practical-tips"><a href="#Better-error-handling-in-Golang-Theory-and-practical-tips" class="headerlink" title="Better error handling in Golang: Theory and practical tips"></a><a href="https://levelup.gitconnected.com/better-error-handling-in-golang-theory-and-practical-tips-758b90d3f6b4" target="_blank" rel="noopener">Better error handling in Golang: Theory and practical tips</a></h3><p>作者介紹幾個在撰寫 Goling 時要怎麼處理錯誤的方法，並且提供了一些技巧，讓你在開發過程中更加容易處理錯誤，例如：為什麼要一再的重複 if err != nil，不要使用 panic() 而是應該要去處理錯誤才對，記得要寫 Log…等</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Deleting-Production-in-a-Few-Easy-Steps-and-How-to-Fix-It"><a href="#Deleting-Production-in-a-Few-Easy-Steps-and-How-to-Fix-It" class="headerlink" title="Deleting Production in a Few Easy Steps (and How to Fix It)"></a><a href="https://thenewstack.io/deleting-production-in-a-few-easy-steps-and-how-to-fix-it/" target="_blank" rel="noopener">Deleting Production in a Few Easy Steps (and How to Fix It)</a></h3><p>講解真實環境的災難還原之旅，起初 ArgoCD 因為 path 寫錯導致部署錯誤，而且剛好刪到最核心的業務。當下團隊直覺想到何不 revert 就好，但可惜的是該服務為 stateful 的，且 ArgoCD 會重新創建新的 instance 但會沒有使用者重要的 metadata。於是團隊開始著手災難復原，先把 backing service 裡的資料恢復（文章把相依關係和一些技巧寫的很詳細務必細讀），核心業務的服務暫時上線後先加大硬體和多開幾台應付暫時的大量流量，這趟災難復原總共花了 6 小時。<!-- summary --></p><p>關於災難復原要做的好，除了平常的備份外，也要熟悉服務相依性、架構和細節才行，而且也得做事後檢討改善部署流程，像是改善生產 YAML 的方式、在生產 YAML 的時候偵測有沒有重複、把 ArgoCD 設定成不能刪除既有的 stateful 資源以及多個 ArgoCD 之間不能互相干涉彼此部署的服務。</p><h3 id="Service-mesh-at-scale-How-Xbox-Cloud-Gaming-secures-22k-pods-with-Linkerd"><a href="#Service-mesh-at-scale-How-Xbox-Cloud-Gaming-secures-22k-pods-with-Linkerd" class="headerlink" title="Service mesh at scale: How Xbox Cloud Gaming secures 22k pods with Linkerd"></a><a href="https://www.cncf.io/blog/2022/05/10/service-mesh-at-scale-how-xbox-cloud-gaming-secures-22k-pods-with-linkerd%EF%BF%BC/" target="_blank" rel="noopener">Service mesh at scale: How Xbox Cloud Gaming secures 22k pods with Linkerd</a></h3><p>文章描述 Microsoft Xbox 如何使用 service mesh 工具 Linkerd 減少維護的人力成本（令我訝異的是原來對延遲要求甚高的遊戲也會用 service mesh），團隊一開始考慮的工具有 Istio、Linkerd、Consul Connect 和其他工具，但最後還是選擇 Linkerd，原因如下：</p><ul><li>容易設定 mTLS</li><li>因為有 Service Mesh Interface API 所以跟其他 CNCF 專案工具有很好的整合</li><li>mTLS 是從 proxy level 下手，不用特別呼叫專門的 mTLS 服務可以減少 100ms 的延遲</li><li>更好的網路流量監控，而且很多功能都開箱即用</li></ul><h3 id="Build-or-Buy-Developer-Productivity-vs-Flexibility"><a href="#Build-or-Buy-Developer-Productivity-vs-Flexibility" class="headerlink" title="Build or Buy? Developer Productivity vs. Flexibility"></a><a href="https://thenewstack.io/build-or-buy-developer-productivity-vs-flexibility/" target="_blank" rel="noopener">Build or Buy? Developer Productivity vs. Flexibility</a></h3><p>設計架構時應該要選怎樣的工具？雲服務還是地端？高階語言還是低階語言做開發？自架還是託管服務？自己設計工具還是使用 SaaS？文章給了一個當開發時應該選擇用 library 還是 API 當作範例參考，在選擇的過程中，其中最大的兩個原則是這個專案是否跟核心業務有關，以及這個專案是否可以透過客製化獲得商業上的成功。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 132 期 - 每天的確診人數真令人膽戰心驚</title>
      <link href="/2022/05/10/132-container-network-interface/"/>
      <url>/2022/05/10/132-container-network-interface/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="整合-CNI-的常見問題-—-坑就是挖給人踩的！"><a href="#整合-CNI-的常見問題-—-坑就是挖給人踩的！" class="headerlink" title="整合 CNI 的常見問題 — 坑就是挖給人踩的！"></a><a href="https://medium.com/starbugs/%E6%95%B4%E5%90%88-cni-%E7%9A%84%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C-%E5%9D%91%E5%B0%B1%E6%98%AF%E6%8C%96%E7%B5%A6%E4%BA%BA%E8%B8%A9%E7%9A%84-fd5d42b2ff2d" target="_blank" rel="noopener">整合 CNI 的常見問題 — 坑就是挖給人踩的！</a></h3><p>CNI 的開發其實都通過了完整的測試，但怎麼我自己整合起來還是遇到不少問題呢？目前自己所架設的 K8s 組合為 FlatCar CoreOS + Amazon VPC CNI，自己在此組合下討生活一兩年來也算是三折肱成良醫，所以將一些常遇到的問題透過這篇文章記錄下來</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="You-Don’t-Need-A-UI-Framework"><a href="#You-Don’t-Need-A-UI-Framework" class="headerlink" title="You Don’t Need A UI Framework"></a><a href="https://www.smashingmagazine.com/2022/05/you-dont-need-ui-framework/" target="_blank" rel="noopener">You Don’t Need A UI Framework</a></h3><p>這篇標題滿聳動的，但是作者其實是從「客製化的設計」、「節省時間」和「可用性和可訪問性」幾個面向，逐一讓讀者去思考，真的任何時候都需要選擇 UI Framework 嗎？也許自己花在把 UI Framework 所提供的樣式，調整成自己成專案所需求樣式的時間，都早就超過直接完成需求的時間了，我想這應該也是 <a href="https://tailwindcss.com/" target="_blank" rel="noopener">Tailwind CSS</a> 那麼深受開發者喜愛的原因之一。</p><h3 id="Memoization-in-JavaScript"><a href="#Memoization-in-JavaScript" class="headerlink" title="Memoization in JavaScript"></a><a href="https://parthasarma.hashnode.dev/memoization-in-javascript" target="_blank" rel="noopener">Memoization in JavaScript</a></h3><p>在需要反覆執行一些長時間運算的方法時，我們可以自己實做一個 memoization function，去紀錄 function 在什麼參數執行下會回傳什麼結果，並在下一次以相同參數執行的時候，就不需要再重複運算，只需要直接從紀錄中找到結果直接回傳就好。這個概念也有點像Design Pattern 裡的 Proxy Pattern。</p><h3 id="Most-common-mistakes-of-not-only-JavaScript-developers"><a href="#Most-common-mistakes-of-not-only-JavaScript-developers" class="headerlink" title="Most common mistakes of (not only) JavaScript developers"></a><a href="https://blog.thecode.xyz/most-common-mistakes-of-not-only-javascript-developers#comments-list" target="_blank" rel="noopener">Most common mistakes of (not only) JavaScript developers</a></h3><p>作者在文中舉出幾個剛學習 JavaScript 時會沒留意到的幾個小地方，比較常見的包含 <code>==</code> 和 <code>===</code>、<code>null</code> 的 type 是 Object 或是寫 <code>switch</code> 的時候要記得考慮 default 狀況等，算是一篇初階且容易閱讀的文章。</p><h2 id="System-Design"><a href="#System-Design" class="headerlink" title="System Design"></a>System Design</h2><h3 id="AmazingTalker-的容器化之旅"><a href="#AmazingTalker-的容器化之旅" class="headerlink" title="AmazingTalker 的容器化之旅"></a><a href="https://medium.com/amazingtalker-tech/amazingtalker-%E7%9A%84%E5%AE%B9%E5%99%A8%E5%8C%96%E4%B9%8B%E6%97%85-9836c5f8a935" target="_blank" rel="noopener">AmazingTalker 的容器化之旅</a></h3><p>AmazingTalker 這家公司隨著用戶越來越多，網站流量也隨之不斷上升，因此整個網站的系統及架構不得不做出調整。文章中有提到他們在做技術選型時是怎麼做考慮的、過程中遇到的問題也是寫得很詳細，是非常值得一讀的文章～</p><h3 id="System-design-architecture-for-hotel-booking-apps"><a href="#System-design-architecture-for-hotel-booking-apps" class="headerlink" title="System design architecture for hotel booking apps"></a><a href="https://medium.com/nerd-for-tech/system-design-architecture-for-hotel-booking-apps-like-airbnb-oyo-6efb4f4dddd7" target="_blank" rel="noopener">System design architecture for hotel booking apps</a></h3><p>如果要做一個像是 Airbnb、Agoda 這樣的訂房網站，你會怎麼做設計呢？這邊文章的作者用架構圖來解釋他想出來的架構，雖然每個人設計出來的架構絕對都不一樣，不過還是可以參考看看別人都是怎麼做設計的</p><h3 id="System-Design-—-Backend-for-Google-Photos"><a href="#System-Design-—-Backend-for-Google-Photos" class="headerlink" title="System Design — Backend for Google Photos"></a><a href="https://mecha-mind.medium.com/system-design-backend-for-google-photos-e0abcd74dd36" target="_blank" rel="noopener">System Design — Backend for Google Photos</a></h3><p>這跟上一篇有點像，不過是在講要怎麼設計 Google 相簿的後端。這篇比較特別的是他除了講架構之外，對於「各種數字」如使用者數量、照片數量、平均照片大小也有認真考慮進去，不會讓人有一種在唬爛的感覺XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CDNs-aren’t-just-for-caching"><a href="#CDNs-aren’t-just-for-caching" class="headerlink" title="CDNs aren’t just for caching"></a><a href="https://jvns.ca/blog/2016/04/29/cdns-arent-just-for-caching/" target="_blank" rel="noopener">CDNs aren’t just for caching</a></h3><p>作者表示 CDN 不是只有 caching 而已，加快 TLS handshake、更好的網路 routing 和阻擋 DDoS 攻擊。作者對是不是 CDN 有更好的資安打上了一個問號，因為很多資安的設定都不是掌握在自己手裡而是交給 CDN 服務商。還有一點就是把 SSL 證書給 CDN 並且傳遞敏感的資訊，你無法知道使用者的資料是不是真的安全的，對此情況政府也有所顧慮。</p><p>最後就是 CDN 的設定和 CDN 故障這兩點都會影響網站的可靠性，作者也希望可以找到大廠 CDN 的 SLAs 是否符合的統計數據，但都沒找到。作者也推薦大家可以看看 Cloudflare 的技術文章。</p><h3 id="Reasons-for-servers-to-support-IPv6"><a href="#Reasons-for-servers-to-support-IPv6" class="headerlink" title="Reasons for servers to support IPv6"></a><a href="https://jvns.ca/blog/2022/01/29/reasons-for-servers-to-support-ipv6/" target="_blank" rel="noopener">Reasons for servers to support IPv6</a></h3><p>IPv6 可以解決 IPv4 address 不足的問題，但實現起來困難重重，很多時候是 ISP 並不支援。作者以很多的觀點解釋為什麼即使 IPv4 和 IPv6 可以切換自如但還是建議 server 支援 IPv6，最有趣的大概就是 Facebook 在他的 IPv6 裡面藏了 <code>face:b00c</code> 的彩蛋。</p><h3 id="A-list-of-new-ish-command-line-tools"><a href="#A-list-of-new-ish-command-line-tools" class="headerlink" title="A list of new(ish) command line tools"></a><a href="https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/" target="_blank" rel="noopener">A list of new(ish) command line tools</a></h3><p>作者在 twitter 上問有什麼新潮的 command line 工具，結果大家的回覆非常多元甚至沒聽過，於是作者整理了一份工具清單，其中有替代舊工具的新選擇、完全創新的工具、JSON/YAML/CSV 資料處理工具、grep 各種東西的工具，最後作者也有推薦他喜歡的是什麼。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="GraphQL-is-a-Trap"><a href="#GraphQL-is-a-Trap" class="headerlink" title="GraphQL is a Trap?"></a><a href="https://xuorig.medium.com/graphql-is-a-trap-e83ca380aa8f" target="_blank" rel="noopener">GraphQL is a Trap?</a></h3><p>最近在 Twitter 有個討論串爆炸了XD 主要是在討論是不是其實不需要 GraphQL 這項技術，覺得他只是圖個方便，但是對於後續維護以及效能而言都是不能說的痛，所以作者透過這篇文章把討論串裡面的留言拿出來一一討論，將其中有謬誤的部分解釋清楚提供他覺得正確的觀念，整個看完一次正反方論辯可以更了解 GraphQL XD</p><h3 id="Go-Best-Practices-How-to-code-comfortably"><a href="#Go-Best-Practices-How-to-code-comfortably" class="headerlink" title="Go Best Practices: How to code comfortably"></a><a href="https://medium.com/thirdfort/go-best-practices-how-to-code-comfortably-60118a27def8" target="_blank" rel="noopener">Go Best Practices: How to code comfortably</a></h3><p>在這篇文章中，作者想要根據自己這 3~4 年來的經驗跟大家介紹三種 Go 語言的 Best Practice，主題包含 Package Layout, context 和 Table Driven Test，使用 Go 的開發者可以參考一下，不過其中關於 Package Layout 的部份，大家應該會有不同的看法，你覺得作者建議的方式是對的嗎？</p><h3 id="After-900-leetcode-problems-here-is-what-I-learned"><a href="#After-900-leetcode-problems-here-is-what-I-learned" class="headerlink" title="After 900 leetcode problems here is what I learned"></a><a href="https://iorilan.medium.com/after-900-leetcode-problems-here-is-what-i-learned-4d39b17e0853" target="_blank" rel="noopener">After 900 leetcode problems here is what I learned</a></h3><p>大家應該或多或少有聽過 leetcode 吧？！現在不管是要單純練功寫程式，或是找工作應該都會使用他才對，作者把他解決了 900 個 leetcode 的問題之後的心得濃縮起來成為這篇文章，裡面包含各種類型的演算法的簡單介紹，看過一遍之後，應該可以在解決 leetcode 問題時更有方向</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 131 期 - 五月來了，今年夏天到底要不要出去玩？</title>
      <link href="/2022/05/03/131-may-day/"/>
      <url>/2022/05/03/131-may-day/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="跟著高手的腳步「軟體工程師的修煉與成長」學習筆記"><a href="#跟著高手的腳步「軟體工程師的修煉與成長」學習筆記" class="headerlink" title="跟著高手的腳步「軟體工程師的修煉與成長」學習筆記"></a><a href="https://medium.com/starbugs/81af17810c47" target="_blank" rel="noopener">跟著高手的腳步「軟體工程師的修煉與成長」學習筆記</a></h3><p>本篇文章是閱讀 vgod 撰寫的「軟體工程師的修煉與成長」系列文的心得筆記。<br>這一系列文章真的相當地精采，從來沒有人這麼有系統地分享矽谷頂級公司各職等需要具備的能力與心路歷程。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Array-Methods-Coming-to-JavaScript-in-2022"><a href="#The-Array-Methods-Coming-to-JavaScript-in-2022" class="headerlink" title="The Array Methods Coming to JavaScript in 2022"></a><a href="https://hackernoon.com/the-array-methods-coming-to-javascript-in-2022" target="_blank" rel="noopener">The Array Methods Coming to JavaScript in 2022</a></h3><p>在 JavaScript 裡，大部分的 array methods 都可以從原本的 array 再複製一個新的 array 出來，像是 map 或 filter 等等，這些操作都不會影響到原本的 array，不過還是有些像是 sort 或 reverse 等執行都還是會改變原有 array，為了改變這個狀況有些提案這麼誕生，且進入提案的第三階段了！</p><h3 id="18-GitHub-Repositories-to-Become-a-CSS-Master-🎨🧙‍♂️"><a href="#18-GitHub-Repositories-to-Become-a-CSS-Master-🎨🧙‍♂️" class="headerlink" title="18 GitHub Repositories to Become a CSS Master 🎨🧙‍♂️"></a><a href="https://madza.hashnode.dev/18-github-repositories-to-become-a-css-master" target="_blank" rel="noopener">18 GitHub Repositories to Become a CSS Master 🎨🧙‍♂️</a></h3><p>這篇文章對於想學習 CSS 的人來說真的是大秘寶，裡面提到的 repo 都用自己的方式在講解關於 CSS 的知識、概念或技巧，那如果一個 repo 不夠看怎麼辦？文章裡可是列出了 18 個！</p><h3 id="大菠萝？Pinia已经来了，再不学你就out了"><a href="#大菠萝？Pinia已经来了，再不学你就out了" class="headerlink" title="大菠萝？Pinia已经来了，再不学你就out了"></a><a href="https://juejin.cn/post/7078281612013764616" target="_blank" rel="noopener">大菠萝？Pinia已经来了，再不学你就out了</a></h3><p>Pinia 是在 Vue 框架內，除了 Vuex 外的另一個 state 管理工具，在 Pinia 的 <a href="https://github.com/vuejs/pinia#faq" target="_blank" rel="noopener">README.md</a> 中，也直接說明了 Pinia 就是 Vuex 的後繼者，那它在使用上和 Vuex 有什麼不同呢？一起看看文章中的用法介紹和下方的留言討論吧！</p><h2 id="Book-好書推薦"><a href="#Book-好書推薦" class="headerlink" title="Book 好書推薦"></a>Book 好書推薦</h2><h3 id="97-Things-Every-Programmer-Should-Know"><a href="#97-Things-Every-Programmer-Should-Know" class="headerlink" title="97 Things Every Programmer Should Know"></a><a href="https://github.com/97-things/97-things-every-programmer-should-know/blob/master/en/SUMMARY.md" target="_blank" rel="noopener">97 Things Every Programmer Should Know</a></h3><p>這週要來跟大家推薦我覺得幾本很不錯的書，首先是 O’Reilly Media 出版的「程式設計人應該知道的 97 件事」，這本書一開始也是同事推薦我的，讀了之後覺得真的很不錯，裡面會講到「你應該用什麼心態來做 Refactor」、「如何選擇工具」等等很重要的問題。雖然 97 件事聽起來很多，但每件事情平均大概就兩三頁，所以有時候搭個公車捷運就可以看完一件事了，比起滑手機讀書應該有意義多了對吧～</p><h3 id="《A-Philosophy-of-Software-Design》心得-I-—-寫出複雜度低的軟體"><a href="#《A-Philosophy-of-Software-Design》心得-I-—-寫出複雜度低的軟體" class="headerlink" title="《A Philosophy of Software Design》心得 I — 寫出複雜度低的軟體"></a><a href="https://www.explainthis.io/zh-hant/blog/a-philosophy-of-software-design/part1" target="_blank" rel="noopener">《A Philosophy of Software Design》心得 I — 寫出複雜度低的軟體</a></h3><p>這本 “A Philosophy of Software Design” 感覺也是很好看的書，但我還沒時間去看他，所以先看看別人的讀書筆記XD。一般來說當一個專案隨著時間的推移，程式碼變得越來越多時，當中也業務邏輯也會逐漸變得複雜，累積久了之後甚至會到難以修改的程度。既然如此，那要怎麼在一開始設計時就避免這種情況呢？看完這兩篇心得有興趣的話再去網路上找來看吧～</p><h3 id="The-Effective-Engineer-翻譯筆記-Introduction"><a href="#The-Effective-Engineer-翻譯筆記-Introduction" class="headerlink" title="[The Effective Engineer 翻譯筆記] Introduction"></a><a href="https://medium.com/@wilsonhuang/the-effective-engineer-%E7%AD%86%E8%A8%98-introduction-885e8c575640" target="_blank" rel="noopener">[The Effective Engineer 翻譯筆記] Introduction</a></h3><p>這本 “The Effective Engineer” 也是網路上可以找到的，他主要是在講說你要怎麼成為一個高效率的工程師（就跟書名一樣XD），像是我非常認同的一點就是「你必須不斷改善、並且熟悉你的工具」，因為你的終端機、編輯器、Git 等等都是你每天會不斷使用的工具，所以記得要把它調整到最適合你的狀態，譬如說常用的快捷鍵、設定 Alias 等等，雖然省下來的都是小小的時間，但累積起來也是非常驚人。除了個人之外，也要成為可以增進團隊效率的工程師，譬如說把一些東西寫成腳本、把新人該知道的東西寫成文件，否則每次有新進員工都要到處問半天，無形中也增加了非常多的時間成本。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="SQuriL-Generate-and-Store-Your-GraphQL-Schemas"><a href="#SQuriL-Generate-and-Store-Your-GraphQL-Schemas" class="headerlink" title="SQuriL: Generate and Store Your GraphQL Schemas"></a><a href="https://medium.com/@michael-a-trapani/squril-generate-and-store-your-graphql-schemas-ae38af229701" target="_blank" rel="noopener">SQuriL: Generate and Store Your GraphQL Schemas</a></h3><p>GraphQL 是讓 API 對既有資料實現強大搜尋功能的語言與 Runtime，他提供了一個相對於 RESTful 的替代方案，讓開發者可以使用單一個請求來對多個資料來源獲取資料；雖然 GraphQL 的優勢顯而易見，但有許多的公司尚未將查詢語言整合到既有的技術棧當中，對於這類公司來說要採用 GraphQL 的門檻相對地高，SQuriL 就是為了解決類似問題而生的解決方案，他是一個開源的 GraphQL Schema 生成和儲存工具，可以從 PostgreSQL URI 來產生客製化且具備可以 Production 環境使用的 GraphQL Schema 給 Node.js 和 TypeScript 相容環境使用，有興趣的人可以參考這篇文章看看如何使用它</p><h3 id="Improving-Query-Performance-by-10000x"><a href="#Improving-Query-Performance-by-10000x" class="headerlink" title="Improving Query Performance by 10000x"></a><a href="https://betterprogramming.pub/improving-query-performance-by-10000x-79b84c80fbaf" target="_blank" rel="noopener">Improving Query Performance by 10000x</a></h3><p>當你嘗試從系統中獲得更多資訊時，你的應用程式是不是也變得更慢了？你並不孤獨，雖然有人說過不要過早去優化系統，但在某些時候，你還是必須要花點時間去研究看看如何提高系統效能，作者所在的 Sky Ledge 最近遇到類似的問題…一個簡單的 Query 本來預期在 1 秒內就要跑完，但在 Staging 環境花了將近 30 秒才取得回應，作者後來花了兩個多小時將問題解決掉！文中巨細彌遺地慢慢解釋他怎麼用科學方式去分析找到問題的過程還滿值得參考一下的</p><h3 id="System-Design-—-Design-a-Monitoring-System"><a href="#System-Design-—-Design-a-Monitoring-System" class="headerlink" title="System Design — Design a Monitoring System"></a><a href="https://gongybable.medium.com/system-design-design-a-monitoring-system-f0f0cbafc895" target="_blank" rel="noopener">System Design — Design a Monitoring System</a></h3><p>如何設計一個監控系統？這個問題應該滿常會在面試中被提問到，首先必須考量的點在於如何收集 Metric，是要用 Pull 或是 Push 模式，假如使用 Pull 模式的話要怎麼去設計 Exporter；而一個監控系統應該要具備擴展性，那麼要如何達成？儲存資料的 DB 要怎麼設計…等，這一連串的問題，作者用一篇文章來含括與回答，讓大家可以更清楚的理解監控系統的設計</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="New-Relic-Report-Shows-Lots-of-Java-Apps-Running-in-Containers"><a href="#New-Relic-Report-Shows-Lots-of-Java-Apps-Running-in-Containers" class="headerlink" title="New Relic Report Shows Lots of Java Apps Running in Containers"></a><a href="https://containerjournal.com/features/new-relic-report-shows-lots-of-java-apps-running-in-containers/" target="_blank" rel="noopener">New Relic Report Shows Lots of Java Apps Running in Containers</a></h3><p><a href="https://newrelic.com/resources/report/2022-state-of-java-ecosystem" target="_blank" rel="noopener">2022 年 New Relic 報告</a>指出許多組織 Java 服務逐漸轉換成 container，而且每個服務有變微服務的趨勢。整體而言，Java 11 佔將近 48%，然而 Java 8 依舊佔了 46%。另外 Java Development Kit（JDK）也有增加的趨勢，在 AWS 上跑的 Java 服務 JDK 佔了 22% 而 Oracle 佔了 35%，與 2020 年相比，Oracle 曾經有 75% 的佔比。除了 Java 程式本身，也討論了大型企業雖然很慢但還是有在做變化甚至從地端轉化到雲上，幸好許多 Cloud Native 工具像是 OpenTelemetry 可以幫助組織監控服務的狀態，讓企業轉化可以更順利，並且以後 Open Source 跟商用軟體混用會更盛行。</p><h3 id="Kubernetes-volume-backup-for-disaster-recovery"><a href="#Kubernetes-volume-backup-for-disaster-recovery" class="headerlink" title="Kubernetes volume backup for disaster recovery"></a><a href="https://medium.com/@amitabhprasad/kubernetes-volume-backup-for-disaster-recovery-56a5facee7fe" target="_blank" rel="noopener">Kubernetes volume backup for disaster recovery</a></h3><p>作者解釋 Kubernetes 災難復原雖然已經有 Velero 備份 volume，但是 Velero 每次都是完整的備份，當資料越來越多時恐會影響到復圓所需的時間（RTO）。作者幫大家複習 PV、PVC、StorageClass 以及比較新的 VolumeSnapshotContent、VolumeSnapshot 和 VolumeSnapshotClass 技術概念，之後 demo 如何在兩個不同 region 的 Cluster 之間靠 snapshot 複製 volume。</p><h3 id="Dockershim-not-needed-Docker-Desktop-with-Kubernetes-1-24"><a href="#Dockershim-not-needed-Docker-Desktop-with-Kubernetes-1-24" class="headerlink" title="Dockershim not needed: Docker Desktop with Kubernetes 1.24+"></a><a href="https://www.docker.com/blog/dockershim-not-needed-docker-desktop-with-kubernetes-1-24" target="_blank" rel="noopener">Dockershim not needed: Docker Desktop with Kubernetes 1.24+</a></h3><p>自從 Kubernetes 宣布棄用 Docker 後震驚業界，社群開始考慮其他替代方案，但其實 Docker 還是有推出新的 cri-dockerd 版本，也就是使用標準的 CRI 所做的 interface，這樣 Docker 跑起來跟其他替代方案無異了，以前的流程是：</p><p>kubelet -&gt; cri-dockerd -&gt; dockershim -&gt; docker</p><p>新的版本則是可以不用 dockershim 了：</p><p>kubelet -&gt; cri-dockerd -&gt; docker</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 130 期 - 沒有時光機沒關係，我們有 Git</title>
      <link href="/2022/04/26/130-without-time-machine-is-ok-we-have-git/"/>
      <url>/2022/04/26/130-without-time-machine-is-ok-we-have-git/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Git-我以為的-Git-Rebase-與和-Git-Merge-做合併分支的差異"><a href="#Git-我以為的-Git-Rebase-與和-Git-Merge-做合併分支的差異" class="headerlink" title="Git | 我以為的 Git Rebase 與和 Git Merge 做合併分支的差異"></a><a href="https://medium.com/starbugs/git-%E6%88%91%E4%BB%A5%E7%82%BA%E7%9A%84-git-rebase-%E8%88%87%E5%92%8C-git-merge-%E5%81%9A%E5%90%88%E4%BD%B5%E5%88%86%E6%94%AF%E7%9A%84%E5%B7%AE%E7%95%B0-cacd3f45294d" target="_blank" rel="noopener">Git | 我以為的 Git Rebase 與和 Git Merge 做合併分支的差異</a></h3><p>Hi！大家好，我是神 Q 超人！用 Git 做版本控管應該是大部分工程師每天都會碰到的工作流程之一，但我在使用上不外乎就是 push、pull、merge、checkout 或 log 等幾個指令，更深入一點就一問三不知了 😂，而在這個狀況下的我，就在和朋友聊天的時候遇到了這個問題：</p><p>「欸，你知道 Git 的 merge 和 rebase 有什麼不同嗎？」</p><p>聽完後我直接困惑，對我來說 rebase 就是用來整理 commit 的工具，居然還可以和 merge 做比較？如果你和我有相同的疑惑，或是早就知道，然後只想複習的話，都接著看下去吧！ 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Writing-Strong-Front-end-Test-Element-Locators"><a href="#Writing-Strong-Front-end-Test-Element-Locators" class="headerlink" title="Writing Strong Front-end Test Element Locators"></a><a href="https://css-tricks.com/front-end-test-element-locators/" target="_blank" rel="noopener">Writing Strong Front-end Test Element Locators</a></h3><p>自動化測試可以寫下程式碼，讓程式碼代替人類的行為，操作你的網頁或是一個 Component，並且為所有行為下斷言，確保所有事情都如同你預期的那樣運作。文章中介紹了許多在寫測試案例時的知識，非常值得一讀！</p><h3 id="CSS-Tips"><a href="#CSS-Tips" class="headerlink" title="CSS Tips"></a><a href="https://markodenic.com/css-tips/" target="_blank" rel="noopener">CSS Tips</a></h3><p>作者介紹滿多只用 CSS 就能達成的網頁效果，其中包含 Typing Effect、Modals 和 Dynamic Tooltips 等等，幾乎所有例子都有附上 CodePen 的程式碼頁面。</p><h3 id="How-to-escape-from-memory-leaks-in-JavaScript"><a href="#How-to-escape-from-memory-leaks-in-JavaScript" class="headerlink" title="How to escape from memory leaks in JavaScript"></a><a href="https://blog.logrocket.com/escape-memory-leaks-javascript/" target="_blank" rel="noopener">How to escape from memory leaks in JavaScript</a></h3><p>Memory Leak 可能會造成 JavaScript 的應用程師效能低落，但在開發的時候又常常會忽略記憶體管理，這篇文章內容主要是在探討記憶體管理、Memory Leak 的類型和如何使用 Chrome 的 Devtools 尋找問題！</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="10-Microservice-Best-Practices-The-80-20-Way"><a href="#10-Microservice-Best-Practices-The-80-20-Way" class="headerlink" title="10 Microservice Best Practices: The 80/20 Way"></a><a href="https://www.simform.com/blog/microservice-best-practices/" target="_blank" rel="noopener">10 Microservice Best Practices: The 80/20 Way</a></h3><p>微服務架構帶來高彈性與服務開發之間的解耦合，然後他也帶來一些挑戰，例如效率，一致性，安全…等，所以這篇文章為大家帶來 10 個 Microservice 的最佳守則，以下僅列出各個主題，文章內對於每個主題都有詳細的說明與參照</p><ul><li>使用 Domain-Driven Design(DDD) 來改善生產力</li><li>使用 Single Responsibility Principle (SRP) 做出快速回應</li><li>通過獨立的微服務實現微服務自我治理</li><li>擁抱平行化地異步溝通方式</li><li>透過容器化微服務來改善效率</li><li>通過微前端來增加原生 UI 的能力</li><li>透過安全的微服務來保護重要資料</li><li>使用不可變的 API 來簡化平行化程式</li><li>透過 DevOps 文化來提升交付速度</li></ul><h3 id="🤑-Medium-付費文章-23-Basic-Principles-in-Software-Architecture"><a href="#🤑-Medium-付費文章-23-Basic-Principles-in-Software-Architecture" class="headerlink" title="[🤑 Medium 付費文章] 23 Basic Principles in Software Architecture"></a><a href="https://azeynalli1990.medium.com/23-basic-principles-in-software-architecture-7913f109decc" target="_blank" rel="noopener">[🤑 Medium 付費文章] 23 Basic Principles in Software Architecture</a></h3><p>此篇文章介紹了 23 種軟體架構的基礎原則，例如：Dependency Inversion, Separation of Concerns, Inversion of Control, Dependency Injection…等，有些附有程式碼說明，自己覺得把這些原則都理解之後，應該可以對於設計服務，撰寫程式時避開不少冤枉路，減少技術債的產生</p><h3 id="Comments-How-Google-Developers-write-their-comments"><a href="#Comments-How-Google-Developers-write-their-comments" class="headerlink" title="Comments: How Google Developers write their comments"></a><a href="https://paigeshin1991.medium.com/comments-how-google-developers-write-their-comments-5443657ecc4b" target="_blank" rel="noopener">Comments: How Google Developers write their comments</a></h3><p>寫程式需要寫 Comment 這件事情從一開始學程式就一直被教導著，不過大家知道 Comment 其實有不少種類型嗎？！例如有關於法律上的，提供資訊的，說明意圖，用來澄清，警告以及 TODO，這篇文章嘗試解釋這些不同的 Comment 類型；而在回文有不少人覺得其實將變數命名妥當，程式撰寫完善就可以讓 Comment 寫的更少，甚至不需要，大家也是這樣覺得嗎？！</p><h2 id="Cloud"><a href="#Cloud" class="headerlink" title="Cloud"></a>Cloud</h2><h3 id="AWS-CSA-Associate-學習筆記-S3-Simple-Storage-Service"><a href="#AWS-CSA-Associate-學習筆記-S3-Simple-Storage-Service" class="headerlink" title="AWS CSA Associate 學習筆記 - S3(Simple Storage Service)"></a><a href="https://godleon.github.io/blog/AWS/AWS-CSA-associate-S3-part1/" target="_blank" rel="noopener">AWS CSA Associate 學習筆記 - S3(Simple Storage Service)</a></h3><p>大家都用過 S3，但 S3 還分成很多 storage class，想要存取速度快又要跨區存取，那就貴，但如果只是拿來封存一些可能一輩子開不了幾次的檔案，也不要求需要時馬上拿到，那就可以用很便宜的價格存很多東西</p><h3 id="三十天考過AWS-CCP證照，真-awesome-系列"><a href="#三十天考過AWS-CCP證照，真-awesome-系列" class="headerlink" title="三十天考過AWS CCP證照，真 awesome 系列"></a><a href="https://ithelp.ithome.com.tw/articles/10235699" target="_blank" rel="noopener">三十天考過AWS CCP證照，真 awesome 系列</a></h3><p>如果想有系統的學習 AWS，而不是東學西學的話，我覺得這系列寫得還蠻好的。就算沒有打算考 AWS 的 CCP(Certified Cloud Practitioner) 還是可以來看</p><h3 id="AWS-vs-Azure-vs-GCP-Comparing-The-Big-3-Cloud-Platforms"><a href="#AWS-vs-Azure-vs-GCP-Comparing-The-Big-3-Cloud-Platforms" class="headerlink" title="AWS vs Azure vs GCP: Comparing The Big 3 Cloud Platforms"></a><a href="https://www.bmc.com/blogs/aws-vs-azure-vs-google-cloud-platforms/" target="_blank" rel="noopener">AWS vs Azure vs GCP: Comparing The Big 3 Cloud Platforms</a></h3><p>AWS、Azure 跟 GCP 是現在最大的三個雲端平台，也有各自的優缺點，所以在做選擇的時候記得先做一番比較，否則就可能會發生像我之前用 GCP，結果發現他們沒有像 AWS SES 一樣用來寄信的服務XD，只好再把架構搬到 AWS 上</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="New-Wave-for-Helm"><a href="#New-Wave-for-Helm" class="headerlink" title="New Wave for Helm!"></a><a href="https://medium.com/wriketechclub/new-wave-for-helm-b9800733587f" target="_blank" rel="noopener">New Wave for Helm!</a></h3><p>作者原本使用 helmfile 來管理 Kubernetes 的部署，也很喜歡裡面的諸多的功能，不過作者依舊尋找更好的工具。作者認為 helmwave 除了常見的 everything as code 的功能外，還有循序部署、即時追蹤 Kubernetes resources、不需要額外的工具就可以直接使用 helmwave，很多測試工具如 kube-linter、Kubeval、Pluto 都可以整合，還有一個特色就是使用體驗跟 docker-compose 很像。</p><h3 id="Stop-Using-Branches-for-Deploying-to-Different-GitOps-Environments"><a href="#Stop-Using-Branches-for-Deploying-to-Different-GitOps-Environments" class="headerlink" title="Stop Using Branches for Deploying to Different GitOps Environments"></a><a href="https://medium.com/containers-101/stop-using-branches-for-deploying-to-different-gitops-environments-7111d0632402" target="_blank" rel="noopener">Stop Using Branches for Deploying to Different GitOps Environments</a></h3><p>此推薦文章和下篇是同一系列，作者講述很多組織在使用 GitOps 如何在同一個 release 前進到下一個環境是大家一直探討的，因為答案有很多種，所以作者就索性說明哪些我們應該避免：</p><ol><li>依環境分 git branches 只適用於 legacy applications（這裡指的是傳統 git-flow），採用 trunk-based 並且用依環境用 feature flag 來控制，application code 和 configuration code 也建議放在不同 repository</li><li>前進到下個環境從來不是只有 git merge 這麼簡單，兩次的 merge 都修改同一個地方時有可能會被忽略而 merge 進去了，hotfix 時的 cherry-picks 也得小心使用</li><li>依照環境分 branches 不太適合 Helm/Kustomize，因為它們並不會知道 git branches、git merge 或 pull request，因為他們都是靠檔案做環境分類</li></ol><h3 id="How-to-Model-Your-Gitops-Environments-and-Promote-Releases-between-Them"><a href="#How-to-Model-Your-Gitops-Environments-and-Promote-Releases-between-Them" class="headerlink" title="How to Model Your Gitops Environments and Promote Releases between Them"></a><a href="https://medium.com/containers-101/how-to-model-your-gitops-environments-and-promote-releases-between-them-ff40fd3008" target="_blank" rel="noopener">How to Model Your Gitops Environments and Promote Releases between Them</a></h3><p>接續上篇，作者持續探討 GitOps 如何順利地 release 在各個環境中：</p><ol><li>要先了解你維護的服務</li><li>五個範例來解釋每次的變更對環境的互動</li><li>如何初始化新的部署</li><li>對照不同環境的設定</li><li>要如何 release 在不同的 GitOps 環境</li><li>更改設定就要改全部的環境</li><li>環境依照資料夾來分的好處</li><li>如何在 GitOps 環境中使用 Helm</li><li>大型組織可以考慮依環境分 repository</li><li>環境分類請愛用資料夾，而非 branches</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 129 期 - 有人看是 Bug，有人看像 Feature，這就是雅量</title>
      <link href="/2022/04/19/129-treat-bugs-as-features/"/>
      <url>/2022/04/19/129-treat-bugs-as-features/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="原來程式碼打包也有這麼多眉角-淺談-Tree-Shaking-機制"><a href="#原來程式碼打包也有這麼多眉角-淺談-Tree-Shaking-機制" class="headerlink" title="原來程式碼打包也有這麼多眉角 - 淺談 Tree Shaking 機制"></a><a href="https://medium.com/starbugs/%E5%8E%9F%E4%BE%86%E7%A8%8B%E5%BC%8F%E7%A2%BC%E6%89%93%E5%8C%85%E4%B9%9F%E6%9C%89%E9%80%99%E9%BA%BC%E5%A4%9A%E7%9C%89%E8%A7%92-%E6%B7%BA%E8%AB%87-tree-shaking-%E6%A9%9F%E5%88%B6-8375d35d87b2" target="_blank" rel="noopener">原來程式碼打包也有這麼多眉角 - 淺談 Tree Shaking 機制</a></h3><p>Hi 大家好我是 Andy，身為一位前端工程師，效能優化這件事情一直都是必須要做的事情，隨著現代的網頁越來越複雜，bundler 要做的事情也越來越多，究竟 bundler 是如何優化打包過後的程式碼，就讓我們來仔細探討這個 Tree Shaking 機制吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Parent-Selector"><a href="#CSS-Parent-Selector" class="headerlink" title="CSS Parent Selector"></a><a href="https://ishadeed.com/article/css-has-parent-selector/" target="_blank" rel="noopener">CSS Parent Selector</a></h3><p>你有曾經想要去確認過是不是有某個特定的 element 包含在 parent 之中嗎？這邊要介紹的 :has 就能讓你判斷這件事情，作者在文章裡先是描述了網頁排版中會遇到的狀況，並以 :has 來解決。可惜的是 :has 在瀏覽器之間還沒有很高的支援，這點是要注意的地方！</p><h3 id="Javascript-Iterators-and-Generators"><a href="#Javascript-Iterators-and-Generators" class="headerlink" title="Javascript -Iterators and Generators"></a><a href="https://towardsdev.com/javascript-iterators-and-gen-9e14133b57c5" target="_blank" rel="noopener">Javascript -Iterators and Generators</a></h3><p>作者介紹 JavaScript 中的 iterators 和 generators 方法，記得之前面試的時候，就有被考過 iterators 的概念，以及如何在不用 Array、也不使用多餘空間（例如宣告 100 個 index 的 array，或是 100 個 key 的 object）的情況下，用 for…of 跑過 1-100 執行，當時的答案就是使用 generators</p><h3 id="Those-HTML-Elements-You-Never-Use-🌚🕵🏿"><a href="#Those-HTML-Elements-You-Never-Use-🌚🕵🏿" class="headerlink" title="Those HTML Elements You Never Use 🌚🕵🏿"></a><a href="https://dev.to/eludadev/those-html-elements-you-never-use-16bi" target="_blank" rel="noopener">Those HTML Elements You Never Use 🌚🕵🏿</a></h3><p>又到了稀有 HTML 標籤的介紹時間了，作者列出了超過十個你可能沒看過的 HTML 標籤，雖然有些功能我們已經透過 UI Framework 使用很久了，但默默地 HTML 也偷偷追了上來。</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="該用-MySQL-或-MongoDB？選擇資料庫前你該了解的事"><a href="#該用-MySQL-或-MongoDB？選擇資料庫前你該了解的事" class="headerlink" title="該用 MySQL 或 MongoDB？選擇資料庫前你該了解的事"></a><a href="https://tw.alphacamp.co/blog/mysql-and-mongodb-comparison" target="_blank" rel="noopener">該用 MySQL 或 MongoDB？選擇資料庫前你該了解的事</a></h3><p>在剛開始學習使用資料庫時，第一個會先碰到的問題就是要使用 MySQL/PostgreSQL 還是 MongoDB，但要使用什麼資料庫跟你的應用場景其實有很大的關係，如果還不知道怎麼選的話來看看這篇的分析吧</p><h3 id="MongoDB-不懂-ESR-別說你會用-Index"><a href="#MongoDB-不懂-ESR-別說你會用-Index" class="headerlink" title="MongoDB 不懂 ESR 別說你會用 Index !!"></a><a href="https://blog.myctw.cc/post/d50d.html" target="_blank" rel="noopener">MongoDB 不懂 ESR 別說你會用 Index !!</a></h3><p>在 MongoDB 中進行 query 時，如果希望盡量吃到 index，那在設計 index 以及進行搜尋、排序時就要遵守 ESR(Equality, Sort, Range) 原則，但不知道為什麼這個原則並沒有寫在官方文件裡XD，所以如果你有在用 MongoDB 卻沒聽過 ESR 的話趕快來這邊補一下</p><h3 id="Getting-started-with-MongoDB-explain"><a href="#Getting-started-with-MongoDB-explain" class="headerlink" title="Getting started with MongoDB explain()"></a><a href="https://www.dbkoda.com/blog/2017/11/12/MongoDBExplain" target="_blank" rel="noopener">Getting started with MongoDB explain()</a></h3><p>在使用資料庫時，為了加快搜尋的速度我們都會使用 index，但怎麼知道你建立的 index 是不是真的有被吃進去呢，總不能憑感覺吧，所以這時候就要把 explain 請出來，看看 Mongo 是不是真的有照你想的去使用建出來的 index</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="30-Coding-Concepts-I-Learned-After-Reading-“Clean-Code”"><a href="#30-Coding-Concepts-I-Learned-After-Reading-“Clean-Code”" class="headerlink" title="30 Coding Concepts I Learned After Reading “Clean Code”"></a><a href="https://betterprogramming.pub/thoughts-on-clean-code-d373c0d93ea4" target="_blank" rel="noopener">30 Coding Concepts I Learned After Reading “Clean Code”</a></h3><p>作者本身喜愛將自己所讀完的書給記下來，因此在讀完 Uncle Bob 所撰寫的 Clean Code 之後，將讀完此書學到的 30 個概念給整理出來，首先講述 Clean Code 的整體思想與概念，然後再深入探討這三十個概念的細節，策略與實作相關訊息，假如沒有太多時間來讀這本書的話，可以考慮花個 15 分鐘閱讀此篇整理文章</p><h3 id="1-000-000-Concurrent-Connections"><a href="#1-000-000-Concurrent-Connections" class="headerlink" title="1,000,000 Concurrent Connections"></a><a href="https://josephmate.github.io/2022-04-14-max-connections/" target="_blank" rel="noopener">1,000,000 Concurrent Connections</a></h3><p>作者最近看到不少文章有一個錯誤的觀念，述說著一台伺服器最多只能接受 65,000 個連線，作者首先提出一些證據來打臉，首先是 WhatsApp 所使用到的 Phoenix Web Framework 早就演示過可以在單一個 Port 上接受數百萬的連線，再來要是任何人假如不相信的話，可以使用簡單的 Java 在自己的機器做個實驗就可以了；但為了證實自己所說，作者還是詳細的做了個 PoC 將結果展示給大家看，結果顯示在 Mac 就可以接受到將近八萬個連線，並且將可能遇到的問題給記錄下來</p><h3 id="CQRS-Software-Architecture-Pattern-The-Good-the-Bad-and-the-Ugly"><a href="#CQRS-Software-Architecture-Pattern-The-Good-the-Bad-and-the-Ugly" class="headerlink" title="CQRS Software Architecture Pattern: The Good, the Bad, and the Ugly"></a><a href="https://betterprogramming.pub/cqrs-software-architecture-pattern-the-good-the-bad-and-the-ugly-e9d6e7a34daf" target="_blank" rel="noopener">CQRS Software Architecture Pattern: The Good, the Bad, and the Ugly</a></h3><p>Command and Query Responsibility Segregation (CQRS) 是一種專門用來將資料的讀與寫分離開來的架構，其中的 Queries 就是負責來讀取資料的模型，Commands 就是用來負責更新資料的模型；這篇文章將會詳細的介紹 CQRS 的架構，並且詳細地說明如何實作 CQRS，以及他的優缺點，跟可能會遇到的問題</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Finding-Vulnerable-Info-Using-Google-Dorks-—-Ethical-Hacking"><a href="#Finding-Vulnerable-Info-Using-Google-Dorks-—-Ethical-Hacking" class="headerlink" title="Finding Vulnerable Info Using Google Dorks — Ethical Hacking"></a><a href="https://infosecwriteups.com/finding-vulnerable-info-using-google-dorks-ethical-hacking-23f358117ceb" target="_blank" rel="noopener">Finding Vulnerable Info Using Google Dorks — Ethical Hacking</a></h3><p>此篇撰寫了如何用 Google 搜尋引擎的特性尋找敏感的資訊，例如：鎖定檔案類型為 log 且內容含有 username 的結果，以及尋找可以直接看的公開線上鏡頭（我第一個搜尋結果可以看到塞爾維亞街頭攝影機的即時影像），其實推薦這篇不為別的，就是希望提醒大家維運系統時盡量不要把 credential 上傳到網路上啊！</p><h3 id="OpenTelemetry-the-standardized-observability-framework-for-everyone"><a href="#OpenTelemetry-the-standardized-observability-framework-for-everyone" class="headerlink" title="OpenTelemetry, the standardized observability framework for everyone"></a><a href="https://blog.devgenius.io/opentelemetry-the-standardized-observability-framework-for-everyone-76b10c4148f7" target="_blank" rel="noopener">OpenTelemetry, the standardized observability framework for everyone</a></h3><p>OpenTelemetry 算是在業界引起了一波浪潮，其提供完整的 APIs、SDKs、工具和整合讓 tracing、metrics 和 logs 可以得到更好地整合。作者分享自己整合 jaeger 和 datadog 的經驗和 demo，另外作者也有把 demo code 上傳到 Github 上，有興趣的可以照著文章的步驟做。</p><h3 id="How-to-Generate-Terraform-Code-with-Opta"><a href="#How-to-Generate-Terraform-Code-with-Opta" class="headerlink" title="How to Generate Terraform Code with Opta"></a><a href="https://blog.runx.dev/how-to-generate-terraform-code-with-opta-f255f71c73d3" target="_blank" rel="noopener">How to Generate Terraform Code with Opta</a></h3><p>作者介紹 Opta 是以 Terraform 為底層做抽象化封裝，與之相比 Terraform 太多底層的細節要注意，在建造 infrastructure 堆積木的過程中很容易有設定錯誤的情況發生。反之，向 Opta 表示意圖並且產出 Terraform files 之後也可以對 Terraform files 做細節的調整，相比之下使用 Opta 是比較人性化的。不過此專案還算早期，抽象化的封裝還不夠多而且都以 AWS 為主，但可以看得出來團隊很認真經營社群，slack channel 都還算活躍。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 128 期 - 求不要更新了，老子學不動了</title>
      <link href="/2022/04/12/128-kubernetes-upgrade-faq/"/>
      <url>/2022/04/12/128-kubernetes-upgrade-faq/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-升級-FAQ"><a href="#Kubernetes-升級-FAQ" class="headerlink" title="Kubernetes 升級 FAQ"></a><a href="https://medium.com/starbugs/kubernetes-%E5%8D%87%E7%B4%9A-faq-fc0e7dbd17a4" target="_blank" rel="noopener">Kubernetes 升級 FAQ</a></h3><p>Kubernetes 升級速度滿快的，至少一年會需要更新一次大版，遇到 API 被 Deprecated，底層有 Breaking Change 也很正常，所以透過此篇文章，把自己升級 K8s 的流程還有近期需要留意的小事記錄下來持續追蹤</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="33-JavaScript-Concepts-Every-Developer-Should-Know-🤓️💯️"><a href="#33-JavaScript-Concepts-Every-Developer-Should-Know-🤓️💯️" class="headerlink" title="33 JavaScript Concepts Every Developer Should Know 🤓️💯️"></a><a href="https://dev.to/eludadev/33-javascript-concepts-every-beginner-should-know-with-tutorials-4kao" target="_blank" rel="noopener">33 JavaScript Concepts Every Developer Should Know 🤓️💯️</a></h3><p>作者精心列出 33 個在 JavaScript 中常會出現的一些名詞、方法、原理或是問題，每個項目下都有簡單的說明和更詳細的教學文章連結，如果有時間的話可以再確認一下，看看有沒有自己不小心忽略的部分。</p><h3 id="UI-Design-Principles"><a href="#UI-Design-Principles" class="headerlink" title="UI Design Principles"></a><a href="https://acetech.hashnode.dev/ui-design-principles" target="_blank" rel="noopener">UI Design Principles</a></h3><p>文章中以表達是否明確、熟悉的介面、一致性、內部控制、最小化使用者的負擔和簡約的設計，這 6 個原則讓你去思考該如何設計出友善的 UI。</p><h3 id="Web-design-principles"><a href="#Web-design-principles" class="headerlink" title="Web design principles"></a><a href="https://blog.devgenius.io/web-design-principles-with-examples-b3fb9c622e57" target="_blank" rel="noopener">Web design principles</a></h3><p>作者從顏色、字體、佈局等角度切入設計，並比較各種設計、佈局和 UI 的差別，解釋為什麼在不同的情境下會這樣選擇，以及這麼做的特點在哪裡。文章中包含非常多的圖片，內容也很棒！</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="How-to-design-a-system-to-scale-to-your-first-100-million-users"><a href="#How-to-design-a-system-to-scale-to-your-first-100-million-users" class="headerlink" title="How to design a system to scale to your first 100 million users"></a><a href="https://levelup.gitconnected.com/how-to-design-a-system-to-scale-to-your-first-100-million-users-4450a2f9703d" target="_blank" rel="noopener">How to design a system to scale to your first 100 million users</a></h3><p>如何設計一個可以服務增加到 1 億使用者的系統？作者使用很淺顯易懂的例子，跟精美的架構圖，一步一步帶著使用者去理解怎麼設計出一個可以服務 一億個使用者的系統，大概會提到的範圍如下：</p><ul><li>首先從把所有的東西都塞在同一台機器裡面為例</li><li>分析什麼叫做 Scaling Out 與 Scaling Up</li><li>解釋為什麼要把 Web Server 和 Database 拆開來</li><li>如何讓 Web Server 可以達成 Scaling Out</li><li>如何讓 Database 可以達成 Scaling Out</li><li>怎麼去選擇 NoSQL 或是 SQL</li><li>最後提到怎麼去利用 CDN 來幫助自己的系統服務使用者</li></ul><h3 id="7-tools-for-visualizing-a-codebase"><a href="#7-tools-for-visualizing-a-codebase" class="headerlink" title="7 tools for visualizing a codebase"></a><a href="https://lmy.medium.com/7-tools-for-visualizing-a-codebase-41b7cddb1a14" target="_blank" rel="noopener">7 tools for visualizing a codebase</a></h3><p>想要撰寫文件但是卻不知道該從何開始嗎？假如有這樣困擾的話，可以考慮直接在文件中加入圖片，畢竟有圖有真相 😂 而此篇文章的作者推薦了幾個可以從程式碼或是組態，直接視覺化的工具</p><ul><li>docker-compose-viz: 將 docker-compose.yml 檔案轉換成圖片</li><li>Code2flow: 將 Python, Javascript, Ruby 和 Ruby 程式碼內函式的呼叫關係轉換成圖片</li><li>pycallgraph, pyan: 跟 Code2flow 一樣的功能，但是特別針對 Python 語言做處理</li><li>Bazel: 他是一個用來 Build Java, C++, Go, ANdroid, iOS…等其他語言的工具，而他剛他剛好也可以將程式與其使用到的函式庫相依性用視覺化呈現出來</li><li>pipdeptree: 跟 Bazel 可以達到同樣的效果，不過是針對 Python 語言</li><li>depgraph-maven-plugin: 跟 Bazel 可以達到同樣的效果，不過是針對使用 Maven 的 Java 程式</li><li>Gource, CodeSee: 假如不是想要撰寫文件，只是想要快速瞭解某個 Code Repo的話，可以試試看這兩個工具</li></ul><h3 id="6-Algorithms-Every-Developer-Should-Know"><a href="#6-Algorithms-Every-Developer-Should-Know" class="headerlink" title="6 Algorithms Every Developer Should Know"></a><a href="https://medium.com/dare-to-be-better/6-algorithms-every-developer-should-know-f78b609c7e7c" target="_blank" rel="noopener">6 Algorithms Every Developer Should Know</a></h3><p>作者自己並不是一個很喜愛研究資料結構和演算法的工程師，但他現在在他的工作生涯中經歷過的大大小小專案之後，發現有 6 個演算法是每個工程師都應該要知道的，因為這 6 個演算法幾乎可以解決開發流程中的每個問題，每個演算法的詳細介紹可以參閱內文</p><ul><li>Sorting Algorithm (排序演算法)</li><li>Searching Algorithm (搜尋演算法)</li><li>Dynamic Programming (動態規劃)</li><li>Recursion Algorithm (遞迴演算法)</li><li>Divide and Conquer (分治法)</li><li>Hashing (雜湊函式)</li></ul><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Camel-K-—-“Containerless”-Deployments-on-Kubernetes"><a href="#Camel-K-—-“Containerless”-Deployments-on-Kubernetes" class="headerlink" title="Camel K — “Containerless” Deployments on Kubernetes"></a><a href="https://itnext.io/camel-k-containerless-deployments-349da12bfa9d" target="_blank" rel="noopener">Camel K — “Containerless” Deployments on Kubernetes</a></h3><p>Camel 是一款幾乎可以整合所有系統跟服務的輕量整合框架，而 Camel K 則是專門用在 Kubernetes 上的套件，只要 developer 寫好 code 邏輯就可以直接部署上 Kubernetes 裡面，不用特別定義 container image 或寫 Kubernetes yaml，減少開發人員驗證想法的時間。雖然文章的標題寫說 containerless，但跟 serverless 的想法也很雷同，總體而言，該工具或許值得一試。</p><h3 id="Version-Control-and-Artifact-Management"><a href="#Version-Control-and-Artifact-Management" class="headerlink" title="Version Control and Artifact Management"></a><a href="https://rickhw.github.io/2022/04/06/SoftwareEngineering/Artifact-Management-and-Version-Control/" target="_blank" rel="noopener">Version Control and Artifact Management</a></h3><p>作者討論了關於 CICD 源頭的分支策略，與 CI 與 CD 中間 Artifact Management 的關係。分支策略會影響到 pipeline 複雜度，作者提到很多眉角需要去思考怎麼設計最好，打包 artifact 也建議使用 semantic versioning。萬變不離其宗的是，設計這些 pipeline 還是要給團隊使用的，必須隨時接受成員們的 feedback。</p><h3 id="Mobile-DevOps-Code-Signing-iOS-Apps-Automatically"><a href="#Mobile-DevOps-Code-Signing-iOS-Apps-Automatically" class="headerlink" title="Mobile DevOps: Code Signing iOS Apps Automatically"></a><a href="https://hackernoon.com/mobile-devops-code-signing-ios-apps-automatically" target="_blank" rel="noopener">Mobile DevOps: Code Signing iOS Apps Automatically</a></h3><p>對於 Apple iOS 生態的 CICD pipeline 的設計每個團隊都不同，有些人會直接拿 Mac 直接跑，有些直接使用 SaaS 服務，而 Bitrise 是蠻不錯的平台，使用者體驗對開發人員都很好。本篇文章以大量的 gif 圖介紹 iOS code singing 的原理以及如何設定。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 127 期 - 你不是真的關心，只想要觀星</title>
      <link href="/2022/04/05/127-i-love-stargazing/"/>
      <url>/2022/04/05/127-i-love-stargazing/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Home-Assistant-智慧家居-—-安裝方法大比較"><a href="#Home-Assistant-智慧家居-—-安裝方法大比較" class="headerlink" title="Home Assistant 智慧家居 — 安裝方法大比較"></a><a href="https://medium.com/starbugs/3c559e1397e3" target="_blank" rel="noopener">Home Assistant 智慧家居 — 安裝方法大比較</a></h3><p>Home Assistant 是一套能夠整合家裡智慧設備的一套系統，簡單的說是實現智慧家居最親民的一種方案。但是相較於蘋果的智慧家居方案 Homekit 使用上較為複雜。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="React-v18-0"><a href="#React-v18-0" class="headerlink" title="React v18.0"></a><a href="https://reactjs.org/blog/2022/03/29/react-v18.html" target="_blank" rel="noopener">React v18.0</a></h3><p>React v18 在上禮拜出現後就在 React 生態圈中鬧得沸沸揚揚的，究竟在 React 升級到 18 後會出現了哪些酷東西？其中包含了 <a href="https://reactjs.org/blog/2022/03/29/react-v18.html#new-feature-automatic-batching" target="_blank" rel="noopener">Automatic Batching</a>、<a href="https://reactjs.org/blog/2022/03/29/react-v18.html#new-feature-automatic-batching" target="_blank" rel="noopener">Transitions</a> 還有新的 <a href="https://reactjs.org/blog/2022/03/29/react-v18.html#new-hooks" target="_blank" rel="noopener">Hooks</a> 等更多功能，一起看看官網如何介紹吧！</p><h3 id="Understanding-Layout-Algorithms"><a href="#Understanding-Layout-Algorithms" class="headerlink" title="Understanding Layout Algorithms"></a><a href="https://www.joshwcomeau.com/css/understanding-layout-algorithms/" target="_blank" rel="noopener">Understanding Layout Algorithms</a></h3><p>作者介紹了 CSS 的幾種排版的結構（像是 Flexbox、Positioned、Grid 等），每個算法都有自己的規則和機制，但如果我們只去了解特定的語法在做什麼事情是不夠的，因為有些屬性會因為一些微妙的父層佈局而改變行為。</p><h3 id="5-coding-interview-questions-I-hate"><a href="#5-coding-interview-questions-I-hate" class="headerlink" title="5 coding interview questions I hate"></a><a href="https://thoughtspile.github.io/2022/03/21/bad-tech-interview/" target="_blank" rel="noopener">5 coding interview questions I hate</a></h3><p>在面試中，總是會出現一堆在平時工作上幾乎不會遇見的問題。這作者在經歷了超過百次的面試後，列出了五個它認為根本沒有任何技術含量的技術問題。對求職者來說，你無法改變你會遇到的這些問題，但還是要準備承認這些你不了解的部分，並陳述在你了解的區塊是如何運作的。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CNCF-Argo-Project-2022-User-Survey-Results"><a href="#CNCF-Argo-Project-2022-User-Survey-Results" class="headerlink" title="CNCF Argo Project 2022 User Survey Results"></a><a href="https://blog.argoproj.io/cncf-argo-project-2022-user-survey-results-f9caf46df7fd" target="_blank" rel="noopener">CNCF Argo Project 2022 User Survey Results</a></h3><p>作者帶大家看 CNCF 2022 年使用者對 Argo 專案的社群回饋報告，樣本數為 147 份，其中 92 份來自 CD/Rollouts，55 份為 Workflows/Events：</p><p>Argo CD/Rollouts：</p><ul><li>所有的調查回覆中有 80% 已經把 Argo CD 用於生產環境超過 6 個月</li><li>NPS 分數（Net Promoter Score，調查的方法類似為 0-10 分你有多推薦 Argo CD）為 74，比去年還多 4 分</li></ul><p>Argo Workflows/Events</p><ul><li>所有的調查回覆中有 75% 已經把 Argo Workflows 用於生產環境，50% 表示在生產環境超過 6 個月</li><li>NPS 分數落在 48 分</li></ul><p>另外也有描寫什麼角色會使用這些工具、生產環境的詳細使用時間、使用數量、生態等等。</p><h3 id="Why-Let’s-Encrypt-is-a-really-really-really-bad-idea…"><a href="#Why-Let’s-Encrypt-is-a-really-really-really-bad-idea…" class="headerlink" title="Why Let’s Encrypt is a really, really, really bad idea…"></a><a href="https://medium.com/swlh/why-lets-encrypt-is-a-really-really-really-bad-idea-d69308887801" target="_blank" rel="noopener">Why Let’s Encrypt is a really, really, really bad idea…</a></h3><p>Let’s Encrypt 雖然方便，但其實當全世界的網站把雞蛋放在同一個籃子裡是有風險的，在資安的角度來看，CAs 的碎片化——也就是說憑證散落在各個供應商是件好事，而非 bug 一樣的存在。如果想要改善的話可以從三點著手：</p><ol><li>網站架設完就完全不用煩惱憑證的方案是不存在的，盡量避免「免費」或「方便」的方案</li><li>要注意憑證商負責保護網站的哪些部分，且使用憑證供應商的工具發出 CSR（certificate signing request）</li><li>可以考慮向憑證供應商保保險</li></ol><h3 id="3-Must-Haves-When-Implementing-DevSecOps"><a href="#3-Must-Haves-When-Implementing-DevSecOps" class="headerlink" title="3 Must-Haves When Implementing DevSecOps"></a><a href="https://devops.com/3-must-haves-when-implementing-devsecops/" target="_blank" rel="noopener">3 Must-Haves When Implementing DevSecOps</a></h3><p>DevSecOps 這個詞已經不陌生了，但實踐時要注意哪些呢？作者講解和秀出例子來佐證 DevSecOps 的重要性，並表示要順利的導入組織必須要有三大要點，教育、流程和工具都要到位才行。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="WhatsApp-System-Architecture"><a href="#WhatsApp-System-Architecture" class="headerlink" title="WhatsApp System Architecture"></a><a href="https://medium.com/interviewnoodle/whatsapp-system-architecture-8df0250d572f" target="_blank" rel="noopener">WhatsApp System Architecture</a></h3><p>WhatsApp 是在歐美相當普遍的即時通訊軟體，幾乎人人都會使用到，假如要設計這麼樣的一個即時通訊軟體服務要怎麼做呢？首先類似的聊天系統其實分成兩大類，一類是像 Facebook Messenger 會永遠儲存所有的聊天訊息，另外一類是像 WhatApp 一旦訊息被使用者接收後，就會從系統端被移除掉，知道這個最主要的不同點之後，作者開始做主要功能需求分析，例如：支援 1 對 1 聊天，支援離線傳送訊息，支援傳送訊息給離線使用者，支援群組聊天…等</p><p>並且根據這些需求將約略的系統元件架構圖給勾勒出來，緊接著開始最精彩的部分，針對每一個系統元件去做分析，從 Profile 資料庫與服務，負責 Mapping 的資料庫，Group 服務，訊息儲存的機器跟資料庫，多媒體訊息的處理機制，然後在不同的前端平台與後端各自需要哪一些語言或是作業系統，都條列出來，最後再繪製出更完整詳細的系統架構圖，整篇文章是一個很完整的系統逆向工程，感覺是要成為一個架構師的必備技能！</p><h3 id="How-to-Become-a-Blockchain-Developer"><a href="#How-to-Become-a-Blockchain-Developer" class="headerlink" title="How to Become a Blockchain Developer"></a><a href="https://python.plainenglish.io/how-to-become-a-blockchain-developer-1b5090e56420" target="_blank" rel="noopener">How to Become a Blockchain Developer</a></h3><p>最近讀到不少新聞指出矽谷很多大企業員工都紛紛跳槽到跟 Web 3.0 相關的產業，畢竟這可能是下一個網路世界變革的前哨戰，其中的區塊鏈產業或是部門也在各大企業挖角中，薪水也都開得不錯，不過假如想要成為一名區塊鏈工程師一起往 Web 3.0 的世界前進的話， 會需要具備什麼樣的能力呢？</p><p>其實區塊鏈工程師還可以分成兩類，一類是區塊鏈核心開發人員，負責研究，設計和開發架構面，安全面和底層協議，或是其他與區塊鏈相關的技術，基本上會是負責監督整個區塊鏈網路的角色；另外一類是區塊鏈軟體開發人員，他們負責開發去中心化應用程式 (DApps)，網路應用服務和智能合約，所以建議需要從幾個特定領域開始著手學習起，包含 Blockchain 架構，資料結構，密碼學，智能合約和網路應用程式，對於成為區塊鏈工程師有興趣的話，可以參閱詳細文章內容</p><h3 id="How-to-Use-SSH-Config-File-to-Boost-Your-Productivity"><a href="#How-to-Use-SSH-Config-File-to-Boost-Your-Productivity" class="headerlink" title="How to Use SSH Config File to Boost Your Productivity"></a><a href="https://betterprogramming.pub/use-ssh-config-file-to-boost-your-productivity-b3867ce8cbfe" target="_blank" rel="noopener">How to Use SSH Config File to Boost Your Productivity</a></h3><p>現今的工作環境避不掉需要連接很多的遠端機器，有可能是要部署，管理或是為程式碼除錯，而隨著連接機器數量的上升，越來越不可能將所有的 IP, Port 跟 Credential 存放位置給通通記住，這時候就需要依靠 SSH Config File 來解決這個問題。一般來說要透過 SSH 登入某一台機器時的指令會類似底下這樣：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -i ~/.ssh/smalltown.pem ubuntu@10.1.2.3.4</span><br></pre></td></tr></table></figure><p>不過透過妥善設置的 SSH Config File 可以讓你的登入指令更加簡單，使用者就不再需要去記得要使用什麼 IP, Port, Credential 等等，而只要輸入目標名稱就可以了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#  登入指令</span><br><span class="line">ssh smalltown</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># SSH Config File</span><br><span class="line">Host smalltown</span><br><span class="line">  HostName 10.1.2.3.4</span><br><span class="line">  User ubuntu</span><br><span class="line">  IdentityFile ~/.ssh/smalltown.pem</span><br></pre></td></tr></table></figure><p>而 SSH Config File 還可以透過類似正規表示式來設定，例如使用 * 來代表多個字元，？ 來代表單一字元，！代表不符合的字元，例如可以設定 Alpha 的機器要使用什麼樣的使用者名稱與 Credential，Production 的 Log Level 要是什麼…等，隨自己的需求組合出適合自己的 SSH Config File，讓自己事半功倍，更多詳細的資訊可以參閱內文</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 126 期 - 以為是 feature 的東西，在 20 年後才發現原來是 Bug</title>
      <link href="/2022/03/29/126-i-thought-it-was-a-feature-but-it-turned-out-to-be-a-bug/"/>
      <url>/2022/03/29/126-i-thought-it-was-a-feature-but-it-turned-out-to-be-a-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Vue-在選擇-CSS-Modules-做-UI-Component-Library-以及-Storybook-的初體驗"><a href="#Vue-在選擇-CSS-Modules-做-UI-Component-Library-以及-Storybook-的初體驗" class="headerlink" title="Vue | 在選擇 CSS Modules 做 UI Component Library 以及 Storybook 的初體驗"></a><a href="https://medium.com/starbugs/vue-%E5%9C%A8%E9%81%B8%E6%93%87-css-modules-%E5%81%9A-ui-component-library-%E4%BB%A5%E5%8F%8A-storybook-%E7%9A%84%E5%88%9D%E9%AB%94%E9%A9%97-9710b89e4327" target="_blank" rel="noopener">Vue | 在選擇 CSS Modules 做 UI Component Library 以及 Storybook 的初體驗</a></h3><p>Hi！大家好，我是神 Q 超人！前一陣子滿幸運可以參與到公司規劃的一些新專案，為了這些專案，我們需要把會重複使用的介面切成 component library，而在這個過程中剛好有遇到一些小問題，就想說把它們記錄下來，如果有其他人或是之後碰上類似的狀況，就能有一些思考如何解決的方向。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Remix-–-Web-Standards-Are-Cool-Again"><a href="#Remix-–-Web-Standards-Are-Cool-Again" class="headerlink" title="Remix – Web Standards Are Cool Again"></a><a href="https://www.simplethread.com/remix-web-standards-are-cool-again/" target="_blank" rel="noopener">Remix – Web Standards Are Cool Again</a></h3><p><a href="https://remix.run/" target="_blank" rel="noopener">Remix</a> 是 React Router 的團隊開發，並在去年正式開源的全端框架。文章中作者介紹了他對 Remix 中感興趣的地方，像是 SSR、Routes 和 錯誤處理等，看完我都想要來試試 Remix 了！</p><h3 id="Why-does-JavaScript’s-parseInt-0-0000005-print-“5”"><a href="#Why-does-JavaScript’s-parseInt-0-0000005-print-“5”" class="headerlink" title="Why does JavaScript’s parseInt(0.0000005) print “5”?"></a><a href="https://javascript.plainenglish.io/why-is-javascripts-parseint-0-0000005-5-eb9e2432f1b0" target="_blank" rel="noopener">Why does JavaScript’s parseInt(0.0000005) print “5”?</a></h3><p>JavaScript 有許多方法的回傳值都讓人匪夷所思，這篇文章就來解析 <code>parseInt</code> 這個方法，看看為什麼在 JavaScript 裡將 0.0000005 透過 <code>parseInt</code> 轉換成整數會得到 5。</p><h3 id="Tailwind-vs-Sass-SCSS-Structure-and-Consistency-over-Style-and-Comfort"><a href="#Tailwind-vs-Sass-SCSS-Structure-and-Consistency-over-Style-and-Comfort" class="headerlink" title="Tailwind vs Sass/SCSS: Structure and Consistency over Style and Comfort"></a><a href="https://dev.to/this-is-learning/tailwind-vs-sassscss-structure-and-consistency-over-style-and-comfort-44cd" target="_blank" rel="noopener">Tailwind vs Sass/SCSS: Structure and Consistency over Style and Comfort</a></h3><p>雖然 Tailwind 和 Sass/SCSS 寫起來的方式完全不同，但畢竟都是用來提高寫 CSS 的質量用，難免會被拿出來比較一下。那對於這兩種編寫 CSS 的方式，你又有什麼想法呢？</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><!-- summary --><h3 id="Multi-Tenant-Application"><a href="#Multi-Tenant-Application" class="headerlink" title="Multi-Tenant Application"></a><a href="https://levelup.gitconnected.com/multi-tenant-application-a29153d31c5a" target="_blank" rel="noopener">Multi-Tenant Application</a></h3><p>所謂的 multi-tenancy 概念就是眾多的使用者再看不到彼此資料的前提之下，一起分享運算資源，網路和儲存裝置，所以一個 multi-tenancy 應用程式必須為每一群使用者 (或稱為 tenant) 去訂製，但是整個架構和核心功能必須保持一致，所以 multi-tenancy 也是 SaaS 廠商常常採用的方式，讓資源利用最大化，不過 multi-tenancy 實際上是如何運作的呢？要怎麼設計一個具有 multi-tenancy  的解決方案架構？有興趣的人不要錯過這篇文章了</p><!-- summary --><h3 id="1-min-guide-to-Golang-development-best-practices-in-2022"><a href="#1-min-guide-to-Golang-development-best-practices-in-2022" class="headerlink" title="1 min guide to Golang development best practices in 2022"></a><a href="https://blog.canopas.com/1-min-guide-to-golang-development-best-practices-in-2022-b50d846fd6c" target="_blank" rel="noopener">1 min guide to Golang development best practices in 2022</a></h3><p>使用一分鐘快速了解 Golang 的 Best Practice 🏃🏻 這篇文章想帶讀者用最短的時間快速了解必要的函示庫和重要提示，讓 Golang 開發者天天擁有高效率與簡易的開發人生</p><ol><li>熟悉如何使用 Go Modules 來管理 Golang 套件相依性</li><li>使用 Gin 來構建 Web API</li><li>建立妥適的 Git Repoisotry 結構</li><li>利用 SQLX 來完成資料庫查詢作業</li><li>一定要在 API 加上認證機制</li><li>使用 Microservices 的概念來撰寫 API 功能</li><li>輸入良好的 Log 來追蹤錯誤或是臭蟲，例如 Zap, Logrus</li><li>使用 HttpTest 和 asset 來做測試</li><li>使用 Redigo 來處理跟 Redis 的連線</li><li>利用 CI/CD 來自動化開發流程</li><li>讓 pre-commit hooks 幫助省下 commit 前要花費的時間</li></ol><h3 id="macOS-Tools-and-Apps-for-Development-in-2022"><a href="#macOS-Tools-and-Apps-for-Development-in-2022" class="headerlink" title="macOS Tools and Apps for Development in 2022"></a><a href="https://medium.com/@etc088/macos-tools-and-apps-for-development-in-2022-963bd4d0f876" target="_blank" rel="noopener">macOS Tools and Apps for Development in 2022</a></h3><p>相信有不少人使用 macOS 來當作日常的開發環境，正所謂工欲善其事必先利其器，這篇文章的作者表示雖然網路上有不少介紹 macOS 相關的開發工具文章，不過好像介紹的東西對他來說都不那麼有用，有些甚至還讓他浪費更多寶貴的時間，所以他決定自己寫一篇來介紹真的對改善他自己工作效率有效的 macOS 開發工具大補帖💪 底下列出分類和名稱，有興趣的人可以直接參閱內文通通裝起來 🤩 (Fig 我自己也超推的，最近新竄起的新創所開發)</p><p>🛠️ Terminal 工具類</p><ul><li>Homebrew</li><li>iTerm2</li><li>ZSH</li><li>Oh My ZSH!</li><li>Fig</li><li>Volta</li><li>Ngrok</li></ul><p>🛠️ 桌面軟體</p><ul><li>VS Code + plugins</li><li>GitKraken</li><li>ResponsivelyApp</li><li>RunJS</li><li>Altair GraphQL Client</li></ul><p>🛠️ 其他工具</p><ul><li>Moom</li><li>CleanShot X</li><li>Sli.dev</li><li>Notion</li></ul><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="Prometheus-Investigation-on-high-memory-consumption"><a href="#Prometheus-Investigation-on-high-memory-consumption" class="headerlink" title="Prometheus - Investigation on high memory consumption"></a><a href="https://source.coveo.com/2021/03/03/prometheus-memory/" target="_blank" rel="noopener">Prometheus - Investigation on high memory consumption</a></h3><p>作者先幫讀者複習一次 Prometheus 的名詞解釋和運作原理，之後循序漸進分析出記憶體幾乎是用在哪裡，最後得出的結論是 Prometheus label 比 metric 本身還要消耗記憶體，拿掉作者認為不重要的 <code>id</code> label 後，生產環境的記憶體使用量減少了 75%。</p><!-- summary --><h3 id="Prometheus-rate-function"><a href="#Prometheus-rate-function" class="headerlink" title="Prometheus rate function"></a><a href="https://www.metricfire.com/blog/understanding-the-prometheus-rate-function/" target="_blank" rel="noopener">Prometheus rate function</a></h3><p>Prometheus alert rule 在網路上常常看到 <code>rate()</code> function 的範例，但個人覺得官方文件解釋稍微抽象了一點。於是找到這篇作者除了解釋 <code>rate()</code> 原理外，也說明跟 <code>irate()</code> 的差異，並且分享了實際的使用心得建議，甚至提供了 alert rule 和 SLO 計算的範例，另外作者也提醒 <code>rate()</code> function 計算期間沒有 scrape 到資料的話會失真。</p><h3 id="Getting-started-with-Grafana-dashboard-design"><a href="#Getting-started-with-Grafana-dashboard-design" class="headerlink" title="Getting started with Grafana dashboard design"></a><a href="https://grafana.com/go/webinar/guide-to-dashboard-design/" target="_blank" rel="noopener">Getting started with Grafana dashboard design</a></h3><p>這篇以影片為主，主要是 Grafana dashboard 展示的確以影片的傳達媒介較佳。這次 webinar 說明在設計 dashboard 時要注意的人類瀏覽的行爲、顏色的使用、觀看者是誰以及 panel 呈現的優先度等等。後半段也有大量 dashboard 火力展示和 Q&amp;A，Q&amp;A 內容可以看到一些精彩的示範，例如從 50:12 主持人回答如何在同一個時間點對比 metric 和 log。</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 125 期 - 有沒有 Bug 是像初戀一樣酸酸甜甜的</title>
      <link href="/2022/03/22/125-is-there-a-bug-like-first-fall-in-love/"/>
      <url>/2022/03/22/125-is-there-a-bug-like-first-fall-in-love/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="淺談-Monorepo-帶來的效益：以-Turborepo-為例"><a href="#淺談-Monorepo-帶來的效益：以-Turborepo-為例" class="headerlink" title="淺談 Monorepo 帶來的效益：以 Turborepo 為例"></a><a href="https://medium.com/starbugs/%E6%B7%BA%E8%AB%87-monorepo-%E5%B8%B6%E4%BE%86%E7%9A%84%E6%95%88%E7%9B%8A-%E4%BB%A5-turborepo-%E7%82%BA%E4%BE%8B-615fb4af5ebd" target="_blank" rel="noopener">淺談 Monorepo 帶來的效益：以 Turborepo 為例</a></h3><p>Hi 大家好我是 Andy，隨著資訊發展越來越進步，除了程式語言的框架越來越多以外，連專案的架構也越來越複雜了，從早期的 Multi-repo 到現代的 Monorepo，究竟 Monorepo 可以帶來哪些效益？本周專欄文章要利用 Turborepo 做為範例介紹給讀者。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="使用-JavaScript-的數字時的常見錯誤"><a href="#使用-JavaScript-的數字時的常見錯誤" class="headerlink" title="使用 JavaScript 的數字時的常見錯誤"></a><a href="https://blog.huli.tw/2022/03/14/javascript-number/?fbclid=IwAR08Nf-haBUeJx3xDdFvUfYSySRxCck63msLvnZbMfvMlW1-6GiOeCCX-EA" target="_blank" rel="noopener">使用 JavaScript 的數字時的常見錯誤</a></h3><p>這篇是胡立大大寫的文章，裡面提到了 JavaScript 在處理數字的資料型態時有些結果可能跟你想像的不太一樣，想要了解 JavaScript number type 的冷知識的讀者不妨可以看看這篇文章。</p><h3 id="為什麼前端工程越來越愛使用-Monorepo-架構"><a href="#為什麼前端工程越來越愛使用-Monorepo-架構" class="headerlink" title="為什麼前端工程越來越愛使用 Monorepo 架構"></a><a href="https://medium.com/hannah-lin/%E7%82%BA%E4%BB%80%E9%BA%BC%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E8%B6%8A%E4%BE%86%E8%B6%8A%E6%84%9B%E4%BD%BF%E7%94%A8-monorepo-%E6%9E%B6%E6%A7%8B-661afa90910a" target="_blank" rel="noopener">為什麼前端工程越來越愛使用 Monorepo 架構</a></h3><p>Monorepo 真的是越來越多開發者在使用了，連本週的週刊都在講這個架構XD<br>想要了解一些 Monorepo 相關先輩知識的讀者不妨可以看看這篇文章。</p><h3 id="We-abandoned-npm-install-maybe-you-should-too"><a href="#We-abandoned-npm-install-maybe-you-should-too" class="headerlink" title="We abandoned npm install, maybe you should too"></a><a href="https://medium.com/strise/we-abandoned-npm-install-maybe-you-should-too-2340b1ac6116" target="_blank" rel="noopener">We abandoned npm install, maybe you should too</a></h3><p>隨著前端架構越來越複雜，對於 package manager 要做的事情也越來越多了，為了因應現在的 Monorepo 架構就有一個專門為了 Monorepo 架構而生的 package manager 名字為 rush，究竟 rush 可以做到哪些事情呢？有興趣的讀者不妨可以看看這篇文章。</p><h3 id="Getting-Started-With-Three-js"><a href="#Getting-Started-With-Three-js" class="headerlink" title="Getting Started With Three.js"></a><a href="https://medium.com/geekculture/getting-started-with-three-js-1c2d02e18330" target="_blank" rel="noopener">Getting Started With Three.js</a></h3><p>如果有想要學習 Three.js 然後做出各各種漂亮的 3D 場景，那從這篇文章入門會是不錯的選擇，文章裡面介紹了 Three.js 內的幾個重要的元素，包含 scene、3D geometry、Materials、Mesh、Loaders、Camera、Lighting 等等，每段介紹的時候都有再貼上用來實現的範例程式碼，有興趣的話也可以花時間看看唷！</p><h3 id="CSS-Interview-Questions"><a href="#CSS-Interview-Questions" class="headerlink" title="CSS Interview Questions"></a><a href="https://kumarsonsoff.hashnode.dev/css-interview-questions#comments-list" target="_blank" rel="noopener">CSS Interview Questions</a></h3><p>作者整理了常見的 CSS 面試問題，像是 CSS 的 Box Model 是什麼等等。雖然看上去都很基本，但是金魚腦如我，過一段時間不複習，就很容易就忘記，大家也可以看看自己曾經學過的知識是否還記得喲！</p><h3 id="Is-Vite-Better-than-Webpack"><a href="#Is-Vite-Better-than-Webpack" class="headerlink" title="Is Vite Better than Webpack?"></a><a href="https://blog.bitsrc.io/vite-is-better-than-webpack-d5dd59610d56" target="_blank" rel="noopener">Is Vite Better than Webpack?</a></h3><p>Vite 從出現以來就一直以快速為它的特點，那相較於 Webpack 從一個 entry point 開始打包成 Bundle.js 的流程，Vite 究竟是如何改善我們的開發體驗呢？</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="A-better-alternative-for-Docker-Desktop"><a href="#A-better-alternative-for-Docker-Desktop" class="headerlink" title="A better alternative for Docker Desktop?"></a><a href="https://medium.com/@oribenhur/a-better-alternative-for-docker-desktop-3e8fa38d618" target="_blank" rel="noopener">A better alternative for Docker Desktop?</a></h3><p>我想不少公司應該有認真考慮過 Docker Desktop license 付費的問題，這篇分享作者在使用多個方案後決定使用 Rancher Desktop，選擇的理由不外乎社群活耀度、支援 docker 和 contained、支援 docker-cli 和 nerdctl、支援 Apple M1 以及支援 build-in local volume mounts，會特別強調 local volume mounts 是因為 Podman 不太支援這點。</p><p>作者介紹了兩種安裝 Rancher Desktop 的方法，一個是從 shell script 安裝，另外一種比較簡單許多，直接下載 .dmg 檔案。</p><h3 id="Replace-Docker-Desktop-with-lima"><a href="#Replace-Docker-Desktop-with-lima" class="headerlink" title="Replace Docker Desktop with lima"></a><a href="https://medium.com/itnext/replace-docker-desktop-with-lima-88ec6f9d6a19" target="_blank" rel="noopener">Replace Docker Desktop with lima</a></h3><p>這篇介紹另外一個取代 Docker Desktop 的選擇 Lima，作者也表示他嘗試了一下 Podman 發現 local volume mount 的問題（而且這個 issue 從 2020 就已經有了）。Lima 安裝的 script 看似很複雜但其實只是一些簡單的設定，例如：為了連線而改 hostname、設定 rootless container 以及必要的 healthcheck 等等。</p><p>附帶一提的是，不論是 Rancher Desktop 或 Lima 都有支援 docker-compose。</p><h3 id="5-unusual-Docker-container-use-cases"><a href="#5-unusual-Docker-container-use-cases" class="headerlink" title="5 unusual Docker container use cases"></a><a href="https://medium.com/itnext/5-unusual-docker-container-use-cases-547804d64c35" target="_blank" rel="noopener">5 unusual Docker container use cases</a></h3><p>介紹 5 種平常不會用到的 container 用法，不過老實說這 5 種我就蠻常用其中 3 種，讓我們來看看哪些你也中了吧：</p><ul><li>跑真正有 UI 的 container<ul><li>裡面舉例了相片管理軟體 <a href="https://www.digikam.org/" target="_blank" rel="noopener">digikam</a>、瀏覽器或 Libre Office 等等都可以跑 container。</li></ul></li><li>跑 Linux 桌面版的 container<ul><li>跟上一個用法有點雷同，Linux 桌面是從網頁去看的，也剛好有 Youtuber 拍實際跑起來的<a href="https://youtu.be/Gd9bvdkIXOQ" target="_blank" rel="noopener">影片</a>。</li></ul></li><li>把 container 當作指令<ul><li>個人蠻常用的，畢竟有的時候不會想要安裝太多在自己的電腦裡。不過作者在這裡描述的是想要更高客製化的執行環境，他的<a href="https://itnext.io/portable-kubernetes-management-with-kubectl-in-docker-cb861a2c3c02" target="_blank" rel="noopener">另外一篇文章</a>裡就有寫為了執行 kubectl 所安裝的一系列環境。</li></ul></li><li>把 container 當作開發環境<ul><li>也算是很常用的場景，畢竟 Apple M1 還是處處受限制，也剛好有 Gitpod 這個 SaaS 選擇。</li></ul></li><li>把 container 當作 Kubernetes 環境<ul><li>有在使用 Kubernetes 的人一定不陌生這個使用方法，雖然不比真實的 Kubernetes，但是可以快速驗證一些基本的想法或除錯。</li></ul></li></ul><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="System-Design-Basics-Proxy-vs-Reverse-Proxy"><a href="#System-Design-Basics-Proxy-vs-Reverse-Proxy" class="headerlink" title="System Design Basics: Proxy vs. Reverse Proxy"></a><a href="https://medium.com/interviewnoodle/system-design-basics-proxy-vs-reverse-proxy-90d48da385be" target="_blank" rel="noopener">System Design Basics: Proxy vs. Reverse Proxy</a></h3><p>在一個分散式的系統中，我們時常會聽到 Proxy 跟 Reverse Proxy，這兩個詞總是令人感到混肴，這兩者其中最大的不同之處在哪裡？而在什麼樣的情況之下會需要使用到它們？使用之後可以獲得什麼好處？這篇文章使用動畫圖來說明當 Proxy 代替 Client 送出請求到 Server 端，如何去達成 Caching, Anonymity, Traffic Control, Logging 等功能；同樣透過動畫去解釋 Reverse Proxy 將最終接受請求的 Server 對 Client 隱藏起來的同時，又是怎麼樣去 Caching, Anoymity, Load Balancing, Experimentation, Router/Ingress，對於這兩個詞彙也常常感到混肴的人，可以參考一下這篇文章</p><h3 id="PostgreSQL-Lessons-Learned-While-Optimising-Query-Performance"><a href="#PostgreSQL-Lessons-Learned-While-Optimising-Query-Performance" class="headerlink" title="PostgreSQL: Lessons Learned While Optimising Query Performance"></a><a href="https://betterprogramming.pub/postgresql-lessons-learned-while-optimising-query-performance-56e1652ecd86" target="_blank" rel="noopener">PostgreSQL: Lessons Learned While Optimising Query Performance</a></h3><p>作者在去年學到很多關於如何去優化 PostgreSQL 效能的知識，所以想要透過這篇文章跟大家分享如何充分利用 Database 的關鍵點，他覺得有兩點特別重要，並且使用圖示詳細說明為什麼以及如何改善，對於 Tuning Database 底層有興趣的人可以參考看看</p><ol><li>最常造成 Database 效能問題的原因通常在於 Index 並沒有被包含在搜尋中，或是建出來的 Index 並沒有被使用到</li><li>不知道目前 Database 到底是好是壞，例如怎麼找到目前最慢的三個查詢語法？</li></ol><h3 id="How-Do-I-Resolve-Merge-Conflicts"><a href="#How-Do-I-Resolve-Merge-Conflicts" class="headerlink" title="How Do I Resolve Merge Conflicts?"></a><a href="https://dev.to/github/how-do-i-resolve-merge-conflicts-5438" target="_blank" rel="noopener">How Do I Resolve Merge Conflicts?</a></h3><p>作者剛從 coding boot camp 畢業時其實還不會處理 Git Merge Conflict，他的當時的解決方式是直接重開一個新的 Git Repository，不過他在 2019 年作為一個軟體工程師跟著團隊一起工作之後，他不可能再透過開啟新的 Git Repository 來解決問題，所以他在那一年常常解 Merge Conflict 解到泛淚，不過在經歷那段時間之後，他現在已經很有信心自己去解決 Merge Conflict，雖然還是會有點感到壓力XD 所以他想要提供一些小技巧給大家，首先可以從了解為什麼 Merge Conflict 發生開始，接著提到如何去解決 Merge Conflict，內容講得滿詳細的，推薦給對於解決 Merge Conflict 也感到苦惱的人</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 124 期 - 夏天來啦！</title>
      <link href="/2022/03/15/124-http-cache-control/"/>
      <url>/2022/03/15/124-http-cache-control/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="怎麼網頁改完還是錯的？-一次搞懂-HTTP-Cache-機制"><a href="#怎麼網頁改完還是錯的？-一次搞懂-HTTP-Cache-機制" class="headerlink" title="怎麼網頁改完還是錯的？- 一次搞懂 HTTP Cache 機制"></a><a href="https://medium.com/starbugs/%E6%80%8E%E9%BA%BC%E7%B6%B2%E9%A0%81%E6%94%B9%E5%AE%8C%E9%82%84%E6%98%AF%E9%8C%AF%E7%9A%84-%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82-http-cache-%E6%A9%9F%E5%88%B6-a39a421df6c9" target="_blank" rel="noopener">怎麼網頁改完還是錯的？- 一次搞懂 HTTP Cache 機制</a></h3><p>一個網站的維護者透過暫存功能最希望達成的兩個目標就是當使用者第二次來拜訪網站時</p><p>👍 確保使用者可以獲得最新版本的檔案，假如有任何的檔案被修改時，他們要可以馬上獲得修改完的檔案<br>👍 在達成上面目標的同時，盡可能從網路下載越少的東西越好</p><p>如此一來可以節省頻寬與時間，提升使用者體驗，因此本週專欄想要來探討一下在 Client 端如何透過 HTTP Cache Header 去達成上面的目標？而且要怎麼設定會比較好？</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Everything-You-Need-to-Know-About-the-React-18-RC"><a href="#Everything-You-Need-to-Know-About-the-React-18-RC" class="headerlink" title="Everything You Need to Know About the React 18 RC"></a><a href="https://dev.to/kathryngrayson/everything-you-need-to-know-about-the-react-18-rc-3kc6" target="_blank" rel="noopener">Everything You Need to Know About the React 18 RC</a></h3><p>React 18 在最近幾天正式進入 release candidate 的階段了！對於前端工程師來說應該是一項非常振奮人心的消息，究竟 React 18 為各位開發者帶來哪些好用的 feature，有興趣的讀者不妨可以看看這篇文章。</p><h3 id="12-Gorgeous-UI-Components-for-Your-Design-Inspiration"><a href="#12-Gorgeous-UI-Components-for-Your-Design-Inspiration" class="headerlink" title="12 Gorgeous UI Components for Your Design Inspiration"></a><a href="https://dev.to/madza/12-gorgeous-ui-components-for-your-design-inspiration-3feh" target="_blank" rel="noopener">12 Gorgeous UI Components for Your Design Inspiration</a></h3><p>對於前端工程師來說要自己純手刻出一些非常炫砲的畫面應該是相當的費時又費力，作者精挑細選了 12 個可以讓你的網頁看起來相當炫砲的 UI component，有興趣想使用的讀者不妨可以參考看看。</p><h3 id="What’s-new-in-ES2022"><a href="#What’s-new-in-ES2022" class="headerlink" title="What’s new in ES2022?"></a><a href="https://dev.to/jasmin/whats-new-in-es2022-1de6" target="_blank" rel="noopener">What’s new in ES2022?</a></h3><p>ES2022 即將於 2022 年的 6 月正式推出，究竟 ES2022 提供了哪些全新的功能在 JavaScript 裡頭呢？有興趣的讀者可以點進來這篇文章看看。</p><h3 id="What-Web-Frameworks-Solve-And-How-To-Do-Without-Them-Part-1"><a href="#What-Web-Frameworks-Solve-And-How-To-Do-Without-Them-Part-1" class="headerlink" title="What Web Frameworks Solve And How To Do Without Them (Part 1)"></a><a href="https://www.smashingmagazine.com/2022/01/web-frameworks-guide-part1/" target="_blank" rel="noopener">What Web Frameworks Solve And How To Do Without Them (Part 1)</a></h3><p>作者在文章裡探討幾個現代 Web Frameworks 的差異，以及這些 Frameworks 實現相同技術所花費的成本，這可以讓我們思考 Frameworks 提供的功能是否存在另一種替代方案，或是當我們選擇使用某個方案時，也能從中學習。</p><h3 id="A-Future-Made-of-JavaScript"><a href="#A-Future-Made-of-JavaScript" class="headerlink" title="A Future Made of JavaScript"></a><a href="https://blog.bitsrc.io/a-future-made-of-javascript-5ab417f34355" target="_blank" rel="noopener">A Future Made of JavaScript</a></h3><p>JavaScript 除了原本跑在瀏覽器上的功能外，還多了各種不同的功能及用途。作者認為 JavaScript 能夠擺脫瀏覽器限制的最大原因是 Node.js 的出現，而在現今或未來的開發人員的生活中，又有哪些技術是與 JavaScript 有所關聯呢？</p><h3 id="The-Future-of-Micro-Frontends"><a href="#The-Future-of-Micro-Frontends" class="headerlink" title="The Future of Micro-Frontends"></a><a href="https://betterprogramming.pub/the-future-of-micro-frontends-2f527f97d506" target="_blank" rel="noopener">The Future of Micro-Frontends</a></h3><p>在 2021 年底開始，作者花了幾週的時間研究 micro-frontends（微前端），並分析 micro-frontends 對團隊造成的影響，以及思考如何能夠使 micro-frontends 架構變得更好。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="awesome-compose"><a href="#awesome-compose" class="headerlink" title="awesome-compose"></a><a href="https://github.com/docker/awesome-compose" target="_blank" rel="noopener">awesome-compose</a></h3><p>有時想要快速架一個環境做測試的時候 awesome-compose 就非常的好用，裡面有不同的語言甚至前後端資料庫整個架構都有了，有些範例可以讓使用這快速學習到這個服務怎麼使用，畢竟有時候直接看文件還是有點抽象，但直接看 docker-compose 就一目了然。裡面最特別的就屬創世神（Minecraft）伺服器 docker-compose 了。</p><h3 id="awesome-selfhosted"><a href="#awesome-selfhosted" class="headerlink" title="awesome-selfhosted"></a><a href="https://github.com/awesome-selfhosted/awesome-selfhosted" target="_blank" rel="noopener">awesome-selfhosted</a></h3><p>自己架設服務讓組織有更多的彈性，而且資安規範必須要把服務架設在內網是很常見的事，在選擇服務的時候就可以來 awesome-selfhosted 找找有沒有特別的。除了介紹單一服務外，還有 self-hosting solutions 讓使用者一次建立多個 self-hosted 服務環境，讓你省去個別選擇的煩惱。這個專案看得出來很用心，甚至附上 demo 和 source code 的連結，也有一些分類直接導向別的 awesome 專案連結，甚至還有 License 以及程式語言的 tag。</p><h3 id="awesome-baremetal"><a href="#awesome-baremetal" class="headerlink" title="awesome-baremetal"></a><a href="https://github.com/alexellis/awesome-baremetal" target="_blank" rel="noopener">awesome-baremetal</a></h3><p>awesome-baremetal 是搜集了跟實體機器有關的專案，除了工具之外還有介紹不錯的 bare metal 雲服務商。本專案特別的地方在於精挑細選的規則，就必須一直有在開發、要真的有公司使用這些工具、能夠真的被廣泛使用而不是客製化的專案以及不得有廣告的嫌疑，像是這樣的篩選讓人們可以安裝從 awesome-baremetal 專案中做選擇。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Rapid-Event-Notification-System-at-Netflix"><a href="#Rapid-Event-Notification-System-at-Netflix" class="headerlink" title="Rapid Event Notification System at Netflix"></a><a href="https://netflixtechblog.com/rapid-event-notification-system-at-netflix-6deb1d2b57d1" target="_blank" rel="noopener">Rapid Event Notification System at Netflix</a></h3><p>Netflix 擁有超過 2.2 億活躍用戶，他們必須確保用戶在不同的裝置間進行的任何動作 (修改 Profile, 觀看電影標題…等) 保持體驗的一致性，考量到支援的眾多裝置種類和使用者可以執行的動作之多，其實這不是一件容易達成的事情，因此 Netflix 開發了一個快速事件通知系統，用來支援任何需要 Server 與裝置間溝通的使用情境，而在這篇文章中將會介紹這套系統的大致樣貌，而且分享 Netflix 在構築它時所學到的事情</p><h3 id="Code-Verify-An-open-source-browser-extension-for-verifying-code-authenticity-on-the-web"><a href="#Code-Verify-An-open-source-browser-extension-for-verifying-code-authenticity-on-the-web" class="headerlink" title="Code Verify: An open source browser extension for verifying code authenticity on the web"></a><a href="https://engineering.fb.com/2022/03/10/security/code-verify/" target="_blank" rel="noopener">Code Verify: An open source browser extension for verifying code authenticity on the web</a></h3><p>自從去年 WhatsApp 推出多裝置功能之後，Meta 這邊看到越來越多人直接使用瀏覽器拜訪 WhatsApp Web，考慮到此一使用者行為轉變， Meta 這邊開始想要增加 WhatsApp Web 的安全性，所以最近推出了一個開源的瀏覽器 Extension - Code Verify，他可以自動驗證使用者拜訪的 WhatsApp Web 程式碼沒有被其他人竄改，文章內進一步 Code Verify 的運作機制與使用方式</p><h3 id="Modern-application-load-balancing-with-a-centralized-control-plane"><a href="#Modern-application-load-balancing-with-a-centralized-control-plane" class="headerlink" title="Modern application load balancing with a centralized control plane"></a><a href="https://www.cncf.io/blog/2022/03/10/modern-application-load-balancing-with-a-centralized-control-plane-2/" target="_blank" rel="noopener">Modern application load balancing with a centralized control plane</a></h3><p>一個服務或是系統，一般來說可以分成 Control Plane 和 Data Plane，將兩者分開可以實現 Software-Defined Everything 和 Infrastructure as Code，這樣的做法可以將應用程式跟其運行的基礎設施解耦合，好處有增加執行效率，增加部署彈性，執行成本最佳化；而傳統的 Load Balancer 和 Web Application Firewalls 通常都沒有將 Control Plane 和 Data Plane 拆開來，當你處在數千個應用服務的環境中時，這樣的模式將會成為 Wordload 的瓶頸，所以文章中提到對於這類型的系統或是服務要如何將 Control Plane 集中化，並將 Data Plane 拆分開來，以及其帶來的好處</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 123 期 - 跟著酷龍一起 Bing Bing Bing</title>
      <link href="/2022/03/08/123-bing-bing-bing/"/>
      <url>/2022/03/08/123-bing-bing-bing/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Python-中的-Lambda"><a href="#Python-中的-Lambda" class="headerlink" title="Python 中的 Lambda"></a><a href="https://medium.com/starbugs/b09f0e00ffa5" target="_blank" rel="noopener">Python 中的 Lambda</a></h3><p>在 Java 8 中加入了 Lambda 的特性，然而為什麼 Java 要加入 Lambda 呢？有些語言內建 Lambda，例如：Python、Ruby。究竟 Lambda 是什麼東西，我們由探討 Python 的 Lambda 來初探 Lambda 的存在意義。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="不用寫程式也能產生-API-—-strapi"><a href="#不用寫程式也能產生-API-—-strapi" class="headerlink" title="不用寫程式也能產生 API — strapi"></a><a href="https://medium.com/%E9%BB%91%E6%B4%9E%E5%89%B5%E9%80%A0-blackhole-creative/%E4%B8%8D%E7%94%A8%E5%AF%AB%E7%A8%8B%E5%BC%8F%E5%B0%B1%E8%83%BD%E7%94%A2%E7%94%9F-api-strapi-%E5%B7%A5%E5%85%B7%E4%BB%8B%E7%B4%B9-f40d01570322" target="_blank" rel="noopener">不用寫程式也能產生 API — strapi</a></h3><p>最近在研究從 0 開始開發一套 CMS 系統，發現原來 CMS 的世界比我想的還要大多了，有一般傳統的例如 wordpress、joomla 等會有各式各樣的樣板可以提供使用者選擇，以及 Headless CMS 一種只負責輸出 api 以及 config 讓前端 UI 自己 render，這篇文章就在介紹 <a href="https://strapi.io/" target="_blank" rel="noopener">strapi</a> 這套 Headless CMS open source，對 CMS 有興趣的讀者不妨可以看看。</p><h3 id="A-Thorough-Analysis-of-CSS-in-JS"><a href="#A-Thorough-Analysis-of-CSS-in-JS" class="headerlink" title="A Thorough Analysis of CSS-in-JS"></a><a href="https://css-tricks.com/a-thorough-analysis-of-css-in-js/" target="_blank" rel="noopener">A Thorough Analysis of CSS-in-JS</a></h3><p>隨著 JS 框架能做的事情越來越多，如今 css in js 的概念也越來越興盛，像 React 常用的 <a href="https://styled-components.com/" target="_blank" rel="noopener">styled-components</a> 就是這樣的套件，這篇文章分析了一些常用的 css in js library 有興趣的讀者可以看看。 </p><h3 id="科普｜什麼是-Web3-0？用淺顯易懂的方式談談-Web3"><a href="#科普｜什麼是-Web3-0？用淺顯易懂的方式談談-Web3" class="headerlink" title="科普｜什麼是 Web3.0？用淺顯易懂的方式談談 Web3"></a><a href="https://www.blocktempo.com/what-is-web-3-let-us-explain-using-simple-terms/" target="_blank" rel="noopener">科普｜什麼是 Web3.0？用淺顯易懂的方式談談 Web3</a></h3><p>隨著區塊鍊的技術越來越成熟，Web 3.0 也開始慢慢被推動，基本上現在的前端工程師只要了解 web2 就好，但隨著時代的進步後續一定會慢慢開始用 web3 的技術，所以想要了解 web3 的一些概念的讀者不妨可以看看這篇文章。</p><h3 id="New-CSS-Features-In-2022"><a href="#New-CSS-Features-In-2022" class="headerlink" title="New CSS Features In 2022"></a><a href="https://www.smashingmagazine.com/2022/03/new-css-features-2022/" target="_blank" rel="noopener">New CSS Features In 2022</a></h3><p>作者列出她認為在 2022 年值得關注的 CSS 語法以及使用情境，其中包含了 Container Queries、<code>@when/@else</code> 和 Color Functions 等等，或許有些還沒有辦法被所有瀏覽器支持，但也有部分是已經可以使用的！</p><h3 id="A-new-year-a-new-MDN"><a href="#A-new-year-a-new-MDN" class="headerlink" title="A new year, a new MDN"></a><a href="https://hacks.mozilla.org/2022/03/a-new-year-a-new-mdn/" target="_blank" rel="noopener">A new year, a new MDN</a></h3><p>不曉得大家有沒有發現，會用來查詢前端相關語法的 MDN 默默地就改版了！因為 MDN 獲得的貢獻數已經超過了 45,000 人，導致在閱讀體驗時會有點不一致，因此官方團隊在 2021 年開始考慮 MDN 改版，讓使用者的體驗更好！但根據官方團隊的說明，這還不是結束，如果對該社群有興趣的話，不妨一起來看看 MDN 的下一步吧！</p><h3 id="5-things-you-don’t-need-Javascript-for"><a href="#5-things-you-don’t-need-Javascript-for" class="headerlink" title="5 things you don’t need Javascript for"></a><a href="https://lexoral.com/blog/you-dont-need-js/" target="_blank" rel="noopener">5 things you don’t need Javascript for</a></h3><p>JavaScript 日益強大，能做到的事情也越來越多，但是這可能會導致我們「過度使用它」。作者列出了 5 項常見的功能，是可以在不需要使用到 JavaScript，好好的利用 HTML 及 CSS 也能夠實現的。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Workshops-as-code"><a href="#Workshops-as-code" class="headerlink" title="Workshops as code"></a><a href="https://www.gitpod.io/blog/workshops-as-code" target="_blank" rel="noopener">Workshops as code</a></h3><p>自己也蠻喜歡參加或者舉辦 workshop 所以對這篇很有感觸，以前 workshop 在真正體驗核心技術之前就得花很多時間做前置環境設定，作者就提及之前 2019 年舉辦 NixOS workshop 攏長的前置過程，創虛擬機看似簡單但每個人的環境都不一樣，出問題很難 debug。而 Gitpod 正好解決上述的問題，我們可以把 workshop 環境標準化寫成 code，藉由 container 的重複使用和重複再製的特性，以及 Gitpod 基本上是跑在雲端上的，就讓所有參加者的環境確保一模一樣。</p><p>現在你可以直接在網頁按個按鈕就有 NixOS 的環境了，作者也有提供 <a href="https://gitpod.io/#https://github.com/gitpod-io/template-nixos" target="_blank" rel="noopener">gitpod-io/template-nixo</a> 給大家嘗試。</p><h3 id="The-Best-DevOps-Blogs"><a href="#The-Best-DevOps-Blogs" class="headerlink" title="The Best DevOps Blogs"></a><a href="https://dev.to/karllhughes/the-best-devops-blogs-1bn5" target="_blank" rel="noopener">The Best DevOps Blogs</a></h3><p>雖然這篇文章有點舊了，但其中分享 blogs 的評分非常實用，作者依照 5 個角度去評分這個 blog，分析的依據有：</p><ol><li>文章品質</li><li>一致性</li><li>文章有效壽命</li><li>技術深度</li><li>用途廣泛程度</li></ol><p>有些偏向新聞或者文件、有些像是論壇、有些不免俗的會寫自家產品的 DevOps 解決方案或者累積的經驗談，作者也是給經驗談最高的分數。除了文字之外，裡面也有 podcast 的形式，適合通勤的時候聽。</p><h3 id="How-many-AWS-Accounts-do-I-need"><a href="#How-many-AWS-Accounts-do-I-need" class="headerlink" title="How many AWS Accounts do I need?"></a><a href="https://medium.com/geekculture/how-many-aws-accounts-do-i-need-d54261a0ab04" target="_blank" rel="noopener">How many AWS Accounts do I need?</a></h3><p>我想當 AWS 使用久了就會有這個煩惱，作者就以這些面向去探討，幫讀者分析自己要怎麼設計多個 AWS 帳號的用途。</p><ul><li>未來商業發展與團隊<ul><li>例如以 Infrastructure、Network、Security、Application 和 Data Warehouse 等等不同的團隊做 AWS 帳號的區分。</li></ul></li><li>Domain Driven Design（領域驅動設計，俗稱 DDD）<ul><li>依照不同的商業領域做區分，要注意的判斷哪些 services 應該在同個 AWS 帳號，哪些可以分開。</li></ul></li><li>環境<ul><li>同一個 service 依照不同的環境分 AWS 帳號，如果本身環境很多的確可以考慮把多個環境合併在一個 AWS 帳號裡。</li></ul></li><li>災難恢復<ul><li>為了減少 service 恢復的時間，可以把全部或者部分的 service 複製到另外一個 AWS 帳號。</li></ul></li><li>多個 region<ul><li>這邊比較特別的是作者是以非技術的角度作切入的，每個地理位置的資料隱私政策都不一樣，為了提供更好的使用體驗而做不同 region 和不同 AWS 帳號的決策。</li></ul></li><li>沙盒/測試<ul><li>跟環境分帳號不一樣的是這需求純粹做類似 infrastructure PoC，或者測試串接多個 AWS 帳號 VPC 網路，或者同個 service 以不同的沙盒環境做測試而區分 AWS 帳號。</li></ul></li><li>正確使用 CI/CD Pipeline 的 AWS 帳號<ul><li>這也是很有挑戰性的設計，CICD pipeline 要如何「觀察」你的 infrastructure 和 services 在不同的環境、region 和 AWS 帳號之後再做部署。</li></ul></li></ul><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="19-Valuable-GitHub-Repositories-for-Beginner-Developers"><a href="#19-Valuable-GitHub-Repositories-for-Beginner-Developers" class="headerlink" title="19 Valuable GitHub Repositories for Beginner Developers"></a><a href="https://dev.to/madza/19-valuable-github-repositories-for-beginner-developers-3i18" target="_blank" rel="noopener">19 Valuable GitHub Repositories for Beginner Developers</a></h3><p>作者經常被詢問假如想要開始踏入 Web 開發職涯的話，有哪一些資源可以推薦給初學者，所以就將他覺得最棒的 Repository 給條列出來，雖然大部分都比較適合初學者，但或許資深的工程師也可以從中溫故知新，這些連結經過分類，其中包含課程，Handbook, 最佳守則，專案，面試的各種資源</p><h3 id="The-streaming-bridges-—-A-Kafka-RabbitMQ-MQTT-and-CoAP-example"><a href="#The-streaming-bridges-—-A-Kafka-RabbitMQ-MQTT-and-CoAP-example" class="headerlink" title="The streaming bridges — A Kafka, RabbitMQ, MQTT, and CoAP example"></a><a href="https://medium.com/swlh/the-streaming-bridges-a-kafka-rabbitmq-mqtt-and-coap-example-9077a598169" target="_blank" rel="noopener">The streaming bridges — A Kafka, RabbitMQ, MQTT, and CoAP example</a></h3><p>當前大家常用來當 Queue 的各種解決方案其實都相當的成熟，看一下其發展歷史: MQTT (1999) -&gt; AMQP (2003) -&gt; RabbitMQ (2007) -&gt; CoAP (2009) -&gt; Kafka (2010)，可以發現這中間已有超過 20 年的淬煉，大家現在常聽到的 RabbitMQ 和 Kafka 其實也超過十年有餘，作者利用一個火車運輸系統來展示 RabbitMQ, Kafka, MQTT 和 CoAP 如何各展長才，其中還包含了RabbitMQ, MQTT, CoAP 和 Kafka 的設定步驟，以及 Database PostgreSQL 和 Cassandra 的 DB Scheme，導致篇幅滿長的，有空想要細細品味這個 Queue 是怎麼使用的人可以參考看看</p><h3 id="David-Boggs-Co-Inventor-of-Ethernet-Dies-at-71"><a href="#David-Boggs-Co-Inventor-of-Ethernet-Dies-at-71" class="headerlink" title="David Boggs, Co-Inventor of Ethernet, Dies at 71"></a><a href="https://www.nytimes.com/2022/02/28/technology/david-boggs-dead.html" target="_blank" rel="noopener">David Boggs, Co-Inventor of Ethernet, Dies at 71</a></h3><p>Ethernet 的聯合發明者 David Boggs 於日前 (2022/02/19) 過世，享年 71 歲，他在 1973 年時加入 Xerox PARC 研究室與開發夥伴 Bob Metcalfe 一同投入電腦資訊傳輸的研究，他們花了差不多兩年的時間設計出第一版的 Ethernet，感謝有他們的發明，才讓現今有這麼多采多姿的網路世界</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li><li><a href="https://rico-chen.medium.com/" target="_blank" rel="noopener">@RicoChen</a> - 熱愛許多技術且努力看透技術的本質，如果有什麼好玩的技術，還請各位歡迎直接找我聊聊。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 122 期 - 希望世界和平</title>
      <link href="/2022/03/01/122-hope-for-world-peace/"/>
      <url>/2022/03/01/122-hope-for-world-peace/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-JavaScript-玩轉設計模式-替你處理行為的-Proxy-Pattern（代理者模式）"><a href="#用-JavaScript-玩轉設計模式-替你處理行為的-Proxy-Pattern（代理者模式）" class="headerlink" title="用 JavaScript 玩轉設計模式 | 替你處理行為的 Proxy Pattern（代理者模式）"></a><a href="https://medium.com/starbugs/%E7%94%A8-javascript-%E7%8E%A9%E8%BD%89%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E6%9B%BF%E4%BD%A0%E8%99%95%E7%90%86%E8%A1%8C%E7%82%BA%E7%9A%84-proxy-pattern-%E4%BB%A3%E7%90%86%E8%80%85%E6%A8%A1%E5%BC%8F-4ee9fab2d67b" target="_blank" rel="noopener">用 JavaScript 玩轉設計模式 | 替你處理行為的 Proxy Pattern（代理者模式）</a></h3><p>Hi！大家好，我是神 Q 超人！今天想要來介紹設計模式中的 Proxy Pattern（代理者模式）。在日常生活中，我們有可能會因為許多原因，沒有辦法直接和對方談話，於是就會透過他的代理人或是助理傳達訊息（就像廠商如果要找藝人合作，就得透過經紀人一樣）。</p><p>Proxy Pattern 就如同上述的例子，我們會在目標物件上多包裝一層 Proxy，讓我們透過 Proxy，而不是直接存取目標物件。要在 JavaScript 中使用 Proxy 已經有現成的語法可以使用了，這篇文章就來看看該如何玩轉 Proxy 吧！ 🙌</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Stitches-Style-your-components-with-confidence"><a href="#Stitches-Style-your-components-with-confidence" class="headerlink" title="[Stitches] Style your components with confidence"></a><a href="https://medium.com/starbugs/stitches-style-your-components-with-confidence-99950f0249c" target="_blank" rel="noopener">[Stitches] Style your components with confidence</a></h3><p>開發網站時，不管有沒有使用 UI framework 上（Ant Design、element UI…) ，多少都會有專屬的 styling/theme guide。如何維持網站整體風格一致、寫出簡單清楚並好維護的 css 也是重要課題之一。今天並不會探討如何做出一個完整的 Design system 因為那實在是太博大精深，要介紹的只是一個 css in js 的 library <a href="https://stitches.dev/" target="_blank" rel="noopener">Stitches</a> (這兩年才剛推出的超新工具)，幫助你在寫 styling 的時候更容易維護。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="做了一份前端面试复习计划，保熟～"><a href="#做了一份前端面试复习计划，保熟～" class="headerlink" title="做了一份前端面试复习计划，保熟～"></a><a href="https://juejin.cn/post/7061588533214969892" target="_blank" rel="noopener">做了一份前端面试复习计划，保熟～</a></h3><p>與面試題相關的文章就是那種平常不會去看，但是需要用到的時候又恨著自己平常沒有找時間讀的文章，尤其是只會出現在面試中的那種題目 😂，這裡有個作者就把常見的面試題整理成大補帖，幾乎涵蓋了前端的所有領域，有空或面試之前可以就拿出來看個一兩題！ 🙌</p><h3 id="Future-JavaScript-Records-and-Tuples"><a href="#Future-JavaScript-Records-and-Tuples" class="headerlink" title="Future JavaScript: Records and Tuples"></a><a href="https://dzone.com/articles/future-javascript-records-and-tuples" target="_blank" rel="noopener">Future JavaScript: Records and Tuples</a></h3><p>Records 和 Tuples 是 JavaScript 未來有可能會出現的新功能，目前在 <a href="https://github.com/tc39/proposal-record-tuple" target="_blank" rel="noopener">tc39 提案的第二階段</a>。他們長得很像 Object 和 Array，但又有哪些其他特別的新功能，看看文章裡怎麼說吧！</p><h3 id="Exotic-Objects-in-JavaScript"><a href="#Exotic-Objects-in-JavaScript" class="headerlink" title="Exotic Objects in JavaScript"></a><a href="https://blog.bitsrc.io/exotic-objects-understanding-why-javascript-behaves-so-moody-5f55e867354f" target="_blank" rel="noopener">Exotic Objects in JavaScript</a></h3><p>你有聽過 JavaScript 中的 Exotic Objects 嗎？當你對一個 String 使用一些原生的方法（像是 <code>.split()</code> 等）時，JavaScript 的內部機制會在方法呼叫時，替你把該 String 轉換成 Object 以順利執行 <code>.split()</code>，這件事背後就是 Exotic Objects 的概念。</p><h2 id="Design-Pattern"><a href="#Design-Pattern" class="headerlink" title="Design Pattern"></a>Design Pattern</h2><h3 id="微服務瞎談-7-Saga-Pattern"><a href="#微服務瞎談-7-Saga-Pattern" class="headerlink" title="微服務瞎談(7) Saga Pattern"></a><a href="https://ithelp.ithome.com.tw/articles/10236124" target="_blank" rel="noopener">微服務瞎談(7) Saga Pattern</a></h3><p>在 microservice 的架構中，每個 service 都有自己的儲存資料的空間，那麼要如何確保這些資料可以保持一致性，這時候就可以利用 saga pattern 這個 design pattern 來處理這個問題。</p><h3 id="Design-Pattern-Decorator-裝飾者模式"><a href="#Design-Pattern-Decorator-裝飾者模式" class="headerlink" title="[Design Pattern] Decorator 裝飾者模式"></a><a href="https://ithelp.ithome.com.tw/articles/10218692" target="_blank" rel="noopener">[Design Pattern] Decorator 裝飾者模式</a></h3><p>Decorator pattern 可以說是蠻常使用的一種 design pattern，解決了需要多次繼承或者建立多種實作方式的困擾，如果讀者有遇到重複性很高或者邏輯相識度很高的程式碼，不妨也可以利用 decorator pattern 來進行一個重構的設計。</p><h3 id="Day-13-自己不會沒關係～找一個代理人幫忙處理-代理模式-Proxy-Pattern"><a href="#Day-13-自己不會沒關係～找一個代理人幫忙處理-代理模式-Proxy-Pattern" class="headerlink" title="[ Day 13 ] 自己不會沒關係～找一個代理人幫忙處理 - 代理模式 ( Proxy Pattern )"></a><a href="https://ithelp.ithome.com.tw/articles/10205659" target="_blank" rel="noopener">[ Day 13 ] 自己不會沒關係～找一個代理人幫忙處理 - 代理模式 ( Proxy Pattern )</a></h3><p>Proxy pattern 是一種 design pattern 讓你可以利用代理人的方式來進行物件的控管，假如讀者在開發的過程中，遇到一個邏輯相當複雜的物件，可能複雜到很難管理，這時候就可以利用 proxy pattern 進行物件的邏輯改寫，這樣說不定就不會讓這個物件變得難以控管喔！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="DevOps-Create-your-first-CI-CD-pipeline"><a href="#DevOps-Create-your-first-CI-CD-pipeline" class="headerlink" title="[DevOps] Create your first CI/CD pipeline!!"></a><a href="https://faun.pub/devops-create-your-first-ci-cd-pipeline-ed054ba1404f" target="_blank" rel="noopener">[DevOps] Create your first CI/CD pipeline!!</a></h3><p>CI/CD Pipeline 要將新版本軟題發佈所必須要執行的一連串步驟，它透過監控和自動化來改善應用程式開發的流程，特別是在整合跟測試的階段，當然還有交付跟部署，雖然 CI/CD 的所有步驟都可以手動執行，但 CI/CD 真的的價值需要透過自動化才能體現，所以作者將自身經驗和詳細設定過程透過這篇文章介紹分享給大家</p><p>主要使用到的工具為 Ubuntu EC2, Java, Jenkins, Maven, Tomcat, Docker, Jira 和 DefectDojo，談到 Build, Test, Release, Deploy 以及 Validation 和 Compliance，過程鉅細彌遺，很適合初學者跟著一起試試看</p><h3 id="Chaos-Mesh-moves-to-the-CNCF-Incubator"><a href="#Chaos-Mesh-moves-to-the-CNCF-Incubator" class="headerlink" title="Chaos Mesh moves to the CNCF Incubator"></a><a href="https://www.cncf.io/blog/2022/02/16/chaos-mesh-moves-to-the-cncf-incubator/" target="_blank" rel="noopener">Chaos Mesh moves to the CNCF Incubator</a></h3><p>CNCF Committee 最近投票通過接受 Chaos Mesh 成為 CNCF Incubating 專案，Chaos Mesh 是一個功能眾多的 Chaos Engineering 平台，讓 Chaos 可以在 Kubernetes 的環境中實驗，自從在 2020 年七月成為 CNCF Sandbox 之後，他已經釋出兩個主要大版本更新 (v1.0 和 v2.0) 和 30 幾個次要更新，這些改動讓他在觀測，功能和安全性上帶來重大的改善，感覺是個滿有前景的專案，可以投資一點時間在上面</p><h3 id="1Password-for-SSH-amp-Git-Beta"><a href="#1Password-for-SSH-amp-Git-Beta" class="headerlink" title="1Password for SSH &amp; Git (Beta)"></a><a href="https://developer.1password.com/docs/ssh/" target="_blank" rel="noopener">1Password for SSH &amp; Git (Beta)</a></h3><p>自己本來就有購買 1Password 供個人使用，不然不好做到不同網站的密碼又複雜又相異，兩天看到 1Password 的文章發現竟然釋出 SSH 的功能，以後就可以把 SSH Key 也存在 1Password 裡面，都過他去存取 Git 或是 SSH 到其他的伺服器內，目前已經有支援 Mac, Linux 跟 Windows，有使用 1Password 的人可以趕緊一起來使用看看 😊</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 121 期 - 這場雨會不會下不完</title>
      <link href="/2022/02/22/121-does-it-rain-never-stop/"/>
      <url>/2022/02/22/121-does-it-rain-never-stop/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="原來程式碼品質也可以被檢測：初探-SonarQube"><a href="#原來程式碼品質也可以被檢測：初探-SonarQube" class="headerlink" title="原來程式碼品質也可以被檢測：初探 SonarQube"></a><a href="https://medium.com/starbugs/%E5%8E%9F%E4%BE%86%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%93%81%E8%B3%AA%E4%B9%9F%E5%8F%AF%E4%BB%A5%E8%A2%AB%E6%AA%A2%E6%B8%AC-%E5%88%9D%E6%8E%A2-sonarqube-14e99687806e" target="_blank" rel="noopener">原來程式碼品質也可以被檢測：初探 SonarQube</a></h3><p>Hi 大家好我是 Andy，隨著專案結構越來越複雜，程式碼的品質就變成是一項非常重要的指標，然而現在就有一個平台專門在做這件事，這個平台就叫做 <a href="https://www.sonarqube.org/enterprise-edition/" target="_blank" rel="noopener">SonarQube</a>，究竟這個平台到底好不好用，就讓我們跟著這篇文章一起看下去吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="SOLID-Principles-in-TypeScript"><a href="#SOLID-Principles-in-TypeScript" class="headerlink" title="SOLID Principles in TypeScript"></a><a href="https://blog.bitsrc.io/solid-principles-in-typescript-153e6923ffdb" target="_blank" rel="noopener">SOLID Principles in TypeScript</a></h3><p>作者用 TypeScript 寫範例程式碼，列出在 SOLID 原則下，我們應該要避免的幾種寫法，以及該如何正確的實作。</p><h3 id="浏览器渲染机制、重绘、重排"><a href="#浏览器渲染机制、重绘、重排" class="headerlink" title="浏览器渲染机制、重绘、重排"></a><a href="https://juejin.cn/post/7067087200143278116" target="_blank" rel="noopener">浏览器渲染机制、重绘、重排</a></h3><p>你還記得瀏覽器載入 HTML 後的渲染流程嗎？在文章中作者介紹了渲染機制中的重排（Reflow）和重繪（Replant），並且提供建議以減少 Reflow 和 Replant 所產生的效能消耗。</p><h3 id="9-JavaScript-Design-Patterns-You-Will-Love"><a href="#9-JavaScript-Design-Patterns-You-Will-Love" class="headerlink" title="9 JavaScript Design Patterns You Will Love"></a><a href="https://hackernoon.com/9-javascript-design-patters-you-will-love" target="_blank" rel="noopener">9 JavaScript Design Patterns You Will Love</a></h3><p>這是一篇滿長的文章，作者詳細的介紹了 JavaScript 內的幾個特性，又介紹了 Design Patterns 的各種種類後才開始列出他要推薦的 9 個 Pattern，如果想要了解在 JavaScript 的語言特性下，該如何使用 Design Patterns 的話，可以花一些時間閱讀！ 🙌</p><h2 id="State-management"><a href="#State-management" class="headerlink" title="State management"></a>State management</h2><h3 id="Jotai-vs-Recoil-What-are-the-differences"><a href="#Jotai-vs-Recoil-What-are-the-differences" class="headerlink" title="Jotai vs. Recoil: What are the differences?"></a><a href="https://blog.logrocket.com/jotai-vs-recoil-what-are-the-differences/" target="_blank" rel="noopener">Jotai vs. Recoil: What are the differences?</a></h3><p><a href="https://github.com/pmndrs/jotai" target="_blank" rel="noopener">Jotai</a> 以及 <a href="https://github.com/facebookexperimental/Recoil" target="_blank" rel="noopener">Recoil</a> 可以說是兩個相當新的 state management，這兩個 state management 的用法可以說是相當接近，這篇文章比較了這兩種 state management，有興趣的讀者可以參考這篇文章來決定要使用哪種 state management。</p><h3 id="Managing-React-State-with-Zustand"><a href="#Managing-React-State-with-Zustand" class="headerlink" title="Managing React State with Zustand"></a><a href="https://dev.to/aaronksaunders/managing-react-state-with-zustand-2e8k" target="_blank" rel="noopener">Managing React State with Zustand</a></h3><p><a href="https://github.com/pmndrs/zustand" target="_blank" rel="noopener">Zustand</a> 是一套基於 Flux 設計模式而設計出來的 state management，跟 Redux 一樣都是用這種設計模式，如果讀者想用一些比較新穎的 state management 但是又不想跳脫 Flux 的設計模式，不妨也可以試試看 Zustand 喔～</p><h3 id="Intro-to-XState-—-a-true-state-management-library-for-react"><a href="#Intro-to-XState-—-a-true-state-management-library-for-react" class="headerlink" title="Intro to XState — a true state management library for react"></a><a href="https://medium.com/weekly-webtips/intro-to-xstate-a-true-state-management-system-library-for-react-d8c0051c71e4" target="_blank" rel="noopener">Intro to XState — a true state management library for react</a></h3><p><a href="https://github.com/statelyai/xstate" target="_blank" rel="noopener">XState</a> 是一套基於 finite state machine 的設計理念所產出的 state management，也因為 finite state machine 需要考慮的 flow 相當多，所以 XState 也可以對於一個很操作邏輯相當複雜的網站可以說是相當完整的一套 state management，如果讀者目前有遇到這種情形不妨也可以利用 Xstate 進行 state 管理喔～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Introducing-Opta-Terraform-on-Rails"><a href="#Introducing-Opta-Terraform-on-Rails" class="headerlink" title="Introducing Opta: Terraform on Rails"></a><a href="https://www.cncf.io/blog/2022/02/18/introducing-opta-terraform-on-rails/" target="_blank" rel="noopener">Introducing Opta: Terraform on Rails</a></h3><p><a href="https://github.com/run-x/opta" target="_blank" rel="noopener">Opta</a> 是一個 IaC Framework，讓你可以使用高階語法來建構雲端架構，而不會迷失在低階的雲端設定組態當中，它提供使用者大量的函式庫來建立出理想中的架構，而且更棒的是他的底層使用 Terraform，所以使用者不會被鎖定在某個平台上，使用者永遠可以撰寫客製化的 Terraform，甚至是將 Opta 直接整合 Terraform 來使用</p><p>而它主要目標是希望除了業務邏輯跟 Unit Testing 由 Developer 去負責之外，其他諸如 Provision, Deployment, Observatility, Multiple Envs, Security 都由他來完成， Opta 目前支援三大主要公有雲 (AWS, GCP 跟 Azure)，現在主要有底下幾個 Module:</p><ul><li>Microservices (powered by Kubernetes)</li><li>Databases - Postgres, MySQL, Redis</li><li>Serverless workloads</li><li>Networking - VPCs, Subnets, Load balancers</li><li>CDN (Content Delivery Network)</li><li>Object storage (S3, GCS)</li></ul><p>除此之外他也將一些 Best Practice 融合近來，例如：</p><ul><li>Observability (Datadog, LogDNA)</li><li>SOC2 compliance</li><li>Continuous Deployment</li><li>Hardened network and security configurations (AWS, GCP, Azure)</li><li>Auto-scaling and high availability (HA)</li></ul><h3 id="Introducing-a-Google-Cloud-architecture-diagramming-tool"><a href="#Introducing-a-Google-Cloud-architecture-diagramming-tool" class="headerlink" title="Introducing a Google Cloud architecture diagramming tool"></a><a href="https://cloud.google.com/blog/topics/developers-practitioners/introducing-google-cloud-architecture-diagramming-tool" target="_blank" rel="noopener">Introducing a Google Cloud architecture diagramming tool</a></h3><p>相較於上面的 Opta 使用 YAML 檔案格式來描述雲端架構，GCP 這邊則是推出了 Google 雲端架構繪圖工具，讓使用者可以再將想要的雲端架構圖透過該工具繪製完成後，透過指標點一下，就直接將該架構在 GCP 內給部署出來，看來以後在 IaC 的世界裡，搞不好畫圖比寫 Code 來得重要了 😂</p><h3 id="HashiCorp-Terraform-AWS-Provider-Introduces-Significant-Changes-to-Amazon-S3-Bucket-Resource"><a href="#HashiCorp-Terraform-AWS-Provider-Introduces-Significant-Changes-to-Amazon-S3-Bucket-Resource" class="headerlink" title="HashiCorp Terraform AWS Provider Introduces Significant Changes to Amazon S3 Bucket Resource"></a><a href="https://www.infoq.com/news/2022/02/terraform-aws-provider-s3/" target="_blank" rel="noopener">HashiCorp Terraform AWS Provider Introduces Significant Changes to Amazon S3 Bucket Resource</a></h3><p>看完高階的 IaC，接著來看低階一些的，HashiCorp 最近釋出 Terraform AWS Provider 4.0，在這個更新版當中，在 S3 Bucket 這個資源中包含了巨大且不可向下相容的變更，因此沒有鎖定 AWS Provider 版本的人，在最近使用的時候要注意一下，假如發生不意外的錯誤，就有可能是因為這次的更新所造成的，看是要降板，或是捲起袖子來修改一番了💪</p><h3 id="Include-diagrams-in-your-Markdown-files-with-Mermaid"><a href="#Include-diagrams-in-your-Markdown-files-with-Mermaid" class="headerlink" title="Include diagrams in your Markdown files with Mermaid"></a><a href="https://github.blog/2022-02-14-include-diagrams-markdown-files-mermaid/" target="_blank" rel="noopener">Include diagrams in your Markdown files with Mermaid</a></h3><p>上週情人節時 GitHub 宣佈一個新功能，就是以後可以在 Markdown 檔案格式中透過 Mermaid 來增加圖像了！這樣一來以後想要在 Markdown 檔案中加入流程圖的話就可以不用特地畫一張圖，然後再把圖片轉成 JPG/PNG 檔之後加到 Repository 中，然後再讓 Markdown 去引用他，可以省下不少時間 🕒</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 120 期 - 突然發現元宵節過了，但還沒吃到湯圓啊...</title>
      <link href="/2022/02/15/120-starbugs-weekly-chatbot/"/>
      <url>/2022/02/15/120-starbugs-weekly-chatbot/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="StarBugs-Weekly-ChatBot-開發筆記"><a href="#StarBugs-Weekly-ChatBot-開發筆記" class="headerlink" title="StarBugs Weekly ChatBot 開發筆記"></a><a href="https://medium.com/starbugs/starbugs-weekly-chatbot-%E9%96%8B%E7%99%BC%E7%AD%86%E8%A8%98-8f6a939a3661" target="_blank" rel="noopener">StarBugs Weekly ChatBot 開發筆記</a></h3><p>以往 StarBugs Weekly 幾個維護者每週輪流使用 MailChimp 寄出週刊文章，倒也還過得去，畢竟一週才只有一次，但後來將推薦文章拆分成獨立網站之後，這塊的訊息發布並沒有去做到，假如還是用 Email 的話，感覺一週會多好幾封信，大家現在使用 IM 服務的頻率都比 Email 多太多了，因此我就想說來寫個 Telegram ChatBot 負責整個 StarBug Weekly 的文章發布通知，在這個發布 StarBugs Weekly 文章的 ChatBot 中，目前有三個比較重要的元件…</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Patterns"><a href="#Patterns" class="headerlink" title="Patterns"></a><a href="https://www.patterns.dev/posts/" target="_blank" rel="noopener">Patterns</a></h3><p>如果最近有想要學習一些開發常用的 Patterns 的話（例如：Design Patterns、Rendering Patterns 和 Performance Patterns），這是一個滿不錯的學習資源，裡面的範例都是用 JavaScript 或是相關的 Framework 撰寫的。快把它存到書籤中，想到就拿起來讀一下吧！</p><h3 id="Front-End-Development-Trends-to-Watch-in-2022"><a href="#Front-End-Development-Trends-to-Watch-in-2022" class="headerlink" title="Front End Development Trends to Watch in 2022"></a><a href="https://www.freecodecamp.org/news/front-end-development-trends/" target="_blank" rel="noopener">Front End Development Trends to Watch in 2022</a></h3><p>作者整理了幾個在 2022 年的前端走向，裡頭包含了 <a href="https://svelte.dev/" target="_blank" rel="noopener">Svelte</a> 變得越來越流行、前端三巨頭 React、Vue 和 Angular 短時間內都還不會消失，和主流框架必須要繼續支援靜態和動態頁面等，文章裡還有關於上方幾點的詳細資訊和其他更多內容喲！</p><h3 id="Create-Your-Word-Portrait-Using-CSS"><a href="#Create-Your-Word-Portrait-Using-CSS" class="headerlink" title="Create Your Word Portrait Using CSS"></a><a href="https://kumarsonsoff.hashnode.dev/word-portrait-using-css#comments-list" target="_blank" rel="noopener">Create Your Word Portrait Using CSS</a></h3><p>作者透過 CSS 裡的 background-clip 屬性，做出了類似用字母排出圖片輪廓的效果，非常有趣！但如果是有密集恐懼症的開發者請慎入！ 😂</p><h3 id="NextUI"><a href="#NextUI" class="headerlink" title="NextUI"></a><a href="https://nextui.org/" target="_blank" rel="noopener">NextUI</a></h3><p>在前端變化越來越快的年代，又有一套新的 UI Library 誕生了，這套 UI Library 是 NextUI，雖然這名字聽起來好像跟 vercel 團隊做出來的 Next.js 很像，但目前好像不是相關團隊設計出來的，有興趣的讀者可以上來看看這套新的 UI Library。</p><h3 id="Yarn-3-0-🚀🤖-Performances-ESBuild-Better-Patches"><a href="#Yarn-3-0-🚀🤖-Performances-ESBuild-Better-Patches" class="headerlink" title="Yarn 3.0 🚀🤖 Performances, ESBuild, Better Patches"></a><a href="https://dev.to/arcanis/yarn-3-0-performances-esbuild-better-patches-e07" target="_blank" rel="noopener">Yarn 3.0 🚀🤖 Performances, ESBuild, Better Patches</a></h3><p>眾所皆知 Yarn 每一代都會有不少大的改動需要調整，假如讀者有想要將專案的 Yarn workspace 升級到 Yarn 3 的話不妨可以先看看 Yarn 3 的一些特性再來決定是否要升版吧XD</p><h3 id="为什么现在我更推荐-pnpm-而不是-npm-yarn"><a href="#为什么现在我更推荐-pnpm-而不是-npm-yarn" class="headerlink" title="为什么现在我更推荐 pnpm 而不是 npm/yarn?"></a><a href="https://jishuin.proginn.com/p/763bfbd3bcff" target="_blank" rel="noopener">为什么现在我更推荐 pnpm 而不是 npm/yarn?</a></h3><p>前端用來進行 package management 的工具越來越多，早期很多 Yarn 派的到後來的 npm 6 到現在又有 pnpm，究竟這幾個 package management 有什麼差別呢？有興趣的讀者可以看看這篇文章。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Why-you-should-NOT-use-Service-Mesh"><a href="#Why-you-should-NOT-use-Service-Mesh" class="headerlink" title="Why you should NOT use Service Mesh"></a><a href="https://medium.com/google-cloud/when-not-to-use-service-mesh-1a44abdeea31" target="_blank" rel="noopener">Why you should NOT use Service Mesh</a></h3><p>Service Mesh 已經變成雲端架構中滿重要的一環，因為假如你使用正確的話，確實可以帶來很多好處，並且解鎖很多功能來讓你的團隊更省時省事，Service Mesh 要不要使用會建議在專案比較早期的階段就決定會比較好，而很多人決定的方式都是…要更安全，所以要 mTLS，所以要 Service Mesh，然後就用了，但作者認為不能這麼草率地去做這樣的決定，他提出幾個需要考慮的要素，讓使用者可以更謹慎的評估要不要去使用 Service Mesh</p><ul><li><p>組織內是否具備擁有 Service Mesh 知識與經驗的人員？<br>假如團隊內沒有人知道 Service Mesh 甚至是 Kubernetes 就貿然使用的話，將會對專案造成負面的影響，尤其是當服務發生中斷或是遇到問題時，沒有人有辦法去除錯自己不懂的東西，所以必須確保有人員至少了解 Service Mesh 是什麼，以及他的基本概念</p></li><li><p>準備好面對採用 Service Mesh 將增加的技術債了嗎？<br>在 Production 環境使用 Service Mesh 當然比 Get Started 裡面的範例來的複雜很多，例如要怎麼自動化的部署 Service Mesh，怎麼去監控跟追蹤他是否正常，遇到問題的時候要怎麼去除錯跟找出原因，換句話說採用 Service Mesh 需要做的事情會比想像來得多，會有更多的設定需要在架構面落實，並且可能因此引入更多的工具並且也需要去維護它，這些都將有可能導致技術債的增加</p></li><li><p>Service Mesh 是否與組織的應用程式相容嗎？<br>假如是自己開發的應用程式應該是不用擔心跟 Service Mesh 有相容問題，但第三方工具可就不一定了，例如作者發現他在 Argo Workflows 裡面加上 Service Mesh 之後，導致運行時間跟過時的機率增加，也增加了資源的使用，所以必須要先做過實驗才能知道自己想要使用的工具會不會跟 Service Mesh 八字不合</p></li></ul><h3 id="Akamai-acquires-Linode-for-900M"><a href="#Akamai-acquires-Linode-for-900M" class="headerlink" title="Akamai acquires Linode for $900M"></a><a href="https://techcrunch.com/2022/02/15/akamai-acquires-linode-for-900m/" target="_blank" rel="noopener">Akamai acquires Linode for $900M</a></h3><p>聽到 Akamai 這間公司應該都是聯想到 CDN，但其實他也有提供安全和邊緣運算的相關服務，他在今天宣布將使用 9 億美金併購 Linode，Akamai 預估 Linode 可以為他在 2022 年就帶來 1 億美金的收入，Akamai 宣稱此併購可以讓 Linode 不管是在雲端或是邊緣運算方面變成世界上最分散的運算平台，而在併購後 Linode 將會保持跟以往一樣的運作方式為大家服務</p><h3 id="How-to-Use-the-Linux-cut-Command"><a href="#How-to-Use-the-Linux-cut-Command" class="headerlink" title="How to Use the Linux cut Command"></a><a href="https://www.howtogeek.com/775824/how-to-use-the-linux-cut-command/" target="_blank" rel="noopener">How to Use the Linux cut Command</a></h3><p>大家或多或少應該都會需要在 Terminal 處理有規則的字串，例如使用 kubectl get pod 後，想把某一些 Pod 給刪除掉，這時候可以先透過 <code>grep</code> 過濾資料，但該如何把 Pod 的名稱從過濾完的資料內再萃取出來呢？這時候就可以使用 Linux 裡面一個很強大的 <code>cut</code> 指令，他可以幫你把結構化資料的特定欄位給抓取出來，透過這篇文章可以詳細的知道如何使用它來讓自已日常工作事半功倍</p><h3 id="spongebob-cli"><a href="#spongebob-cli" class="headerlink" title="spongebob-cli"></a><a href="https://github.com/trakBan/spongebob-cli" target="_blank" rel="noopener">spongebob-cli</a></h3><p>當一直在 Terminal 做事情做到感覺有點疲憊時，該如何讓自己放鬆一下呢？！答案就是下指令 <code>spongebob-cli</code> 看一集海綿寶寶 🤣 自己滿喜歡看海綿寶寶的，因為裡面有很多大人才看得懂的劇情，沒想到有同好竟然把觀看海綿寶寶做成了 CLI 工具，透過該指令還可以選擇要看哪一集，喜歡海綿寶寶的人不要錯過了!</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 119 期 - 在雲彩上跳舞嘰嘰喳喳</title>
      <link href="/2022/02/08/119-dancing-on-the-cloud/"/>
      <url>/2022/02/08/119-dancing-on-the-cloud/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Nativefier-—-將你的網頁變成桌面應用程式"><a href="#Nativefier-—-將你的網頁變成桌面應用程式" class="headerlink" title="Nativefier — 將你的網頁變成桌面應用程式"></a><a href="https://medium.com/p/3ebcae98241b" target="_blank" rel="noopener">Nativefier — 將你的網頁變成桌面應用程式</a></h3><p>今天分享一個好用的 JS 套件，叫做 Nativefier。有些常用的網頁，想直接用開始列的捷徑啟動或是呼叫快捷啟動。但是官方又還沒有出桌面應用怎麼辦？這時候 Nativefier 就派上用場了。輕鬆將你的網頁變成桌面應用。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="你知道的-JavaScript-知識都有可能是錯的"><a href="#你知道的-JavaScript-知識都有可能是錯的" class="headerlink" title="你知道的 JavaScript 知識都有可能是錯的"></a><a href="https://blog.huli.tw/2022/01/30/how-to-validate-javascript-knowledge/?fbclid=IwAR17M-W6YRBGF01YI0DaFNmY1_mYRIJQxcKcXBagl5U3R9T6khmTHlngCSg" target="_blank" rel="noopener">你知道的 JavaScript 知識都有可能是錯的</a></h3><p>眾所皆知 JavaScript 是個擁有非常多地雷等著開發者去踩，一些你對於 JavaScript 觀念上的認知在你還沒去研讀 ECMAScript 的 spec 之前，有可能跟你想像的結果是不一樣，作者在這篇文章整理了一些你可能在認知上是錯誤的 JavaScript 小知識。</p><h3 id="webpack-or-esbuild-Why-not-both"><a href="#webpack-or-esbuild-Why-not-both" class="headerlink" title="webpack or esbuild: Why not both?"></a><a href="https://blog.logrocket.com/webpack-or-esbuild-why-not-both/" target="_blank" rel="noopener">webpack or esbuild: Why not both?</a></h3><p>Builder 的套件一直以來都是前端工程師必備的技能，目前檯面上最有名的莫過於是 Webpack 了，Webpack 擁有強大的 plugins 可以使用，然而最近也有一個很強大的 builder 叫 esbuild，esbuild 擁有強大的編譯效率來減少 build 的時間，身為工程師的我們一定要想辦法達到兩個都要的效果，這篇文章就利用了 <a href="https://github.com/privatenumber/esbuild-loader" target="_blank" rel="noopener">esbuild-loader</a> 這個 webpack 的 loader 來提升 webpack 的 build 效率。</p><h3 id="10-Must-Know-Patterns-for-Writing-Clean-Code-with-React-and-TypeScript"><a href="#10-Must-Know-Patterns-for-Writing-Clean-Code-with-React-and-TypeScript" class="headerlink" title="10 Must-Know Patterns for Writing Clean Code with React and TypeScript"></a><a href="https://dev.to/alexomeyer/10-must-know-patterns-for-writing-clean-code-with-react-and-typescript-1m0g" target="_blank" rel="noopener">10 Must-Know Patterns for Writing Clean Code with React and TypeScript</a></h3><p>Clean code 一直以來都是許多開發者想要追求的最終目標，然而實務上真的是不好達成XD<br>這篇文章作者舉了 10 個例子並且用 React 搭配 TypeScript 的方式來撰寫 clean code，有興趣的讀者可以收藏起來日後閱讀，畢竟 clean code 真的太難了XD</p><h3 id="4-most-important-features-coming-in-ES2022-that-you-should-know-about"><a href="#4-most-important-features-coming-in-ES2022-that-you-should-know-about" class="headerlink" title="4 most important features coming in ES2022 that you should know about"></a><a href="https://medium.com/@bsalwiczek/4-most-important-features-coming-in-es2022-that-you-should-know-about-f7e18c1bff9b" target="_blank" rel="noopener">4 most important features coming in ES2022 that you should know about</a></h3><p>JavaScript 的新標準 ES2022 會在今年的六月釋出，而這篇文章會介紹 4 個已經在 TC39 中達到第 4 階段的酷東西。其中包含了 Array 的 <code>at()</code>、使用 <code>new Error</code> 時可帶的 <code>cause</code>、<code>Top-level await</code> 和 Class 中的 Private 成員。</p><h3 id="React-Virtual-DOM-–-Explained-in-Simple-words"><a href="#React-Virtual-DOM-–-Explained-in-Simple-words" class="headerlink" title="React Virtual DOM – Explained in Simple words"></a><a href="https://tekolio.com/react-virtual-dom-explained-in-simple-words/" target="_blank" rel="noopener">React Virtual DOM – Explained in Simple words</a></h3><p>文章中解釋了 React 中的 Virtual DOM 的運作概念，以及使用 Virtual DOM 的優勢，內容沒有涉及到太艱深的底層原理，連用詞都簡單到我不用翻譯就完全看懂了呢！😂</p><h3 id="前端的设计模式系列-责任链模式"><a href="#前端的设计模式系列-责任链模式" class="headerlink" title="前端的设计模式系列-责任链模式"></a><a href="https://juejin.cn/post/7060851296491798535" target="_blank" rel="noopener">前端的设计模式系列-责任链模式</a></h3><p>作者以改寫一道演算法為例子，描述責任鏈模式的使用場景，以及如何用 JavaScript 來實現該設計模式想提供給開發者的意義。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Scaling-Kubernetes-to-Over-4k-Nodes-and-200k-Pods"><a href="#Scaling-Kubernetes-to-Over-4k-Nodes-and-200k-Pods" class="headerlink" title="Scaling Kubernetes to Over 4k Nodes and 200k Pods"></a><a href="https://medium.com/paypal-tech/scaling-kubernetes-to-over-4k-nodes-and-200k-pods-29988fad6ed" target="_blank" rel="noopener">Scaling Kubernetes to Over 4k Nodes and 200k Pods</a></h3><p>PayPal 目前主要的 Workload 運行在 Mesos，而在準備把部分的 Workload 搬遷到 Kubernetes 前，他們需要先測試看看 K8s 的擴展性有沒有辦法滿足他們的需求，他們一開始運行 2,000 Pod 在 1,000 Node 中，接著增加到 16,000 Pod 在 32,000 Node 中，然後跳到 150,000 Pod 在 4,100 Node 中，最後透過增加每台 Node 的 CPU，讓 Pod 的個數上升到 200,000，在這個過程中他們遇到一些挑戰，而這篇文章中描述的他們如何面對且克服這些挑戰的過程 (看起來主要都是在 Control Plane 上的調校)，有興趣的人請詳閱內文</p><h3 id="Kubernetes-Vault-Integration-via-Sidecar-Agent-Injector-vs-CSI-Provider"><a href="#Kubernetes-Vault-Integration-via-Sidecar-Agent-Injector-vs-CSI-Provider" class="headerlink" title="Kubernetes Vault Integration via Sidecar Agent Injector vs. CSI Provider"></a><a href="https://www.hashicorp.com/blog/kubernetes-vault-integration-via-sidecar-agent-injector-vs-csi-provider" target="_blank" rel="noopener">Kubernetes Vault Integration via Sidecar Agent Injector vs. CSI Provider</a></h3><p>HashiCorp Vault 算是目前開源軟體圈內，數一數二的密碼管理工具，而官方這邊跟 Kubernetes 的整合方式有兩種，本文將比較這兩種方式有何不同，根據結論來看的話，第一種方式功能比較齊全，詳細比較的可以參考內文</p><ol><li>The Vault Sidecar Agent Injector</li></ol><p>透過 <a href="https://github.com/hashicorp/vault-k8s" target="_blank" rel="noopener">vault-k8s</a> 這個 Project 所實作的 Side Car 模式，讓 K8s mutating webhook controller 將機敏資料注入到 Pod 中</p><ol start="2"><li>The Vault Container Storage Interface (CSI) provider</li></ol><p>透過 <a href="https://www.vaultproject.io/docs/platform/k8s/csi" target="_blank" rel="noopener">Vault CSI provider</a> 讓 Pod 可以直接去使用暫時性的 <a href="https://github.com/kubernetes-sigs/secrets-store-csi-driver" target="_blank" rel="noopener">CSI Secrets Store</a> 空間</p><h3 id="Decoupled-Microservices-Architecture-with-Materialize"><a href="#Decoupled-Microservices-Architecture-with-Materialize" class="headerlink" title="Decoupled Microservices Architecture with Materialize"></a><a href="https://dev.to/bobbyiliev/decoupled-microservices-architecture-with-materialize-2l67" target="_blank" rel="noopener">Decoupled Microservices Architecture with Materialize</a></h3><p>目前有數種方式可以用來處理 Microservice Architecture 中的資料，本文想要介紹幾種分散式資料庫的做法，而作者主要講解的東西是構築於 <a href="https://www.youtube.com/channel/UCCYR9GpcE3skVnyMU8Wx1kQ" target="_blank" rel="noopener">Houssem Dellai</a> 的影片 - <a href="https://www.youtube.com/watch?v=31AD6Nobt1o" target="_blank" rel="noopener">Data in a Microservice Architecture</a> 之上，文中假設有一個電子商務網站，並且由兩個 Microservice 所構成 (Catalog Service &amp; Basket Service)，兩個服務前面由 API Gateway 負責接收請求，並且有各自的資料庫，而且為了讓 Basket 可以跟 Catalog 溝通，所以中間還有實作 Restful API，這個架構最大的問題就在於 Basket 對於 Catalog 的高耦合，所以有不少缺點，那要如何改善這樣的架構呢？答案就在文中！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 118 期 - 有沒有技術性迴避晚輩拜年的方法？</title>
      <link href="/2022/02/01/118-do-you-have-any-way-to-evade-pay-a-new-year-call-by-child/"/>
      <url>/2022/02/01/118-do-you-have-any-way-to-evade-pay-a-new-year-call-by-child/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="精準的打包-—-Webpack-的-Tree-Shaking"><a href="#精準的打包-—-Webpack-的-Tree-Shaking" class="headerlink" title="精準的打包 — Webpack 的 Tree Shaking"></a><a href="https://medium.com/starbugs/%E7%B2%BE%E6%BA%96%E7%9A%84%E6%89%93%E5%8C%85-webpack-%E7%9A%84-tree-shaking-ad39e185f284" target="_blank" rel="noopener">精準的打包 — Webpack 的 Tree Shaking</a></h3><p>Hi！大家好，我是神 Q 超人！前陣子在和朋友聊 Webpack 的時候，突然提到 Tree Shaking，但很慚愧的是我沒有辦法好好說明 Webpack 是如何做到 Tree Shaking 的，因此就趁這個年假的第一天抽空讀 Webpack 的文件，然後把理解到的心得寫下來，如果你也有興趣，就一起看下去吧。 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="Learn-TypeScript-–-The-Ultimate-Beginners-Guide"><a href="#Learn-TypeScript-–-The-Ultimate-Beginners-Guide" class="headerlink" title="Learn TypeScript – The Ultimate Beginners Guide"></a><a href="https://www.freecodecamp.org/news/learn-typescript-beginners-guide/" target="_blank" rel="noopener">Learn TypeScript – The Ultimate Beginners Guide</a></h3><p>如同文章標題，如果是想要學習 TypeScript 的初學者，那這是篇很好入門的文章。雖然文章內容偏長，但剛好可以利用年假找時間看完！😂</p><!-- summary --><h3 id="How-To-Make-Money-With-CSS"><a href="#How-To-Make-Money-With-CSS" class="headerlink" title="How To Make Money With CSS?"></a><a href="https://nazanin-ashrafi.hashnode.dev/how-to-make-money-with-css" target="_blank" rel="noopener">How To Make Money With CSS?</a></h3><p>CSS 不只可以拿來讓網頁變得更漂亮，還可以拿來賺錢？如果你熱愛 CSS，並且理解 CSS 的話，也許能考慮作者介紹幾個利用 CSS 這項技能賺取額外收入的方式！</p><h3 id="My-honest-opinion-on-Tailwind-CSS"><a href="#My-honest-opinion-on-Tailwind-CSS" class="headerlink" title="My honest opinion on Tailwind CSS"></a><a href="https://h.daily-dev-tips.com/my-honest-opinion-on-tailwind-css" target="_blank" rel="noopener">My honest opinion on Tailwind CSS</a></h3><p>對於 Tailwind CSS，作者認為如果你還沒有相當的經驗，那就不太適合使用 Tailwind CSS，因為你可能無法找到正確的 class 實現你想做的事情，那對於熟悉 CSS 的開發者又如何呢？看看文章怎麼說吧！🙌</p><h3 id="Making-pixel-art-with-pure-CSS"><a href="#Making-pixel-art-with-pure-CSS" class="headerlink" title="Making pixel-art with pure CSS"></a><a href="https://pokecoder.hashnode.dev/making-pixel-art-with-pure-css" target="_blank" rel="noopener">Making pixel-art with pure CSS</a></h3><p>在 CodePen 上常常看到一些把 CSS 用到出神入化的開發者，雖然我沒辦法理解那些看了也不懂的 CSS，但要學學這篇文章的像素藝術還是沒問題的！</p><h3 id="Why-you-should-use-a-developer-font"><a href="#Why-you-should-use-a-developer-font" class="headerlink" title="Why you should use a developer font"></a><a href="https://dev.to/anthonyjdella/why-you-should-use-a-developer-font-2gio" target="_blank" rel="noopener">Why you should use a developer font</a></h3><p>在幾個月前我才安裝了開發者字體（單純覺得帥 😂），但從來沒有了解過開發者字體為什麼存在，這篇文章提供了幾個開發者字體的特別之處！🙌</p><h3 id="一起稍微了解一下-V8-的工作流程"><a href="#一起稍微了解一下-V8-的工作流程" class="headerlink" title="一起稍微了解一下 V8 的工作流程"></a><a href="https://juejin.cn/post/7059361714575245319" target="_blank" rel="noopener">一起稍微了解一下 V8 的工作流程</a></h3><p>V8 引擎是 Google 開發用來解析 JavaScript 用的開源專案，但你知道 V8 引擎是如何解析 JavaScript 的嗎？</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="Kubernetes-jobs-market-trends-for-2021"><a href="#Kubernetes-jobs-market-trends-for-2021" class="headerlink" title="Kubernetes jobs market trends for 2021"></a><a href="https://kube.careers/report-2021-q4" target="_blank" rel="noopener">Kubernetes jobs market trends for 2021</a></h3><p>在 2022 的一開始讓我們來回顧一下 2021 年 Kubernetes 相關工作職缺的趨勢吧！從數量上來看的話， 2021 Q3 是最多 Kubernetes 工作職缺出現的時候，而在這些工作職缺中，以北美和歐洲為最大宗，份別佔比 30% 和 29% (東南亞為 15%)；而且在所有 Kubernetes 職缺中有超過 21% 為純遠端，而這些職缺在美國平均來說薪資範圍落在 US$ 123,494 到 US$ $162,177，比較高的薪資區間落在 US$200,000 到 US$ 260,000，而且從 Q1 到 Q4 平均薪資慢慢增加 10%</p><p>在 91.66% 中的職缺中並不要求應徵者需要具備證照，假如有提到的話，以 AWS 證照為最大宗，再來則是 CKA, 接著分別是 GCP 和 Azure 的證照，有一半左右的職缺提及 Configuration Management 工具的使用能力，其中以 Terraform 為大宗，再來則是 Ansible…想知道其他更多關於 Kubernetes 職缺需要具備哪些技術門檻可以直接參考內文</p><!-- summary --><h3 id="Announcing-the-Kubernetes-Policy-Management-Paper"><a href="#Announcing-the-Kubernetes-Policy-Management-Paper" class="headerlink" title="Announcing the Kubernetes Policy Management Paper"></a><a href="https://www.cncf.io/blog/2022/01/28/announcing-the-kubernetes-policy-management-paper/" target="_blank" rel="noopener">Announcing the Kubernetes Policy Management Paper</a></h3><p>Kubernetes Seucirty SIG 和 Policy WG 最近一起釋出 Kubernetes Policy Management 的白皮書，用來協助社群了解使用 Policy 管理 K8s 組態的最佳方式；這份白皮書目標在於讓大家知曉為什麼 K8s Policy 的管理對於 K8s Cluster 和 Worklaod 的安全性和自動化為什麼如此的重要，同時也描述 K8s Policy 可以協助解決什麼樣的問題，以及怎麼去實作 K8s Policy，有興趣的人可以直接到這個 <a href="https://github.com/kubernetes/sig-security/tree/main/sig-security-docs/papers/policy" target="_blank" rel="noopener">GitHub</a> 連結裡面去下載白皮書 PDF 檔案來研究看看</p><h3 id="6-Programming-Languages-You-Should-Not-Learn-and-What-To-Learn-Instead"><a href="#6-Programming-Languages-You-Should-Not-Learn-and-What-To-Learn-Instead" class="headerlink" title="6 Programming Languages You Should Not Learn (and What To Learn Instead)"></a><a href="https://levelup.gitconnected.com/6-programming-languages-you-should-not-learn-and-what-to-learn-instead-95c0c3ff1fa1" target="_blank" rel="noopener">6 Programming Languages You Should Not Learn (and What To Learn Instead)</a></h3><p>學習一門新的語言可以是一段很有趣的旅程，但學習新事物意味著在時間上的投資，還有你的精力，甚至是全心投入，換句話說，做出一定程度的犧牲是難免的，因此一開始如何做出正確的決定就相當的重要，所以作者列舉出 6 個不應該去學習的語言，並且述說為什麼不該去學習他們，而是應該去學習其他的替代語言，底下簡單條列重點，細節可以參考原文</p><ol><li>Objective-C -&gt; Swift</li><li>Jave -&gt; Kotlin or Scala</li><li>HTML and CSS -&gt; Javascript</li><li>PHP -&gt; Python, Javascript or Go</li><li>C -&gt; Rust or Ruby</li><li>C++ -&gt; Rust or Ruby</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 117 期 - 現在放棄的話，年假就開始囉！</title>
      <link href="/2022/01/25/117-chinese-new-year-vacation-is-starting-if-you-give-up-now/"/>
      <url>/2022/01/25/117-chinese-new-year-vacation-is-starting-if-you-give-up-now/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="你所不知道的-query-string-小細節"><a href="#你所不知道的-query-string-小細節" class="headerlink" title="你所不知道的 query string 小細節"></a><a href="https://medium.com/starbugs/%E4%BD%A0%E6%89%80%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-query-string-%E5%B0%8F%E7%B4%B0%E7%AF%80-56498dc0645" target="_blank" rel="noopener">你所不知道的 query string 小細節</a></h3><p>Hi 大家好我是 Andy，這次要來跟大家介紹 query string 的一些意想不到的小細節，query string 是前端工程師很常使用的技巧，通常我們在進行 query string 的處理時都會利用套件來輔助，可是套件有時候卻會產生出意想不到結果，這篇文章就要來介紹你所不知道的 query string 小細節。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Practices-To-Avoid-as-a-Web-Developer"><a href="#CSS-Practices-To-Avoid-as-a-Web-Developer" class="headerlink" title="CSS Practices To Avoid as a Web Developer"></a><a href="https://enlear.academy/5-css-practices-to-avoid-as-a-web-developer-d7645fb51d53" target="_blank" rel="noopener">CSS Practices To Avoid as a Web Developer</a></h3><p>在寫 CSS 的時候會因為想要使用某些寫法，而去設定相關的屬性，以確保畫面顯示的正確（例如有些開發者會在使用 <code>position</code> 的時候，再另外將 <code>display</code> 設定成 <code>block</code>），但在某些 element 上其實是不需要這麼做的，只要你懂 element，那 element 就會幫你，一起來看看文章中舉的例子吧。 🙌</p><h3 id="如何合理的使用-React-Context"><a href="#如何合理的使用-React-Context" class="headerlink" title="如何合理的使用 React Context"></a><a href="https://juejin.cn/post/7056696289559314446" target="_blank" rel="noopener">如何合理的使用 React Context</a></h3><p>React Context 的使用非常容易，但是在容易使用的背後，還要特別注意透過 <code>Context.Provider</code> 取得資料的 component，是否存在著不必要的 render 問題。</p><h3 id="14-GitHub-Repositories-to-Ace-Your-JavaScript-Interviews-🎯-🚀"><a href="#14-GitHub-Repositories-to-Ace-Your-JavaScript-Interviews-🎯-🚀" class="headerlink" title="14 GitHub Repositories to Ace Your JavaScript Interviews 🎯 🚀"></a><a href="https://dev.to/madza/14-github-repositories-to-ace-your-javascript-interviews-1phi" target="_blank" rel="noopener">14 GitHub Repositories to Ace Your JavaScript Interviews 🎯 🚀</a></h3><p>相信在等到公司的年終三寶「尾牙、抽獎和年終」後，某些人已經準備好履歷要大投特投了，但是前端那麼大，該如何準備起呢？這裡剛好整理了 14 個和面試相關的 GitHub 專案，讓你在面試前的準備可以衝刺一波！</p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><h3 id="讓我們使用-Cypress-開始為-LIFF-app-撰寫單元測試"><a href="#讓我們使用-Cypress-開始為-LIFF-app-撰寫單元測試" class="headerlink" title="讓我們使用 Cypress 開始為 LIFF app 撰寫單元測試"></a><a href="https://engineering.linecorp.com/zh-hant/blog/cypress-liff-unit-test/" target="_blank" rel="noopener">讓我們使用 Cypress 開始為 LIFF app 撰寫單元測試</a></h3><p>隨著前端越來越複雜，測試這門學會也是越來越被大家重視，然而前端很多時候都是要仰賴使用者的操作才能讓元素有真正的效果，在這種 end-to-end testing 中 <a href="https://www.cypress.io/" target="_blank" rel="noopener">cypress.js</a> 可以說是相當有名的套件，這篇文章就在介紹 cypress 的測試方式，有興趣的讀者不妨可以收藏起來日後閱讀。</p><h3 id="街口支付-API-自動化測試解決方案"><a href="#街口支付-API-自動化測試解決方案" class="headerlink" title="街口支付 API 自動化測試解決方案"></a><a href="https://medium.com/@dopizz/%E8%A1%97%E5%8F%A3%E6%94%AF%E4%BB%98-api-%E8%87%AA%E5%8B%95%E5%8C%96%E6%B8%AC%E8%A9%A6%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%A1%88-ecf9ec0d0209" target="_blank" rel="noopener">街口支付 API 自動化測試解決方案</a></h3><p>這篇文章真的是把測試寫得相當深入，尤其像街口這麼大的公司測試更是重要，這篇文章從 QA 的角度下去說明一些測試的技巧，個人覺得蠻不錯的有興趣的讀者可以閱讀看看~</p><h3 id="React-Snapshot-Testing-With-Jest-An-Introduction-With-Examples"><a href="#React-Snapshot-Testing-With-Jest-An-Introduction-With-Examples" class="headerlink" title="React Snapshot Testing With Jest: An Introduction With Examples"></a><a href="https://blog.openreplay.com/react-snapshot-testing-with-jest-an-introduction-with-examples" target="_blank" rel="noopener">React Snapshot Testing With Jest: An Introduction With Examples</a></h3><p>在前端的測試除了 end-to-end testing 外還有另一個前端工程師可以做的就是 snapshot testing，透過 snapshot 我們可以確保元素會正常的 render 出我們想要的結構，這篇文章就在介紹 React 的 snapshot testing，有興趣的讀者可以閱讀看看。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="90DaysOfDevOps"><a href="#90DaysOfDevOps" class="headerlink" title="90DaysOfDevOps"></a><a href="https://github.com/MichaelCade/90DaysOfDevOps" target="_blank" rel="noopener">90DaysOfDevOps</a></h3><p>iThome 鐵人賽是要在一個月內完成每天一篇技術文章的挑戰，而這個作者打算做的是三倍份量，也就是 90 天！開始時間就是今年 2022/01/01，預計結束時間為 2022/03/31，他打算使用 90 天的時間來介紹有關於 DevOps 領域的相關知識，預計會處理 13 個技術領域，從介紹 DevOps 開始，學習程式語言，認識 Linux 基礎，了解網路知識，探討一個 Cloud Provider，如何使用 Git，容器，Kubernetes，學習 IaC，自動化組態管理，建立 CI/CD Pipeline，監控與日誌管理，儲存和資料保護！</p><h3 id="Multiple-GitHub-accounts-on-one-laptop"><a href="#Multiple-GitHub-accounts-on-one-laptop" class="headerlink" title="Multiple GitHub accounts on one laptop"></a><a href="https://dev.to/osipovsimon/multiple-github-accounts-on-one-laptop-2dmg" target="_blank" rel="noopener">Multiple GitHub accounts on one laptop</a></h3><p>假如自己私人跟公司都使用 GitHub 來儲存程式碼，兩邊都需要推 Code，而且你不想要使用公司帳號額外建立一個 GitHub 帳號的話，那該怎麼做呢？解決的方法有兩個，分別是 SSH Configuration 或是 git URL re-writing 來達成，有興趣的人可以參考這篇文章來試試看</p><h3 id="9-Open-Source-Add-Ons-to-Improve-Your-Mozilla-Firefox-Experience"><a href="#9-Open-Source-Add-Ons-to-Improve-Your-Mozilla-Firefox-Experience" class="headerlink" title="9 Open Source Add-Ons to Improve Your Mozilla Firefox Experience"></a><a href="https://itsfoss.com/best-firefox-add-ons/" target="_blank" rel="noopener">9 Open Source Add-Ons to Improve Your Mozilla Firefox Experience</a></h3><p>相信除了 Chrome 之外，大家應該或多或少會有第二選擇的瀏覽器，像我自己就是使用 Firefox，這篇文章介紹九個加強 Firefox 的開源 Add-Ons，例如有可以讓網站變成黑色模式的 Dark Reader，密碼管理工具 Bitwarden，設定快捷鍵功能工具 Vimium-FF…等，有在使用 Firefox 的人可以參考詳細內文去安裝有興趣的 Add-Ons</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 116 期 - 如何成為一個好的 SRE 工具人</title>
      <link href="/2022/01/18/116-sre-tools-man/"/>
      <url>/2022/01/18/116-sre-tools-man/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="沒技術系列-—-如何成為一個好的-SRE-工具人"><a href="#沒技術系列-—-如何成為一個好的-SRE-工具人" class="headerlink" title="沒技術系列 — 如何成為一個好的 SRE 工具人"></a><a href="https://medium.com/starbugs/%E6%B2%92%E6%8A%80%E8%A1%93%E7%B3%BB%E5%88%97-%E5%A6%82%E4%BD%95%E6%88%90%E7%82%BA%E4%B8%80%E5%80%8B%E5%A5%BD%E7%9A%84-sre-%E5%B7%A5%E5%85%B7%E4%BA%BA-1d4d20fcadb" target="_blank" rel="noopener">沒技術系列 — 如何成為一個好的 SRE 工具人</a></h3><p>自己剛出社會當 Engineer 時，會覺得什麼都是自幹為王，我用 Open Source 完全不用錢架設出來的服務最厲害了！但後來得到了一些教訓，發現事情沒有我這個憨人想像的這麼簡單，所以寫了這邊有點像是心路歷程的文章跟大家一起來交流</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="2021-JavaScript-Rising-Stars"><a href="#2021-JavaScript-Rising-Stars" class="headerlink" title="2021 JavaScript Rising Stars"></a><a href="https://risingstars.js.org/2021/en" target="_blank" rel="noopener">2021 JavaScript Rising Stars</a></h3><p>前端進化的速度如此之快，那你知道在 2021 年的時候有哪些框架或工具屹立不搖，或是崛起了嗎？一起來看看這篇文章從各種類型的 repositories 中整理的數據吧！</p><h3 id="How-to-Build-Your-First-JavaScript-GitHub-Action"><a href="#How-to-Build-Your-First-JavaScript-GitHub-Action" class="headerlink" title="How to Build Your First JavaScript GitHub Action)"></a><a href="https://www.freecodecamp.org/news/build-your-first-javascript-github-action/" target="_blank" rel="noopener">How to Build Your First JavaScript GitHub Action)</a></h3><p>GitHub Actions 可以讓你透過你定義的 Actions，替你執行一些固定且重複的操作。本篇文章中，作者會從一開始建立專案到寫出一個替 PR 增加 Label 的 Action，如果對 GitHub Actions 有興趣想入門的話，推薦看一下！</p><h3 id="不优雅的-React-Hooks"><a href="#不优雅的-React-Hooks" class="headerlink" title="不优雅的 React Hooks"></a><a href="https://juejin.cn/post/7051535411042058271" target="_blank" rel="noopener">不优雅的 React Hooks</a></h3><p>這篇的作者提到一些在使用 React 的 Hooks 時，會讓工程師感到違反直覺的部分，算是從不同的角度看待 React 的 Hooks，還滿有趣的！</p><h3 id="Creating-Next-js-monorepo"><a href="#Creating-Next-js-monorepo" class="headerlink" title="Creating Next.js monorepo"></a><a href="https://medium.com/wesionary-team/creating-next-js-monorepo-d41ea78f4afb" target="_blank" rel="noopener">Creating Next.js monorepo</a></h3><p>monorepo 在現代的前端社會中越來越重要了，其實 monorepo 的實現方式有好幾種，這篇文章用 Next.js 結合 lenra 來實現 monorepo，有興趣的讀者不妨可以看看如何作者是如何實現的。</p><!--  --><h3 id="Why-TurboRepo-Will-Be-The-First-Big-Trend-of-2022"><a href="#Why-TurboRepo-Will-Be-The-First-Big-Trend-of-2022" class="headerlink" title="Why TurboRepo Will Be The First Big Trend of 2022"></a><a href="https://dev.to/swyx/why-turborepo-will-be-the-first-big-trend-of-2022-4gfj" target="_blank" rel="noopener">Why TurboRepo Will Be The First Big Trend of 2022</a></h3><p>TurboRepo 可以說是目前最潮的 monorepo 架構了，究竟 turborepo 可以帶給我們什麼全新的體驗，不妨可以看看這篇文章。</p><h3 id="忍術！把-same-site-變-same-origin-之術！"><a href="#忍術！把-same-site-變-same-origin-之術！" class="headerlink" title="忍術！把 same site 變 same origin 之術！"></a><a href="https://blog.huli.tw/2022/01/16/same-site-to-same-origin-document-domain/?fbclid=IwAR0T0gTybWxOYtTYV2hwUxJPHuNTDIokysmypEjz-oBmerZvKrU15tIyQFw" target="_blank" rel="noopener">忍術！把 same site 變 same origin 之術！</a></h3><p>CORS 一直都是網頁工程師必須要學的基本觀念，然而 same site 卻有可能藉由一些操作達到 same origin 的作用，這真的是太神奇了，就讓我們隨著胡立大大的腳步一起探索 CORS 的世界吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="My-jq-Cheatsheet"><a href="#My-jq-Cheatsheet" class="headerlink" title="My jq Cheatsheet"></a><a href="https://medium.com/geekculture/my-jq-cheatsheet-34054df5b650" target="_blank" rel="noopener">My jq Cheatsheet</a></h3><p>身為一位 SRE 或是 DevOps 應該都有使用過 jq 這個強大的 CLI 工具，透過他可以很輕鬆地在 Terminal 環境處理 JSON 格式的資料，這篇文章的作者分享了他使用 jq 來處理由 kubectl 所獲的 JSON 資料 (可以下 flag <code>-o json</code> 獲取)，去過濾自己真的需要且重要的資訊來使用</p><h3 id="Postman-Now-Supports-gRPC"><a href="#Postman-Now-Supports-gRPC" class="headerlink" title="Postman Now Supports gRPC"></a><a href="https://blog.postman.com/postman-now-supports-grpc/" target="_blank" rel="noopener">Postman Now Supports gRPC</a></h3><p>相信應該有不少人都會使用 Postman 來測試線上服務，他在最新的版本 v9.7.1 宣布支援 gRPC 協定，一旦上傳 API 的 Protobuf 定義檔案 (.proto)，Postman 就可以自動得知所有的 Service 與 Method，並且會為每一個 Method 產生對應的範例 Payload，具體的功能支援內容與使用方式，請參考內文</p><h3 id="5-Best-Online-Tools-to-Check-DNS-Records"><a href="#5-Best-Online-Tools-to-Check-DNS-Records" class="headerlink" title="5 Best Online Tools to Check DNS Records"></a><a href="https://geekflare.com/online-tools-to-check-dns-records/" target="_blank" rel="noopener">5 Best Online Tools to Check DNS Records</a></h3><p>當 DNS Record 設定錯誤時，將會導致你提供的服務無法正常使用，而在查詢 DNS Record 是哪邊出問題時，首先要做的當然就是先把 DNS Record 的詳細設定給撈出來好好地檢查一番，但要如何快速的檢查任何網站的 DNS Record 呢？這篇文章推薦了五個線上工具供大家使用，趕快加入到最愛書籤內，下次有需要時就可以馬上拿出來使用</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 115 期 - 什麼時候天氣才會回暖啊...</title>
      <link href="/2022/01/11/115-dive-into-react/"/>
      <url>/2022/01/11/115-dive-into-react/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-開發者一定要知道的底層機制-—-React-Fiber-Reconciler"><a href="#React-開發者一定要知道的底層機制-—-React-Fiber-Reconciler" class="headerlink" title="React 開發者一定要知道的底層機制 — React Fiber Reconciler"></a><a href="https://medium.com/starbugs/react-%E9%96%8B%E7%99%BC%E8%80%85%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%BA%95%E5%B1%A4%E6%9E%B6%E6%A7%8B-react-fiber-c3ccd3b047a1" target="_blank" rel="noopener">React 開發者一定要知道的底層機制 — React Fiber Reconciler</a></h3><p>React 自從 v16 以後就推出了 React Fiber 這個全新的底層架構，React 底層使用 fiber 架構重構後才得以實現一些 features 例如 Concurrent Mode 與 Suspense Data Fetching，雖然這些功能都還在實驗階段，但我想未來勢必會成為 React 穩定的 features，可以看出 React Fiber 對於整個 React 生態圈的重要性。我認為要變成一個更好的開發者，嘗試去理解框架底層的 source code 實踐與嘗試 reverse engineering 的過程是非常有幫助的。其實關於 React Fiber 的學習資源應該不少，這篇文章中我想按照自己的步調與理解嘗試介紹 React Fiber 的運作機制，不會到太過深入，但相信能對 React Fiber 的運作機制有基本的了解，那我們就開始吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="希望是最淺顯易懂的-RxJS-教學"><a href="#希望是最淺顯易懂的-RxJS-教學" class="headerlink" title="希望是最淺顯易懂的 RxJS 教學"></a><a href="https://blog.techbridge.cc/2017/12/08/rxjs/" target="_blank" rel="noopener">希望是最淺顯易懂的 RxJS 教學</a></h3><p>最近在學習 redux-observable 時覺得 RxJS 的資料流真的是蠻複雜的一個開發模式，但也因為 RxJS 的資料流可以讓我們可以很順利的解決一些複雜的開發模式，這篇文章用最淺顯易懂的方式帶大家進入 RxJS 的世界，有興趣的讀者不妨可以閱讀看看１</p><h3 id="一起探討-Micro-Frontends-的世界"><a href="#一起探討-Micro-Frontends-的世界" class="headerlink" title="一起探討 Micro Frontends 的世界"></a><a href="https://blog.techbridge.cc/2019/01/12/micro-frontends-concept/" target="_blank" rel="noopener">一起探討 Micro Frontends 的世界</a></h3><p>Micro Frontend 的議題在近年來越來越多人在討論，究竟 Micro Frontend 可以帶給我們什麼樣的便利性以及什麼壞處，就讓我們一起閱讀這篇文章一起了解吧１</p><h3 id="Monorepo-vs-Multi-Repo-Pros-and-Cons-of-Code-Repository-Strategies"><a href="#Monorepo-vs-Multi-Repo-Pros-and-Cons-of-Code-Repository-Strategies" class="headerlink" title="Monorepo vs Multi-Repo: Pros and Cons of Code Repository Strategies"></a><a href="https://kinsta.com/blog/monorepo-vs-multi-repo/" target="_blank" rel="noopener">Monorepo vs Multi-Repo: Pros and Cons of Code Repository Strategies</a></h3><p>一般來說正常的公司都是利用 multi repo 的方式來進行開發，可能會分成前端、後端、middleware 等等專案最後再將這些專案一起搬到同一台機器上互相獨立啟動並且溝通，但最近也有另一個聲量是 mono repo，也就是將所有的專案都集中在同一個 repo 底下，究竟這兩種管理方式有什麼優點跟缺點，這篇文章有詳細探討一番，有興趣的讀者可以參考看看喔１</p><h3 id="2022-年的-CSS"><a href="#2022-年的-CSS" class="headerlink" title="2022 年的 CSS"></a><a href="https://juejin.cn/post/7048260643589193765" target="_blank" rel="noopener">2022 年的 CSS</a></h3><p>近幾年的 CSS 不輸給 JavaScript，也推出了許多方便的屬性可以使用（雖然很老套，但 Flex 和 Grid 真的讚到不行），那在 2022 年間又會有哪些新的 CSS 屬性可以使用呢？一起看看作者的回顧和介紹吧！ 🙌</p><h3 id="10-ReactJS-Coding-Challenge-💥Coding-Interview-Prep💥"><a href="#10-ReactJS-Coding-Challenge-💥Coding-Interview-Prep💥" class="headerlink" title="10 ReactJS Coding Challenge (💥Coding Interview Prep💥)"></a><a href="https://dev.to/frontendengineer/10-reactjs-coding-exercises-with-codepen-exercise-and-solution--22k7" target="_blank" rel="noopener">10 ReactJS Coding Challenge (💥Coding Interview Prep💥)</a></h3><p>如果是在學習 React 的初學者，非常推薦可以試試這篇文章列出的幾個練習題！如果有解不出來的，作者也有提供解答在下方可以參考！</p><h3 id="8-techniques-to-write-cleaner-JavaScript-code"><a href="#8-techniques-to-write-cleaner-JavaScript-code" class="headerlink" title="8 techniques to write cleaner JavaScript code"></a><a href="https://dev.to/codewithahsan/8-techniques-to-write-cleaner-javascript-code-369e" target="_blank" rel="noopener">8 techniques to write cleaner JavaScript code</a></h3><p>作者提供了 8 個在寫 JavaScript 時常會遇到的情境，並且提供了更容易閱讀的寫法，如果文章中舉的例子剛好被你遇到，那不妨可以考慮使用看看。 🙌</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="The-State-Of-Enterprise-Linux-In-2022"><a href="#The-State-Of-Enterprise-Linux-In-2022" class="headerlink" title="The State Of Enterprise Linux In 2022"></a><a href="http://crunchtools.com/the-state-of-enterprise-linux-in-2022/" target="_blank" rel="noopener">The State Of Enterprise Linux In 2022</a></h3><p>近年來 Enterprise Linux 滿熱鬧的，例如 CentOS Stream 作為 Red Hat Enterprise Linux 上游的宣布， Alma Linux 和 Rocky Linux 作為 CentOS 下游的宣布，還有作為 Fedora 下游 AWS Linux 2022…等，那麼這一些 Enterprise Linux 在 2022 年的情況又是如何呢？</p><h3 id="The-Full-Stack-Developer-Vocabulary-The-Full-List"><a href="#The-Full-Stack-Developer-Vocabulary-The-Full-List" class="headerlink" title="The Full-Stack Developer Vocabulary(The Full List!)"></a><a href="https://dev.to/code_jedi/the-full-stack-developer-vocabularythe-full-list-4n5d" target="_blank" rel="noopener">The Full-Stack Developer Vocabulary(The Full List!)</a></h3><p>身為一位 Full-Stack Developer 帶一本科技辭海在身上也是很合理的XD 畢竟 Full-Stack 要懂的東西這麼多，而且還一直有新東西冒出來，所以這篇文章很貼心的幫大家把常見的詞彙跟說明給列出來，讓大家在日常溝通時可以順暢無礙，避免雞同鴨講的狀況發生</p><h3 id="Advanced-Git-Concepts-You-Should-Know"><a href="#Advanced-Git-Concepts-You-Should-Know" class="headerlink" title="Advanced Git Concepts You Should Know"></a><a href="https://dev.to/ruppysuppy/advanced-git-concepts-you-should-know-nle" target="_blank" rel="noopener">Advanced Git Concepts You Should Know</a></h3><p>一般來說，使用 Git 最常用的指令就是 <code>git pull</code>, <code>git add</code>, <code>git commit</code>, <code>git push</code>，不過隨著使用的時間或是合作人數增加時，一定會需要一些比較進階一點點的操作，這篇文章便想要帶大家認識一下 Stash, Reflog, cherry-pick, Rebase，除此之外也解釋了各種常見的 Merge 策略</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 114 期 - 希望我的年終也有 40 個月</title>
      <link href="/2022/01/04/114-i-hope-my-year-end-bonus-have-fourty-months/"/>
      <url>/2022/01/04/114-i-hope-my-year-end-bonus-have-fourty-months/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="JavaScript-你常用的-Array-Methods-是我常用的嗎？"><a href="#JavaScript-你常用的-Array-Methods-是我常用的嗎？" class="headerlink" title="JavaScript | 你常用的 Array Methods 是我常用的嗎？"></a><a href="https://medium.com/starbugs/javascript-%E4%BD%A0%E5%B8%B8%E7%94%A8%E7%9A%84-array-methods-%E6%98%AF%E6%88%91%E5%B8%B8%E7%94%A8%E7%9A%84%E5%97%8E-6fe235953951" target="_blank" rel="noopener">JavaScript | 你常用的 Array Methods 是我常用的嗎？</a></h3><p>Hi！大家好，我是神 Q 超人！在整理 StarBugs 推薦文章的時候，常常會看到許多人分享他們覺得常用且重要的 array methods。於是我就好奇了，那麼多人常用的 array methods 都會是相同的嗎？為了滿足這個好奇心，我就一口氣找了十篇介紹 array methods 的文章，並從這十篇文章中統計出五個，這些開發者覺得最讚的 array methods！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="Defensive-CSS"><a href="#Defensive-CSS" class="headerlink" title="Defensive CSS"></a><a href="https://ishadeed.com/article/defensive-css/" target="_blank" rel="noopener">Defensive CSS</a></h3><p>作者舉了非常多的例子舉出可能會讓你的畫面跑版的 CSS 程式碼片段，並且告訴你該如何在該情境下建立防衛機制，減少使用者在使用時出現了意料外的問題。</p><!-- summary --><h3 id="How-JavaScript-Works-behind-the-scenes"><a href="#How-JavaScript-Works-behind-the-scenes" class="headerlink" title="How JavaScript Works behind the scenes?"></a><a href="https://blog.devgenius.io/how-javascript-works-behind-the-scenes-88c546173f32" target="_blank" rel="noopener">How JavaScript Works behind the scenes?</a></h3><p>這篇文章並沒有講解到許多太深的內容，但是對於 JavaScript 背後的運行原理講解的很全面易懂，很適合想要更了解 JavaScript，但又害怕看到許多專有名詞的初學者入門。</p><h3 id="A-Smarter-JavaScript-Mapper-array-flatMap"><a href="#A-Smarter-JavaScript-Mapper-array-flatMap" class="headerlink" title="A Smarter JavaScript Mapper: array.flatMap()"></a><a href="https://dmitripavlutin.com/javascript-array-flatmap/" target="_blank" rel="noopener">A Smarter JavaScript Mapper: array.flatMap()</a></h3><p>如果看完本週的專欄，還對 JavaScript 的 array methods 意猶未盡，就繼續來看看這個也很方便的 <code>Array.flatMap</code>，<code>Array.flatMap</code> 可以讓你產生新 array 的同時，再過濾掉原 array 的某些元素。</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><!-- summary --><h3 id="In-depth-explanation-of-state-and-props-update-in-React"><a href="#In-depth-explanation-of-state-and-props-update-in-React" class="headerlink" title="In-depth explanation of state and props update in React"></a><a href="https://indepth.dev/posts/1009/in-depth-explanation-of-state-and-props-update-in-react" target="_blank" rel="noopener">In-depth explanation of state and props update in React</a></h3><p>React 的更新渲染機制一直以來都是前端工程師必探討的話題，這篇文章深入討論 React 是如何利用 State &amp; Props 的機制來更新整個元件的，有興趣的讀者不妨可以參考看看。</p><!-- summary --><h3 id="Inside-Fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-React"><a href="#Inside-Fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-React" class="headerlink" title="Inside Fiber: in-depth overview of the new reconciliation algorithm in React"></a><a href="https://indepth.dev/posts/1008/inside-fiber-in-depth-overview-of-the-new-reconciliation-algorithm-in-react" target="_blank" rel="noopener">Inside Fiber: in-depth overview of the new reconciliation algorithm in React</a></h3><p>React fiber 可以說是 React 16 一個相當重要的底層架構，在 fiber 的架構下讓網頁的 re-render 機制可以越來越優化，有興趣的讀者可以參考這篇文章，裡面深入了介紹 React fiber 架構下是如何優化以前的 reconciliation algorithm。</p><!-- summary --><h3 id="SSG-vs-SSR-in-Next-js"><a href="#SSG-vs-SSR-in-Next-js" class="headerlink" title="SSG vs. SSR in Next.js"></a><a href="https://blog.logrocket.com/ssg-vs-ssr-in-next-js/" target="_blank" rel="noopener">SSG vs. SSR in Next.js</a></h3><p>隨著網頁越來越複雜，不同的 render 方式也成為了前端工程師必學的過程，從早期的 CSR 到後來的 SSR 甚至是最新的 SSG 都是前端工程師必學的，而 SSG 與 SSR 可以說是類似的概念只是在 server 端做了一些不同的動作，究竟這兩套渲染機制在 Next.js 下會有什麼不同的作用，有興趣的讀者不妨可以參考這個文章。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="11-Things-I-Learned-After-Becoming-a-Coding-Interviewer"><a href="#11-Things-I-Learned-After-Becoming-a-Coding-Interviewer" class="headerlink" title="11 Things I Learned After Becoming a Coding Interviewer"></a><a href="https://betterprogramming.pub/11-things-i-learned-after-becoming-a-coding-interviewer-b951370ebda7" target="_blank" rel="noopener">11 Things I Learned After Becoming a Coding Interviewer</a></h3><p>大家這次的年終有超過 40 個月嗎？要是沒有的話是不是要準備看新的工作機會啦 (大誤)，身為一個工程師擔任應徵者的機會通常比面試官來得多，作者在他將近七年的職涯中參加過 40 次的面試，他通常會因為感到緊張，尷尬和沒自信，而在 Coding 的面試階段失敗，他總是覺得面試官就像神一樣，隨時要對他宣判什麼，而最近他的職位變得相對資深，所以開始需要規律的當面試官，所以他想要分享 11 件事情給準備參加面試的人</p><ol><li>面試官並不會將履歷鉅細彌遺地看過，過往的工作經驗也不代表目前的 Coding 技巧有多強，所以不用花太多時間去準備自我介紹的部分</li><li>面試官可能也跟應徵者一樣緊張，因為兩者都在做一件不是日常工作會做的事情，面試官也會怕被應徵者問倒</li><li>多說一點話可以幫助自己，畢竟一面試就馬上開始寫程式有點怪，總是需要暖機一下，例如利用前面提到沒那麼重要的自我介紹，然後再真的寫程式時，可以多跟面試官確定問題，解釋為什麼要這樣寫…等，讓彼此融入在面試的過程中，這將會使面試官留下較好的印象</li><li>寫程式的技能不是唯一的衡量標準，溝通能力是一個更重要的決定因素，所謂的溝通不只是在於你說了什麼，你如何去表達也很重要，例如發音，語速，面部表情…等</li><li>尋求協助並不丟臉，假如你在寫程式的過程中卡關了，可以適時地尋求協助，不要花太多時間讓自己一個人卡在某個點，因為面試官通常也都很樂意給出一些提示</li><li>一個問題並總是會有完美的答案，其實有時候面試官更想要看到應徵者，講答案逐步組織起來的流程，雖然這筆直接講出某個直接的答案要花時間</li><li>記得要選擇自己熟悉的語言，而不是工作要求裡面的，因為在面試的時候會特別容易被看破手腳，自己熟稔的語言比較不會出包</li><li>通常使用 Google 是可以被允許的，雖然一開始不會明說，但假如應徵者卡關覺得有需要的話，可以對面試官提出請求</li><li>當面試官再打字或是看別的地方時，可能是在做筆記或是看面試小抄，不一定是一邊工作一邊參加面試</li><li>當面試官不說話時，並不表示給應徵者吃閉門羹，因為有時候閒聊會讓應徵者受到影響，面試工程師職務時，還是會以技術相關的內容為衡量依據，其他的不用多想</li><li>面試官比應徵者更希望你可以獲得這份工作，因為招募是很昂貴的流程，因為招募一個人要花很多的時間，假如面試沒有通過就整個要再重來一次</li></ol><!-- summary --><h3 id="GitHub’s-top-10-blog-posts-of-2021"><a href="#GitHub’s-top-10-blog-posts-of-2021" class="headerlink" title="GitHub’s top 10 blog posts of 2021"></a><a href="https://github.blog/2021-12-28-githubs-top-10-blog-posts-of-2021/" target="_blank" rel="noopener">GitHub’s top 10 blog posts of 2021</a></h3><p>在跨入到 2022 之後，好像沒有看到太多 2021 的技術回顧文章，最近好像只有看到這篇 GitHub 回顧自己在 2021 最熱門的十大技術文章，前三名分別是 <a href="https://github.blog/2021-08-11-githubs-engineering-team-moved-codespaces/" target="_blank" rel="noopener">GitHub’s Engineering Team has moved to Codespaces</a>，<a href="https://github.blog/2021-04-05-behind-githubs-new-authentication-token-formats/" target="_blank" rel="noopener">Behind GitHub’s new authentication token format</a> 和 <a href="https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/" target="_blank" rel="noopener">Introducing GitHub Copilot: your AI pair programmer</a>，這樣的排名結果會讓你覺得出乎意料之外嗎？對於其他十大技術文章有興趣的人可以參閱內文</p><!-- summary --><h3 id="Spotify-System-Architecture"><a href="#Spotify-System-Architecture" class="headerlink" title="Spotify System Architecture"></a><a href="https://medium.com/interviewnoodle/spotify-system-architecture-6bb418db6084" target="_blank" rel="noopener">Spotify System Architecture</a></h3><p>目前市面上有很多的音樂串流服務，例如 Spotify, Apple Music, Pandora, Soundcloud 和 Tidal，而今天作者想要跟大家解釋更多有關於  Spotify 這個音樂串流服務，首先從他的系統功能需求開始分析起，例如可以下載歌曲，發現音樂，Spotify Connect…等，接著預估他的 Scale 有多大，例如有多少使用者，歌曲的串流品質需要的頻寬，可以下載多少首歌，支援多少種語言…等，然後根據這些要點將系統架構給勾勒出來，並且逐步分析每一個元件使用的技術，函式庫與演算法…等，讓讀者可以跟著文章一步一步去做一次完整的系統架分析</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 113 期 - 是不是又差不多要來打年度回顧了</title>
      <link href="/2021/12/28/113-it-is-the-time-to-write-down-the-annual-review/"/>
      <url>/2021/12/28/113-it-is-the-time-to-write-down-the-annual-review/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="SWR-隱藏版刷子：useSWRInfinite"><a href="#SWR-隱藏版刷子：useSWRInfinite" class="headerlink" title="SWR 隱藏版刷子：useSWRInfinite"></a><a href="https://medium.com/starbugs/swr-%E9%9A%B1%E8%97%8F%E7%89%88%E5%88%B7%E5%AD%90-useswrinfinite-e1f672af47e1" target="_blank" rel="noopener">SWR 隱藏版刷子：useSWRInfinite</a></h3><p>Hello！大家好我是 Andy，今天要來介紹 SWR 中的一個隱藏版的 hook，SWR 是一套相當好用的 data fetching library，然而 SWR 還有一套隱藏版 hook 叫 useSWRInfinite，究竟這個 hook 可以幫助我們做哪些事情呢，就讓我們繼續看下去吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="Tailwind-CSS-v3-0"><a href="#Tailwind-CSS-v3-0" class="headerlink" title="Tailwind CSS v3.0"></a><a href="https://tailwindcss.com/blog/tailwindcss-v3" target="_blank" rel="noopener">Tailwind CSS v3.0</a></h3><p>Tailwind CSS 在十二月的時候進入到 3.0 囉！除了 Colored box shadows、Scroll snap API 和 Multi-column layout 外，快來看看還有哪些酷東西可以使用！</p><!-- summary --><h3 id="Writing-Clean-Code-in-JavaScript"><a href="#Writing-Clean-Code-in-JavaScript" class="headerlink" title="Writing Clean Code in JavaScript"></a><a href="https://blog.bitsrc.io/writing-clean-code-in-javascript-dd584bbe1874" target="_blank" rel="noopener">Writing Clean Code in JavaScript</a></h3><p>有些文章只會告訴你該怎麼寫，但沒有告訴你為什麼，但這作者在解釋 arrow function 和 regular function 時，雖然推薦 arrow function，但也提出了你還是該了解它們的差別，並且在適當的時機使用 regular function。</p><h3 id="Amazing！！CSS-也能实现烟雾效果？"><a href="#Amazing！！CSS-也能实现烟雾效果？" class="headerlink" title="Amazing！！CSS 也能实现烟雾效果？"></a><a href="https://juejin.cn/post/7046573911957307405" target="_blank" rel="noopener">Amazing！！CSS 也能实现烟雾效果？</a></h3><p>在 CSS 裡，只要透過 <code>text-shadow</code>、<code>opacity</code> 和 <code>transform</code> 的搭配，就可以輕鬆製作出厲害的煙霧效果！</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><!-- summary --><h3 id="From-Node-to-Ruby-on-Rails-D-U-N-K"><a href="#From-Node-to-Ruby-on-Rails-D-U-N-K" class="headerlink" title="From Node to Ruby on Rails | D U N K"></a><a href="https://nikodunk.com/a-node-js-developer-discovers-rails/" target="_blank" rel="noopener">From Node to Ruby on Rails | D U N K</a></h3><p>從 Node.js Express 框架到 Rails 的心路歷程。可以更專注在商業邏輯，花更少的力氣組織專案。</p><!-- summary --><h3 id="Ruby-3-1-0-Released"><a href="#Ruby-3-1-0-Released" class="headerlink" title="Ruby 3.1.0 Released"></a><a href="https://www.ruby-lang.org/en/news/2021/12/25/ruby-3-1-0-released/" target="_blank" rel="noopener">Ruby 3.1.0 Released</a></h3><p>Ruby 3.1 發佈了，這次有台灣人的 Code 進到了 Ruby 之中，真是可喜可賀！</p><h3 id="Benchmarking-Ruby-2-5-to-3-1"><a href="#Benchmarking-Ruby-2-5-to-3-1" class="headerlink" title="Benchmarking Ruby 2.5 to 3.1"></a><a href="https://gettalong.org/blog/2021/benchmarking-rubies.html" target="_blank" rel="noopener">Benchmarking Ruby 2.5 to 3.1</a></h3><p>從 Ruby 2.5 到 Ruby 3.1 的效能增進，用 Benchmark 來查看。從各個角度來看，Ruby 3.1 都增加了不少的效能，而不只是增進了 CPU 的處理能力。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="SLICK-Adopting-SLOs-for-improved-reliability"><a href="#SLICK-Adopting-SLOs-for-improved-reliability" class="headerlink" title="SLICK: Adopting SLOs for improved reliability"></a><a href="https://engineering.fb.com/2021/12/13/production-engineering/slick/" target="_blank" rel="noopener">SLICK: Adopting SLOs for improved reliability</a></h3><p>相信大家或多或少應該都有聽過 SLO (service-level objectives) 與 SLI (service-level indicator)，Meta (Facebook) 為了能夠中心化管理與定義 SLI 與 SLO，他們建立一個叫做 SLICK 的工具，讓大家可以更簡單查詢與理解所有服務的可靠性；在使用 SLICK 之前，SLO 或是其他有關服務效能的 Metrics 通常儲存在客製化的儀表板，文件或是其他的工具內，假如你想要衡量一個團隊的 SLO，可能需要花上一個小時去搜尋，或是找人問東問西，而且 Meta 以前儲存 Metric 的系統並沒有保留太久的資料，導致幾乎不可能去分析週期比較長的 SLO，但自從使用 SLICK 之後可以達到四個目標：</p><ol><li>使用統一的方式對所有的服務定義 SLO</li><li>擁有精準度為每分鐘且保存兩年的 Metric 資料</li><li>對於 SLI/SLO 的 Metric 可以有一套標準的視覺化與搜尋方式</li><li>提供週期性的可靠性報告給內部成員，讓團隊可以用來做可靠性檢查</li></ol><p>更多詳細做法可以參考內文，看他還有提供一些 UI 截圖出來，比較可惜的是看起來並不是開源專案</p><!-- summary --><h3 id="GitHub-may-replace-DockerHub"><a href="#GitHub-may-replace-DockerHub" class="headerlink" title="GitHub may replace DockerHub"></a><a href="https://levelup.gitconnected.com/github-may-replace-dockerhub-a5da5e547f01" target="_blank" rel="noopener">GitHub may replace DockerHub</a></h3><p>過去數年來 Docker 的崛起，讓大家一度以為 Linux Container 就叫做 Docker，因為他讓大家很輕易地就可以發布 Container 到免費的 DockerHub，不過作者認為將 DockerHub 視為 Container Image 唯一 Repository 的時代已經過去了，他覺得 GitHub 將會把這個第一名的寶座搶到手，因為 GitHub 目前算是開源專案的不二選擇，所有的開發者幾乎被他握在手中，而且他持續不斷地在加強 CI/CD 功能，改善 Issues, Documentation 還有架站功能，除此之外，近期對於 Package 儲存功能也越來越完整…等，因此他覺得 DockerHub 最後將會被 GitHub 所取代，大家也是這樣覺得嗎？</p><h3 id="Web-1-0-Web-2-0-amp-Web-3-0-Explained"><a href="#Web-1-0-Web-2-0-amp-Web-3-0-Explained" class="headerlink" title="Web 1.0, Web 2.0 &amp; Web 3.0 Explained"></a><a href="https://dev.to/narottam04/web-10-web-20-web-30-explained-591n" target="_blank" rel="noopener">Web 1.0, Web 2.0 &amp; Web 3.0 Explained</a></h3><p>最近 Web 3.0 這個詞彙突然很熱門！他究竟是什麼呢？這篇文章從 Web 1.0 Beta -&gt; Web 1.0 -&gt; Web 2.0 的定義開始解釋起，並且提出 Web 2.0 的缺點，也就是所有的使用者資料都集中在大公司手上，例如 Google, Facebook，他們靠著販賣大家的資料來賺大錢，而 Web 3.0 主要就是想要建立一個去中心化又安全的網路環境，讓人類可以使用它安全的交換金錢與資訊，而不再需要中介者或是大型科技公司，所以資料不再像 Web 2.0 集中儲存在單一資料庫內，而是像運行在區塊鏈內，Peer to Peer 的節點內的感覺，有人甚至預測在 Web 3.0 的架構下，每個人都會是內容擁有者，公司將會變成由去中心化的團體所運行，又稱為 DAO (Decentralized Autonomous Organization)，而不再需要 CEO 或是任何公司的高層管理組織，而且每個人都是匿名存在於 Web 3.0 中</p><p>有人認為 Web 3.0 只是加密貨幣交易者建立的騙局，然而也有人相信他是可能實現的想法，不過和 Blockchian 一樣，Web 3.0 都還在很早期的階段，所以未來會發展成什麼樣子還很難說…目前也還有很多未解決的問題，因此還有很長的一段路要走，更多參考資訊請參考文章內容</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 112 期 - 聖誕快樂！</title>
      <link href="/2021/12/25/112-multi-tenancy-multi-cluster-k8s/"/>
      <url>/2021/12/25/112-multi-tenancy-multi-cluster-k8s/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Multi-Tenancy-Kubernetes-Cluster-Part-2-小孩子才做選擇？我全都要！"><a href="#Multi-Tenancy-Kubernetes-Cluster-Part-2-小孩子才做選擇？我全都要！" class="headerlink" title="Multi-Tenancy Kubernetes Cluster Part 2: 小孩子才做選擇？我全都要！"></a><a href="https://medium.com/starbugs/multi-tenancy-kubernetes-cluster-part-2-%E4%B8%80%E5%80%8B%E5%BC%B7%E8%80%85-%E6%98%AF%E4%B8%8D%E6%9C%83%E5%90%91%E5%91%BD%E9%81%8B%E4%BD%8E%E9%A0%AD%E7%9A%84-d696ec991b63" target="_blank" rel="noopener">Multi-Tenancy Kubernetes Cluster Part 2: 小孩子才做選擇？我全都要！</a></h3><p>在上一篇 <a href="https://medium.com/starbugs/multi-tenancy-kubernetes-cluster-part-1-%E8%AA%8D%E5%91%BD%E5%90%A7-%E6%9C%89%E4%B8%80%E5%A5%BD-%E5%B0%B1%E6%B2%92%E5%85%A9%E5%A5%BD-3eddb75eeb4c" target="_blank" rel="noopener">Multi-Tenancy Kubernetes Cluster Part 1: 認命吧！有一好，就沒兩好！</a> 提到目前 Hard Multi-Tenancy 在 Kubernetes 並沒有一個成熟的方案可供選擇，而 Single-Tenancy 又不切實際，因為這樣會造成需要管理的 Cluster 大暴增，那該怎麼做比較好呢？結論就是…把 Enhanced Soft Multi-Tenancy 跟 Multi-Cluster 做結合！所以透過此週的專欄文章將自己的經驗分享出來</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="My-Custom-CSS-Reset"><a href="#My-Custom-CSS-Reset" class="headerlink" title="My Custom CSS Reset"></a><a href="https://www.joshwcomeau.com/css/custom-css-reset/#digit-box-sizing-model" target="_blank" rel="noopener">My Custom CSS Reset</a></h3><p>重置 CSS 是為了維持各個瀏覽器的一致性，並且撤銷所有的預設樣式。但作者試著重新定義了自己的重置 CSS，並且深入理解各個規則的作用，以及使用的原因。</p><!-- summary --><h3 id="Javascript-Worst-Practice"><a href="#Javascript-Worst-Practice" class="headerlink" title="Javascript Worst Practice"></a><a href="https://blog.bitsrc.io/javascript-worst-practices-dc78e19d6f12" target="_blank" rel="noopener">Javascript Worst Practice</a></h3><p>文章裡提到一些在 JavaScript 裡不是很好的幾個寫法，雖然大部分的寫法對於結果都不會有影響，但就因為這樣常常會讓開發者無法意識到這是錯誤的以及感到困惑。</p><h3 id="5-Upcoming-Web-Design-Trends-for-2022"><a href="#5-Upcoming-Web-Design-Trends-for-2022" class="headerlink" title="5 Upcoming Web Design Trends for 2022"></a><a href="https://www.sitepoint.com/web-design-trends-2022/" target="_blank" rel="noopener">5 Upcoming Web Design Trends for 2022</a></h3><p>UI 的設計一直是一大的學問，文中舉出五種截然不同的網頁設計風格，並講解這些風格是如何吸引到你的眼球。</p><!-- summary --><h3 id="【React-Conf-2021】React-without-memo-篇章筆記"><a href="#【React-Conf-2021】React-without-memo-篇章筆記" class="headerlink" title="【React Conf 2021】React without memo 篇章筆記"></a><a href="https://juejin.cn/post/7042232224313245709" target="_blank" rel="noopener">【React Conf 2021】React without memo 篇章筆記</a></h3><p>在最新的 React Conf 中提出了一個相當創新的概念，以往我們會利用 <code>useMemo</code>、<code>useCallback</code>、<code>memo</code> 等方法來進行效能優化，但 React 要開始嘗試幫開發者自動做好這件事，以後不需要再引用相當多的 dependencies 了，利用一個創新的 <code>React Forget</code> 就可以完成這件事了。</p><!-- summary --><h3 id="從監視攝影機理解-Log4j-跟-Log4Shell-漏洞"><a href="#從監視攝影機理解-Log4j-跟-Log4Shell-漏洞" class="headerlink" title="從監視攝影機理解 Log4j 跟 Log4Shell 漏洞"></a><a href="https://tech-blog.cymetrics.io/posts/huli/what-is-log4j-and-log4shell/" target="_blank" rel="noopener">從監視攝影機理解 Log4j 跟 Log4Shell 漏洞</a></h3><p>Log4j 的問題最近鬧得沸沸揚揚的，究竟 Log4j 是如何影響整個資訊安全，一起透過 Huli 大大的文章來一探究竟吧！</p><h3 id="How-to-Create-a-React-Typescript-Monorepo-with-Git-Submodules"><a href="#How-to-Create-a-React-Typescript-Monorepo-with-Git-Submodules" class="headerlink" title="How to Create a React Typescript Monorepo with Git Submodules"></a><a href="https://dev.to/alexeagleson/how-to-create-a-node-and-react-monorepo-with-git-submodules-2g83" target="_blank" rel="noopener">How to Create a React Typescript Monorepo with Git Submodules</a></h3><p>monorepo 在最近的前端生態可以說是越來越熱門，而 monorepo 的實現方式其實也隨著技術的成熟有了不少種實作方式，這篇文章作者利用了 git submodules 並搭配 React typescript 來達到這件事，有興趣的讀者不妨可以收藏起來閱讀喔！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="Kubernetes-in-Kubernetes-and-the-WEDOS-PXE-bootable-server-farm"><a href="#Kubernetes-in-Kubernetes-and-the-WEDOS-PXE-bootable-server-farm" class="headerlink" title="Kubernetes-in-Kubernetes and the WEDOS PXE bootable server farm"></a><a href="https://kubernetes.io/blog/2021/12/22/kubernetes-in-kubernetes-and-pxe-bootable-server-farm/" target="_blank" rel="noopener">Kubernetes-in-Kubernetes and the WEDOS PXE bootable server farm</a></h3><p>或許有的人正在想怎麼把應用服務搬遷進到 Kubernetes 中，但你知道現在有個專案叫做 Kubernetes-in-Kubernetes，直接把 Kubernetes 也搬遷到 Kubernetes 中 (好繞口令)，作者會有這樣的構想是因為藉由使用 K8s 的話，其實不只可以像寫程式語言一樣宣告你的應用服務，也可以像寫程式一樣去定義整個 Infrastructure，所以作者就想利用這個特性，將 Multi-Cluster K8s 運行在一個大的 Kubernetes Cluster 中，有興趣了解怎麼做到的人可以參考內文，想要試試看的人也可以透過 Helm 跟幾個簡單的指令部署看看</p><!-- summary --><h3 id="A-brief-history-of-code-search-at-GitHub"><a href="#A-brief-history-of-code-search-at-GitHub" class="headerlink" title="A brief history of code search at GitHub"></a><a href="https://github.blog/2021-12-15-a-brief-history-of-code-search-at-github/" target="_blank" rel="noopener">A brief history of code search at GitHub</a></h3><p>GitHub 算是工程師平日生活不可或缺的網站之一，而他們最近宣布新的程式碼搜尋功能用以提升開發者的工作效率，例如更容易找到需要的結果，而且可以再搜尋時使用正規表示式，在搜尋時透過 <code>org:</code> 或是 <code>repo:</code> 來限縮限縮搜尋的範圍，或是使用邏輯運算元如 OR, NOT 來做搜尋…等功能，有興趣的人可到<a href="https://cs.github.com/" target="_blank" rel="noopener">封測網站註冊</a>；而在新功能推出的同時，也撰寫了這篇文章分享 GitHub 搜尋功能的歷史故事，讓大家知道他們想要達成的目標與進展過程～</p><!-- summary --><h3 id="Improving-platform-efficiency-reliability-and-performance-in-one-week-with-Linkerd"><a href="#Improving-platform-efficiency-reliability-and-performance-in-one-week-with-Linkerd" class="headerlink" title="Improving platform efficiency, reliability, and performance in one week with Linkerd"></a><a href="https://www.cncf.io/blog/2021/12/13/improving-platform-efficiency-reliability-and-performance-in-one-week-with-linkerd/" target="_blank" rel="noopener">Improving platform efficiency, reliability, and performance in one week with Linkerd</a></h3><p>Salt Security 是一間提供 API 防護功能的公司，所以他們的服務不能夠容忍任何的 Down Time, 因為顧客不會有停止遭受攻擊的時候，他們一開始將微服務運行於 Kubernets Cluster 中，而隨著規模越來越大，他們開始想要遷移到使用 gRPC 的架構，但是遇到 K8s 沒有支援 Load Balancing 的問題，所以發現了 Linkerd 這個專案，因為他不僅可以讓 gRPC 具備 Load Balancing 的功能之外，而且也提高了整個平台的效率，可靠性和整體效能，文章中對於他們的每一個技術方案選擇做出詳細的解釋，有遇到一樣問題的人，或是徬徨要不要導入 Linkerd 的人可以參考看看這篇文章</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 111 期 - 我現在可以說我是史上最佳射手了</title>
      <link href="/2021/12/15/111-the-best-shooter/"/>
      <url>/2021/12/15/111-the-best-shooter/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="「星巴哥文章推薦」開發全記錄-—-從-Hexo-到-11ty"><a href="#「星巴哥文章推薦」開發全記錄-—-從-Hexo-到-11ty" class="headerlink" title="「星巴哥文章推薦」開發全記錄 — 從 Hexo 到 11ty"></a><a href="https://medium.com/starbugs/%E5%BE%9E-hexo-%E5%88%B0-11ty-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99%E9%96%8B%E7%99%BC%E5%85%A8%E8%A8%98%E9%8C%84-5349c8b7e55" target="_blank" rel="noopener">「星巴哥文章推薦」開發全記錄 — 從 Hexo 到 11ty</a></h3><p>最近嘗試使用 11ty 也就是 eleventy 來架設共筆部落格。所以做了一個小 Side Project 來嘗試一下 11ty 開發共筆部落格。在開始之前，先說明一下星巴哥文章推薦的核心精神。讓更多人可以分享看到的好文章，看到的同時，也可以宣傳一下自己的 Blog。並且在 Github 上留下貢獻的記錄。除了對他人有幫助外，對自己，對社群都有幫助。這是星巴哥文章推薦的出發點。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="A-Complete-Guide-To-Incremental-Static-Regeneration-ISR-With-Next-js"><a href="#A-Complete-Guide-To-Incremental-Static-Regeneration-ISR-With-Next-js" class="headerlink" title="A Complete Guide To Incremental Static Regeneration (ISR) With Next.js"></a><a href="https://www.smashingmagazine.com/2021/04/incremental-static-regeneration-nextjs/" target="_blank" rel="noopener">A Complete Guide To Incremental Static Regeneration (ISR) With Next.js</a></h3><p>在 Next.js 中有一個相當重要的設定叫：Incremental Static Regeneration (ISR)，拜 ISR 所賜假如只有該頁面需要更新內容，可以只重 build 該頁面即可，不需要重 build 整個專案，對於 SSG 渲染方式來說可說是相當好用的一把利器，想要了解 Next.js ISR 的完整介紹，不妨可以參考這篇文章。</p><!-- summary --><h3 id="Keeping-things-fresh-with-stale-while-revalidate"><a href="#Keeping-things-fresh-with-stale-while-revalidate" class="headerlink" title="Keeping things fresh with stale-while-revalidate"></a><a href="https://web.dev/stale-while-revalidate/" target="_blank" rel="noopener">Keeping things fresh with stale-while-revalidate</a></h3><p>stale-while-revalidate (SWR) 可以說是相當重要的一個 cache 處理機制，有了這套機制可以讓使用者在面對一個內容確定過期的頁面不會在一開始進入過長的等待，瀏覽器會先從 cache 返回之前的內容，並同時更新要顯示的正確內容，待下次使用者重新進入此頁面時就會是最新的內容了，有興趣了解 SWR 機制的可以參考看看這篇文章。</p><h3 id="Learnings-from-React-Conf-2021"><a href="#Learnings-from-React-Conf-2021" class="headerlink" title="Learnings from React Conf 2021"></a><a href="https://dev.to/alexeagleson/learnings-from-react-conf-2021-17lg" target="_blank" rel="noopener">Learnings from React Conf 2021</a></h3><p>React 每年都會有一場盛大的 conference，這次的 conference 又介紹了相當多好用的工具，有興趣的讀者可以參考別人整理好的筆記。(所以我說那個 React 18 什麼時候才要正式上線呢XD</p><h3 id="想知道一个20k级别前端在项目中是怎么使用LocalStorage的吗？"><a href="#想知道一个20k级别前端在项目中是怎么使用LocalStorage的吗？" class="headerlink" title="想知道一个20k级别前端在项目中是怎么使用LocalStorage的吗？"></a><a href="https://juejin.cn/post/7033749571939336228" target="_blank" rel="noopener">想知道一个20k级别前端在项目中是怎么使用LocalStorage的吗？</a></h3><p>文章中解釋了 LocalStorage 的用法，並提出在正常情況下使用 LocalStorage 會出現哪些問題，以及如何更好的管理存在 LocalStorage 中的資料，</p><!-- summary --><h3 id="Refactoring-If-Else-Statement-In-JS"><a href="#Refactoring-If-Else-Statement-In-JS" class="headerlink" title="Refactoring If..Else Statement In JS"></a><a href="https://towardsdev.com/refactoring-nested-loops-in-js-e6d8a9db2db3" target="_blank" rel="noopener">Refactoring If..Else Statement In JS</a></h3><p>作者提出用 Ternary operator、Switch Case、Short Circuit、Guard clauses 和 Function delegation 改善了 if…else 的寫法，可以思考哪種方式更適合目前的情境。</p><h3 id="7-useful-HTML-attributes-you-may-not-know"><a href="#7-useful-HTML-attributes-you-may-not-know" class="headerlink" title="7 useful HTML attributes you may not know"></a><a href="https://dev.to/simonpaix/7-useful-html-attributes-you-may-not-know-7mn" target="_blank" rel="noopener">7 useful HTML attributes you may not know</a></h3><p>所有的屬性都滿少見，但是在特定用途上又非常實用，可以稍微掃視了解一下。還有第一個留言也提到可以用 designMode 使整個網站變得可修改，方便做一些初期設計工作。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="Terraform-1-1-Improves-Refactoring-and-the-Cloud-CLI-Experience"><a href="#Terraform-1-1-Improves-Refactoring-and-the-Cloud-CLI-Experience" class="headerlink" title="Terraform 1.1 Improves Refactoring and the Cloud CLI Experience"></a><a href="https://www.hashicorp.com/blog/terraform-1-1-improves-refactoring-and-the-cloud-cli-experience" target="_blank" rel="noopener">Terraform 1.1 Improves Refactoring and the Cloud CLI Experience</a></h3><p>HashiCorp 這幾天最大的<a href="https://seekingalpha.com/article/4474505-hashicorp-could-be-the-worst-ipo-of-the-year" target="_blank" rel="noopener">新聞</a>應該就是在 Nasdaq IPO 了！不過我們還是回歸技術面來看一下 Terraform 剛推出的 1.1 版有哪一些值得關注的內容:</p><ul><li><p>Terraform 使用久了之後，難免會遇到想要 ReFactoring 的狀況，例如把單一個 Module 拆成多個，這次在 1.1 推出了 <code>moved</code> statememt，讓使用者透過 plan 來預覽跟驗證 Refactoring 的動作，有興趣的人可以參考<a href="https://learn.hashicorp.com/tutorials/terraform/move-config" target="_blank" rel="noopener">官方教學文章</a></p></li><li><p>改善在 Terraform Cloud 與 Enterprise 中的 CLI 體驗</p></li></ul><!-- summary --><h3 id="Karpenter-vs-Cluster-Autoscaler"><a href="#Karpenter-vs-Cluster-Autoscaler" class="headerlink" title="Karpenter vs Cluster Autoscaler"></a><a href="https://towardsdev.com/karpenter-vs-cluster-autoscaler-dd877b91629b" target="_blank" rel="noopener">Karpenter vs Cluster Autoscaler</a></h3><p>上個月底 AWS re:Invent 推出了另外一套叫做 <a href="https://github.com/aws/karpenter" target="_blank" rel="noopener">Karpenter</a> 的 Kubernetes Cluster Autoscaler，而他跟目前大家使用的開源 <a href="https://github.com/kubernetes/autoscaler" target="_blank" rel="noopener">Cluster Autoscaler</a> 有什麼不一樣呢？就以 EKS 這個 Kubernetes 來舉例說明，它分成 Control Plane 和 Node Group，既有的開源 Cluster Autoscaler 會去偵測是否有 Pod 處於 Pending 的狀況，然後去叫控制 Node Group 的 AWS Auto-Scaling Group 根據需求增加多少台機器</p><p>而 Karpenter 可以根據 Pending Pod 所需要的資源跳過 Node Group，直接開適合的 EC2 出來，所以其實在時間跟資源的應用上都可以更有效率，例如突然有個需要使用超級多 Memory 的 Pod 處於 Pending 的狀態，在 AWS Auto-Scaling Group 裡面所定義的機器型別根本就都不適合此 Pod 運行，Karpenter 就可以直接協助開啟一台符合此 Pod 使用的 EC2 然後直接把 Pod 指派到這台新開的 EC2 上，所以對於 Kubernets Worker Node 的擴展性來說強大很多</p><h3 id="Using-ChatOps-to-help-Actions-on-call-engineers"><a href="#Using-ChatOps-to-help-Actions-on-call-engineers" class="headerlink" title="Using ChatOps to help Actions on-call engineers"></a><a href="https://github.blog/2021-12-01-using-chatops-to-help-actions-on-call-engineers/" target="_blank" rel="noopener">Using ChatOps to help Actions on-call engineers</a></h3><p>在 GitHub 內常使用 ChatOps 來幫助合作更順利，使用的 Chatbot 為 Hubot，運行 ChatOps Command 很像是在 Terminal 運行自己的指令一樣，但不同之初在於所有的團隊成員都可以看到運行的成果，這讓合作時的溝通是即時的，特別是在處理 Incident 時，可以更快的恢復服務並且找出原因；而目前在 GitHub 內讓應用服務保持健康不再是某個神秘團隊的責任，而是落在建立該服務的工程師手上，因此除了幫 GitHub 建立力強大的功能之外，在 GitHub 的工程師也會貢獻他們時間在維護服務的健康上，此文便是講述前幾天一個新的 Actions on-call engineer: Mona 她處理 Incident 的經過，從其中可以看出 ChatOps 如何協助她快速且有效的處理事件</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 110 期 - 恭喜 StarBugs 得到 iThome 鐵人賽最佳團隊獎啦！</title>
      <link href="/2021/12/07/110-starbugs-is-awarded-greatest-group-of-it-home-iron-man/"/>
      <url>/2021/12/07/110-starbugs-is-awarded-greatest-group-of-it-home-iron-man/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="開源專案讀起來-關於圈圈叉叉的雅量"><a href="#開源專案讀起來-關於圈圈叉叉的雅量" class="headerlink" title="開源專案讀起來 | 關於圈圈叉叉的雅量"></a><a href="https://medium.com/starbugs/%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%E8%AE%80%E8%B5%B7%E4%BE%86-%E9%97%9C%E6%96%BC%E5%9C%88%E5%9C%88%E5%8F%89%E5%8F%89%E7%9A%84%E9%9B%85%E9%87%8F-4587d130d326" target="_blank" rel="noopener">開源專案讀起來 | 關於圈圈叉叉的雅量</a></h3><p>Hi！大家好，我是神 Q 超人！因為 StarBugs 的關係，所以平常沒事我就會讀一些有關於程式的技術文章，然後再把那些投稿到每週週刊的推薦文章中，也順便看看自己有沒有感興趣想要學習的東西。然後就在某天的下午我突然意識到圈圈叉叉也太多了吧！</p><p>沒錯，就是那個童年遊戲圈圈叉叉，於是我就好奇了，判斷圈圈叉叉的邏輯那麼單純簡單，那這些近 5 萬人寫出來的圈圈叉叉又會有哪些不同呢？所以這篇文章就要和大家一起來讀幾篇同樣是寫圈圈叉叉的開源專案，看看開發者們對相同邏輯的思考方式有什麼不同！GO！GO！</p><h2 id="職涯規劃"><a href="#職涯規劃" class="headerlink" title="職涯規劃"></a>職涯規劃</h2><!-- summary --><h3 id="旋轉拍賣-Carousell-Transactional-Service-之產品架構演進"><a href="#旋轉拍賣-Carousell-Transactional-Service-之產品架構演進" class="headerlink" title="旋轉拍賣 Carousell Transactional Service 之產品架構演進"></a><a href="https://medium.com/carousell-insider/%E6%97%8B%E8%BD%89%E6%8B%8D%E8%B3%A3-carousell-transactional-service%E4%B9%8B%E7%94%A2%E5%93%81%E6%9E%B6%E6%A7%8B%E6%BC%94%E9%80%B2-a46bf210d80e" target="_blank" rel="noopener">旋轉拍賣 Carousell Transactional Service 之產品架構演進</a></h3><p>因為後端架構會跟著產品需求不斷演化，所以沒有所謂最好的架構，只有最適合的架構。這篇文章就是記錄了旋轉拍賣他們的架構是怎麼跟著產品需求不斷調整，雖然已經是舊文了，但非常寶貴的經驗分享</p><!-- summary --><h3 id="PressPlay-從-AWS-搬家到-GCP-一年的心得"><a href="#PressPlay-從-AWS-搬家到-GCP-一年的心得" class="headerlink" title="PressPlay 從 AWS 搬家到 GCP 一年的心得"></a><a href="https://medium.com/@raguhnlee/pressplay%E5%BE%9Eaws%E6%90%AC%E5%AE%B6%E5%88%B0gcp%E4%B8%80%E5%B9%B4%E7%9A%84%E5%BF%83%E5%BE%97-1a00e847b3c0" target="_blank" rel="noopener">PressPlay 從 AWS 搬家到 GCP 一年的心得</a></h3><p>除了上面那篇旋轉拍賣的架構演進，這篇講 PressPlay 怎麼從 AWS 搬家到 GCP 的我也覺得不錯。裡面講到了為什麼想要搬去 GCP，以及搬家前後的架構長什麼樣子，雖然會需要這樣搬的公司不多，不過當作經驗分享看看還滿有趣的</p><h3 id="我的-ElasticSearch-進化之旅"><a href="#我的-ElasticSearch-進化之旅" class="headerlink" title="我的 ElasticSearch 進化之旅"></a><a href="https://medium.com/starbugs/%E6%88%91%E7%9A%84-elasticsearch-log-%E6%94%B6%E9%9B%86%E4%B9%8B%E6%97%85-39016c3b9a29" target="_blank" rel="noopener">我的 ElasticSearch 進化之旅</a></h3><p>很多公司都會用 ElasticSearch 來保存 log，再用 Kibana 把資料畫成一個個圖表來做分析。但隨著資料量越來越多，架設 ElasticSearch 所需的花費也會隨之越來越高，因此小城這篇文要來分享該怎麼架設，才可以讓你的 ES 更省錢</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="Asynchronous-JavaScript-The-Restaurant-Analogy"><a href="#Asynchronous-JavaScript-The-Restaurant-Analogy" class="headerlink" title="Asynchronous JavaScript: The Restaurant Analogy"></a><a href="https://javascript.plainenglish.io/asynchronous-javascript-the-restaurant-analogy-55c38d0517e0" target="_blank" rel="noopener">Asynchronous JavaScript: The Restaurant Analogy</a></h3><p>看到 Restaurant 還先入為主地以為是在講前後端的溝通，沒想到是在解釋 JavaScript 的運行方式，在文章裡講解了 JS 的引擎、WebAPIs、Task Queue 和 Event Loop，不只是新手，如果已經了解的人也可以當做複習，看看作者如何用餐廳描述這些工作流程吧！</p><!-- summary --><h3 id="Make-a-toast-with-HTML-CSS-and-JS"><a href="#Make-a-toast-with-HTML-CSS-and-JS" class="headerlink" title="Make a toast with HTML, CSS, and JS"></a><a href="https://devdojo.com/anishde12020/make-a-toast-with-html-css-and-js" target="_blank" rel="noopener">Make a toast with HTML, CSS, and JS</a></h3><p>用 Toast 彈出的訊息，在需要向使用者顯示訊息的時候非常有用，這篇文章的作者講解如何用 HTML、CSS 和 JavaScript 從無到有打造專屬 toast！</p><h3 id="Animating-a-gradient-border-in-CSS"><a href="#Animating-a-gradient-border-in-CSS" class="headerlink" title="Animating a gradient border in CSS"></a><a href="https://h.daily-dev-tips.com/animating-a-gradient-border-in-css" target="_blank" rel="noopener">Animating a gradient border in CSS</a></h3><p>作者用了不到 30 行的 CSS 就做出了超酷的旋轉框線顏色的動畫，整個過程中使用了 border-image、animation 和 @property 等屬性，每個步驟都講解的很清楚，想了解入門的 CSS 動畫可以看看！</p><!-- summary --><h3 id="enterkeyhint"><a href="#enterkeyhint" class="headerlink" title="enterkeyhint"></a><a href="https://css-tricks.com/enterkeyhint/" target="_blank" rel="noopener">enterkeyhint</a></h3><p>現在的網頁對於手機的操作可說是越來越關心，光一個 input tag 就有很多種不同的 type 方便使用者進行輸入，今天要介紹的是一個算是蠻新的 attribute 叫 <a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/enterKeyHint" target="_blank" rel="noopener">enterkeyhint</a>，這個 attribute 可以方便使用者進行表單的輸入，使用者鍵盤中的 enter 鍵會替換成下一步的按鍵，如此一來就不用讓使用者進行額外的點擊就能讓使用者快速輸入完每個 input 了。</p><!-- summary --><h3 id="Algorithms-in-JavaScript-with-visual-examples"><a href="#Algorithms-in-JavaScript-with-visual-examples" class="headerlink" title="Algorithms in JavaScript with visual examples"></a><a href="https://dev.to/swastikyadav/algorithms-in-javascript-with-visual-examples-gh3" target="_blank" rel="noopener">Algorithms in JavaScript with visual examples</a></h3><p>很多人對於演算法可以說是相當害怕(我也是XD)，每次看到一些演算法的題目都會不知道該如何下手，這篇文章利用圖解的方式讓大家可以用比較輕鬆的心態來學習演算法，算是蠻平易近人的文章XD</p><h3 id="後-Redux-時代！？留意那些過去常被視為理所當然的事"><a href="#後-Redux-時代！？留意那些過去常被視為理所當然的事" class="headerlink" title="後 Redux 時代！？留意那些過去常被視為理所當然的事"></a><a href="https://medium.com/onedegree-tech-blog/%E5%BE%8C-redux-%E6%99%82%E4%BB%A3-%E7%95%99%E6%84%8F%E9%82%A3%E4%BA%9B%E9%81%8E%E5%8E%BB%E5%B8%B8%E8%A2%AB%E8%A6%96%E7%82%BA%E7%90%86%E6%89%80%E7%95%B6%E7%84%B6%E7%9A%84%E4%BA%8B-debe8ffc7140" target="_blank" rel="noopener">後 Redux 時代！？留意那些過去常被視為理所當然的事</a></h3><p>自從 React 正式進入大 Hooks 時代後，各方大神就開始推出一系列簡單易上手的套件讓大家可以替換掉 Redux，尤其是那 Redux 超級不方便的非同步操作XD</p><p>這篇文章是由 PJ 大大所撰寫的，雖然現在很多套件都在想方設法讓開發者可以移除 Redux，但 Redux 其實背後默默的幫我們處理很多事情，再開始使用其他好用的套件前不妨先看看 Redux 到底幫我們做了哪些事情吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="AWS-re-Invent-2021-Adam-Selipsky-Keynote-Summary"><a href="#AWS-re-Invent-2021-Adam-Selipsky-Keynote-Summary" class="headerlink" title="AWS re:Invent 2021 Adam Selipsky Keynote Summary"></a><a href="https://beabetterdev.com/2021/12/01/aws-reinvent-2021-adam-selipsky-keynote-summary/" target="_blank" rel="noopener">AWS re:Invent 2021 Adam Selipsky Keynote Summary</a></h3><p>今年 AWS re:Invent 恢復在拉斯維加斯實體舉辦，這次一樣推出許多的新功能，例如之前我一直苦惱要怎麼把公開 Image 同步到，自己家裡的功能，<a href="https://aws.amazon.com/blos/aws/announcing-pull-through-cache-repositories-for-amazon-elastic-container-registry/" target="_blank" rel="noopener">現在在 ECR 裡面就可以辦到</a>，而且<a href="https://aws.amazon.com/blogs/aws/introducing-karpenter-an-open-source-high-performance-kubernetes-cluster-autoscaler/" target="_blank" rel="noopener">推出 AWS 自有的 Kubernetes AutoScaler - Karpenter</a>，當然這只是今年推出功能中的冰山一角！而在最重要的 Keynote 中又宣布的什麼大事呢？</p><ul><li><p>當然就是 AWS 自家的新一代處理器 Graviton3，更快的運算速度而且更省能源，而且新的 Instance Type C7G 就會使用這顆新的處理器；除此之外也宣布了專門為訓練模型而最佳化的 Instance Type <strong>TRN1</strong></p></li><li><p>再來則是為了金融相關產業所推出的遷移工具 AWS Mainframe Modernization，讓開發者將過時的 Infrastructure 搬遷到 Cloud 時更方便，AWS 甚至可以自動化從標準的 Cobol 程式碼產生 Java 程式碼</p></li><li><p>再來這應該是最屌的發佈功能了 - AWS Private 5G！他讓顧客可以使用 AWS Infrastructure 去架設跟擴展 5G 網路，AWS 提供硬體，組態，沒有限制任何可連接裝置的數量，跟其他 AWS 服務一樣，只要付錢就可以使用！</p></li><li><p>其他還有…Lake Formation Row and Cell Level Security, Lake Formation Transactions, 更多 Serverless 服務，Sagemaker Canvas，Goldman Sachs Financial Cloud For Data, AWS IoT Twinmaker, AWS IoT FleetWise 多到我連複製貼上都覺得累XD 有興趣的人可以再花點時間詳細研究</p></li></ul><!-- summary --><h3 id="Kubernetes-1-23-–-What’s-new"><a href="#Kubernetes-1-23-–-What’s-new" class="headerlink" title="Kubernetes 1.23 – What’s new?"></a><a href="https://sysdig.com/blog/kubernetes-1-23-whats-new/" target="_blank" rel="noopener">Kubernetes 1.23 – What’s new?</a></h3><p>除了 AWS re:Invent 大爆炸之外，Kubernetes 也即將推出 1.23 版本更新，這次帶來 45 個功能改善，雖然相對於 1.21 (50) 和 1.22 (56) 來說比較少，但其中幾個還滿有感的，例如 <a href="https://sysdig.com/blog/kubernetes-1-23-whats-new/#1440" target="_blank" rel="noopener">kubectl events</a> 指令，支援 <a href="https://sysdig.com/blog/kubernetes-1-23-whats-new/#2887" target="_blank" rel="noopener">OpenAPI v3</a> , <a href="https://github.com/kubernetes/enhancements/issues/2727" target="_blank" rel="noopener">gRPC probes</a>, 同時也可以看到 <a href="https://sysdig.com/blog/kubernetes-1-23-whats-new/#2317" target="_blank" rel="noopener">CSI Drivers</a> 和 <a href="https://github.com/kubernetes/enhancements/issues/2802" target="_blank" rel="noopener">Windows Support</a> 這兩個大專案的持續進展，而且也有不少功能抵達 GA 階段，有興趣的人可以閱讀原文獲得更多且詳細的資訊！ </p><!-- summary --><h3 id="Visualizing-Kubernetes-Clusters-with-Navigate"><a href="#Visualizing-Kubernetes-Clusters-with-Navigate" class="headerlink" title="Visualizing Kubernetes Clusters with Navigate"></a><a href="https://medium.com/@brkg_/visualizing-kubernetes-clusters-with-navigate-e340e5419c19" target="_blank" rel="noopener">Visualizing Kubernetes Clusters with Navigate</a></h3><p>這兩天發現有一個叫做 Navigate 的免費開源專案，他可以用來視覺化 Kubernetes Cluster 的各種資源，也可以顯示即時的 Log，範例圖看起來滿潮的，而且其中一個功能是可以從本地端的 YAML 檔案把即將部署到 K8s 中的資源也是進行視覺化呈現，讓開發者可以事先知道自己要部署到 K8s Cluster 中的組態長什麼樣子，感覺還滿不錯的，有機會再來試用看看！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 109 期 - 冷氣團來了！注意保暖不要著涼囉！</title>
      <link href="/2021/11/30/109-so-cold-this-week/"/>
      <url>/2021/11/30/109-so-cold-this-week/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="究竟，怎麼樣才能算是「資深」工程師？"><a href="#究竟，怎麼樣才能算是「資深」工程師？" class="headerlink" title="究竟，怎麼樣才能算是「資深」工程師？"></a><a href="https://medium.com/starbugs/how-to-be-a-senior-engineer-c64cf236c8e9" target="_blank" rel="noopener">究竟，怎麼樣才能算是「資深」工程師？</a></h3><p>大家好我是 Larry，這週的專欄「究竟，怎麼樣才能算是『資深』工程師？」 想要跟大家分享我身邊觀察到的資深工程師大概都具有怎麼樣的能力與特質，以及身為普通的工程師，應該要朝什麼方向去努力。</p><p>另外，因為我下週就要去當兵了（我也是昨天才被通知的，有夠突然QQ），所以接下來幾個月就不會有我的專欄，但如果時間允許的話底下的推薦文章還是會繼續推。也很謝謝大家對我們星巴哥的支持，我會趕快當完兵回來的～</p><h2 id="職涯規劃"><a href="#職涯規劃" class="headerlink" title="職涯規劃"></a>職涯規劃</h2><!-- summary --><h3 id="一個資淺工程師年末的自我省視"><a href="#一個資淺工程師年末的自我省視" class="headerlink" title="一個資淺工程師年末的自我省視"></a><a href="https://blog.techbridge.cc/2016/12/31/review-2016/" target="_blank" rel="noopener">一個資淺工程師年末的自我省視</a></h3><p>在學習技術時，我們很常會猶豫到底是要花時間在技術的深度還是廣度上，而在挑選工作時，也很常會不知道該去大公司還是小公司，這兩個問題其實都沒有標準答案，但除了自己思考之外，也可以參考看看別人是怎麼想的。像胡立這篇年末省視就就講到很多他自己的成長歷程，不管你是想轉換領域、換工作、或只是想做點事情跳出舒適圈，這篇文章都很值得看看。</p><!-- summary --><h3 id="如何才有資格稱為資深工程師"><a href="#如何才有資格稱為資深工程師" class="headerlink" title="如何才有資格稱為資深工程師"></a><a href="https://jaceju.net/be-a-senior-engineer/" target="_blank" rel="noopener">如何才有資格稱為資深工程師</a></h3><p>關於到底怎麼樣才算是「資深工程師」其實有非常多不同的意見，所以除了看這週專欄之外，也可以參考看看這篇文章，他除了講了非常多資深工程師該有的特質之外，同時還提供了反指標，讓你可以檢驗自己（或身邊的同事XD）。</p><h3 id="技术人员的发展之路"><a href="#技术人员的发展之路" class="headerlink" title="技术人员的发展之路"></a><a href="https://coolshell.cn/articles/17583.html" target="_blank" rel="noopener">技术人员的发展之路</a></h3><p>身為一個工程師，我以前其實都沒有在做什麼太長遠的職涯規劃XD，但看了這篇文章之後突然覺得好像該好好的想一下，畢竟以後的路還長，想去怎麼樣的公司、過怎麼樣的人生，如果沒有提早規劃好的話，可能一不小心就會錯過機會，所以當然要趁年輕時，提早想好自己的路。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><!-- summary --><h3 id="I-made-a-working-Gameboy-CSS-art-try-it-out-🕹"><a href="#I-made-a-working-Gameboy-CSS-art-try-it-out-🕹" class="headerlink" title="I made a working Gameboy CSS art: try it out 🕹"></a><a href="https://theangularguy.hashnode.dev/i-made-a-working-gameboy-css-art-try-it-out#comments-list" target="_blank" rel="noopener">I made a working Gameboy CSS art: try it out 🕹</a></h3><p>如果無法弄到一台真正的 Gameboy 來邊玩邊懷舊，不如就看著這篇文章自己寫一個 Gameboy 吧！雖然文章中沒有提及所有程式碼的解釋，但是作者也挑了幾個像是遊戲的演算法或 CSS 等關鍵的觀念解釋，真的手癢的話就直接 fork 下來改一波吧！</p><!-- summary --><h3 id="Rematch-a-better-Redux"><a href="#Rematch-a-better-Redux" class="headerlink" title="Rematch - a better Redux?"></a><a href="https://blog.openreplay.com/rematch-a-better-redux" target="_blank" rel="noopener">Rematch - a better Redux?</a></h3><p><a href="https://github.com/rematch/rematch" target="_blank" rel="noopener">Rematch</a> 是基於 Redux 的狀態管理器，但又移除了一些 Redux 所需的東西！像是不再使用 middleware，而是直接內建同步操作的 <code>effects</code> 等，還有更多其他的就到文章裡看作者介紹吧！</p><h3 id="OOPS-in-JavaScript-with-easy-to-understand-examples-🔥🔥"><a href="#OOPS-in-JavaScript-with-easy-to-understand-examples-🔥🔥" class="headerlink" title="OOPS in JavaScript with easy to understand examples 🔥🔥"></a><a href="https://nehalmahida.hashnode.dev/oops-in-javascript-with-easy-to-understand-examples" target="_blank" rel="noopener">OOPS in JavaScript with easy to understand examples 🔥🔥</a></h3><p>這篇文章的介紹該如何在 JavaScript 內使用 OOP（Object-oriented programming）的各種觀念，其中包含了 Object、Class、Encapsulation 和 Abstraction 等使用方法，非常適合想要了解如何在 JavaScript 使用 OOP 的開發者閱讀！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><!-- summary --><h3 id="Infrastructure-as-Code-the-next-big-shift-is-here"><a href="#Infrastructure-as-Code-the-next-big-shift-is-here" class="headerlink" title="Infrastructure as Code: the next big shift is here"></a><a href="https://itnext.io/infrastructure-as-code-the-next-big-shift-is-here-9215f0bda7ce" target="_blank" rel="noopener">Infrastructure as Code: the next big shift is here</a></h3><p>軟體架構一直在演進，不管是在 Provision，Delivery 或是 Maintenance 的方式都一直在進化中，而 Infrastructure as Code 尤其是如何，他可以將整個架構視覺化並且去補助服務的運行，而且這一切可以透過任何的語言，並且將其儲存在 Version Control 的 Repository 之中，而究竟 IaC 是如何走到今天這樣的面貌的呢？作者認為有幾個重要的階段，分別為…，文章中透過生動可愛的漫畫對每一個階段做詳細地說明</p><ul><li>Virtualization</li><li>Containerisation and containers orchestration</li><li>Public Cloud Infrastructure</li><li>DevOps Culture</li></ul><!-- summary --><h3 id="How-To-Level-Up-Your-Kubernetes-Game"><a href="#How-To-Level-Up-Your-Kubernetes-Game" class="headerlink" title="How To Level Up Your Kubernetes Game"></a><a href="https://itnext.io/how-to-level-up-your-kubernetes-game-96f8f7ea50b9" target="_blank" rel="noopener">How To Level Up Your Kubernetes Game</a></h3><p>根據 Cloud Native Survey 2020 的調查顯示 Container 在 Production 環境的使用成長的三倍，因此 Kubernetes 的使用率只會升不會降，但使用 K8s 和擴展他是兩回事，K8s 設計是用來構建平台的平台，他的不僅僅只是用來管理 Container 而已，他的 API 和 Contril Plane 都是可擴展的，例如 K8s 的 Operator 和 Control Loop 都可以用來擴展 K8s，所以這篇文章想要介紹 Operator Pattern，讓大家一起學習如何適當地使用 Opertoar，並探索 Operator 的架構</p><!-- summary --><h3 id="dstp"><a href="#dstp" class="headerlink" title="dstp"></a><a href="https://github.com/ycd/dstp" target="_blank" rel="noopener">dstp</a></h3><p>當有辦公室有人跟你說某個網站不能連時，你下意識會做什麼事情？使用 nslookup 或是 curl 嗎？現在你有更好的選擇 - dstp！這個 CLI 小工具可以幫你幫目標網站做常見的網路測試，包含 ping, DNS, TLS 和 HTTP 的檢查，讓你使用單一個工具就可以做完所有的檢查，不用在使用多個工具東查西查的</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 108 期 - Change Management：Startup 行！不行？</title>
      <link href="/2021/11/23/108-change-management/"/>
      <url>/2021/11/23/108-change-management/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Change-Management-—-Startup-行！不行？"><a href="#Change-Management-—-Startup-行！不行？" class="headerlink" title="Change Management — Startup 行！不行？"></a><a href="https://medium.com/starbugs/change-mangement-startup-%E8%A1%8C-%E4%B8%8D%E8%A1%8C-1e0015894a08" target="_blank" rel="noopener">Change Management — Startup 行！不行？</a></h3><p>程式碼直達生產環境，服務有問題直接登入機器排除，架構要調整打開管理介面點兩下，對於新創公司來說，這就像喝水呼吸一樣地自然，但是跟傳統金融業一樣需要處理或是保管大量用戶資產的 FinTech 公司還適合這樣做嗎？！所以想要分享 AMIS 錢包服務導入變更管理一年多來的經驗談，端看一間新創 FinTech 如何透過<strong>完善 CI/CD 流程</strong>，<strong>全面使用 IaC</strong>，<strong>權限控制系統化</strong>，<strong>變更表單電子化</strong>…等機制，並在橫向輔以 <strong>ChatOps 串連每一張 RFC 的生命週期</strong>，改善傳統變更流程冗長沒有效率，且不確實為了做而做的弊病</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="React-的未來：18-以及在那之後"><a href="#React-的未來：18-以及在那之後" class="headerlink" title="React 的未來：18 以及在那之後"></a><a href="https://chentsulin.medium.com/react-%E7%9A%84%E6%9C%AA%E4%BE%86-18-%E4%BB%A5%E5%8F%8A%E5%9C%A8%E9%82%A3%E4%B9%8B%E5%BE%8C-d5764e258deb" target="_blank" rel="noopener">React 的未來：18 以及在那之後</a></h3><p>這篇文章的作者先前有在 JSDC 2021 分享過 <a href="https://2021.jsdc.tw/timesheets" target="_blank" rel="noopener">The Future of React: 18 and Beyond</a>，然後又很佛的把議程的內容另外寫成一篇文章分享，雖然 React 18 目前還在 beta 狀態，但還是可以先看看 React 18 新 feature 的概念。’</p><h3 id="Creating-a-React-Custom-Hook-using-TDD"><a href="#Creating-a-React-Custom-Hook-using-TDD" class="headerlink" title="Creating a React Custom Hook using TDD"></a><a href="https://dev.to/mbarzeev/creating-a-react-custom-hook-using-tdd-2o" target="_blank" rel="noopener">Creating a React Custom Hook using TDD</a></h3><p>作者用 TDD 的方式設計一個 Custom Hook 用來管理分頁 Component 的背後邏輯，每一步操作都有很清楚的說明，雖然文章篇幅很長，但如果想要學習測試還是很推薦看完！</p><h3 id="Functional-Programming-Immutability"><a href="#Functional-Programming-Immutability" class="headerlink" title="Functional Programming: Immutability"></a><a href="https://rehansattar.dev/functional-programming-immutability" target="_blank" rel="noopener">Functional Programming: Immutability</a></h3><p>Immutability（不變性） 在 Functional Programming 中是個相當重要的觀念，作者用簡單的例子示範什麼是 Immutability 的概念，並清楚的解釋 Immutability 帶來的好處和壞處。</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><!-- summary --><h3 id="Supercharge-your-NodeJS-with-Rust"><a href="#Supercharge-your-NodeJS-with-Rust" class="headerlink" title="Supercharge your NodeJS with Rust"></a><a href="https://skwee357.medium.com/supercharge-your-nodejs-with-rust-f78952d2fa8" target="_blank" rel="noopener">Supercharge your NodeJS with Rust</a></h3><p>Rust 開發起來很慢，光是要成功編譯就不行，但執行速度非常的快；而 Node.js 則是開發起來很快，但執行速度相對就慢很多。那有什麼什麼方法可以將兩者結合起來呢？這篇文章介紹了 Neon，他可以幫你把 Rust 程式碼編譯成 native Node.js module，這樣你就可以把最需要效能的地方用 Rust 寫，接著 Node.js 裡面使用它就能兼顧開發效率跟效能囉</p><!-- summary --><h3 id="What-Rust-could-learn-from-Kotlin"><a href="#What-Rust-could-learn-from-Kotlin" class="headerlink" title="What Rust could learn from Kotlin"></a><a href="https://medium.com/@cedricbeust/what-rust-could-learn-from-kotlin-b32ebe2da28d" target="_blank" rel="noopener">What Rust could learn from Kotlin</a></h3><p>這十多年來程式語言如雨後春筍般不斷推陳出新，像 Kotlin、Swift、Golang 這些語言其實都設計得不錯。而這篇文章就比較了 Rust 跟 Kotlin 的語法，並指出 Rust 有哪些可以跟 Kotlin 借鏡的地方。如果你跟我一樣也喜歡看看每個語言的優缺點的話，這篇文章真的很不錯</p><h3 id="Rust-lang-Tips-and-Tricks"><a href="#Rust-lang-Tips-and-Tricks" class="headerlink" title="Rust lang Tips and Tricks"></a><a href="https://mudit.blog/rust-tips-and-tricks/" target="_blank" rel="noopener">Rust lang Tips and Tricks</a></h3><p>這篇文章介紹了一些 Rust 的小技巧，像是怎麼用 <code>dbg!</code> macro 來輸出變數、用底線來讓數字更好讀等等，如果才剛開始學習 Rust 還不太熟悉一些語法糖，可以簡單看一看這篇文章～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CRISP-Critical-Path-Analysis-for-Microservice-Architectures"><a href="#CRISP-Critical-Path-Analysis-for-Microservice-Architectures" class="headerlink" title="CRISP: Critical Path Analysis for Microservice Architectures"></a><a href="https://eng.uber.com/crisp-critical-path-analysis-for-microservice-architectures/" target="_blank" rel="noopener">CRISP: Critical Path Analysis for Microservice Architectures</a></h3><p>Uber 的後端系統算是 MicroService 架構的榜樣，其中有數千個 MicroService 透過 RPC 的方式跟其他服務進行溝通，所以當服務請求發生時，就很像是網路傳遞時會有數個 hops 一樣，當數個 MicroService 都正常時，這個服務請求才能夠運行成功，其過程是相當複雜的，可能隱含很多的動作，非同步..等，所以當要追查一個服務請求點到點的品質時，可以想像是相當困難的，所以 Uber 開發了一個叫做 CRISP 的工具，用來解決追蹤複雜服務請求中到底是哪一個環節出了問題，CRISP 主要使用 Jaeger 這個 RPC 的追蹤工具，對於此主題有興趣的人，可以查看原文獲得更仔細的資訊</p><h3 id="cloudquery"><a href="#cloudquery" class="headerlink" title="cloudquery"></a><a href="https://github.com/cloudquery/cloudquery" target="_blank" rel="noopener">cloudquery</a></h3><p>CloudQuery 可以將在雲端的資源資訊給萃取出來，將其轉化為 PostgreSQL Table 的資料，主要的使用情境有底下三種：</p><ul><li>Search: 使用標準的 SQL 語法去搜尋雲端資源 </li><li>Visualize:將資料透過 BI 或是視覺化工具呈現出來，例如 Grafana, QuickSight…等</li><li>Policy as Code: 將 Security 和 Compliance 規則寫成 SQL 語法用以達成 PaC</li></ul><h3 id="Prometheus-announces-an-Agent-to-address-a-new-range-of-use-cases"><a href="#Prometheus-announces-an-Agent-to-address-a-new-range-of-use-cases" class="headerlink" title="Prometheus announces an Agent to address a new range of use cases"></a><a href="https://www.cncf.io/blog/2021/11/16/prometheus-announces-an-agent-to-address-a-new-range-of-use-cases/" target="_blank" rel="noopener">Prometheus announces an Agent to address a new range of use cases</a></h3><p>一直以來 Prometheus 都是使用 Pull 的模式，透過 Prometheus Server 把來自各方的資料做彙整，而最近宣佈了新的模式 Agent Mode，Prometheus Agent 跟 Prometheus Server 其實有點像，他還是透過 Pull 去抓取 HTTP 所暴露的 Metric 資料，然後使用 Remote Write 的方式將資料送到遠端的 Prometheus Server，不過 Metric 資料並不會儲存在本地端，送出去後就會立即移除掉，希望可以應用在某些應用情境上，例如 Edge Networks 和 IoT</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 107 期 - 是時候該貓一下了</title>
      <link href="/2021/11/16/107-time-to-play-with-cat/"/>
      <url>/2021/11/16/107-time-to-play-with-cat/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-HackMD-與-Github-Action-打造你的靜態網站「線上文章編輯平台-」"><a href="#用-HackMD-與-Github-Action-打造你的靜態網站「線上文章編輯平台-」" class="headerlink" title="用 HackMD 與 Github Action 打造你的靜態網站「線上文章編輯平台 」"></a><a href="https://medium.com/starbugs/1d9b1a663e18" target="_blank" rel="noopener">用 HackMD 與 Github Action 打造你的靜態網站「線上文章編輯平台 」</a></h3><p>今天來分享一下如何使用 Github Action 與 HackMD 優化 Blog 發布的流程。第一部分我們聊部屬(deployment)，也就是把網站上線的過程，第二部分我們聊如何加入 HackMD 來優化我們的寫文章體驗。以後想要寫文章，只要有地方上網，用 HackMD 即可開始編輯。手機也可以通！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="該如何入門-CTF-中的-Web-題？"><a href="#該如何入門-CTF-中的-Web-題？" class="headerlink" title="該如何入門 CTF 中的 Web 題？"></a><a href="https://blog.techbridge.cc/2021/02/20/web-ctf-is-fun/?fbclid=IwAR2mOQnLA0NF7ukl8XLSBe03Ft2-F9qZR_8l9yj9Mg9H_LcKaCnmZ3FdE0Q" target="_blank" rel="noopener">該如何入門 CTF 中的 Web 題？</a></h3><p>CTF 一直是個很有趣的比賽，參賽者必須要想辦法在網頁上尋找相對應的 flag 或者讓網頁產生一些奇怪的行為，雖然自己身為一位前端工程師但玩了 CTF 才知道自己原來對前端這麼不熟，想要一起了解 CTF 是甚麼的讀者歡迎閱讀這篇文章，之後就可以慢慢摸索一些 CTF 的練習題了！</p><h3 id="Custom-Elements-defining-new-elements-in-HTML"><a href="#Custom-Elements-defining-new-elements-in-HTML" class="headerlink" title="Custom Elements defining new elements in HTML"></a><a href="https://www.html5rocks.com/en/tutorials/webcomponents/customelements/" target="_blank" rel="noopener">Custom Elements defining new elements in HTML</a></h3><p>原來 HTML tag 是可以自己隨便定義一個出來的，不一定要是 HTML5 中規範的 tag，其實會突然分享這個文章也是因為上面的 CTF 有些技巧是需要用到這種手段才能達到的，所以假如讀者不知道 HTML tag 可以自己自定義的話也可以看看這篇文章，裡面都有一些作者對於自定義 tag 的見解。</p><h3 id="CSS-Tricks-to-Create-that-Dark-Futuristic-Web3-Look"><a href="#CSS-Tricks-to-Create-that-Dark-Futuristic-Web3-Look" class="headerlink" title="CSS Tricks to Create that Dark Futuristic Web3 Look"></a><a href="https://dev.to/trishathecookie/css-tricks-to-create-that-dark-futuristic-web3-look-53bm" target="_blank" rel="noopener">CSS Tricks to Create that Dark Futuristic Web3 Look</a></h3><p>這個真的太酷了，沒想到 CSS 還有這麼多的玩法可以讓一個文字有這麼多不同的顯示方式，學會了這些技巧就不用擔心設計師突然設計出一個難以開發的樣式了XD</p><h3 id="useRef-or-useState-which-is-better"><a href="#useRef-or-useState-which-is-better" class="headerlink" title="useRef or useState, which is better?"></a><a href="https://dev.to/salehmubashar/useref-or-usestate-which-is-better-258j" target="_blank" rel="noopener">useRef or useState, which is better?</a></h3><p>雖然 <code>useRef</code> 或 <code>useState</code> 都可以存放想要的東西，在使用上貌似滿雷同的，但其實兩者對 Component render 的影響可是完全不一樣的！會分享這篇文章也是我突然想到 <a href="https://swr.vercel.app/" target="_blank" rel="noopener">SWR</a> 就是利用 <code>useRef</code> 來存放 state 唷！</p><h3 id="Writing-Clean-Code-in-JavaScript"><a href="#Writing-Clean-Code-in-JavaScript" class="headerlink" title="Writing Clean Code in JavaScript"></a><a href="https://blog.bitsrc.io/writing-clean-code-in-javascript-dd584bbe1874" target="_blank" rel="noopener">Writing Clean Code in JavaScript</a></h3><p>JavaScript 在近幾年真的提供了很多方便的寫法，只要善用就可以讓程式碼變得更簡潔，當然同時也出現了各種古怪的寫法 😂，在使用上還是要考慮到之後的人容不容易看懂。</p><h3 id="react-router-dom-6-x-版本-让我🐓-🐝-了"><a href="#react-router-dom-6-x-版本-让我🐓-🐝-了" class="headerlink" title="react-router-dom 6.x 版本 让我🐓 🐝 了"></a><a href="https://juejin.cn/post/7030700352622034952" target="_blank" rel="noopener">react-router-dom 6.x 版本 让我🐓 🐝 了</a></h3><p>最近在研究 React 的專案配置時，一如往常地裝了 react-router-dom，然後依照記憶寫下程式碼，結果在執行後卻發現錯誤狂噴，原來是 react-router-dom 更新到 v6 後，一堆寫法都變了，而今天又看到這篇文章就覺得不分享不行，希望之後的人少走一點坑。</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Upcoming-Features-in-Go-1-18"><a href="#Upcoming-Features-in-Go-1-18" class="headerlink" title="Upcoming Features in Go 1.18"></a><a href="https://sebastian-holstein.de/post/2021-11-08-go-1.18-features/" target="_blank" rel="noopener">Upcoming Features in Go 1.18</a></h3><p>除了泛型之外，預計在明年發布的 Go 1.18 其實還有一些其他 feature，像是用來做測試的 fuzzing、聽說（？）更快的 go fmt，還有新的 net/netip package，看完都等不及要開始用了</p><h3 id="Best-Practices-for-Testing-in-Go"><a href="#Best-Practices-for-Testing-in-Go" class="headerlink" title="Best Practices for Testing in Go"></a><a href="https://fossa.com/blog/golang-best-practices-testing-go/" target="_blank" rel="noopener">Best Practices for Testing in Go</a></h3><p>這篇文章除了跟你說在寫測試時有哪些該注意的重點之外，也教你怎麼把 function/struct 設計得更好測試，如果你最近想寫 unit test 來增加程式的可靠性，卻發現不知道從何著手，那可以參考看看這篇文章</p><h3 id="Design-Patterns-in-Go"><a href="#Design-Patterns-in-Go" class="headerlink" title="Design Patterns in Go"></a><a href="https://refactoring.guru/design-patterns/go" target="_blank" rel="noopener">Design Patterns in Go</a></h3><p>如果想要從 Go 下手開始學習設計模式的話，這邊有一個很不錯的網站，他除了會把每個 pattern 畫成 UML 圖之外，還會給你非常實際的範例，對於理解 pattern 的應用場景非常有幫助</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-Grafana-OnCall-the-easiest-way-to-do-on-call-management"><a href="#Announcing-Grafana-OnCall-the-easiest-way-to-do-on-call-management" class="headerlink" title="Announcing Grafana OnCall, the easiest way to do on-call management"></a><a href="https://grafana.com/blog/2021/11/09/announcing-grafana-oncall/" target="_blank" rel="noopener">Announcing Grafana OnCall, the easiest way to do on-call management</a></h3><p>在維運服務時，系統總是會有遇到問題需要求救的時候，設定一個彈性又有效的 On Call 輪值方式是相當重要的一件事情，很多既有的工具使用起來要嘛很麻煩，要嘛對於開發者來說很不友善，所以 Grafana 宣布推出簡單易用的 Grafana On Call 管理工具，用來降低管理 On Call 輪值所需要的功夫，目前在 Grafana Cloud 為 Beta 公測階段；Grafana On Call 主要是透過今年所收購 Amixr Inc 所開發出來的，而他主要有以下三個特點：</p><ul><li>簡單建立跟管理 On-Call 時程</li><li>利用自動逐步升級 (Escalation)且彈性的引導方式 (Routing) 確保找到人協助系統問題</li><li>讓 On-Call 與 Incidnet 的狀態在同一個 UI 中顯現管理</li></ul><h3 id="Terraform-Cloud-Variable-Sets-Beta-Now-Available"><a href="#Terraform-Cloud-Variable-Sets-Beta-Now-Available" class="headerlink" title="Terraform Cloud Variable Sets Beta Now Available"></a><a href="https://www.hashicorp.com/blog/terraform-cloud-variable-sets-beta-now-available" target="_blank" rel="noopener">Terraform Cloud Variable Sets Beta Now Available</a></h3><p>Terraform 的 Module 引用方式讓使用者可以一直重複利用既有的程式碼，而不需要重新造輪子，而現在 Terraform Cloud 針對變數也推出一樣的功能 - <code>variable sets</code>，他讓使用者可以重複使用 Terraform 所定義或是環境變數，而且不止是從 Root 到 Child Module，還可以橫跨某些 Workspaces 甚至是 Organization；自己發現 Terragrunt 也有類似的功能，看來 Terraform 這邊也跟上來了</p><h3 id="Flux-Security-Audit-has-concluded"><a href="#Flux-Security-Audit-has-concluded" class="headerlink" title="Flux Security Audit has concluded"></a><a href="https://www.cncf.io/blog/2021/11/11/flux-security-audit-has-concluded/" target="_blank" rel="noopener">Flux Security Audit has concluded</a></h3><p>CNCF 最近對旗下 Incubation Project 進行 Security Audit，做完馬上發現一個 CVE: CVE-2021-41254，可以讓有心人士可以在 Multi-Tenant Flux 提權成 Cluster Admin (有使用 Flux 的人要記得升級)，而整個詳細的<a href="https://fluxcd.io/FluxFinalReport-v1.1.pdf" target="_blank" rel="noopener">稽核報告</a>已經被公開在網路上，找到將近 22 條涵括各種不同的 Risk Level 的問題，目前 43% 的 Issue 在 TODO 階段，21% WIP，36% 已經修完，詳細的進度可以參考 <a href="https://github.com/orgs/fluxcd/projects/5" target="_blank" rel="noopener">GitHub Project</a>，看起來 Flux 從另外一個面向投入資源，試圖跟其他的 GitOps 競爭工具做出差異化</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 106 期 - 還好程式碼沒有即期問題</title>
      <link href="/2021/11/09/106-fortunately-the-code-has-no-expiratory-problem/"/>
      <url>/2021/11/09/106-fortunately-the-code-has-no-expiratory-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-Verdaccio-快速建立專屬的-private-npm-proxy-並部署到-Heroku-上！"><a href="#用-Verdaccio-快速建立專屬的-private-npm-proxy-並部署到-Heroku-上！" class="headerlink" title="用 Verdaccio 快速建立專屬的 private npm proxy 並部署到 Heroku 上！"></a><a href="https://medium.com/starbugs/%E7%94%A8-verdaccio-%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E5%B0%88%E5%B1%AC%E7%9A%84-private-npm-proxy-%E4%B8%A6%E9%83%A8%E7%BD%B2%E5%88%B0-heroku-%E4%B8%8A-7866d2a0494c" target="_blank" rel="noopener">用 Verdaccio 快速建立專屬的 private npm proxy 並部署到 Heroku 上！</a></h3><p>今天要介紹的 Verdaccio 是基於 NodeJS 運行的 npm proxy。我們可以先將團隊內那些共用的程式碼依照功能切成幾個專案，並且發布到私有的 npm 上，讓團隊內多個專案都可以像是下載 lodash、moment 等函式庫一樣直接下載使用，如此一來所有的共用程式碼都來自於同個地方，使用時也不用手動複製和管理，而且因爲是上傳到 private npm，所以不會被團隊成員以外的人看見業務邏輯。而這篇文章就要來說明如何用 Verdaccio 來達到相同的目的！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Creating-a-React-component-with-TDD"><a href="#Creating-a-React-component-with-TDD" class="headerlink" title="Creating a React component with TDD"></a><a href="https://dev.to/mbarzeev/creating-a-react-component-with-tdd-2jn8" target="_blank" rel="noopener">Creating a React component with TDD</a></h3><p>看那麼多文章說了什麼是單元測試、什麼是 TDD 或是該如何對 Component 用 TDD 開發，這篇文章的作者直接示範了整個 TDD 開發 Component 的流程，很適合剛接觸測試、不知道如何對 Component 做測試或是想用測試改變開發方式的讀者們一讀！</p><h3 id="Understanding-The-Box-Model-in-CSS"><a href="#Understanding-The-Box-Model-in-CSS" class="headerlink" title="Understanding The Box Model in CSS"></a><a href="https://dev.to/yamanidev/understanding-the-box-model-in-css-1af" target="_blank" rel="noopener">Understanding The Box Model in CSS</a></h3><p>CSS 的屬性那麼多，真的不需要全部都記起來，只需要在用到的時候去搜尋相關的語法就行了，<strong>但是這並不代表你可以忽略那些在 CSS 中的重要觀念</strong>，這篇文章的作者講解了 CSS 的 Box Model（盒子模型），Box Model 是 CSS 非常重要的基本觀念，如果還不熟悉的話就快來看看這篇文章吧！</p><h3 id="JavaScript-Programming-Styles-Best-Practices"><a href="#JavaScript-Programming-Styles-Best-Practices" class="headerlink" title="JavaScript Programming Styles: Best Practices"></a><a href="https://www.ma-no.org/en/programming/javascript/javascript-programming-styles-best-practices" target="_blank" rel="noopener">JavaScript Programming Styles: Best Practices</a></h3><p>不知道大家有沒有在使用 ESLint 等工具在檢查你的程式碼風格，除了一些客製化的部分，比較常見的其他應該是 <a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noopener">Google</a> 和 <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener">AirBnb</a> ，這裡我就不戰哪種風格比較優秀，不如先來看看作者選擇每種寫法的差異和理由吧！或許也能想想自己除了習慣外為什麼選擇了某種風格！</p><h2 id="Testing"><a href="#Testing" class="headerlink" title="Testing"></a>Testing</h2><h3 id="一次搞懂單元測試、整合測試、端對端測試之間的差異"><a href="#一次搞懂單元測試、整合測試、端對端測試之間的差異" class="headerlink" title="一次搞懂單元測試、整合測試、端對端測試之間的差異"></a><a href="https://blog.miniasp.com/post/2019/02/18/Unit-testing-Integration-testing-e2e-testing" target="_blank" rel="noopener">一次搞懂單元測試、整合測試、端對端測試之間的差異</a></h3><p>大家都知道測試可以確保程式的正確性，但根據不同的目的，測試又可大略分成單元測試、整合測試、端對端測試三種，因此在真的開始寫測試之前，務必要先搞清楚你需要的是哪種測試，才不會花了一堆時間結果沒測到最重要的部分哦～</p><h3 id="What’s-in-a-Story"><a href="#What’s-in-a-Story" class="headerlink" title="What’s in a Story?"></a><a href="https://dannorth.net/whats-in-a-story/" target="_blank" rel="noopener">What’s in a Story?</a></h3><p>身為工程師，在跟 PM 溝通需求時最怕的就是 PM 以為他講清楚了，工程師也以為自己聽懂了，結果做出來後得到的回覆卻是「這不是我要的！」。所以在真的開始實作之前，雙方可以用 User Story 把各種 scenario 一一列出來，雙方都同意之後這些 scenario 也可以直接寫成測試，真的是非常省時間的一套方法</p><h3 id="Mocks-and-explicit-contracts"><a href="#Mocks-and-explicit-contracts" class="headerlink" title="Mocks and explicit contracts"></a><a href="http://blog.plataformatec.com.br/2015/10/mocks-and-explicit-contracts/" target="_blank" rel="noopener">Mocks and explicit contracts</a></h3><p>寫測試寫到一定程度之後，為了方便建立測試專用的環境，一定會需要用到 mock。而這篇文章雖然已經是多年前發表的，但我覺得他在講怎麼正確使用 mock 講得非常好，尤其是他內文有講到 mock 應該當作名詞而非動詞來用，看完之後覺得又更了解怎麼用 mock 跟 interface 了</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Just-7-Remarkable-K8S-Tools-Boosting-Up-Your-Effectiveness"><a href="#Just-7-Remarkable-K8S-Tools-Boosting-Up-Your-Effectiveness" class="headerlink" title="Just 7 Remarkable K8S Tools Boosting Up Your Effectiveness"></a><a href="https://getbetterdevops.io/7-essential-tools-to-be-more-efficient-on-kubernetes/" target="_blank" rel="noopener">Just 7 Remarkable K8S Tools Boosting Up Your Effectiveness</a></h3><p>Kubernetes 是目前負責管理 Container 和微服務的的主要平台，一般人在開始學習跟 K8s 互動時都是透過 <code>kubectl</code>，它的確也真的扮演著很重要的角色，不過不知道使用者是否發現透過他一直在重複著一樣的動作，因而浪費掉寶貴的時間，所以這篇文章要介紹 7 個可以幫助使用者增進效率的工具：</p><ol><li><a href="https://github.com/cloudnativelabs/kube-shell" target="_blank" rel="noopener">Kube-shell</a>: 透過顯示豐富的資訊和提示來減少使用 kubectl 時可能產生的錯誤並且加快操作速度</li><li><a href="https://github.com/ahmetb/kubectx" target="_blank" rel="noopener">Kubectx - Kubens</a>: 管理 Multi-Cluster 的必備工具，協助使用者切換不同的 Cluster</li><li><a href="https://github.com/johanhaleby/kubetail" target="_blank" rel="noopener">Kubetail</a>: 功能有點像是 <code>kubectl logs -f</code>，但可以一次將多個 Pod 的 Log 同時顯示</li><li><a href="https://github.com/ahmetb/kubectl-tree" target="_blank" rel="noopener">Kubetree</a>: K8s 的某些資源間其實是有親子關係的，透過此工具可以將資源間的關係視覺化呈現出來</li><li><a href="https://github.com/derailed/k9s" target="_blank" rel="noopener">K9S</a>: K9S 應該就不用多說了，強大的 K8s Terminal UI，讓你可以輕易地與 K8s Cluster 互動</li><li><a href="https://github.com/robscott/kube-capacity" target="_blank" rel="noopener">Kube-Capacity</a>: 顯示 K8s Cluster 中 Resource 的 Request, Limit 和使用程度</li><li><a href="https://k8slens.dev/" target="_blank" rel="noopener">Lens</a>: Lens 應該也是大家都耳熟能響的 K8s UI 工具，可以運行在各種系統中 (Windows, Linux 和 Mac)，讓使用者可以透過類似 IDE 的感覺來跟 K8s 互動</li></ol><h3 id="Compliance-in-a-DevOps-Culture"><a href="#Compliance-in-a-DevOps-Culture" class="headerlink" title="Compliance in a DevOps Culture"></a><a href="https://martinfowler.com/articles/devops-compliance.html" target="_blank" rel="noopener">Compliance in a DevOps Culture</a></h3><p>將 Compliance Control 和 Audit 整合進 CI/CD 的流程，對於想要在 DevOps 文化中滿足 Security Compliance 是滿直覺的作法，但根據不同的組織大小會遭遇到不同的挑戰，了解透過不同的實作方式所可能造成的影響是導致成功與否的重要關鍵，文中從理論開始談起 (講解得很細)，隨後提到各種模式，例如：Manual Compliance, Pipeline Compoiance, Composition Compliance 和 Point-of-Change Compliance，對於這塊領域有興趣的人可以參考看看</p><h3 id="Anatomy-of-a-Terminal-Emulator"><a href="#Anatomy-of-a-Terminal-Emulator" class="headerlink" title="Anatomy of a Terminal Emulator"></a><a href="https://www.poor.dev/blog/terminal-anatomy/" target="_blank" rel="noopener">Anatomy of a Terminal Emulator</a></h3><p>Terminal 是一個無所不在的平台，多年來一直相當穩定地存在著，雖然目前有大量的資源可以用來理解 Terminal 的內部運作方式，但其中大多數要嘛相當的神秘，或是需要特定領域的深入知識，所以這篇文章希望提供一個平易近人且相對廣泛容易了解的內容，來讓大家知道要開發一個 Terminal Emulator 平台時需要具備的知識</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 105 期 - 不給 merge 就 force push</title>
      <link href="/2021/11/02/105-force-push-if-not-merged/"/>
      <url>/2021/11/02/105-force-push-if-not-merged/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從-map-的實作聊聊為什麼-Go-需要有泛型"><a href="#從-map-的實作聊聊為什麼-Go-需要有泛型" class="headerlink" title="從 map 的實作聊聊為什麼 Go 需要有泛型"></a><a href="https://medium.com/starbugs/why-go-need-generics-c8f1495ef00a" target="_blank" rel="noopener">從 map 的實作聊聊為什麼 Go 需要有泛型</a></h3><p>大家好我是 Larry， 關於 Go 到底要不要支援泛型、以及泛型的語法該怎麼設計已經吵好久了，而官方也總算是在去年把泛型語法定下來，並承諾要在 Go 的下個版本 1.18 中正式支援泛型，。所以今天想跟大家聊聊泛型到底解決了 Go 的哪些問題，也順便讓大家看看 Go 的泛型怎麼寫，這樣到時明年 1.18 出來就可以馬上開始用了哦～</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="關於-1-0-0-版的-SWR，你該升級嗎？"><a href="#關於-1-0-0-版的-SWR，你該升級嗎？" class="headerlink" title="關於 1.0.0 版的 SWR，你該升級嗎？"></a><a href="https://medium.com/starbugs/%E9%97%9C%E6%96%BC-1-0-0-%E7%89%88%E7%9A%84-swr-%E4%BD%A0%E8%A9%B2%E5%8D%87%E7%B4%9A%E5%97%8E-279ac4f26189" target="_blank" rel="noopener">關於 1.0.0 版的 SWR，你該升級嗎？</a></h3><p>有在寫 React 的朋友們應該多少都有聽過 SWR 這個 library，而他在不久前總算是釋出 1.0.0 版，那從 0.X 升上去時有哪些該注意的地方呢？一起來看看吧！</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Implementing-a-Generic-Filter-Function-in-Go"><a href="#Implementing-a-Generic-Filter-Function-in-Go" class="headerlink" title="Implementing a Generic Filter Function in Go"></a><a href="https://preslav.me/2021/09/22/implementing-a-generic-filter-function-in-golang/" target="_blank" rel="noopener">Implementing a Generic Filter Function in Go</a></h3><p>這週的專欄講的是怎麼用 Type Parameter 寫出泛型的 map function，但如果覺得不太夠想看更多例子的話，這邊也有一篇文將教你怎麼用泛型寫 filter，文章不常應該十分鐘內就能讀完了～</p><h3 id="为什么-Go-语言没有泛型"><a href="#为什么-Go-语言没有泛型" class="headerlink" title="为什么 Go 语言没有泛型"></a><a href="https://draveness.me/whys-the-design-go-generics/" target="_blank" rel="noopener">为什么 Go 语言没有泛型</a></h3><p>其實 Go 的歷史其實也不算短了，但為什麼一直到現在現在才打算要支援泛型呢？這篇文章有提到任何程式語言如果要支援泛型都會遇到所謂的「泛型困境」，也就是必須在開發體驗、編譯速度、執行速度三者中做平衡，而且文中也有比較 C/C++/Java 三者各自選擇了什麼方向，雖然 Go 已經確定要支援泛型了，但這篇還是很棒的文章～</p><h3 id="Type-Parameters-Proposal"><a href="#Type-Parameters-Proposal" class="headerlink" title="Type Parameters Proposal"></a><a href="https://go.googlesource.com/proposal/+/refs/heads/master/design/43651-type-parameters.md" target="_blank" rel="noopener">Type Parameters Proposal</a></h3><p>大部分在介紹 Type Parameter 的文章怕嚇到人其實都只有簡單講一下怎麼使用，的包括這週的專欄也是，如果真的想完整了解 Type Parameter 的語法的話建議可以讀這篇官方發佈的 proposal，裡面很完整的講了 Type Parameter 的 Spec 以及怎麼跟現有的 interface 做結合，雖然整個 proposal 很長XD，但我覺得可以一天讀一個小段落，讀完後應該可以學到很多東西</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Modules-VS-styled-components，哪个才是解决-CSS-不足之处的更好方案？"><a href="#CSS-Modules-VS-styled-components，哪个才是解决-CSS-不足之处的更好方案？" class="headerlink" title="CSS Modules VS. styled-components，哪个才是解决 CSS 不足之处的更好方案？"></a><a href="https://juejin.cn/post/7025156831504760839" target="_blank" rel="noopener">CSS Modules VS. styled-components，哪个才是解决 CSS 不足之处的更好方案？</a></h3><p>CSS Modules 和 styled-components 都是為了強化 CSS 本身不足的部分（例如缺少模組化、複用性低和全域污染等）而誕生在開發者面前的工具，但是 CSS Modules 和 styled-components 兩者間又有什麼不同呢？或哪種解決方案才更適合自己或團隊？看看文章裡的介紹吧！</p><h3 id="A-deep-dive-into-ES6-Classes"><a href="#A-deep-dive-into-ES6-Classes" class="headerlink" title="A deep dive into ES6 Classes"></a><a href="https://dev.to/mustapha/a-deep-dive-into-es6-classes-2h52" target="_blank" rel="noopener">A deep dive into ES6 Classes</a></h3><p>在 JS 中，不論是 Functional Programming 或 Object Oriented Programming 都有各自的擁護者，兩種寫法也都有優點，但今天不是要來吵架，而是如果你選擇了 OOP 流派，那就不能錯過這篇文章中介紹的 JS 裡所提供有關於 Class 的一切！</p><h3 id="🎃🦇-HTMLoween-🦇🎃-HTML-JS-and-CSS-to-make-your-blood-boil-😱"><a href="#🎃🦇-HTMLoween-🦇🎃-HTML-JS-and-CSS-to-make-your-blood-boil-😱" class="headerlink" title="🎃🦇 HTMLoween 🦇🎃 - HTML, JS and CSS to make your blood boil! 😱"></a><a href="https://dev.to/inhuofficial/its-htmloween-scary-html-js-and-css-2ncj" target="_blank" rel="noopener">🎃🦇 HTMLoween 🦇🎃 - HTML, JS and CSS to make your blood boil! 😱</a></h3><p>對工程師來說，比萬聖節的鬼怪更可怕的就是那些讓人看了不寒而慄的寫法 😂，作者很風趣的舉了一些讓人看了害怕的寫法，應個景讓大家過過節囉！</p><h3 id="Import-Framer-components-directly-in-your-React-code"><a href="#Import-Framer-components-directly-in-your-React-code" class="headerlink" title="Import Framer components directly in your React code"></a><a href="https://www.framer.com/developers/handshake/?fbclid=IwAR16MRXdYPhDzai5oNT1LlYMU7ajpQkhIUzl3OQjyb_75zzq0tXb1zMunmk" target="_blank" rel="noopener">Import Framer components directly in your React code</a></h3><p>Framer 推出一個超強大的功能，可以讓設計師在網頁上先把 component 的樣式、動畫甚至是 props 都定義好，這時候 Framer 會自己自動轉換成 React component 然後會產生一組 url 可以讓你 import 到自己的專案中，所以之後如果遇到很難設計的 component 其實都可以交由設計師來設計了XD</p><h3 id="Next-js-12"><a href="#Next-js-12" class="headerlink" title="Next.js 12"></a><a href="https://nextjs.org/blog/next-12" target="_blank" rel="noopener">Next.js 12</a></h3><p>接續剛剛提到的 Framer，目前能處理 import url 的框架其實基本上是很少的，這時候必須要借助 Next.js 新發佈的 12 版，這個版本可以讓你 import url 所以跟上面的 Framer 搭配起來可以說是把前端推向了一個新世界了，有興趣的讀者可以看看 Next.js 12 版到底做了哪些改變~</p><h3 id="5-things-you-don’t-know-about-try-catch-finally-in-JavaScript"><a href="#5-things-you-don’t-know-about-try-catch-finally-in-JavaScript" class="headerlink" title="5 things you don’t know about try-catch-finally in JavaScript"></a><a href="https://levelup.gitconnected.com/5-things-you-dont-know-about-try-catch-finally-in-javascript-5d661996d77c" target="_blank" rel="noopener">5 things you don’t know about try-catch-finally in JavaScript</a></h3><p>這個真的太有趣了，沒想到 JavaScript 的 try/catch 竟然有這麼多坑洞，一開始在 try 裡面 return value 發現沒有成功，因為會被 finally 的 return 取代掉，後來仔細查了一下 try/catch 到底有哪些坑於是就發現了這篇文章XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-Horizontal-Pod-Autoscaling"><a href="#Kubernetes-Horizontal-Pod-Autoscaling" class="headerlink" title="Kubernetes Horizontal Pod Autoscaling"></a><a href="https://loft.sh/blog/kubernetes-horizontal-pod-autoscaling/" target="_blank" rel="noopener">Kubernetes Horizontal Pod Autoscaling</a></h3><p>Kubernetes Horizontal Pod Autoscaling 是相當強大的功能，通常也會搭配 Cluster Autoscaler 一起使用，畢竟假如 Pod 一直自動橫向擴展下去，Node 要是沒有跟著變多，到最後也只是看到一堆 Pendding 的 Pod，這篇文章除了手把手的教學要如何使用 HPA 之外，也試著去比較 <code>autoscaling/v1</code> 和 <code>autoscaling/v2beta2</code> 的不同之處，也就是後者可以使用多重 Metrics, 也支援客製化和外部 Metric，想要確認自己使用的是哪一個版本的話，可以透過執行以下指令得知 <code>$ kubectl api-versions | grep autoscaling</code>，廢話不多說，有興趣的人可以趕緊打開文章，跟著詳細的步驟一步一步照著做做看</p><h3 id="7-GitHub-projects-to-supercharge-your-Docker-practices-🚀🧑‍💻"><a href="#7-GitHub-projects-to-supercharge-your-Docker-practices-🚀🧑‍💻" class="headerlink" title="7 GitHub projects to supercharge your Docker practices 🚀🧑‍💻"></a><a href="https://dev.to/ankit01oss/7-github-projects-to-supercharge-your-docker-practices-2i80" target="_blank" rel="noopener">7 GitHub projects to supercharge your Docker practices 🚀🧑‍💻</a></h3><p>如何磨練自己使用 Docker Container 的技巧呢？這篇文章的作者分享了七個星星數都爆表的 GitHub 專案供大家參考：</p><ol><li><a href="https://github.com/docker/labs" target="_blank" rel="noopener">Docker Labs</a></li><li><a href="https://github.com/docker-slim/docker-slim" target="_blank" rel="noopener">Minify Docker Container image by 30x</a></li><li><a href="https://github.com/jessfraz/dockerfiles" target="_blank" rel="noopener">Dockerfiles for popular Apps</a></li><li><a href="https://github.com/hexops/dockerfile" target="_blank" rel="noopener">Dockerfile best practices</a></li><li><a href="https://github.com/GoogleContainerTools/distroless" target="_blank" rel="noopener">Distroless Docker images</a></li><li><a href="https://github.com/containrrr/watchtower" target="_blank" rel="noopener">WatchTower</a></li><li><a href="https://github.com/docker/docker-bench-security" target="_blank" rel="noopener">Docker bench for security</a></li></ol><h3 id="Awesome-Argo"><a href="#Awesome-Argo" class="headerlink" title="Awesome Argo"></a><a href="https://github.com/terrytangyuan/awesome-argo" target="_blank" rel="noopener">Awesome Argo</a></h3><p>Argo 家族成員越來越多，上個月才注意到 <a href="https://blog.argoproj.io/argo-rollouts-v1-1-fef8611a9034" target="_blank" rel="noopener">Argo Rollouts 來到 v1.1</a>，而有善心人士就幫忙整理 Argo 的相關資源，例如總共有哪些專案：Argo Workflows, Argo CD, Argo Rollouts, Argo Events…等，有哪一些相關書籍，部落格文章跟影片，對於想要自動化管理 K8s Cluster 的人千萬不要錯過了！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 104 期 - 又到了想要一直待在被窩裡的季節</title>
      <link href="/2021/10/26/104-pac-tools-comparison/"/>
      <url>/2021/10/26/104-pac-tools-comparison/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Shift-Left-Testing-Policy-as-Code-工具大比拼"><a href="#Shift-Left-Testing-Policy-as-Code-工具大比拼" class="headerlink" title="Shift Left Testing - Policy as Code 工具大比拼"></a><a href="https://medium.com/starbugs/shift-left-testing-policy-as-code-%E5%B7%A5%E5%85%B7%E5%A4%A7%E6%AF%94%E6%8B%BC-dcd6840a0592" target="_blank" rel="noopener">Shift Left Testing - Policy as Code 工具大比拼</a></h3><p>在 2019 年時曾經撰文 <a href="https://medium.com/starbugs/policy-as-code-introduction-43332748aa4a" target="_blank" rel="noopener">“介紹 Policy as Code”</a>，當初提的為 Open Policy Agent 這套工具，經過兩年他的定位跟功能沒有太大的改變，而 <a href="https://kubernetes.io/blog/2021/04/06/podsecuritypolicy-deprecation-past-present-and-future/" target="_blank" rel="noopener">“Kubernetes PodSecurityPolicy Deprecation 的消息”</a> 應該有讓大家更重視他一些；當把他放到充滿 IaC 的真實環境運用時，會發現其實導入上沒有那麼容易，因為…</p><ul><li>官方主要提供 PaC 框架，其中的 Policy 需要有懂 Rego 的人去撰寫跟維護</li><li>雖然有跟週邊的生態圈整合的方式，但自己覺得只到堪用的階段</li></ul><p>因此這兩年來陸續有不少工具與服務如雨後春筍般冒了出來，藉由填補這些缺口讓大家更簡單的把 Policy as Code 整合至 Infrastructure as Code 的開發環境中，此篇文章便把自己目前看到一些比較多人使用的工具筆記下來，讓有需要的人在選擇時可以有個依據</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Animating-with-GSAP-and-SVG"><a href="#Animating-with-GSAP-and-SVG" class="headerlink" title="Animating with GSAP and SVG"></a><a href="https://www.simplethread.com/animating-with-gsap-and-svg/" target="_blank" rel="noopener">Animating with GSAP and SVG</a></h3><p>文章中介紹如何使用 GSAP 和 SVG 來製作動畫，而除了程式碼的實作之外，作者也簡單介紹什麼是 GSAP 和 SVG，也提供了他自己設計動畫的思路給大家參考！</p><h3 id="Simple-Screen-Recorder-With-Vanilla-JS"><a href="#Simple-Screen-Recorder-With-Vanilla-JS" class="headerlink" title="Simple Screen Recorder With Vanilla JS"></a><a href="https://dev.to/seths10/simple-screen-recorder-with-vanilla-js-532c" target="_blank" rel="noopener">Simple Screen Recorder With Vanilla JS</a></h3><p>作者介紹如何使用 <code>navigator.mediaDevices.getDisplayMedia</code> 來取得你要提供的螢幕畫面，並用 <code>MediaRecorder</code> 把螢幕內容記錄並下載成檔案。文章中提供的程式碼非常清楚和簡單，可以稍微記一下該怎麼做，下次遇到類似的需求就可以馬上聯想！</p><h3 id="CSS-Layers-Tutorial-Real-CSS-Encapsulation"><a href="#CSS-Layers-Tutorial-Real-CSS-Encapsulation" class="headerlink" title="CSS Layers Tutorial: Real CSS Encapsulation"></a><a href="https://fjolt.com/article/css-encapsulation-with-layers" target="_blank" rel="noopener">CSS Layers Tutorial: Real CSS Encapsulation</a></h3><p>雖然現在幾乎沒有任何一個瀏覽器能夠使用 CSS 的 Layers 語法，但是 Layers 仍然是一個可能改變我們如何寫 CSS 思考模式的 feature，在被廣泛支援之前先來搶先看看吧！ 🙌</p><h3 id="The-optimistic-UI-with-React"><a href="#The-optimistic-UI-with-React" class="headerlink" title="The optimistic UI with React"></a><a href="https://uxdesign.cc/the-optimistic-ui-with-react-f1420e317d54" target="_blank" rel="noopener">The optimistic UI with React</a></h3><p>Optimistic UI 又稱樂觀 UI 在近年的前端可以說是相當興盛，有了這種開發模式可以提升更多使用者體驗，可以說是前端工程師相當重要的一個開發模式，有興趣的讀者不妨可以蒐藏起來閱讀~</p><h3 id="TreeShaking性能優化實踐原理篇"><a href="#TreeShaking性能優化實踐原理篇" class="headerlink" title="TreeShaking性能優化實踐原理篇"></a><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/722589/" target="_blank" rel="noopener">TreeShaking性能優化實踐原理篇</a></h3><p>tree-shaking 對於前端來說相當重要，可以幫助前端減少不必要的 bundle 減少最終的 bundle size，想要了解 tree shaking 的原理可以看看這篇~</p><h2 id="MongoDB"><a href="#MongoDB" class="headerlink" title="MongoDB"></a>MongoDB</h2><h3 id="30天之你好MongoDB-系列"><a href="#30天之你好MongoDB-系列" class="headerlink" title="30天之你好MongoDB 系列"></a><a href="https://ithelp.ithome.com.tw/users/20089358/ironman/1064" target="_blank" rel="noopener">30天之你好MongoDB 系列</a></h3><p>雖然已經是幾年前的文章，但小馬克的這一系列講 MongoDB 講得非常清楚，如果想要有系統性的學習 Mongo 的基礎知識，那這一系列真的很推</p><h3 id="Do-You-Need-Mongoose-When-Developing-Node-js-and-MongoDB-Applications"><a href="#Do-You-Need-Mongoose-When-Developing-Node-js-and-MongoDB-Applications" class="headerlink" title="Do You Need Mongoose When Developing Node.js and MongoDB Applications?"></a><a href="https://www.mongodb.com/developer/article/mongoose-versus-nodejs-driver/" target="_blank" rel="noopener">Do You Need Mongoose When Developing Node.js and MongoDB Applications?</a></h3><p>有在 Node.js 中使用過 MongoDB 的人應該都知道 Mongoose 這套 ODM，他最大的好處就是可以幫你做 schema validation，讓你的資料庫不會有一堆缺值、型別錯誤的 document，但現在的 MongoDB 內建的 schema validation 也算是很成熟了，所以下個專案也許可以考慮不需要使用 Mongoose，直接用官方的 mongo driver 就好了</p><h3 id="Investigate-Queries-with-explain-and-Index-Usage"><a href="#Investigate-Queries-with-explain-and-Index-Usage" class="headerlink" title="Investigate Queries with explain() and Index Usage"></a><a href="https://www.percona.com/blog/2018/09/06/mongodb-investigate-queries-with-explain-index-usage-part-2/" target="_blank" rel="noopener">Investigate Queries with explain() and Index Usage</a></h3><p>有時候在用 Mongo 時會發現 query/insert 的速度不如預期，這時候就需要用 explain 來分析一下到底問題出在哪裡，有可能你以為你精心設計的 index 可以大幅加速 query，但 explain 下去才發現根本沒吃到 index。所以為了讓資料庫照著你想要的方式去動作，今天就把 explain 學好吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="3-Reasons-to-Choose-a-Wide-Cluster-over-Multi-Cluster-with-Kubernetes"><a href="#3-Reasons-to-Choose-a-Wide-Cluster-over-Multi-Cluster-with-Kubernetes" class="headerlink" title="3 Reasons to Choose a Wide Cluster over Multi-Cluster with Kubernetes"></a><a href="https://itnext.io/3-reasons-to-choose-a-wide-cluster-over-multi-cluster-with-kubernetes-c923fecf4644" target="_blank" rel="noopener">3 Reasons to Choose a Wide Cluster over Multi-Cluster with Kubernetes</a></h3><p>在今年的 KubeCon 一直被大家提及的字眼都有關於分散式的 Kubernetes, 例如 Edge, Hybrid Cloud 和 Multi-Cloud，而每個主題都會對應到一拖拉庫的解決方案，例如：KubeEdge, OpenShift Edge, Akri, Baetyl, Kubermatic, Lens, Rancher, KubeFed, KubeSphere, Red Hat ACM, Liqo, Skupper, Linkerd, Fleet…等，但假如可以讓 Kubernets Node 部署在跨不同的地理位置，並且由單一個 Kubernetes Cluster 來做管理，那是不是就不需要上面那些解決方案了？！而這種架構稱為 Wide Cluster 或是 Stretched Cluster，同時也是 Multi-Cluster 模式的替代方案，其實從 Latency, Security, Cloud Cost 和 Cloud Support 這些面向來看的話，Multi-Cluster 都是佔上風的，但作者提出三個 Wide Custer 還是有其用處的理由：</p><ol><li>不想要去採用一堆複雜的工具，省掉很多的時間，例如學習, 維護…等</li><li>節省多個 Cluster 架構下重複設定與元件的管理時間與所需資源</li><li>透過 Mesh VPN 任意無限制地將 K8s Node 延伸到任何的地點</li></ol><h3 id="The-Best-VS-Code-Extensions-to-Supercharge-Your-Git"><a href="#The-Best-VS-Code-Extensions-to-Supercharge-Your-Git" class="headerlink" title="The Best VS Code Extensions to Supercharge Your Git"></a><a href="https://betterprogramming.pub/the-best-vs-code-extensions-to-supercharge-your-git-5d5ab3f64f64" target="_blank" rel="noopener">The Best VS Code Extensions to Supercharge Your Git</a></h3><p>雖然說 DevOps/SRE 應該都是 Terminal 的愛用者，熟悉各種 Git CLI 指令，但其實透過 VS Code 加上 Extension 可以讓 Git 用起來更容易，並且擴展 Git 的功能與能力，所以作者在這篇文章推薦了幾個 VS Code Git Extension 給大家參考：</p><p>- Git Graph: 在 VS Code 最流行用來視覺化 Git 的 Extension，透過它可以看到 Commit Tree 和完成複雜的 Git 操作</p><ul><li>GitLive: 可以讓使用者知道該 Git Repository 其他的貢獻者是否在線上，並且即時知道他們正在處理哪一些 Git Issue 和 Branch</li><li>Git Automator: 假如你很懶得輸入 Commit 訊息，那一定要試試看這個 Extension，他會根據開發者的動作幫忙填寫 Commit Message，並且讓開發者可以透過快捷鍵去增加和 Commit 檔案</li><li>Git Urgent: 他的功能只有一個，而且就像他的名字一樣，讓使用者只需要一個指令就直接增加所有檔案，並且 Commit 完後 Push 到遠端的 Git Repository</li><li>Git Tree Compare: 讓目前正在使用的檔案跟任意的 Branch, Tag 或是 Commit 做比較</li><li>GitLens: 擁有一千萬安裝的 Extension 王者，讓開發者可以得知每一行程式碼的 Commit 資訊，與本地端的差異，顯示出有改變的那幾行，方便開發修改的進行</li></ul><h3 id="Helmify"><a href="#Helmify" class="headerlink" title="Helmify"></a><a href="https://github.com/arttor/helmify" target="_blank" rel="noopener">Helmify</a></h3><p>又到介紹小工具的時間，不知道大家有沒有遇過一種情況，就是已經有管理 K8s 資源的 YAML 檔案，有可能是人類撰寫，或是使用 kubectl output 所獲得，但是希望把它轉換成 Helm Chart，使其之後可以變成使用 Helm 來管理；而 Helmify 就是可以幫助大家達成這件事情的小工具，目前已經常見的 K8s 資源已經都有支援，例如 Deployment, Service, RBAC, configs 和 webhooks，假如剛好有這個需求的話就可以使用這個小工具來節省寶貴的時間</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 103 期 - 秋意濃，入秋最低溫18度</title>
      <link href="/2021/10/19/103-autumn-is-comming/"/>
      <url>/2021/10/19/103-autumn-is-comming/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="IT-邦幫忙鐵人賽懶人包-2021-—-不可以比中指-用Python做一個AI有禮貌神器"><a href="#IT-邦幫忙鐵人賽懶人包-2021-—-不可以比中指-用Python做一個AI有禮貌神器" class="headerlink" title="IT 邦幫忙鐵人賽懶人包 2021 — 不可以比中指! 用Python做一個AI有禮貌神器!"></a><a href="https://medium.com/starbugs/9843a42df691" target="_blank" rel="noopener">IT 邦幫忙鐵人賽懶人包 2021 — 不可以比中指! 用Python做一個AI有禮貌神器!</a></h3><p>去年寫完就有明年一定不要再寫了，沒有新意。但是看到鐵人賽很多好文，不看一下好像很可惜。看完如果沒有記錄下來以後要找又很麻煩，於是還是下筆開始寫了。</p><p>撰寫到後面才發現有這麼有趣的系列文。秉持著不能只有我看到的精神，現在還面對著比中指的圖片寫文章。寫了那麼多的文章第一次有這麼奇妙的感覺。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Facebook-CSS-in-JS-Solution-Stylex-Introduced-at-React-Finland-2021"><a href="#Facebook-CSS-in-JS-Solution-Stylex-Introduced-at-React-Finland-2021" class="headerlink" title="Facebook CSS-in-JS Solution Stylex Introduced at React Finland 2021"></a><a href="https://www.infoq.com/news/2021/10/facebook-css-js-stylex/" target="_blank" rel="noopener">Facebook CSS-in-JS Solution Stylex Introduced at React Finland 2021</a></h3><p>Stylex 是一位 Facebook 的工程師 <a href="https://www.linkedin.com/in/naman-goel-66747242" target="_blank" rel="noopener">Naman Goel</a> 在 <a href="https://react-finland.fi/" target="_blank" rel="noopener">React Finland 2021</a> 中展示的 (有興趣的話可以看看<a href="https://www.youtube.com/watch?v=wIjlBRW4Ty8" target="_blank" rel="noopener">影片</a>)，Stylex 是為了讓大型的 React 應用程式更好的使用 CSS-in-JS 的解決方案。聽說 Stylex 的開源大概會在 2021 年底出現，一起來看看它具備什麼樣的功能吧！</p><h3 id="5-Key-UI-Design-Principles-For-Beginners"><a href="#5-Key-UI-Design-Principles-For-Beginners" class="headerlink" title="5 Key UI Design Principles For Beginners"></a><a href="https://tusharsrivastava.hashnode.dev/5-key-ui-design-principles-for-beginners" target="_blank" rel="noopener">5 Key UI Design Principles For Beginners</a></h3><p>文章中提到五個前端的 UI 設計原則，個人覺得當中的 Color Theory、Typography 和 Hierarchy 都是在處理前端中需要留意，但又很常會不小心遺漏的部分，看完後也可以檢視之後切版或是拿到 UI 設計稿時，多思考一下這樣的頁面代表了什麼。</p><h3 id="Confused-About-rem-and-em-units-in-CSS"><a href="#Confused-About-rem-and-em-units-in-CSS" class="headerlink" title="Confused About rem and em units in CSS?"></a><a href="https://dev.to/ali6nx404/confused-about-rem-and-em-units-in-css-26go" target="_blank" rel="noopener">Confused About rem and em units in CSS?</a></h3><p>簡單解釋了 em 以及 rem 的差別，並提出以 rem 為單位時，要設定值的一些不方便的地方，以及解決方法。而文章最後也說明 em 和 rem 沒有哪個比較好，兩者都有人在使用，建議大家可以都用看看，並感受他們的差別和使用情境！</p><h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><h3 id="從-Hooks-開始，讓你的網頁-React-起來"><a href="#從-Hooks-開始，讓你的網頁-React-起來" class="headerlink" title="從 Hooks 開始，讓你的網頁 React 起來"></a><a href="https://ithelp.ithome.com.tw/m/users/20103315/ironman/2668" target="_blank" rel="noopener">從 Hooks 開始，讓你的網頁 React 起來</a></h3><p>雖然已經是兩年前的文章，不過 PJCHENder 這一系列講 react 跟 hook 講得非常清楚，就算完全沒有寫過 react，只要有前端跟 JS 的基礎知識就可以看懂哦</p><h3 id="React-Hook-Form-vs-Formik-A-technical-and-performance-comparison"><a href="#React-Hook-Form-vs-Formik-A-technical-and-performance-comparison" class="headerlink" title="React Hook Form vs. Formik: A technical and performance comparison"></a><a href="https://blog.logrocket.com/react-hook-form-vs-formik-comparison/" target="_blank" rel="noopener">React Hook Form vs. Formik: A technical and performance comparison</a></h3><p>React Hook Form 跟 Formik 是繼 Redux-Form 之後比較新興的競爭者，主要的功能也是做表單的狀態管理，而這篇文章詳細比較了他們的效能以及寫法，如果最近還在煩惱要用哪個 lib 來做表單的話可以參考看看～</p><h3 id="A-Guide-to-React-Context-and-useContext-Hook"><a href="#A-Guide-to-React-Context-and-useContext-Hook" class="headerlink" title="A Guide to React Context and useContext() Hook"></a><a href="https://dmitripavlutin.com/react-context-and-usecontext/" target="_blank" rel="noopener">A Guide to React Context and useContext() Hook</a></h3><p>Context 算是 React 裡面比較進階的技巧，有時候為了讓整個應用的狀態集中管理，就會需要把一堆 props 一層一層往下傳。但如果這樣傳了太多層，除了程式不好看之外效能也可能變差，而這時候就可以適當的把一些很常用的變數放進 context，就可以讓程式更好維護哦～</p><h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><h3 id="NGINX-vs-Apache-Head-to-Head-Comparison"><a href="#NGINX-vs-Apache-Head-to-Head-Comparison" class="headerlink" title="NGINX vs Apache: Head to Head Comparison"></a><a href="https://hackr.io/blog/nginx-vs-apache" target="_blank" rel="noopener">NGINX vs Apache: Head to Head Comparison</a></h3><p>在 Nginx 還沒誕生以前，主宰整個 web server 的一直都是 Apache，自從 Nginx 誕生後使用人數急速上升甚至超越了 Apache，到底這兩套工具哪個比較好又有哪些差別，這篇文章有做比較有興趣的讀者可以閱讀看看~</p><h3 id="8分鐘帶你深入淺出搞懂Nginx"><a href="#8分鐘帶你深入淺出搞懂Nginx" class="headerlink" title="8分鐘帶你深入淺出搞懂Nginx"></a><a href="https://zhuanlan.zhihu.com/p/34943332" target="_blank" rel="noopener">8分鐘帶你深入淺出搞懂Nginx</a></h3><p>如果讀者跟我一樣都是想要學習 Nginx 但又不知道要從何下手，看著國外的參考資料又覺得英文讀起來相當費時又費力，這邊推薦一篇中文的 Nginx 新手大禮包，可以方便讀者快速了解 Nginx 在做什麼以及 Nginx 是如何做到這些功能的。</p><h3 id="Nginx-——-理解HTTP-代理，負載均衡，緩衝（Buffering）和緩存（Caching）"><a href="#Nginx-——-理解HTTP-代理，負載均衡，緩衝（Buffering）和緩存（Caching）" class="headerlink" title="Nginx —— 理解HTTP 代理，負載均衡，緩衝（Buffering）和緩存（Caching）"></a><a href="https://n3xtchen.github.io/n3xtchen/nginx/2016/02/19/nginx-port-forwording" target="_blank" rel="noopener">Nginx —— 理解HTTP 代理，負載均衡，緩衝（Buffering）和緩存（Caching）</a></h3><p>Nginx 強大的地方就在於除了可以當作是 web server 外還可以當作 reverse proxy server，有了 reverse proxy server 就可以很輕鬆的做到 Load balancer 等等功能，這篇文章講述了幾個在流量處理當中 Nginx 可以做到的好用功能，有興趣的讀者不妨可以閱讀看看</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="K8s-On-Call-Hero"><a href="#K8s-On-Call-Hero" class="headerlink" title="K8s On-Call Hero"></a><a href="https://on-call-hero.komodor.com/" target="_blank" rel="noopener">K8s On-Call Hero</a></h3><p>這週想要介紹的三篇文章都與 Kubernetes 相關，首先是一個叫做 K8s On-Call Hero 的線上小遊戲，看起來是 <a href="https://komodor.com/" target="_blank" rel="noopener">Komodor</a> 為了行銷而開發，遊戲做的滿用心與精美的，其中使用 K8s 常會遇到的問題來當作計分題目，例如在什麼情況下會遇到 ImagePullBackOff，當 Secret 不存在時會引發什麼樣的錯誤，而玩家將有機會獲得機票，Apple Watch 或是 T-Shirt，有時間的話不妨花個幾分鐘玩玩看 😏</p><h3 id="How-to-create-Kubernetes-YAML-files"><a href="#How-to-create-Kubernetes-YAML-files" class="headerlink" title="How to create Kubernetes YAML files"></a><a href="https://itnext.io/how-to-create-kubernetes-yaml-files-abb8426eeb45" target="_blank" rel="noopener">How to create Kubernetes YAML files</a></h3><p>YAML 是一個可讀性高，用來表達資料序列化的格式 (<a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">Wiki</a>)，所以閱讀 YAML 檔案是相當直覺簡單的，不過撰寫 YAML 檔案就沒那麼有趣了，而且以 K8s 來說，自己私底下嘗試，與實際 Production 要使用的 YAML 檔案是有一段差距的，因為正式使用階段的檔案和內容都是不一樣的量級，而且 K8s 本身的資源就有不少種，再加上組職內會用到的 <a href="https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/" target="_blank" rel="noopener">CRD</a>，有沒有覺得頭越來越暈了XD 所以這篇文章介紹幾種建立 K8s YAML 檔案的方式，如何在開發流程自動檢查與修正 YAML 檔案錯誤…等，假如想要瞭解更多的話，請參閱原文</p><ol><li>YQ</li><li>Kubectl</li><li>Docker-compose</li><li>VSCode with plugins</li><li>CDK8s</li><li>NAML</li><li>Online Tools</li></ol><h3 id="Trigger-a-Kubernetes-HPA-with-Prometheus-metrics"><a href="#Trigger-a-Kubernetes-HPA-with-Prometheus-metrics" class="headerlink" title="Trigger a Kubernetes HPA with Prometheus metrics"></a><a href="https://sysdig.com/blog/kubernetes-hpa-prometheus/" target="_blank" rel="noopener">Trigger a Kubernetes HPA with Prometheus metrics</a></h3><p>前一陣子有提到 <a href="https://www.cncf.io/blog/2021/08/18/keda-moves-from-the-cncf-sandbox-to-become-an-incubating-project/" target="_blank" rel="noopener">KEDA 從 CNCF Sandbox 變成 Incubating 專案</a>，他可以讓 K8s Scale Out 符合更多的應用場景，而這篇由 Sysdig 所分享的文章，就是示範透過 KEDA 由 Prometheus Metric 來觸發 Kubernetes 的 <a href="https://kubernetes.io/docs/tasks/run-application/horizontal-pod-autoscale/" target="_blank" rel="noopener">HPA</a>；了解 KEDA 的功能，和實際示範之後，應該都會覺得一定要裝起來用的啊XD 不然原生的 HPA 功能相對陽春，不太能夠滿足各式各樣的需求，推薦給有需要使用到 HPA 的 K8s 開發人員</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 102 期 - 工程師的殼，脫下來還是要繼續處理 Bug</title>
      <link href="/2021/10/12/102-after-developer-rid-of-shell-still-need-to-fix-bug/"/>
      <url>/2021/10/12/102-after-developer-rid-of-shell-still-need-to-fix-bug/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來征服資料結構與演算法吧-簡單來說就是像排隊的-Queue"><a href="#來征服資料結構與演算法吧-簡單來說就是像排隊的-Queue" class="headerlink" title="來征服資料結構與演算法吧 | 簡單來說就是像排隊的 Queue"></a><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E7%B0%A1%E5%96%AE%E4%BE%86%E8%AA%AA%E5%B0%B1%E6%98%AF%E5%83%8F%E6%8E%92%E9%9A%8A%E7%9A%84-queue-dd37572f654c" target="_blank" rel="noopener">來征服資料結構與演算法吧 | 簡單來說就是像排隊的 Queue</a></h3><p>Hi！大家好，我是神 Q 超人！這篇文章要試著用 JavaScript 來分享和實作一種叫做 Queue 的資料結構，也會搭配個 Leetcode 的題目來服用，讓大家之後在解題或處理類似需求的時候能想得到 Queue！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="5-min-To-Understand-Event-Loop-in-Javascript"><a href="#5-min-To-Understand-Event-Loop-in-Javascript" class="headerlink" title="5 min To Understand Event Loop in Javascript"></a><a href="https://bytecodepandit.medium.com/5-min-to-understand-event-loop-in-javascript-ead521e88260" target="_blank" rel="noopener">5 min To Understand Event Loop in Javascript</a></h3><p>又是 JavaScript 的萬年觀念 Event Loop 了！文章中依序從 Multi-threaded &amp; Single-threaded、Heap &amp; Call Stack、Web API 最後再到 Event Queue，一一解釋 Event Loop 的相關概念，是很清楚但不冗長的文章！</p><h3 id="Understanding-Function-Currying-in-JavaScript—and-When-to-Use-It"><a href="#Understanding-Function-Currying-in-JavaScript—and-When-to-Use-It" class="headerlink" title="Understanding Function Currying in JavaScript—and When to Use It"></a><a href="https://code.tutsplus.com/tutorials/understanding-function-currying-in-javascript-and-when-to-use-it--cms-37867" target="_blank" rel="noopener">Understanding Function Currying in JavaScript—and When to Use It</a></h3><p>Currying 在 Functional Programming 裡算是一個常見的設計方法，這個作者先是介紹了什麼是 Currying，又多舉一些日常中會遇到的例子以及何時該使用 Currying，雖然文章有點長，但是例子都很簡單易懂！</p><h3 id="Penetration-and-Security-in-JavaScript"><a href="#Penetration-and-Security-in-JavaScript" class="headerlink" title="Penetration and Security in JavaScript"></a><a href="https://dev.to/didof/penetration-and-security-in-javascript-probing-double-getter-p47" target="_blank" rel="noopener">Penetration and Security in JavaScript</a></h3><p>作者先是建立了一個函式，並且在函式裡寫下一些簡單的錯誤的使用判斷，以避免該函式錯誤被使用，接著開始介紹幾個 JavaScript 的惡意攻擊手法，來試著繞過那些錯誤的使用判斷，也說明如何防禦他們。</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="Guidelines-for-choosing-a-Node-js-framework"><a href="#Guidelines-for-choosing-a-Node-js-framework" class="headerlink" title="Guidelines for choosing a Node.js framework"></a><a href="https://simonplend.com/guidelines-for-choosing-a-node-js-framework/" target="_blank" rel="noopener">Guidelines for choosing a Node.js framework</a></h3><p>近年來 Node.js 用來寫 API Server 的框架越來越多了，除了最知名的 Express/Koa 之外，還有 Fastify、Hapi 等等強調速度、易用性的框架。而這篇文章並沒有直接跟你說要選什麼框架，而是跟你說在選擇的時候該考慮哪些問題，譬如說你需不需要 Websocket、有沒有打算用 TypeScript 等等，這些都會決定哪一個框架最適合你</p><h3 id="Make-NodeJs-handle-5x-request-with-99-9-uptime-adding-10-lines-of-code"><a href="#Make-NodeJs-handle-5x-request-with-99-9-uptime-adding-10-lines-of-code" class="headerlink" title="Make NodeJs handle 5x request with 99.9% uptime adding 10 lines of code"></a><a href="https://bhattaraib58.medium.com/make-nodejs-handle-5x-request-with-99-9-uptime-adding-10-lines-of-code-e264006d35cf" target="_blank" rel="noopener">Make NodeJs handle 5x request with 99.9% uptime adding 10 lines of code</a></h3><p>這篇文章的標題超浮誇XD，但其實就是教你怎麼用 Node 內建的 module 把一個 cluster 跑起來監聽同一個 port，並且在 worker crash 掉之後自動開一個新的，看完之後就可以了解像 pm2 這種工具內部可能是怎麼做的</p><h3 id="Node-js-Garbage-Collection-Explained"><a href="#Node-js-Garbage-Collection-Explained" class="headerlink" title="Node.js Garbage Collection Explained"></a><a href="https://blog.risingstack.com/node-js-at-scale-node-js-garbage-collection/" target="_blank" rel="noopener">Node.js Garbage Collection Explained</a></h3><p>這篇文章難度比較高一點，但我覺得很值得一讀，他除了講解 Node.js 內部的 GC 原理之外，還畫了非常多圖跟舉了很多例子，對於了解 Node.js 的 GC 非常有幫助</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="What-is-a-good-TTL-for-DNS"><a href="#What-is-a-good-TTL-for-DNS" class="headerlink" title="What is a good TTL for DNS?"></a><a href="https://www.nslookup.io/blog/what-is-a-good-ttl-for-dns/" target="_blank" rel="noopener">What is a good TTL for DNS?</a></h3><p>最近 Facebook 遭逢自 2008 年以來最大的故障事件 (停站 6 小時)，除了龐大的金錢損失之外，內部一定也會再花許多的人力來做 postmortem，避免同樣類似的事情再次發生，雖然這次主要不是 DNS 事件，但網路服務維運人員還是直得思考當不預期的事件發生時，要如何保護好自身的服務，例如假使 DNS 服務發生中斷的話，該如何是好？所以這篇文章想跟大家討論每一筆 DNS Record 中用來暫存資訊的 TTL (time-to-live) 設定值，畢竟對於重要的 DNS Record 來說，這個暫存值該設定多少是個相當重要的議題！</p><ul><li><p>何時需要縮短 TTL: 通常進行服務搬遷時，總會造成 IP 的變更，這時候將 TTL 縮短，就可以避免 DNS 服務內暫存已經不存在的運算資源，而使得 Client 連接不到</p></li><li><p>解析的延遲問題: 所以當 DNS 暫存根據 TTL 需要被更新時，就會產生重新抓取的動作，假如這個抓取的網路延遲時間相當地重要的話，就要考慮一下是不是需要增加 TTL，因為較低的 TTL 通常會造成較高的平均網路延遲</p></li><li><p>較長的 TTL 設定: 當 DNS 服務出現問題時，假如 TLL 只有設定幾秒鐘的話，那麼 Client 就會立刻感受到網路異常，雖然 DNS 服務出問題的機率不高，但要是發生網路 DDoS 攻擊，網路問題，或是 DNS Provider 出問題時，較長的 TTL 設定，就可以讓你擁有較快樂的 Client</p></li></ul><p>不過某些種類的 Load Balancing 方式可能讓使用者無法設定比較長的 TTL，除此之外，不同的 DNS Record 型別也需要不同的 TTL 設定，文章最後建議 TTL 至少要設定 5 分鐘，而不是幾秒鐘，對於不太可能需要緊急更改的 DNS Record 可以考慮設定一小時或是更久，例如 google.com 的 NS Record TTL 為兩天，SPF Record TTL 為一小時，A Record 為五分鐘，這些設定讓 DNS 在平常敏捷性和意外中斷時提供了相對合理的平衡，底下為常見 DNS Record 的建議設定值：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Record typeConservative TTLRecommended TTL  Aggressive TTL</span><br><span class="line">A / AAAA    1 hour          5 minutes          60 seconds</span><br><span class="line">NS            &gt;2 days          2 days          12 hours</span><br><span class="line">MX            1 day          4 hours          1 hour</span><br><span class="line">TXT (for SPF)       1 day          1 hour          5 minutes</span><br></pre></td></tr></table></figure><h3 id="Kubernetes-Cluster-API-reaches-production-readiness-with-version-1-0"><a href="#Kubernetes-Cluster-API-reaches-production-readiness-with-version-1-0" class="headerlink" title="Kubernetes Cluster API reaches production readiness with version 1.0"></a><a href="https://www.cncf.io/blog/2021/10/06/kubernetes-cluster-api-reaches-production-readiness-with-version-1-0/" target="_blank" rel="noopener">Kubernetes Cluster API reaches production readiness with version 1.0</a></h3><p>上週 Kubernetes Cluster API 發布 Production Ready 的 1.0 版本，而且也正式遷移到 v1beta1 APIs，意味著此專案已經從之前的 Alpha 邁入更成熟的階段，Cluster API 是一個 Kubernetes 的專案，讓使用者可以宣告式的方法來管理 K8s，輕易地使用 API 來建立，設定與修改 Cluster，許多大公司也都對此專案進行貢獻，例如 VMWare, Microsoft, Weaveworks, Google, Mattermost, IBM, RedHat…等，文章中還有每間公司的使用方式與心得，有興趣的人不要錯過了</p><h3 id="5-Linux-Utilities-That-Will-Make-You-Smile"><a href="#5-Linux-Utilities-That-Will-Make-You-Smile" class="headerlink" title="5 Linux Utilities That Will Make You Smile"></a><a href="https://betterprogramming.pub/5-linux-utilities-that-will-make-you-smile-b582684b3090" target="_blank" rel="noopener">5 Linux Utilities That Will Make You Smile</a></h3><p>一般人總是必須使用 Linux 作業系統來查詢 Log，編譯應用程式…等比較嚴肅的工作任務，此篇作者想要分享幾個工具，讓工程師們的日常生活可以增貼些許樂去</p><ol><li><p>The Fuck: 每個人一定有過打錯指令的經驗，有可能是少打一個字，或是某個字打錯，這個時候就可以使用 fuck 指令！他會幫忙給出建議的正確指令，所以下次再打錯指令時別忘了 fuck 一下XD</p></li><li><p>Pv: 在 Terminal 使用輸出指令，例如 ecoh 時，需要輸出的字串就會立刻出現在下一行，使用 pv 指令之後，就可以讓輸入的字串像是人類正在輸入一般，一個字元一個字元慢慢地顯現出來</p></li><li><p>Figlet: 厭倦每次登入系統時的歡迎畫面了嗎？或是覺得顯示給使用者看訊息太乏味？這時便可以使用 figlet 這個指令，他可以把一般的字串使用 ASCII 資源轉換成具有藝術感的拼貼圖</p></li><li><p>Espeak: 想讓電腦想要跟你說話嗎？可以使用<br>espeak 這個指令讓文字被唸出來，使用的情境其實不少，例如有個工作任務要跑一陣子，你就可以先去忙別的事情，等到完成後再使用 espeak 進行通知</p></li><li><p>Rev: 假如想要把字串整個顛倒列印出來該如何做比較快呢？有點像是面試問題XD rev 這個指令就是用來幫忙把字串顛倒列印出來</p></li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 101 期 - 我最喜歡的秋天來囉～</title>
      <link href="/2021/10/05/101-autumn-is-coming/"/>
      <url>/2021/10/05/101-autumn-is-coming/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><p>Hi 大家好我是 Larry，最近我們 Starbugs 團隊正在拼命寫鐵人賽，所以專欄就先暫停一次。雖然鐵人賽我已經參加過好幾次了，但每次參加都還是累得要命XD，不只下班寫、週末寫，就連蹲馬桶時也要拿著手機寫文章，所以這週大家可以來看看<a href="https://ithelp.ithome.com.tw/2021ironman/signup/team/176" target="_blank" rel="noopener">我們鐵人賽的文章</a>，每篇真的都是我們嘔心瀝血之作（會不會太浮誇XD），沒看到就太可惜了～</p><h3 id="Security-從以卵擊石到堅若磐石之-Web-API-安全性全攻略"><a href="#Security-從以卵擊石到堅若磐石之-Web-API-安全性全攻略" class="headerlink" title="[Security] 從以卵擊石到堅若磐石之 Web API 安全性全攻略"></a><a href="https://ithelp.ithome.com.tw/users/20107714/ironman/4279" target="_blank" rel="noopener">[Security] 從以卵擊石到堅若磐石之 Web API 安全性全攻略</a></h3><p>首先是我寫的「Web API 安全性全攻略」，這一系列想跟大家分享如何打造一個高安全性的 API server。除了講解概念之外，我也會用 Node.JS 跟 Go 寫一些範例，想讓自己的 API Server 更安全就快來看看吧～</p><h3 id="Modern-Web-今晚，我想來點-Web-前端效能優化大補帖！"><a href="#Modern-Web-今晚，我想來點-Web-前端效能優化大補帖！" class="headerlink" title="[Modern Web] 今晚，我想來點 Web 前端效能優化大補帖！"></a><a href="https://ithelp.ithome.com.tw/users/20113277/ironman/3877" target="_blank" rel="noopener">[Modern Web] 今晚，我想來點 Web 前端效能優化大補帖！</a></h3><p>接著是由 莫力全 Kyle 分享的「前端效能優化大補帖」，這一系列詳細介紹了各種跟前端有關的效能優化技術，每一篇文章都扎實到滿出來，而且整個系列中也舉了不少例子來幫助讀者吸收，真的是補到不能再補</p><h3 id="Modern-Web-從零開始學習-Next-js"><a href="#Modern-Web-從零開始學習-Next-js" class="headerlink" title="[Modern Web] 從零開始學習 Next.js"></a><a href="https://ithelp.ithome.com.tw/users/20110504/ironman/4269" target="_blank" rel="noopener">[Modern Web] 從零開始學習 Next.js</a></h3><p>由 Leo 分享的 Next.js 系列我也覺得也非常精彩，在現在 SPA 盛行的時代，僅僅使用 React 要做到 SSR 真的很麻煩，光是搞那些設定就沒時間好好開發，所以快點跟著這一系列從零開始學習 Next.js，讓自己事半功倍吧！</p><h3 id="DevOps-前端工程師學習-DevOps-之路"><a href="#DevOps-前端工程師學習-DevOps-之路" class="headerlink" title="[DevOps] 前端工程師學習 DevOps 之路"></a><a href="https://ithelp.ithome.com.tw/users/20111948/ironman/4306" target="_blank" rel="noopener">[DevOps] 前端工程師學習 DevOps 之路</a></h3><p>最後是由 陳奕帆 Andy 分享的「前端工程師學習 DevOps 之路」，Andy 他雖然是前端工程師，但在因緣際會下逐漸走上了 DevOps 之路，如果你對 Docker、K8s、Nginx 這些很有興趣，那這一系列很適合用來入門哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="5-Common-HTML-Mistakes-you-should-avoid"><a href="#5-Common-HTML-Mistakes-you-should-avoid" class="headerlink" title="5 Common HTML Mistakes you should avoid."></a><a href="https://binatenoor.hashnode.dev/5-common-html-mistakes-you-should-avoid" target="_blank" rel="noopener">5 Common HTML Mistakes you should avoid.</a></h3><p>HTML 的初學者常常會使用 div 加上 class 來表達各種區塊，但其實 HTML 的標籤本身就有提供像是 header 或 footer 的語意了。還有其他幾個普遍使用的誤區，可以看一下自己有沒有不小心踩到。</p><h3 id="5-Tips-for-CSS-responsive-design"><a href="#5-Tips-for-CSS-responsive-design" class="headerlink" title="5 Tips for CSS responsive design"></a><a href="https://ramyachinnadurai.in/5-tips-for-css-responsive-design" target="_blank" rel="noopener">5 Tips for CSS responsive design</a></h3><p>作者先提供他在設計 RWD 的一些觀點，並且介紹了在 RWD 顯示時會用到的方法，其實都是一些會以觀看的螢幕尺寸大小變化時改變顯示的 CSS 屬性，可以了解一下。</p><h3 id="前端包管理工具原理-npm-amp-amp-yarn"><a href="#前端包管理工具原理-npm-amp-amp-yarn" class="headerlink" title="前端包管理工具原理(npm &amp;&amp; yarn)"></a><a href="https://juejin.cn/post/7014500143453962271" target="_blank" rel="noopener">前端包管理工具原理(npm &amp;&amp; yarn)</a></h3><p>這篇文章解釋了在輸入 npm 或 yarn install 時的背後流程，以及 npm 和 yarn 兩者如何處理各個套件對應的依賴關係。</p><h3 id="GSAP"><a href="#GSAP" class="headerlink" title="GSAP"></a><a href="https://github.com/greensock/GSAP" target="_blank" rel="noopener">GSAP</a></h3><p>不曉得大家有沒有遇過一種動畫是必須要根據使用者進行滾動時才會慢慢觸發，而不是透過簡單的 <code>keyframe</code> 以及 <code>animation</code> 來達成，這時候就必須要依靠 JavaScript 的幫忙了，這邊有一個很好用的套件可以很輕鬆地達到這件事，如果有讀者遇到類似的問題不妨可以使用這個套件~</p><h3 id="React-Hook-Form-vs-Formik-A-technical-and-performance-comparison"><a href="#React-Hook-Form-vs-Formik-A-technical-and-performance-comparison" class="headerlink" title="React Hook Form vs. Formik: A technical and performance comparison"></a><a href="https://blog.logrocket.com/react-hook-form-vs-formik-comparison/" target="_blank" rel="noopener">React Hook Form vs. Formik: A technical and performance comparison</a></h3><p>在 React 的世界中只要提到 form 不外乎使用的套件就是 <a href="https://react-hook-form.com/" target="_blank" rel="noopener">react-hook-form</a> 或者 <a href="https://formik.org/docs/overview" target="_blank" rel="noopener">formik</a>，這兩個套件到底哪個比較好以及哪個效能比較好呢？這篇文章會跟大家介紹這一切，但我還是推薦使用自己最擅長的套件才是比較重要的。</p><h3 id="CSR-vs-SSR-vs-SSG"><a href="#CSR-vs-SSR-vs-SSG" class="headerlink" title="CSR vs SSR vs SSG"></a><a href="https://www.jianshu.com/p/5f0e7f5e6acd" target="_blank" rel="noopener">CSR vs SSR vs SSG</a></h3><p>CSR 跟 SSR 在前端來說一直是個很常被拿來比較的話題，如今又有一個新的名詞叫 SSG，到底這三個東西差在哪？這篇文章用圖文的方式讓大家可以了解這三者之間的差別。</p><h2 id="GraphQL"><a href="#GraphQL" class="headerlink" title="GraphQL"></a>GraphQL</h2><h3 id="用-TypeScript-寫一個-Apollo-server"><a href="#用-TypeScript-寫一個-Apollo-server" class="headerlink" title="用 TypeScript 寫一個 Apollo server"></a><a href="https://jimmyswebnote.com/graphql-typescript-apollo-server/" target="_blank" rel="noopener">用 TypeScript 寫一個 Apollo server</a></h3><p>最近公司的專案剛好需要用 typescript 架 Apollo server，但找了一下幾乎所有的文章都是用 JS 寫的，好不容易才找到這篇還不錯的文章，想以 TS+Apollo 開始入門 GraphQL 的話可以參考看看～</p><h3 id="A-guide-to-authentication-in-GraphQL"><a href="#A-guide-to-authentication-in-GraphQL" class="headerlink" title="A guide to authentication in GraphQL"></a><a href="https://www.apollographql.com/blog/backend/auth/a-guide-to-authentication-in-graphql/" target="_blank" rel="noopener">A guide to authentication in GraphQL</a></h3><p>大部分 GraphQL 的文章幾乎都在講 GraphQL 多方便，一次請求就可以 query 到所有需要的資料，但卻很少有文章提到如何在 GraphQL 中做身分認證，而這篇算是近期我看到的文章中講的最好的，如果不知道怎麼在抓資料之前確認使用者身分，那可以來讀讀這篇</p><h3 id="Think-in-GraphQL"><a href="#Think-in-GraphQL" class="headerlink" title="Think in GraphQL"></a><a href="https://ithelp.ithome.com.tw/m/users/20111997/ironman/1878" target="_blank" rel="noopener">Think in GraphQL</a></h3><p>說到 GraphQL 的中文學習資源，我覺得 Think in GraphQL 這一系列寫得相當不錯，重要的概念都有講到，而且也舉了不少例子，如果想學 GraphQL 但又懶得讀英文的話非常推薦這個～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-Terraform-AWS-Cloud-Control-Provider-Tech-Preview"><a href="#Announcing-Terraform-AWS-Cloud-Control-Provider-Tech-Preview" class="headerlink" title="Announcing Terraform AWS Cloud Control Provider Tech Preview"></a><a href="https://www.hashicorp.com/blog/announcing-terraform-aws-cloud-control-provider-tech-preview" target="_blank" rel="noopener">Announcing Terraform AWS Cloud Control Provider Tech Preview</a></h3><p>AWS Terraform Provider 應該算是最多人使用的 Provider 了吧？！而他的下一代 Terraform AWS Cloud Control Provider 最近登場啦！目前正在 Tech Preview 的階段當中，不過看到這裡，大家應該一頭霧水，現在不是好好的嗎？為什麼要突然大改出個新版的？其實是因為 Amzeon 這邊推出了 <a href="https://aws.amazon.com/blogs/aws/announcing-aws-cloud-control-api/" target="_blank" rel="noopener">AWS Cloud Control API</a>，主要目的是要提供一個通用的 API 讓大家可以更方面的管理 AWS 的資源，畢竟 AWS 的資源越來越多，多到有些我都沒聽過XD 每種資源目前使用寫程式去做新增/修改/刪除時都不同，例如 S3 和 EC2 的建立方式就不會相同；所以 HashiCorp 或是其他的 IaC 工具再整合上就會方便很多，不再需要每次 AWS 有新的服務就要花時間跟人力去做整合跟開發，可以在服務推出且支援 Cloud Control API 的當下就立即支援，所以跟舊版的 AWS Terraform Provider 差異非常的大，文章中有同時使用新舊兩種 AWS Terraform Provider 的範例，自己相信在不久的將來，大家都會使用新版的 Provider</p><h3 id="The-hunt-for-a-better-Dockerfile"><a href="#The-hunt-for-a-better-Dockerfile" class="headerlink" title="The hunt for a better Dockerfile"></a><a href="https://matduggan.com/the-hunt-for-a-better-dockerfile/" target="_blank" rel="noopener">The hunt for a better Dockerfile</a></h3><p>作者覺得 Dockerfile 還不夠好用，他覺得應該要有其他的解決方案用來取代他，他理想中覺得應該要有一個 API 可以用來管理 Container 的參數才對，如此一來就可以使用跟應用服務一樣的語言來設定與測試 Container，並且跟 CI 整合在一起，文中談及 BuildKit，buildah, PouchContainer 和 Packer；最後作者建議要是組織中原本有在使用 Ansible/Puppet/Chef 等 IaC 工具的話，就可以使用 Packer，而要是沒有這個基礎或是包袱的話，他覺得可以嘗試看看 buildah！</p><h3 id="binocle"><a href="#binocle" class="headerlink" title="binocle"></a><a href="https://github.com/sharkdp/binocle" target="_blank" rel="noopener">binocle</a></h3><p> 又到了介紹小工具的時候了，今天要談的 Binocle 是可以將 Binary 資料視覺化的工具，他可以根據不同的規則將 Byte 上色，並且產生一個矩形的像素圖，讓使用者可以用眼睛辨別大檔案中有趣的圖案；不過…自己還沒有想到實際上要怎麼應用會比較有價值XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 100 期 - 歡慶滿百期，多篇專欄文章免費大放送</title>
      <link href="/2021/09/28/100-cgroups-v2/"/>
      <url>/2021/09/28/100-cgroups-v2/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="第一千零一篇的-cgroups-介紹"><a href="#第一千零一篇的-cgroups-介紹" class="headerlink" title="第一千零一篇的 cgroups 介紹"></a><a href="https://medium.com/starbugs/%E7%AC%AC%E4%B8%80%E5%8D%83%E9%9B%B6%E4%B8%80%E7%AF%87%E7%9A%84-cgroups-%E4%BB%8B%E7%B4%B9-a1c5005be88c" target="_blank" rel="noopener">第一千零一篇的 cgroups 介紹</a></h3><p>最近自己打算開始把手上的系統從 cgroup v1 轉換到 v2，在設定的過程中，發現自己對其一知半解，因此在查詢資料的過程中，順便將筆記整理成文章，內容涵括：</p><p>💡 快速理解 cgroups 的核心概念<br>💡 實際演示 cgroups 的運作機制<br>💡 Rootless Container 與 cgroups v2 的關係<br>💡 cgroups v2 當前跟 Container 生態系的整合情況</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="身為-JS-開發者，你應該要知道的記憶體管理機制"><a href="#身為-JS-開發者，你應該要知道的記憶體管理機制" class="headerlink" title="身為 JS 開發者，你應該要知道的記憶體管理機制"></a><a href="https://medium.com/starbugs/%E8%BA%AB%E7%82%BA-js-%E9%96%8B%E7%99%BC%E8%80%85-%E4%BD%A0%E4%B8%8D%E8%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84%E8%A8%98%E6%86%B6%E9%AB%94%E7%AE%A1%E7%90%86%E6%A9%9F%E5%88%B6-d9db2fd66f8" target="_blank" rel="noopener">身為 JS 開發者，你應該要知道的記憶體管理機制</a></h3><p>如果你是寫 C/C++ 的開發者，應該對記憶體管理並不陌生，如果你是後端開發者，應該會常常注意伺服器有沒有發生 Memory Leak 與 Memory 使用量的狀況。然而在前端開發中，因為瀏覽器可以迅速啟動與關閉的特性，再加上 JavaScript 的 Garbage…</p><h3 id="面試-考驗你對-Promise-的熟度之進階應用題"><a href="#面試-考驗你對-Promise-的熟度之進階應用題" class="headerlink" title="[面試] 考驗你對 Promise 的熟度之進階應用題"></a><a href="https://medium.com/starbugs/%E9%9D%A2%E8%A9%A6-%E8%80%83%E9%A9%97%E4%BD%A0%E5%B0%8D-promise-%E7%9A%84%E7%86%9F%E5%BA%A6%E4%B9%8B%E9%80%B2%E9%9A%8E%E6%87%89%E7%94%A8%E9%A1%8C-6eda0dd0d767" target="_blank" rel="noopener">[面試] 考驗你對 Promise 的熟度之進階應用題</a></h3><p>此篇文章假設讀者已經了解 Promise 的基本知識，若還不是很熟悉會建議先瞭解基本概念</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Nuxt-3-is-coming"><a href="#Nuxt-3-is-coming" class="headerlink" title="Nuxt 3 is coming."></a><a href="https://nuxtjs.org/v3/" target="_blank" rel="noopener">Nuxt 3 is coming.</a></h3><p>Nuxt 要準備進入 3.0 的時代啦！雖然距離公開測試版的發佈時間還有兩個禮拜，不過有在關注或是正在使用 Nuxt 開發的讀者們，可以先到官網的首頁看看有哪些功能得到了更新，也能先用 Email 訂閱，這樣就可以在公開測試版發佈時取得第一手通知！</p><h3 id="7-UI-Design-Fundamentals-for-Developers"><a href="#7-UI-Design-Fundamentals-for-Developers" class="headerlink" title="7 UI Design Fundamentals for Developers"></a><a href="https://dev.to/vansh__bhardwaj/7-ui-design-fundamentals-for-developers-57hg" target="_blank" rel="noopener">7 UI Design Fundamentals for Developers</a></h3><p>應該有一些前端工程師都會因為公司沒有 UI 設計師而斜槓一些設計的技能吧 😂 ，這篇文章分享幾個基本的網站 UI 設計原則，之後在思考該如何排版的時候不妨參考一下！</p><h3 id="How-to-Use-React-Router-Dom-as-Pro"><a href="#How-to-Use-React-Router-Dom-as-Pro" class="headerlink" title="How to Use React Router Dom as Pro"></a><a href="https://full-stack-dev.hashnode.dev/how-to-use-react-router-dom-as-pro" target="_blank" rel="noopener">How to Use React Router Dom as Pro</a></h3><p>在現今的前端框架中，使用和框架相關的 Router 工具來判斷當前要顯示哪個頁面，或是如何改變當前的網址已經是很正常的技術了，但是當專案的頁面慢慢變多的時候，你有辦法好好管理各個 Route 嗎？文章中很好的闡述了如何處理，和 Router 的 config 一樣是為了解決路徑散佈在專案各個地方的問題。</p><h3 id="TS-Type-Guard-and-Narrowing"><a href="#TS-Type-Guard-and-Narrowing" class="headerlink" title="[TS] Type Guard and Narrowing"></a><a href="https://pjchender.dev/typescript/ts-narrowing/" target="_blank" rel="noopener">[TS] Type Guard and Narrowing</a></h3><p>在 TypeScript 的世界中，很常會遇到因為 Type 的不一致導致錯誤，如果不喜歡使用 assertion 的方式直接轉型就必須要使用 Type guard 了，這樣 TypeScript 就會知道這個變數是符合我想要的 Type，但這樣就會因此造成型別限縮，所以讀者在使用的時候也要小心。</p><h3 id="打造簡潔有力版面的小秘訣：Dcard-編輯器實作經驗分享"><a href="#打造簡潔有力版面的小秘訣：Dcard-編輯器實作經驗分享" class="headerlink" title="打造簡潔有力版面的小秘訣：Dcard 編輯器實作經驗分享"></a><a href="https://medium.com/dcardlab/%E6%89%93%E9%80%A0%E7%B0%A1%E6%BD%94%E6%9C%89%E5%8A%9B%E7%89%88%E9%9D%A2%E7%9A%84%E5%B0%8F%E7%A7%98%E8%A8%A3-dcard-%E7%B7%A8%E8%BC%AF%E5%99%A8%E5%AF%A6%E4%BD%9C%E7%B6%93%E9%A9%97%E5%88%86%E4%BA%AB-cdd0e65ed178" target="_blank" rel="noopener">打造簡潔有力版面的小秘訣：Dcard 編輯器實作經驗分享</a></h3><p>覺得這篇真的太厲害了，在網頁要打造一個編輯器真的是一件不容易的事情，想當年為了要了解整個 Draft.js 的架構就花了好多時間，最後還是決定用其他套件了XD，假如你的網站非常注重 CMS 系統，不妨也可以看看前輩的思考邏輯來為自己的網站做出不一樣的編輯器吧！</p><h3 id="7-useful-HTML-attributes-you-may-not-know"><a href="#7-useful-HTML-attributes-you-may-not-know" class="headerlink" title="7 useful HTML attributes you may not know"></a><a href="https://dev.to/simonpaix/7-useful-html-attributes-you-may-not-know-7mn" target="_blank" rel="noopener">7 useful HTML attributes you may not know</a></h3><p>這個真的太酷了，寫了前端那麼久都不知道原來有那麼多隱藏的 attribute 可以使用，這篇文章整理了 7 個比較冷門的 HTML attributes，想要增加自己冷知識的讀者不妨可以收藏起來日後閱讀~</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Implementing-a-Generic-Filter-Function-in-Go"><a href="#Implementing-a-Generic-Filter-Function-in-Go" class="headerlink" title="Implementing a Generic Filter Function in Go"></a><a href="https://preslav.me/2021/09/22/implementing-a-generic-filter-function-in-golang/" target="_blank" rel="noopener">Implementing a Generic Filter Function in Go</a></h3><p>Go 從 1.18 開始就要支援泛型了，但應該還是有許多人不熟悉泛型究竟能做什麼，又剛好最近看到這篇文章用一個很簡單的例子講泛型的好處，所以就在這邊分享給大家～</p><h3 id="How-does-context-work"><a href="#How-does-context-work" class="headerlink" title="How does context work?"></a><a href="https://link.medium.com/nUe9FDeQNjb" target="_blank" rel="noopener">How does context work?</a></h3><p>寫 Go 寫了一陣子之後應該多少會聽過 context 這個東西，我個人認為他算是 Go 裡面比較進階的技巧，雖然很多功能沒有 context 也還是可以實現出來，但很多時候 context 能幫你更優雅的解決問題，所以若是對 context 不熟的朋友們趕快來了解一下吧</p><h3 id="GraphQL-in-Go"><a href="#GraphQL-in-Go" class="headerlink" title="GraphQL in Go"></a><a href="https://programmingpercy.tech/blog/using-graphql-in-golang/" target="_blank" rel="noopener">GraphQL in Go</a></h3><p>平常在網路上搜尋 GraphQL 時查到的都是用 Node.js 實作的 GraphQL Server，但其實 Go 身為後端語言也可以，而且概念跟在 Node.js 裡面幾乎是一樣的，只是把語法換成 Go 的樣子而已，想寫 Go 又想用 GraphQL 的話可以參考看看這篇的範例</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="What-is-expected-in-the-SRE-role-We-analyzed-30-job-postings-to-find-out"><a href="#What-is-expected-in-the-SRE-role-We-analyzed-30-job-postings-to-find-out" class="headerlink" title="What is expected in the SRE role? We analyzed 30 job postings to find out."></a><a href="https://spike.sh/blog/sre-role-2021-analysed-30-job-postings/" target="_blank" rel="noopener">What is expected in the SRE role? We analyzed 30 job postings to find out.</a></h3><p>自從 Google 2016 年推出有關 SRE 的書籍之後，這個領域變的更廣為人所知，而且在全球也有越來越多的開發團隊採用，但是 SRE 究竟是要做什麼呢？這個角色的核心責任是什麼？雖然可以透過書籍或是影片來了解 SRE，但其實並無法那麼清楚地勾畫出 SRE 每天預期的工作內容，所以此篇文章的作者嘗試分析 30 個擁有 SRE 這個職缺的主要大公司的 Job Description，例如 Google, Twitter, SLack…等，以下是他所發現的結果，想要知道每個項目的更詳細內文可以參考內文</p><p>💡 部署與維護 Infrastructure (佔比 84% )<br>💡 定義與管理 SLO, SLI 和 Error Budgets (佔比 34%)<br>💡 設定 Monitoring 和 Alert (佔比 47%)<br>💡 On Call 去負責處理緊急事件與事後檢討 (佔比 47%)<br>💡 開發工具與自動化流程 (佔比 56%)</p><h3 id="The-certificate-for-deb-nodesource-seems-to-be-expired"><a href="#The-certificate-for-deb-nodesource-seems-to-be-expired" class="headerlink" title="The certificate for deb.nodesource seems to be expired"></a><a href="https://github.com/nodesource/distributions/issues/1266" target="_blank" rel="noopener">The certificate for deb.nodesource seems to be expired</a></h3><p>有被 Let’s Encrypt 這波 Root Certificate 過期 (20210930) 影響到的人可以看一下這個 GitHub Issue，裡面蠻多人回了 Client 可以 Workaround 的做法供參考，最簡單的解法當然就是 <code>sudo apt install ca-certificates</code>，不過每個人的環境都不一樣，而且也不是那麼的單純，所以大家都很熱心把自己解決方法貼到 Issue 中，關於這次事件的起因，可以觀看這篇文章 <a href="https://scotthelme.co.uk/lets-encrypt-old-root-expiration/" target="_blank" rel="noopener">*<em>Let’s Encrypt’s Root Certificate is expiring!<br>*</em></a> 了解更詳細資訊</p><h3 id="12-Github-Repositories-to-Help-You-Ace-Your-Job-Interview"><a href="#12-Github-Repositories-to-Help-You-Ace-Your-Job-Interview" class="headerlink" title="12+ Github Repositories to Help You Ace Your Job Interview"></a><a href="https://dev.to/olanetsoft/12-github-repositories-to-help-you-ace-your-job-interview-2a08" target="_blank" rel="noopener">12+ Github Repositories to Help You Ace Your Job Interview</a></h3><p>這篇文章放在這個 DevOps 段落好像有點怪怪的，因為大家都需要透過面試找到工作XD 這篇文章的作者覺得面試這件事情總是會跟焦慮和不蘇胡的感覺連結在一起，為了免除這種感覺，並且有更好的面試表現，充分的準備是一定要的，所以他分享了各種準備面試的重要工具，讓面臨面試下可以臨危不亂</p><p>作者分享的面試準備 GitHub Repository 有一半以上都不只限定於特定的工程職位，還滿通用的，只要需要寫程式或是維護線上服務都會用到的內容，年底也快到了，想要看看新機會的人不要錯過XD</p><p>📚 <a href="https://github.com/jwasham/coding-interview-university" target="_blank" rel="noopener">Coding University Interview</a><br>📚 <a href="https://github.com/danistefanovic/build-your-own-x" target="_blank" rel="noopener">Build Your Own X</a><br>📚 <a href="https://github.com/yangshun/tech-interview-handbook" target="_blank" rel="noopener">Tech Interview Handbook</a><br>📚 <a href="https://github.com/veeral-patel/how-to-secure-anything" target="_blank" rel="noopener">How to Secure Anything</a><br>📚 <a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener">JavaScript Algorithms</a><br>📚 <a href="https://github.com/vasanthk/how-web-works" target="_blank" rel="noopener">How The Web Works</a><br>📚 <a href="https://github.com/TheAlgorithms/Javascript" target="_blank" rel="noopener">The Algorithms</a><br>📚 <a href="https://github.com/donnemartin/system-design-primer" target="_blank" rel="noopener">The System Primer</a><br>📚 <a href="https://github.com/DopplerHQ/awesome-interview-questions" target="_blank" rel="noopener">Awesome Interview Questions</a><br>📚 <a href="https://github.com/Olshansk/interview" target="_blank" rel="noopener">Interview Resources</a><br>📚 <a href="https://github.com/inancgumus/learngo" target="_blank" rel="noopener">Learn Go</a><br>📚 <a href="https://github.com/ryanmcdermott/clean-code-javascript" target="_blank" rel="noopener">clean-code-javascript</a><br>📚 <a href="https://github.com/lydiahallie/javascript-questions" target="_blank" rel="noopener">JavaScript Questions</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 99 期 - 中秋節烤得肉變成了體重</title>
      <link href="/2021/09/21/99-foods-in-mid-autumn-festival-became-calorie/"/>
      <url>/2021/09/21/99-foods-in-mid-autumn-festival-became-calorie/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Python-一次搞懂-Pass-by-Value-Pass-by-Reference-與-Pass-by-Sharing"><a href="#Python-一次搞懂-Pass-by-Value-Pass-by-Reference-與-Pass-by-Sharing" class="headerlink" title="Python | 一次搞懂 Pass by Value, Pass by Reference 與 Pass by Sharing"></a><a href="https://medium.com/starbugs/python-%E4%B8%80%E6%AC%A1%E6%90%9E%E6%87%82-pass-by-value-pass-by-reference-%E8%88%87-pass-by-sharing-1873a2c6ac46" target="_blank" rel="noopener">Python | 一次搞懂 Pass by Value, Pass by Reference 與 Pass by Sharing</a></h3><p>這次透過 Python 來探討 Pass by Value, Pass by Reference 與 Pass by Sharing 三個重要概念。<br>為什麼這些概念重要呢，因為常見的語言：</p><ul><li>JavaScript (Call by Value, Call by Sharing)</li><li>Java (Call by Value)</li><li>C (Call by Value)</li><li>C++ (Call by Value, Call by Reference)</li></ul><p>傳值策略大概離不開這幾個，因此我先用比較少人寫過文章，但是又很多人在使用的 Python，來探究不可不知的 Pass by Value, Pass by Reference, 與 Pass by Sharing 這幾個概念。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Typescript-explained-in-Javascript-extends"><a href="#Typescript-explained-in-Javascript-extends" class="headerlink" title="Typescript explained in Javascript: extends"></a><a href="https://skovy.dev/typescript-explained-in-javascript-extends/" target="_blank" rel="noopener">Typescript explained in Javascript: extends</a></h3><p>Typescript 的 <code>extends</code> 究竟代表哪些東西呢？在 JavaScript 的世界中就很單純通常都是用來作 <code>class</code> 的繼承，而 TypeScript 則有不少地方都可以使用 <code>extends</code>，這篇文章整理了幾個 <code>extends</code> 在不同情境中做了哪些事情，很值得一看~</p><h3 id="How-to-如何打造像是-create-react-app-的-npx-script-（以-create-threejs-starter-pack-為例）"><a href="#How-to-如何打造像是-create-react-app-的-npx-script-（以-create-threejs-starter-pack-為例）" class="headerlink" title="How to - 如何打造像是 create-react-app 的 npx script （以 create-threejs-starter-pack 為例）"></a><a href="https://www.summerbud.org/zh-tw/how-to/build-your-own-npx-script-like-create-react-app" target="_blank" rel="noopener">How to - 如何打造像是 create-react-app 的 npx script （以 create-threejs-starter-pack 為例）</a></h3><p>有時候想要利用某個好用的套件來產出一些 repo 出來都會使用 <code>npx</code> 的方式進行，這樣就可以減少不少時間，但假如是自己設計的 repo 也想要這樣使用就必須要自己寫一些 script 了，這篇文章作者使用了一些方式來達到這樣的效果，有興趣的讀者不妨可以看看~</p><h3 id="在瀏覽器上透過-Arduino-讀取溫濕度-Web-Serial-API"><a href="#在瀏覽器上透過-Arduino-讀取溫濕度-Web-Serial-API" class="headerlink" title="在瀏覽器上透過 Arduino 讀取溫濕度 - Web Serial API"></a><a href="https://blog.kalan.dev/2021-03-21-web-serial-api-with-arduino/" target="_blank" rel="noopener">在瀏覽器上透過 Arduino 讀取溫濕度 - Web Serial API</a></h3><p>這個真的太酷了，從來沒有想過 JavaScript 也能操作到底層，不過這項功能目前只有 chromium 核心的瀏覽器才有<a href="https://caniuse.com/web-serial" target="_blank" rel="noopener">支援</a>，不過相信之後會支援的瀏覽器會越來越多，期許哪天我們也可以用 JavaScript 開發韌體了XDD</p><h3 id="INTRODUCING-GATSBY-4"><a href="#INTRODUCING-GATSBY-4" class="headerlink" title="INTRODUCING GATSBY 4"></a><a href="https://www.gatsbyjs.com/gatsby-4/" target="_blank" rel="noopener">INTRODUCING GATSBY 4</a></h3><p>想不到我連 3 都還沒有升級完成，Gatsby 就馬上再推出 4 的 beta 版本，而 Gatsby 官方也說，關於 3 的版本已經在 v3.14.0 完全結束了！接下來就會進入 4 的世界囉！來看看它有什麼特別的 feature 吧！</p><h3 id="before-and-after-on-CSS-Guide-For-Beginners"><a href="#before-and-after-on-CSS-Guide-For-Beginners" class="headerlink" title="::before and ::after on CSS - Guide For Beginners"></a><a href="https://yuricodesbot.hashnode.dev/before-and-after-on-css-guide-for-beginners" target="_blank" rel="noopener">::before and ::after on CSS - Guide For Beginners</a></h3><p>作者用很簡單的例子來解釋 CSS 屬性中的 ::before 和 ::after，快跟著作者一起玩轉這些「Pseudo-elements（偽元素）」吧！</p><h3 id="Frosted-glass-on-CSS"><a href="#Frosted-glass-on-CSS" class="headerlink" title="Frosted glass on CSS"></a><a href="https://dev.to/tolentinoel/frosted-glass-on-css-37bg" target="_blank" rel="noopener">Frosted glass on CSS</a></h3><p>文章中分享如何透過 CSS 的 backdrop-filter 來製作霧面玻璃的效果。除此之外，也有嘗試另外幾種像是色調或陰影等與霧面玻璃搭配的樣式。</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="從編譯器優化角度初探-Javascript的-V8-引擎"><a href="#從編譯器優化角度初探-Javascript的-V8-引擎" class="headerlink" title="從編譯器優化角度初探 Javascript的 V8 引擎"></a><a href="https://tech-blog.cymetrics.io/posts/maxchiu/turbofan/" target="_blank" rel="noopener">從編譯器優化角度初探 Javascript的 V8 引擎</a></h3><p>一般人對於直譯式語言的印象就是慢編譯式語言一大截，但 JS 的 V8 引擎為了加快速度也是做了非常多的最佳化，雖然在效能上可能還是略遜於編譯式語言，但因為 Web 應用大多是 IO-bound 的，所以在實際應用上 JS 還是可以有很不錯的表現</p><h3 id="Effective-limited-parallel-execution-in-JavaScript"><a href="#Effective-limited-parallel-execution-in-JavaScript" class="headerlink" title="Effective limited parallel execution in JavaScript"></a><a href="https://link.medium.com/9jIOpSFKIjb" target="_blank" rel="noopener">Effective limited parallel execution in JavaScript</a></h3><p>很多應用都會有在 client 端限流的需求，譬如說爬蟲如果一口氣發太多請求出去，可能就會直接被 ban 掉，因此這篇文章介紹了一個 Promise Pool 套件，可以用來限制同時運行的 promise 數量，如果有類似需求的話可以參考看看～</p><h3 id="ES2022-feature-class-static-initialization-blocks"><a href="#ES2022-feature-class-static-initialization-blocks" class="headerlink" title="ES2022 feature: class static initialization blocks"></a><a href="https://2ality.com/2021/09/class-static-block.html" target="_blank" rel="noopener">ES2022 feature: class static initialization blocks</a></h3><p>JS 又要有新的 feature 了～這次的 class static initialization blocks 可以讓你在 class 裡面對 static variable 進行初始化，雖然我個人感覺沒有很實用XD，不過還是來了解一下吧</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-Best-Practices-101"><a href="#Kubernetes-Best-Practices-101" class="headerlink" title="Kubernetes Best Practices 101"></a><a href="https://github.com/diegolnasc/kubernetes-best-practices" target="_blank" rel="noopener">Kubernetes Best Practices 101</a></h3><p>每次總是會在 GitHub Repository 挖到寶，這次要介紹的是有關於使用 K8s 的最佳守則，作者希望可以幫助大家擁有一個更穩定與可靠的應用環境，裡面提到叢集在架構，成本與 Namespace 需要注意的重點，接著針對 Security, Labels, Liveness, Readiness, Resources, Scalability, Devployment 和 Shutdown 分別詳述應該要怎麼做會比較好，不管是新手或是老手，應該都可以透過裡面提到的內容溫故知新</p><h3 id="How-to-Write-Test-Cases-Sample-Template-with-Examples"><a href="#How-to-Write-Test-Cases-Sample-Template-with-Examples" class="headerlink" title="How to Write Test Cases: Sample Template with Examples"></a><a href="https://www.guru99.com/test-case.html" target="_blank" rel="noopener">How to Write Test Cases: Sample Template with Examples</a></h3><p> 如何寫出測試案例呢？這個議題滿有趣的，很適合面試 QA 的時候使用，因為自己覺得有點 Open Question 的味道，雖然有一些基本的要素一定要具備，但有滿多延伸的問題可以繼續討論，guru99 這邊使用登入服務這個功能如何測試開始討論起，提出應該注意的要素有哪一些，並且一一提供最佳守則供大家參考</p><h3 id="How-to-Test-Serverless-Applications-in-AWS"><a href="#How-to-Test-Serverless-Applications-in-AWS" class="headerlink" title="How to Test Serverless Applications in AWS"></a><a href="https://www.freecodecamp.org/news/how-to-test-serverless-applications-in-aws/" target="_blank" rel="noopener">How to Test Serverless Applications in AWS</a></h3><p>在 AWS 運行由 API Gateway + Lambda + DynamoDB 所組成的 Severless 服務很簡單，但是在開發的時候又該如何測試呢？這篇文章分別從如何對這三個元件做 Unit Test 談起，然後要如何對程式碼也做 Unit Test，最後當然是跟大加分享要如何做 Integration Test，有在使用 Serverless 的人不要錯過了</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 98 期 - 鐵人賽開賽最後一週，你屯了多少文章？</title>
      <link href="/2021/09/14/98-the-last-week-of-iron-man-how-many-article-you-stored/"/>
      <url>/2021/09/14/98-the-last-week-of-iron-man-how-many-article-you-stored/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-JavaScript-玩轉設計模式-都變成我想要的樣子吧！Adapter-Pattern（轉接器模式）"><a href="#用-JavaScript-玩轉設計模式-都變成我想要的樣子吧！Adapter-Pattern（轉接器模式）" class="headerlink" title="用 JavaScript 玩轉設計模式 | 都變成我想要的樣子吧！Adapter Pattern（轉接器模式）"></a><a href="https://medium.com/starbugs/%E7%94%A8-javascript-%E7%8E%A9%E8%BD%89%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E9%83%BD%E8%AE%8A%E6%88%90%E6%88%91%E6%83%B3%E8%A6%81%E7%9A%84%E6%A8%A3%E5%AD%90%E5%90%A7-adapter-pattern-%E8%BD%89%E6%8E%A5%E5%99%A8%E6%A8%A1%E5%BC%8F-118ef6fa45d3" target="_blank" rel="noopener">用 JavaScript 玩轉設計模式 | 都變成我想要的樣子吧！Adapter Pattern（轉接器模式）</a></h3><p>轉接器就是在 Type-C 和 HDMI 之間的橋樑，只要擁有轉接器，Type-C 和 HDMI 本身就都不需要做任何的修改便能互相傳輸。那麼，像這樣方便的概念，有辦法用在程式設計上嗎？這篇文章就要來聊聊，在眾多設計模式之中的 Adapter Pattern，也就是可愛簡單又方便的轉接器模式啦！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Common-NPM-Mistakes-Every-Developer-Should-Avoid"><a href="#Common-NPM-Mistakes-Every-Developer-Should-Avoid" class="headerlink" title="Common NPM Mistakes Every Developer Should Avoid"></a><a href="https://blog.bitsrc.io/common-npm-mistakes-every-developer-should-avoid-60ab0642d8f9" target="_blank" rel="noopener">Common NPM Mistakes Every Developer Should Avoid</a></h3><p>有時候使用 npm 下載套件時，常常會出現一些問題，這時候就會上 Google 找一些大家流傳下來的解答來解決（像是刪除 package-lock.json 再重新下載套件等等 😂），但是這些方法真的正確嗎？來看看作者列出在使用 npm 上應該避免的錯誤！</p><h3 id="A-Practical-Guide-to-Creating-Reusable-React-Components"><a href="#A-Practical-Guide-to-Creating-Reusable-React-Components" class="headerlink" title="A Practical Guide to Creating Reusable React Components"></a><a href="https://www.sitepoint.com/creating-reusable-react-components/" target="_blank" rel="noopener">A Practical Guide to Creating Reusable React Components</a></h3><p>相信大家對於什麼時候需要切出 component 都曾經感到困擾，這篇文章的作者提出了三個可以表示 component 該被抽出來的指標（雖然有一點是關於 GraphQL 的），也實際操作該如何製作一個可重用的 component。</p><h3 id="How-to-Preview-image-before-uploading-in-Javascript"><a href="#How-to-Preview-image-before-uploading-in-Javascript" class="headerlink" title="How to Preview image before uploading in Javascript"></a><a href="https://dev.to/shantanu_jana/how-to-preview-image-before-uploading-in-javascript-1f6g" target="_blank" rel="noopener">How to Preview image before uploading in Javascript</a></h3><p>文章中介紹了在上傳之前就能先用 JavaScript 預覽圖片的簡單方式，在只想做些簡單的 Side Project 顯示且沒有後端的情況下很適合使用。</p><h3 id="Announcing-SWR-1-0"><a href="#Announcing-SWR-1-0" class="headerlink" title="Announcing SWR 1.0"></a><a href="https://swr.vercel.app/blog/swr-v1" target="_blank" rel="noopener">Announcing SWR 1.0</a></h3><p>在 React 中有一個相當知名用來進行 fetch data 的套件：<a href="https://swr.vercel.app/" target="_blank" rel="noopener">SWR</a>，在前陣子正式進入 <code>1.0.0</code> 版了，相較於之前的 <code>0.x</code> 版本，這次的 <code>1.0.0</code> 版改動相當多，如果先前就有在使用 SWR 的讀者在升級版本之前不妨先看一下 SWR 官方寫的文章再考慮是否要升版吧XD</p><h3 id="smoothscroll"><a href="#smoothscroll" class="headerlink" title="smoothscroll"></a><a href="https://github.com/iamdustan/smoothscroll" target="_blank" rel="noopener">smoothscroll</a></h3><p>不曉得大家有沒有踩過這樣的地雷，使用 <code>window.scrollTo</code> 加上 <code>smooth</code> 這個 behavior 的時候在 safari 上的表現會怪怪的，沒有慢慢滾下去的感覺，然後查了 <a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/scrollTo#browser_compatibility" target="_blank" rel="noopener">MDN</a> 發現 safari 是支援的，又查了 <a href="https://caniuse.com/?search=window.scrollTo" target="_blank" rel="noopener">caniuse</a> 也發現完全支援，但這個效果就是出不來，其實 <code>window.scrollTo</code> safari 是支援的，可是不支援 <code>smooth</code> 這個行為，所以不管怎樣都無法表現出這種效果，但不用擔心有套件幫我們做到這件事了，日後如果有讀者遇到類似的問題不妨可以使用這個套件就可以解決了~</p><h3 id="How-JavaScript-Works🔥-🤖-Visually-Explained"><a href="#How-JavaScript-Works🔥-🤖-Visually-Explained" class="headerlink" title="How JavaScript Works🔥 🤖 [Visually Explained]"></a><a href="https://dev.to/narottam04/how-javascript-works-visually-explained-269j" target="_blank" rel="noopener">How JavaScript Works🔥 🤖 [Visually Explained]</a></h3><p>這篇文章真的太酷了，解析了一些 JavaScript 的行為作動，可以幫助一些正在學習 JavaScript 的讀者可以更快熟悉 JavaScript 的世界，而且這篇文章圖文並茂真的蠻適合閱讀的XD</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="The-underutilized-usefulness-of-sync-Once"><a href="#The-underutilized-usefulness-of-sync-Once" class="headerlink" title="The underutilized usefulness of sync.Once"></a><a href="https://blog.chuie.io/posts/synconce/" target="_blank" rel="noopener">The underutilized usefulness of sync.Once</a></h3><p>我也是寫 Go 寫了一陣子之後才知道這個東西，基本上如果你有什麼事情只想做一次，像是初始化資料庫連線這種的，那絕對是直接用 sync.Once，不然自己用 mutex 寫不只很醜還可能會寫錯XD</p><h3 id="Simple-Concurrency-in-Go-for-Fans-of-JavaScript’s-Promise-all"><a href="#Simple-Concurrency-in-Go-for-Fans-of-JavaScript’s-Promise-all" class="headerlink" title="Simple Concurrency in Go for Fans of JavaScript’s Promise.all"></a><a href="http://nathan.vegas/blog/errgroup-promise-all.html" target="_blank" rel="noopener">Simple Concurrency in Go for Fans of JavaScript’s Promise.all</a></h3><p>只要有寫過一陣子 JS，應該都會同意 Promise.all 真的非常好用，他讓你可以同時發出多個非同步請求，並且等他們回來之後一起做錯誤處理。而在 Go 裡面也有一個很好用的東西叫 errgroup，用起來就跟 Promise.all 很像，有寫過 JS 的人一看就能看懂～</p><h3 id="併發程式典範-Paradigms-Golang-V-S-Java"><a href="#併發程式典範-Paradigms-Golang-V-S-Java" class="headerlink" title="併發程式典範 (Paradigms): Golang V.S. Java"></a><a href="https://tech-blog.cymetrics.io/posts/genchilu/concurrency-paradigms-golang-and-java-zh/" target="_blank" rel="noopener">併發程式典範 (Paradigms): Golang V.S. Java</a></h3><p>我對於比較各語言的非同步語法是怎麼設計的一直都很有興趣，因為那代表著每個語言在思路上的不同，而且這些思路往往各有優缺，並沒有絕對的好壞，這也會提醒我一個問題通常有很多種解決方式，就看你從哪個角度去看他</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-Instance-Calculator"><a href="#Kubernetes-Instance-Calculator" class="headerlink" title="Kubernetes Instance Calculator"></a><a href="https://learnk8s.io/kubernetes-instance-calculator" target="_blank" rel="noopener">Kubernetes Instance Calculator</a></h3><p>learnk8s 推出了超級華麗的 Kubernetes 節點計算機，讓 K8s 的使用者可以根據自己應用服務所需的運算資源，透過此計算機來尋找最佳的節點大小；而計算機內可以選到三大公有雲 (AWS, Azure, GCP) 的機器型別，透過調整 Pod 和 Daemonset 中對於 CPU 和 Memory 的 Request 和 Limit 來找出最適合的 K8s 節點，不過必須要知道一些前提條件，例如不同平台的機器可以運行的 Pod 上限，機器中的運算資源不會全部都拿來給 Pod 使用，必須要保留給 OS, Kubelet…等，有興趣的人可以參閱原文內的詳細使用說明書！</p><h3 id="Amazon-EKS-Anywhere-–-Now-Generally-Available-to-Create-and-Manage-Kubernetes-Clusters-on-Premises"><a href="#Amazon-EKS-Anywhere-–-Now-Generally-Available-to-Create-and-Manage-Kubernetes-Clusters-on-Premises" class="headerlink" title="Amazon EKS Anywhere – Now Generally Available to Create and Manage Kubernetes Clusters on Premises"></a><a href="https://aws.amazon.com/blogs/aws/amazon-eks-anywhere-now-generally-available-to-create-and-manage-kubernetes-clusters-on-premises/" target="_blank" rel="noopener">Amazon EKS Anywhere – Now Generally Available to Create and Manage Kubernetes Clusters on Premises</a></h3><p>AWS 在上週宣布的重磅消息 - Amazon EKS Anywhere GA 了！使用者可以透過此專案在自己家裡的資料中心建立 Kubernetes Cluster，目前第一波支援的廠商為 VMware vSphere，其他家包含 bare metal 的版本將會在 2022 年到來，而在文中的表格可以知曉大部分的東西從本來由 AWS 負責維運變成自己要負責，其中有提到可使用 Flux 做到半自動的 Cluster 更新，讓我比較感興趣的在於 K8s CNI Plugin 選用了 Cilium，而不是 Calico，更多細節可以參閱<a href="https://anywhere.eks.amazonaws.com/" target="_blank" rel="noopener">專案網站</a>，對於詳細實作有興趣的人可以直接參觀開源出來的 <a href="https://github.com/aws/eks-anywhere" target="_blank" rel="noopener">GitHub Repo</a>，不過這樣是不是會打到某些廠商XD</p><h3 id="HTTP-3-Practical-Deployment-Options"><a href="#HTTP-3-Practical-Deployment-Options" class="headerlink" title="HTTP/3: Practical Deployment Options"></a><a href="https://www.smashingmagazine.com/2021/09/http3-practical-deployment-options-part3/" target="_blank" rel="noopener">HTTP/3: Practical Deployment Options</a></h3><p>瞎咪！HTTP/3 已經要來嗎？！我怎麼覺得 HTTP/2 好像還沒有普及XD 在經過將近 5  年的開發之後，全新的 HTTP/3 協議已經接近完成的階段，而要把自己的網站或是雲端服務轉換成 HTTP/3 的話要怎麼測試和部署呢？透過這篇文章可以知道如何做到，而其實這是一個三篇的系列文，前面還有兩篇分別提到 <a href="https://www.smashingmagazine.com/2021/08/http3-core-concepts-part1/" target="_blank" rel="noopener"><strong>“HTTP/3 的核心概念與功能功能”</strong></a> 和 <a href="https://www.smashingmagazine.com/2021/08/http3-performance-improvements-part2/" target="_blank" rel="noopener"><strong>“HTTP/3 在效能上的改進”</strong></a>，想要了解 HTTP/3 的人可以找個時間好好閱讀一番</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 97 期 - 再見了，我的暑假。</title>
      <link href="/2021/09/07/97-goodbye-summer-vacation/"/>
      <url>/2021/09/07/97-goodbye-summer-vacation/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="幾個小技巧，讓你寫出更安全的-Dockerfile"><a href="#幾個小技巧，讓你寫出更安全的-Dockerfile" class="headerlink" title="幾個小技巧，讓你寫出更安全的 Dockerfile"></a><a href="https://medium.com/starbugs/dockerfile-security-tips-d4161f6450f8" target="_blank" rel="noopener">幾個小技巧，讓你寫出更安全的 Dockerfile</a></h3><p>Hello 大家好我是 Larry，自從進入大容器時代後，Docker、K8s 已經逐漸成為開發、測試及部署時不可或缺的工具，因此這週的專欄想跟大家分享如何寫出一個安全的 Dockerfile，才不會讓你的 Docker image 在執行時暴露於危險之中</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Using-Docker-Compose-to-Run-Your-Applications"><a href="#Using-Docker-Compose-to-Run-Your-Applications" class="headerlink" title="Using Docker Compose to Run Your Applications"></a><a href="https://link.medium.com/qWOsIhOYijb" target="_blank" rel="noopener">Using Docker Compose to Run Your Applications</a></h3><p>如果你才剛學會用 Docker，想要開始練習怎麼用 docker-compose 把多個服務跑起來，那我覺得這篇文寫得非常清楚，從一開始什麼都沒有教你怎麼設定 environment、volume 等等屬性，跟著做一遍就能學會用 docker-compose 了～</p><h3 id="Introduction-to-heredocs-in-Dockerfiles"><a href="#Introduction-to-heredocs-in-Dockerfiles" class="headerlink" title="Introduction to heredocs in Dockerfiles"></a><a href="https://www.docker.com/blog/introduction-to-heredocs-in-dockerfiles/" target="_blank" rel="noopener">Introduction to heredocs in Dockerfiles</a></h3><p>以往在寫 Dockerfile 時，若是遇到要跑很多個指令，通常都會用串接的方式把一堆指令通通寫在一個 RUN 裡面，既不太好寫也不太好讀。但在 Dockerfile 支援 heredoc 語法之後，終於可以用 RUN &lt;&lt; EOF 的方式來寫多行指令，不只寫起來更簡單，而且也漂亮很多</p><h3 id="How-to-build-a-smaller-Docker-image"><a href="#How-to-build-a-smaller-Docker-image" class="headerlink" title="How to build a smaller Docker image"></a><a href="https://link.medium.com/daVOcwgXijb" target="_blank" rel="noopener">How to build a smaller Docker image</a></h3><p>這篇文章講了幾個把 Docker image 變小的小技巧，而且他的技巧不是針對特定語言，而是一些可以廣泛運用的通則，如果不太確定 Dockerfile 應該怎麼寫才能縮小 image 的話，可以來看看這篇～</p><h3 id="Docker-CMD-vs-ENTRYPOINT-What’s-The-Difference-amp-How-To-Choose"><a href="#Docker-CMD-vs-ENTRYPOINT-What’s-The-Difference-amp-How-To-Choose" class="headerlink" title="Docker CMD vs ENTRYPOINT: What’s The Difference &amp; How To Choose"></a><a href="https://www.bmc.com/blogs/docker-cmd-vs-entrypoint" target="_blank" rel="noopener">Docker CMD vs ENTRYPOINT: What’s The Difference &amp; How To Choose</a></h3><p>只要是問 Dockerfile 的相關知識，一定都會被問到這題：請問 <code>RUN</code>、<code>CMD</code>、<code>ENTRYPOINT</code> 這三者的差異在哪，其實這三者看似很像但其實都在做不同的東西，尤其是 <code>CMD</code> 跟 <code>ENTRYPOINT</code> 這兩個真的是很像但還是有著微妙的差異，究竟到底差在哪呢？就看這篇文章吧~</p><h3 id="透過-Multiple-Stage-Builds-編譯出最小的-Docker-Image"><a href="#透過-Multiple-Stage-Builds-編譯出最小的-Docker-Image" class="headerlink" title="透過 Multiple Stage Builds 編譯出最小的 Docker Image"></a><a href="https://jiepeng.me/2018/06/09/use-docker-multiple-stage-builds" target="_blank" rel="noopener">透過 Multiple Stage Builds 編譯出最小的 Docker Image</a></h3><p>Dockerfile 有個蠻進階的寫法叫 <code>multiple stage build</code>，這種寫法到底有什麼好處呢？其實好處相當的多這篇文章就介紹了其中一個非常重要的觀念，有興趣的讀者不妨可以收藏起來閱讀。</p><h3 id="Docker-Swarm-網路架構介紹-load-balancing-traffic-path"><a href="#Docker-Swarm-網路架構介紹-load-balancing-traffic-path" class="headerlink" title="Docker Swarm 網路架構介紹 - load balancing traffic path"></a><a href="https://yu-jack.github.io/2020/05/25/docker-swarm-load-balancing/" target="_blank" rel="noopener">Docker Swarm 網路架構介紹 - load balancing traffic path</a></h3><p>Docker Swarm 可以說是在 K8s 還沒出來之前被廣受使用的工具吧，但也因為這個學習門檻不低所以通常講到 Docker 的時候都是以熟悉 Dockerfile 以及 Docker Compose 為主，到底甚麼是 Docker Swarm 呢？就來看看這篇文章吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="巧用CSS-filter，让你的网站更加酷炫！"><a href="#巧用CSS-filter，让你的网站更加酷炫！" class="headerlink" title="巧用CSS filter，让你的网站更加酷炫！"></a><a href="https://juejin.cn/post/7002829486806794276" target="_blank" rel="noopener">巧用CSS filter，让你的网站更加酷炫！</a></h3><p>文中介紹了許多在現代瀏覽器中常會看到的 CSS 視覺效果應用，但是在使用這些酷炫的效果到瀏覽器時，還是要注意各個瀏覽器兼容性的問題！如果是必須要考慮 IE 的話那只能…</p><h3 id="Don’t-Let-Carousels-Kill-Your-Application"><a href="#Don’t-Let-Carousels-Kill-Your-Application" class="headerlink" title="Don’t Let Carousels Kill Your Application"></a><a href="https://blog.bitsrc.io/dont-let-carousels-kill-your-application-ba5ce27f6d10" target="_blank" rel="noopener">Don’t Let Carousels Kill Your Application</a></h3><p>輪播算是在網站中非常普遍會被使用的功能，但是你的輪播真的對網站及使用者的體驗是加分的嗎？文章中分別從性能和使用者體驗的角度來分析輪播的缺點，以及該如何改進！</p><h3 id="How-to-create-Music-player-with-pure-HTML-CSS-JS"><a href="#How-to-create-Music-player-with-pure-HTML-CSS-JS" class="headerlink" title="How to create Music player with pure HTML, CSS, JS"></a><a href="https://dev.to/kunaal438/how-to-create-music-player-with-pure-html-css-js-c1j" target="_blank" rel="noopener">How to create Music player with pure HTML, CSS, JS</a></h3><p>做一個用來播放音樂的網站當前端的小作品是個很不錯的選擇，但完成一個音樂播放器需要瞭解哪些技術點及注意什麼事情呢？跟著文章裡的每個步驟，和作者一起做出一個有質感的音樂播放器吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Fig-raises-2-2M-to-supercharge-the-terminal"><a href="#Fig-raises-2-2M-to-supercharge-the-terminal" class="headerlink" title="Fig raises $2.2M to supercharge the terminal"></a><a href="https://techcrunch.com/2021/08/25/fig-raises-2-2m-to-supercharge-the-terminal/" target="_blank" rel="noopener">Fig raises $2.2M to supercharge the terminal</a></h3><p>大家都在用的 Terminal 還可以有什麼新花樣嗎？日前 <a href="https://fig.io/" target="_blank" rel="noopener">Fig</a> 這間公司獲得了 2.2M 美金的投資，證明了 Terminal 還是有其市場存在的！以自己來說，每天大部分的使用都會使用到，假如有可以幫助自己省時省力增進工作效率的 Terminal，自己是很樂意花錢購買的，從 Demo 的圖案中可以看到他擁有華麗的<a href="https://github.com/withfig/autocomplete" target="_blank" rel="noopener">自動完成功能</a>，會有下拉式選單讓使用者選擇要使用的命令，假如要切換資料夾的話，他也可以協助完成路徑的輸入，不過這只是第一步，CEO 表示未來希望可以建構出一個 App 生態系，讓所有的人或是公司內部的同仁可以一起分享使用；Fig 目前可以直接在 macOS 內使用，但同時也可以透過 add-on 的方式跟 VSCode, Hyper 或是 iTerm 整合再一起使用，目前還不能再 Windows 和 Linux 平台上使用，但團隊表示不用擔心已經都在 Roadmap 上了！有興趣嘗試的人可以透過 <a href="https://fig.io/" target="_blank" rel="noopener">Email</a> 取得早鳥使用資格</p><h3 id="Cisco-Citrix-and-Fortinet-Among-New-Verified-Terraform-Providers"><a href="#Cisco-Citrix-and-Fortinet-Among-New-Verified-Terraform-Providers" class="headerlink" title="Cisco, Citrix, and Fortinet Among New Verified Terraform Providers"></a><a href="https://www.hashicorp.com/blog/cisco-citrix-fortinet-among-new-verified-terraform-providers" target="_blank" rel="noopener">Cisco, Citrix, and Fortinet Among New Verified Terraform Providers</a></h3><p>Terraform 的 Provider 越來越龐大，在幾個月前前才剛宣布數量超過 1,000 個，最近竟然已經超過 1,300 個，自己從 0.11 升級到 0.12 休息一陣子後，最近開始要從 0.12 跳到 1.0.0，發現在 Provider 這塊的使用方式改變不少 (其實從 0.13 就開始改了)，使用 Provider 像是變數一樣需要事先宣告版本與來源，使得 Provider 不再需要完全透過 HashiCorp 而來，讓此生態系可以擴展的更快速，不過這麼多的 Provider 該怎麼選擇呢？HashiCorp Terraform 這邊有個認證的機制，在這個月經過 Terraform 認證的公司已經超過 150 家，最近網路設備商 Cisco, Citrix 和 Fortinet 都加入到此行列中，文章中介紹了近五個月內通過認證的技術合作夥伴，除了上面提到的網通設備商之外，還包含 1Password, Elastic…等，有興趣的人可以直接參閱內文</p><h3 id="Smart-Little-CLI-Helper-for-git-Projects"><a href="#Smart-Little-CLI-Helper-for-git-Projects" class="headerlink" title="Smart Little CLI Helper for git Projects"></a><a href="https://github.com/muesli/gitty" target="_blank" rel="noopener">Smart Little CLI Helper for git Projects</a></h3><p>又到最後介紹小工具的輕鬆時間，gitty 是用來協助使用者管理 Git 專案的 CLI 工具，透過他可以讓專案內的 Pull Request, Issue 跟 Commit 的變更一目瞭然，不過他目前只支援 GitHub API，作者期望 gitty 在未來有更多的可能性！有在使用 GitHub 的人感覺都可以裝來用用看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 96 期 - 疫苗打起來</title>
      <link href="/2021/08/31/96-k8s-multi-clusters-monitoring/"/>
      <url>/2021/08/31/96-k8s-multi-clusters-monitoring/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-Multi-Clusters-Monitoring-With-Prometheus-amp-Thanos"><a href="#Kubernetes-Multi-Clusters-Monitoring-With-Prometheus-amp-Thanos" class="headerlink" title="Kubernetes Multi-Clusters Monitoring With Prometheus &amp; Thanos"></a><a href="https://medium.com/starbugs/kubernetes-multi-clusters-monitoring-with-prometheus-thanos-acff364f29d1" target="_blank" rel="noopener">Kubernetes Multi-Clusters Monitoring With Prometheus &amp; Thanos</a></h3><p>近期跟同事一起 Refactory 組織內給 K8s Multi-Clusters 使用到的 Prometheus 監控系統，期間發現 Thanos 讓每個元件負責單一功能，讓我們像在組樂高積木般，根據自我需求去設計出最符合自己的 Prometheus Stack，因此內文提到的方式並不是最佳解，大家可以根據自身需求再去探索出適合自己組織的架構，而在不同元件的整合上，希望可以透過此文讓開始實作的維運人員少走冤枉路，文章內容主要談到…</p><p>📕 各種 Prometheus Stack 監控 K8s Multi-Cluster 方式的優缺點分析<br>📕 Prometheus Alert 和 Grafana Dashboard 要如何支援 K8s Multi-Clusters<br>📕 實作 K8s Multi-Cluster Monitoring 時可能遇到的相關問題與建議做法</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Announcing-TypeScript-4-4"><a href="#Announcing-TypeScript-4-4" class="headerlink" title="Announcing TypeScript 4.4"></a><a href="https://devblogs.microsoft.com/typescript/announcing-typescript-4-4/" target="_blank" rel="noopener">Announcing TypeScript 4.4</a></h3><p>Microsoft 在 8/26 的時候宣布 TypeScript 4.4 的可用功能。其中的 <code>--exactOptionalPropertyTypes</code>，是為了讓 TypeScript 區分物件裡的成員為 undefined 是因為該物件缺少該成員或本來的值就是 undefined 所新增的 flag。其他功能再點進文章中看看更多詳細的介紹！</p><h3 id="How-to-Implement-Drag-and-Drop-in-Vanilla-JS"><a href="#How-to-Implement-Drag-and-Drop-in-Vanilla-JS" class="headerlink" title="How to Implement Drag and Drop in Vanilla JS"></a><a href="https://veewren.hashnode.dev/how-to-implement-drag-and-drop-in-vanilla-js" target="_blank" rel="noopener">How to Implement Drag and Drop in Vanilla JS</a></h3><p>在前端的網頁中，需要使用拖拉來提升使用者體驗的場景越來越多。這篇文章的作者在不使用套件的狀況下，用原生的 JS 來實現拖拉的功能！</p><h3 id="Material-UI-5-is-Coming-Here’s-What-I’m-Excited-About"><a href="#Material-UI-5-is-Coming-Here’s-What-I’m-Excited-About" class="headerlink" title="Material-UI 5 is Coming: Here’s What I’m Excited About"></a><a href="https://blog.bitsrc.io/material-ui-5-is-coming-heres-what-i-m-excited-about-f04fd72713f5" target="_blank" rel="noopener">Material-UI 5 is Coming: Here’s What I’m Excited About</a></h3><p>在使用 React 的時候 Material UI 就一直是很喜歡用的框架之一，如今它也要進入到 5 了！目前已知的新功能有以下幾點：</p><ul><li>Improvements to Codemod CLI：讓 v4 升級到 v5 更容易！</li><li>Switch Component：新增了開關的 Switch Component。</li><li>Changes to Default Color Values：改變 info、success 和 warning 的預設顏色。</li><li>Changes to Slider：修改了 Slider Component 的樣式。</li></ul><p>且根據 <a href="https://material-ui.com/versions/#release-schedule" target="_blank" rel="noopener">發佈時程</a>，應該可以在九月份就能使用了！ 🙌</p><h3 id="細說event-currentTarget-amp-event-target的不同使用"><a href="#細說event-currentTarget-amp-event-target的不同使用" class="headerlink" title="細說event.currentTarget &amp; event.target的不同使用"></a><a href="https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/156628/" target="_blank" rel="noopener">細說event.currentTarget &amp; event.target的不同使用</a></h3><p>有時候在處理一些 event 上的事情，總是會把 <code>event.target</code> 或 <code>event.currentTarget</code> 這兩種處理方式搞混，在 input 的 onChange 中要取得值時會用 <code>event.target</code> 可是有時候一些 onClick 要取得值時卻會用 <code>event.currentTarget</code>，究竟這兩個差在哪呢？這篇文章有了詳細的解釋。</p><h3 id="TypeScript-泛型之-Omit-lt-T-K-gt-Pick-lt-T-Exclude-lt-keyof-T-K-gt-gt"><a href="#TypeScript-泛型之-Omit-lt-T-K-gt-Pick-lt-T-Exclude-lt-keyof-T-K-gt-gt" class="headerlink" title="TypeScript 泛型之 Omit&lt;T, K&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;"></a><a href="https://juejin.cn/post/6844903977461514254" target="_blank" rel="noopener">TypeScript 泛型之 Omit&lt;T, K&gt; = Pick&lt;T, Exclude&lt;keyof T, K&gt;&gt;</a></h3><p>在 TypeScript 中有些 type 的設定可以說是非常好用但是初學 TypeScript 時可能不會特別去注意，例如 Omit 就是一個很好的例子，這篇文章整理了幾個好用的泛型定義方式以及為什麼這個設定會有這樣的結果都有完整的寫出來，算是蠻用心的一篇文章，有興趣的讀者不妨可以收藏起來日後閱讀。</p><h3 id="Design-Patterns-in-JavaScript"><a href="#Design-Patterns-in-JavaScript" class="headerlink" title="Design Patterns in JavaScript"></a><a href="https://dev.to/zeeshanhshaheen/design-patterns-in-javascript-1pgm" target="_blank" rel="noopener">Design Patterns in JavaScript</a></h3><p>Design Patterns 可以說是軟體業非常重要的一個觀念，但是真的很少人會按照 design pattern 的方式來設計程式碼XD<br>這篇文章介紹了如何在 JavaScript 中利用 design pattern 的方式來設計整個架構，有興趣的讀者也可以閱讀看看~</p><h2 id="Security"><a href="#Security" class="headerlink" title="Security"></a>Security</h2><h3 id="不識廬山真面目：Clickjacking-點擊劫持攻擊"><a href="#不識廬山真面目：Clickjacking-點擊劫持攻擊" class="headerlink" title="不識廬山真面目：Clickjacking 點擊劫持攻擊"></a><a href="https://tech-blog.cymetrics.io/posts/huli/clickjacking-intro/" target="_blank" rel="noopener">不識廬山真面目：Clickjacking 點擊劫持攻擊</a></h3><p>在眾多前端的攻擊方式中，我覺得 Clickjacking 算是很腦洞大開的一個XD。胡立這篇文章非常詳細介紹了 Clickjacking 的原理、如何防範，最後甚至還有實際案例分析，非常值得讀的一篇文章</p><h3 id="關於-email-security-的大小事-—-原理篇"><a href="#關於-email-security-的大小事-—-原理篇" class="headerlink" title="關於 email security 的大小事 — 原理篇"></a><a href="https://link.medium.com/I6TR3iTs6ib" target="_blank" rel="noopener">關於 email security 的大小事 — 原理篇</a></h3><p>相比於 Web security，比較少看到有文章在探討 Email 相關的安全性問題，而且這篇文章為了介紹認證機制還先講了 Email 在傳輸過程中有哪些關卡，對於了解 Email 原理有非常大的幫助！</p><h3 id="How-hackers-steal-your-keys-and-secrets"><a href="#How-hackers-steal-your-keys-and-secrets" class="headerlink" title="How hackers steal your keys and secrets"></a><a href="https://dev.to/omerxx/how-hackers-steal-your-keys-and-secrets-45g2" target="_blank" rel="noopener">How hackers steal your keys and secrets</a></h3><p>這篇文章說明了駭客可能會從哪些地方得到你的密碼或 API Key，像是在 Github 原始碼找到、Google 找到之類的，而且也有提供幾個很實用的預防方法</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="OpenTelemetry-becomes-a-CNCF-incubating-project"><a href="#OpenTelemetry-becomes-a-CNCF-incubating-project" class="headerlink" title="OpenTelemetry becomes a CNCF incubating project"></a><a href="https://www.cncf.io/blog/2021/08/26/opentelemetry-becomes-a-cncf-incubating-project/" target="_blank" rel="noopener">OpenTelemetry becomes a CNCF incubating project</a></h3><p>上週 <a href="https://www.cncf.io/blog/2021/08/18/keda-moves-from-the-cncf-sandbox-to-become-an-incubating-project/" target="_blank" rel="noopener">KEDA 成為 CNCF Incubating 專案</a>，這週是 OpenTelemetry 這套讓使用者拿來分析軟體效能與行為的遙測工具，不知道下週還會不會有?! OpenTelemetry 其實是由 OpenCensus 和 OpenTracing 這兩個專案於 2019 年 5 月合併創建的，過了不久成為 CNCF Sandbox 專案，從那時開始，OpenTelemetry 團隊開發了 11 種語言的 API 和 SDK，並且在 OpenTelemetry Protocol (OTLP) 全面支援 Metric 和 Tracing，而且目前已經被廣泛採用，例如 F5, Grafana Labs, Shopify, Splunk…等，越來越多使用者和相關廠商將 OpenTelemetry 運行在大規模 Production 環境中，至今已有超過來自 220 間公司的 500 個開發者對此專案做出貢獻，例如 Amazon, Dynatrace, Google, Honeycomb, Lightsetp, Microsoft, Splunk, User…等</p><p>OpenTelemetry 主要包含底下三個部分：</p><p>📕  OpenTelemetry Protocol (OTLP): 定義了遙測的資料來源，中繼節點 (例如 Collectors) 和遙測後端這三者彼此之間的資料是如何編碼，傳輸跟傳遞的機制</p><p>📕  OpenTelemetry Collector: 提供無關特定廠商的接收，處理和匯出遙測資料的實作層，免除讓使用者需要運行，操作跟維護多種 Agent 和 Collector</p><p>📕  API 和 SDK: 具有支援 11 種語言的 API 和 SDK，讓使用者可以輕易地整合和擴展自己目前手上的專案</p><h3 id="Karmada-0-7-Next-Gen-Multi-Cloud-and-Multi-Cluster-Kubernetes-Orchestration"><a href="#Karmada-0-7-Next-Gen-Multi-Cloud-and-Multi-Cluster-Kubernetes-Orchestration" class="headerlink" title="Karmada 0.7: Next-Gen Multi-Cloud and Multi-Cluster Kubernetes Orchestration"></a><a href="https://www.infoq.com/news/2021/08/karmada-kubernetes-orchestration/" target="_blank" rel="noopener">Karmada 0.7: Next-Gen Multi-Cloud and Multi-Cluster Kubernetes Orchestration</a></h3><p>本週的週刊有提到 Kubernetes Multi-Clusters 是未來的趨勢，InfoQ 這篇文章剛好也介紹了 Karmada (Kubernetes Armada) 這套系統，他是專門設計用來管理 multi-cloud 和 multi-cluster Kubernetes 的系統，提供中心化的管理功能，具有高可用，自動修復於流量調度的能力，Karmada 根據 Kubernetes Federation v1 和 v2 為基礎去做開發，繼承了其中的一些基本概念</p><p>Karmada 在上個月剛推出的版本 0.7 中增加了不少功能，例如 Multi-Clusters 的 Service Discovery，精確的 Cluster 狀態管理，根據 Cluster 資源來做 Replica 的調度，更方便易用的 API，而 KubeFed v2 還在 Beta 階段，而且有些功能甚至還在 Alpha 階段，這樣不成熟的狀況，讓使用者缺乏信心將其用在 Production 環境上，所以假如有這方面的需求，或許可以考慮看看 Karmada</p><h3 id="My-Favorite-CLI-Tools"><a href="#My-Favorite-CLI-Tools" class="headerlink" title="My Favorite CLI Tools"></a><a href="https://switowski.com/blog/favorite-cli-tools" target="_blank" rel="noopener">My Favorite CLI Tools</a></h3><p>每次看到有人介紹自己珍藏的 CLI 工具大補帖時，一定會停下來看一看，找找有沒有什麼好用的工具是自己所欠缺的，趕快把它補起來，這次推薦的作者為 fish 派系，像我自己是 zsh XD 除此之外有幾個工具我自己目前沒有使用過，真的是賺到了！</p><p>🛠️ fish shell: 記得也是滿多擁護者的一種 Shell<br>🛠️ starship: 強大的命令列提示工具<br>🛠️ z: 快速在常用的資料夾中切換<br>🛠️ fzf: 通用的模糊搜尋工具<br>🛠️ fd: 更好的 find 命令取代方案<br>🛠️ ripgrep:  更好的 gerp 取代方案<br>🛠️ htop and glances: 系統監控工具<br>🛠️ virtualenv 和 virtualfish: Python 虛擬環境管理共聚<br>🛠️ pyenv, nodenv, 和 rbenv: 用來管理不同版本的 Python, Node 和 Ruby<br>🛠️ pipx: 在獨立的環中安裝 Python 套件<br>🛠️ ctop and lazydocker: Docker 的監控工具<br>🛠️ homebrew: macOS 的套件管理工具<br>🛠️ asciinema: 用來錄製 Terminal Session，而且錄製的內容可以被複製貼上<br>🛠️ colordiff 和 diff-so-fancy: 加上色彩的 diff<br>🛠️ tree: 用來呈現資料夾結構<br>🛠️ bat: 更好的 cat 取代工具<br>🛠️ httpie: 更好的 curl 取代工具<br>🛠️ tldr: man 的替代方案<br>🛠️ exa: 更好的 ls 取代工具<br>🛠️ litecli 和 pgcli: 用來取代預設 sqlite3 和 psql 的 Client 連接工具<br>🛠️ mas: App Store CLI 版<br>🛠️ ncdu: 硬碟使用狀況分析</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 95 期 - 家常音樂</title>
      <link href="/2021/08/24/95-family-music/"/>
      <url>/2021/08/24/95-family-music/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Python-—-Mutable-vs-Immutable"><a href="#Python-—-Mutable-vs-Immutable" class="headerlink" title="Python — Mutable vs Immutable"></a><a href="https://medium.com/starbugs/8ef7804181cd" target="_blank" rel="noopener">Python — Mutable vs Immutable</a></h3><p>今天來探討 Python 中的 Mutable 與 Immutable 的概念。Mutable 顧名思意就是「可變的」，而「Immutable」顧名思義是不可變得。 那麼什麼是「可變的」？什麼是「不可變的」呢？…</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Practical-Uses-of-CSS-Math-Functions-calc-clamp-min-max"><a href="#Practical-Uses-of-CSS-Math-Functions-calc-clamp-min-max" class="headerlink" title="Practical Uses of CSS Math Functions: calc, clamp, min, max"></a><a href="https://moderncss.dev/practical-uses-of-css-math-functions-calc-clamp-min-max/" target="_blank" rel="noopener">Practical Uses of CSS Math Functions: calc, clamp, min, max</a></h3><p>作者在文章裡介紹四個在 CSS 裡常看見的數學運算函示，也一一講解 <code>calc</code>、<code>clamp</code>、<code>min</code> 和 <code>max</code> 的功能是什麼，除了程式碼和文字外，還有實作的例子和效果展示！</p><h3 id="The-Most-Surprising-Behavior-of-JavaScript-Regular-Expression"><a href="#The-Most-Surprising-Behavior-of-JavaScript-Regular-Expression" class="headerlink" title="The Most Surprising Behavior of JavaScript Regular Expression"></a><a href="https://devdojo.com/myogeshchavan97/the-most-surprising-behavior-of-javascript-regular-expression" target="_blank" rel="noopener">The Most Surprising Behavior of JavaScript Regular Expression</a></h3><p>文章中介紹了在 JavaScript 中內建用正規表示法搜尋的 <code>/g</code> flag，以及在加上 <code>/g</code> 後使用 <code>test</code> 和 <code>exec</code> 方法搜尋又會出現什麼樣的行為。</p><h3 id="How-to-Link-JavaScript-to-HTML"><a href="#How-to-Link-JavaScript-to-HTML" class="headerlink" title="How to Link JavaScript to HTML"></a><a href="https://cult.honeypot.io/reads/link-javascript-to-html/" target="_blank" rel="noopener">How to Link JavaScript to HTML</a></h3><p>應該有很多初學者在一開始都不曉得要把 JavaScript 寫在 HTML 中的哪裡，或是該如何把整份文件放到 HTML 裡執行，這篇文章介紹了基本的嵌入方法，以及為何推薦把 JavaScript 放到 <code>body</code> 內容的最後。</p><h3 id="從你的-Node-js-專案裡找出-Memory-leak，及早發現、及早治療！"><a href="#從你的-Node-js-專案裡找出-Memory-leak，及早發現、及早治療！" class="headerlink" title="從你的 Node.js 專案裡找出 Memory leak，及早發現、及早治療！"></a><a href="https://vocus.cc/article/61176c17fd89780001942f1c?fbclid=IwAR0Og2wcBv8RikB1bXQum0egwoxKJlpUn4Wp66mrClRzCShyavG8peDQcrQ" target="_blank" rel="noopener">從你的 Node.js 專案裡找出 Memory leak，及早發現、及早治療！</a></h3><p>說真的自己很少需要處理 memory leak 的問題，如果遇到這種問題第一個反應就是把記憶體加大，能盡量不去審視自己的程式碼就盡量不去做這件事，但追根究柢其實每個 library 在使用的時候或多或少都會佔一些記憶體空間，雖然 JavaScript 會自己釋放已經不需要被使用的記憶體空間，但如果真的有這麼厲害的話應該就不會遇到 memory leak 的問題了是吧XD<br>這篇文章整理了如何一步一步的找出 memory leak 的原因，快跟著作者一起進入 debug 的過程吧XD</p><h3 id="釋放巢狀物件的型別標示吧！-feat-TypeScript-Conditional-Types"><a href="#釋放巢狀物件的型別標示吧！-feat-TypeScript-Conditional-Types" class="headerlink" title="釋放巢狀物件的型別標示吧！ feat. TypeScript: Conditional Types"></a><a href="https://medium.com/onedegree-tech-blog/%E9%87%8B%E6%94%BE%E5%B7%A2%E7%8B%80%E7%89%A9%E4%BB%B6%E7%9A%84%E5%9E%8B%E5%88%A5%E6%A8%99%E7%A4%BA%E5%90%A7-feat-typescript-conditional-types-4a47b4816ce2" target="_blank" rel="noopener">釋放巢狀物件的型別標示吧！ feat. TypeScript: Conditional Types</a></h3><p>真的沒有想到原來 TypeScript 的研究可以這麼深，還有這麼多不同的玩法可以用，雖然這些都是非常進階的用法可能一般人不見得會用到但還是可以多學習避免日後遇到問題時不知道該如何下手比較好。這篇文章講述了巢狀結構的物件下要如何利用 TypeScript 的型別定義達到快速知道每個 key 其對應的 type 是什麼，非常值得一看並研究。</p><h3 id="React-元件庫製造紀事錄-ㄧ-–-問題說明與第一個麻煩：JavaScript-的模組系統"><a href="#React-元件庫製造紀事錄-ㄧ-–-問題說明與第一個麻煩：JavaScript-的模組系統" class="headerlink" title="React 元件庫製造紀事錄 (ㄧ) – 問題說明與第一個麻煩：JavaScript 的模組系統"></a><a href="https://powersandwich.com.tw/?p=817&fbclid=IwAR3d6qGRnlLtuL6BlfiO2lMBKeoFMHPvoCYSINyIqi0mJN6sG_gBQ6MX1TM" target="_blank" rel="noopener">React 元件庫製造紀事錄 (ㄧ) – 問題說明與第一個麻煩：JavaScript 的模組系統</a></h3><p>說真的完全沒有想到原來 JavaScript 的模組系統還有這麼多需要了解的知識在裡面，平常假如都是寫 CSR 的專案基本上都是靠 Webpack 或者是 ESBuild 來進行模組打包，但如果要自己親手打造一個 SSR 而且還不是用 Next.js 這種好用的工具的話到底該如何做呢？這篇文章闡述了如何做的想法以及一些更細節的系統處理，有興趣的讀者不妨可以收藏起來日後可以閱讀。</p><h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><h3 id="Three-Practical-Examples-of-Concurrent-React"><a href="#Three-Practical-Examples-of-Concurrent-React" class="headerlink" title="Three Practical Examples of Concurrent React"></a><a href="https://link.medium.com/FGOo5DNHnib" target="_blank" rel="noopener">Three Practical Examples of Concurrent React</a></h3><p>從 React 18 開始，state 更新被區分成 urgent 跟 transition 兩種，urgent 是比較急的必須要馬上更新到畫面上，而 transition 則是慢慢來也沒關係，而這篇文章便是在講你要怎麼運用這兩種 update 才能讓使用者體驗更好～</p><h3 id="了解這些，更快掌握-TypeScript-在-React-中的使用"><a href="#了解這些，更快掌握-TypeScript-在-React-中的使用" class="headerlink" title="了解這些，更快掌握 TypeScript 在 React 中的使用"></a><a href="https://pjchender.blogspot.com/2020/07/typescript-react-using-typescript-in.html" target="_blank" rel="noopener">了解這些，更快掌握 TypeScript 在 React 中的使用</a></h3><p>如果想知道要怎麼用 TypeScript 寫 React、寫起來是什麼感覺的話，一定要來讀讀這篇～這篇文從常見的 TS 語法開始講起，慢慢講到用 TS 寫 React 有哪些該注意的地方，雖然文有點長，但看完的話在學習 TS + React 的過程中應該可以少走很多彎路</p><h3 id="如何在redux處理非同步操作"><a href="#如何在redux處理非同步操作" class="headerlink" title="如何在redux處理非同步操作"></a><a href="https://blog.yyisyou.tw/9e212e45/" target="_blank" rel="noopener">如何在redux處理非同步操作</a></h3><p>在寫 React + Redux 的時候，為了非同步的 dispatch action，通常會需要用到 redux-thunk、redux-saga 或是 redux-observable，那他們三個又各有什麼優缺點呢？一起來看看這篇文章的解說吧</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="New-Terraform-Planning-Options-refresh-false-refresh-only-replace"><a href="#New-Terraform-Planning-Options-refresh-false-refresh-only-replace" class="headerlink" title="New Terraform Planning Options: -refresh=false, -refresh-only, -replace"></a><a href="https://www.hashicorp.com/blog/new-terraform-planning-options-refresh-false-refresh-only-replace" target="_blank" rel="noopener">New Terraform Planning Options: -refresh=false, -refresh-only, -replace</a></h3><p>Terraform 在今年六月增加了三個好用的功能，用以個人開發與團隊協作的效率，分別是 <strong><code>-refresh=false plan option</code></strong>, <strong><code>-refresh-only plan mode</code></strong> 和 <strong><code>-replace plan option</code></strong>，讓我們來稍微說明一下這三個新增在 Plan SubCommand 分別是用來做什麼用的：</p><ul><li><p><strong><code>-refresh=false</code></strong>: 一般來說來做 Plan 的時候會先執行 Refresh State，讓 Terraform State 跟被管理的雲端資源是一致的，中間沒有差異，然後再根據你定義的程式碼跟 State 做比較，就可以得知執行 Terraform Apply 的話，會有哪一些資源被新增/修改/刪除，當管理的資源很多時，一直去對遠端服務發出請求其實時很耗時的，假如你的環境不會被人手動亂改動，Terraform State 是跟所被管理雲端資源是保持一致的，那麼這個時候就可以使用 <strong><code>-refresh=false</code></strong> 節省時間，少掉 Refresh State 的這個過程</p></li><li><p><strong><code>-refresh-only</code></strong>: 但現實情況就是有可能發生有人需要手動上去修改雲端資源，這時候 Refresh State 其實還是要做，但這個 <strong><code>-refresh-only</code></strong> 的 Flag 可以讓你單純只做 Refresh State 的動作，所以可以根據需求，非同步或是排程去做，等到之後執行 Terraform Apply 時就會讓被管理的資源再度跟定義的程式碼保持一致</p></li><li><p><strong><code>-replace</code></strong>: 大家應該有一種經驗，就是要把某個資源重新建立出來，以前的作法會先用 Taint 對該資源進行標注，接下來再去做 Plan 與 Apply，而這個 <strong><code>-replace</code></strong> Flag 可以在 Plan 的時候就把要被重新建立的資源直接標註起來，接下來 Apply 的時候就會被重新建立，整個流程變得一氣呵成，不會卡卡的</p></li></ul><h3 id="KEDA-moves-from-the-CNCF-Sandbox-to-become-an-incubating-project"><a href="#KEDA-moves-from-the-CNCF-Sandbox-to-become-an-incubating-project" class="headerlink" title="KEDA moves from the CNCF Sandbox to become an incubating project"></a><a href="https://www.cncf.io/blog/2021/08/18/keda-moves-from-the-cncf-sandbox-to-become-an-incubating-project/" target="_blank" rel="noopener">KEDA moves from the CNCF Sandbox to become an incubating project</a></h3><p>有個專門用來擴展 Kubernetes 內應用程式的專案 KEDA (Kubernetes Event-Driven Autoscaling) 最近成為 CNCF Incubating 專案，這個專在在 2019 年時由 Microsoft 和 Red Hat 的合作夥伴所創立，2020 三月進入到 CNCF Sandbox，而且使用人數越來越多，最新發佈的版本支援多達 37 的 Scaler，例如根據常見的 CPU 來做 Auto-Scale, 根據 RabbitMQ (這就比較酷了吧)，根據 Cron 排成…等，而它主要由兩個元件所組成，分別是 Agent 和 Metrics</p><ul><li><p><strong>Agent</strong>: 在安裝 KEDA 後，keda-operator 中的 Container 就像個 Agent 一樣，它負責的主要功能就是根據從 Scaler 來的資訊去對 Deployment 做 Scale In 和 Scale Out</p></li><li><p><strong>Metrics</strong>: KEDA 同時也算是一種 K8s 的 Metrics Server ，他對外提供豐富的資訊，例如像是 Queue 裡面還有多少訊息，或是串流延遲的狀況，根據這些資訊，Horizontal Pod Autoscaler 就可以執行對應的 Scale Out 和 Scale In 動作</p></li></ul><h3 id="Modern-Watch-Command-Viddy"><a href="#Modern-Watch-Command-Viddy" class="headerlink" title="Modern Watch Command - Viddy"></a><a href="https://github.com/sachaos/viddy" target="_blank" rel="noopener">Modern Watch Command - Viddy</a></h3><p>又到介紹小工具的時間，應該有些人，例如像我會去使用一個叫做 <strong><code>watch</code></strong> 的指令，他可以根據設定的時間去一直重複執行某個特定的指令，例如 <strong><code>watch -n 5 kubectl get node</code></strong> 就會每五秒去抓取一次 K8s Node 的資訊顯示在畫面上；而 Viddy 是使用 Go 所寫成的炫砲版 Watch，除了添加了色彩之外，也可以強調每次獲得結果的不同之處，還可以像影片一樣倒帶，搜尋字串，暫停或是重新執行…等，聽完介紹有沒有迫不期待想要趕快安專來玩玩看呢？！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 94 期 - 把 Bug 放進同個籃子</title>
      <link href="/2021/08/17/94-put-bug-in-the-basket/"/>
      <url>/2021/08/17/94-put-bug-in-the-basket/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-用實作了解-Server-Side-Rendering-的運作原理-Redux-篇"><a href="#React-用實作了解-Server-Side-Rendering-的運作原理-Redux-篇" class="headerlink" title="React | 用實作了解 Server-Side Rendering 的運作原理-Redux 篇"></a><a href="https://medium.com/starbugs/react-%E7%94%A8%E5%AF%A6%E4%BD%9C%E4%BA%86%E8%A7%A3-server-side-rendering-%E7%9A%84%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86-redux-%E7%AF%87-4b2958db5904" target="_blank" rel="noopener">React | 用實作了解 Server-Side Rendering 的運作原理-Redux 篇</a></h3><p>在寫了「<a href="https://medium.com/starbugs/react-%E7%94%A8%E5%AF%A6%E4%BD%9C%E4%BA%86%E8%A7%A3-server-side-rendering-%E7%9A%84%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86-c6133d9fb30d" target="_blank" rel="noopener">React | 用實作了解 Server-Side Rendering 的運作原理</a>」之後，就有規劃要繼續寫關於導入 Redux 和 call API 的部分，雖然大概過了一年半，但該補的坑還是來補。在這篇文章裡不會提到太多有關 SSR 的觀念，因為在上一篇文就已經有提過，不過在開始導入 Redux 和 call API 之前，還是會稍微複習之前做了什麼，然後再接下去繼續說明 🙌！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Essential-JavaScript-Interview-Coding-Questions"><a href="#Essential-JavaScript-Interview-Coding-Questions" class="headerlink" title="Essential JavaScript Interview Coding Questions"></a><a href="https://javascript.plainenglish.io/javascript-interview-coding-questions-bfbdd4bd3f08" target="_blank" rel="noopener">Essential JavaScript Interview Coding Questions</a></h3><p>好久沒有分享 JavaScript 的面試題目了，首先讓我們忽略一些比較 tricky 的面試題目，在 JavaScript 裡還有很多很實用的觀念和語法可以融入實作裡面，這篇文章列出了 21 道題目以及該用什麼思維解題，推薦大家可以花個幾分鐘看看，順便測試自己能答對幾題！</p><h3 id="Understanding-Functional-Programming-in-JavaScript"><a href="#Understanding-Functional-Programming-in-JavaScript" class="headerlink" title="Understanding Functional Programming in JavaScript"></a><a href="https://yuricodesbot.hashnode.dev/understanding-functional-programming-in-javascript" target="_blank" rel="noopener">Understanding Functional Programming in JavaScript</a></h3><p>如果是寫 JavaScript 的開發者，一定多少都會在學習的過程中聽見 Functional Programming（函數式編程）這個名詞，這篇文章用簡單的例子解釋 Functional Programming，並列出目前 JavaScript 裡有哪些語法使用了這項編程方式。</p><h3 id="React-Snapshot-Testing-With-Jest-An-Introduction-With-Examples"><a href="#React-Snapshot-Testing-With-Jest-An-Introduction-With-Examples" class="headerlink" title="React Snapshot Testing With Jest: An Introduction With Examples"></a><a href="https://blog.openreplay.com/react-snapshot-testing-with-jest-an-introduction-with-examples" target="_blank" rel="noopener">React Snapshot Testing With Jest: An Introduction With Examples</a></h3><p>最近開始碰了一些 unit test 的部分，但身為一個前端工程師只會 function 的 unit test 是不夠的，還需要會 component 的 unit test，這篇文章教大家如何利用 snapshot testing 來進行 component 的 snapshot testing 藉以達到 component 行為上的 unit test。</p><h3 id="Adding-100-underline-overlay-animations-The-impressive-CSS-collection"><a href="#Adding-100-underline-overlay-animations-The-impressive-CSS-collection" class="headerlink" title="Adding 100 underline/overlay animations | The impressive CSS collection"></a><a href="https://dev.to/afif/adding-100-underline-overlay-animations-the-impressive-css-collection-1a93" target="_blank" rel="noopener">Adding 100 underline/overlay animations | The impressive CSS collection</a></h3><p>這個真的太酷了！完全不知道 underline 或 overlay 可以有這麼多不同的設計，而且只需要利用簡單的幾行 CSS 程式碼就可以達到了，如果有前端工程師遇到設計師要用這種底線的表達方式，不妨可以上來這個網站上進行查詢，說不定會有意想不到的答案喔XD</p><h3 id="How-to-Build-Blog-Using-Gatsby-💻"><a href="#How-to-Build-Blog-Using-Gatsby-💻" class="headerlink" title="How to Build Blog Using Gatsby 💻"></a><a href="https://suprabhasupi.hashnode.dev/how-to-build-blog-using-gatsby" target="_blank" rel="noopener">How to Build Blog Using Gatsby 💻</a></h3><p>Gatsby 是一個使用 React 和 GraphQL 技術打造的靜態網頁的產生器，如果你已經是熟悉使用 React 的開發者，那就更不能夠錯過！這篇文章提供了一些入門 Gatsby，並足以創建一個 Blog 的內容，有興趣的話可以跟著文章一起建立一個 Blog！</p><h3 id="Next-js-11-1"><a href="#Next-js-11-1" class="headerlink" title="Next.js 11.1"></a><a href="https://nextjs.org/blog/next-11-1" target="_blank" rel="noopener">Next.js 11.1</a></h3><p>Next.js 終於把 11.1 的版本擠牙膏擠出來了(誤，自從 Next.js 宣布支援 <a href="https://swc.rs/" target="_blank" rel="noopener">swc</a> 後有發現 Next.js 開始利用 Rust 語言做了不少事情，而這次的更新也做了不少改動，想要了解更多改動的可以閱讀這篇由官方撰寫的文章吧！</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="We’re-under-attack-23-Node-js-security-best-practices"><a href="#We’re-under-attack-23-Node-js-security-best-practices" class="headerlink" title="We’re under attack! 23+ Node.js security best practices"></a><a href="https://medium.com/@nodepractices/were-under-attack-23-node-js-security-best-practices-e33c146cb87d" target="_blank" rel="noopener">We’re under attack! 23+ Node.js security best practices</a></h3><p>要上手 Node.js 很簡單，但要把 Node.js 寫得安全卻不太容易。這篇文章整理了 23 個 Node.js 的 security best practices，只要你把這些建議都做到，那應該就不用太擔心安全性了～</p><h3 id="Running-CPU-Bound-Tasks-in-Node-js-Introduction-to-Worker-Threads"><a href="#Running-CPU-Bound-Tasks-in-Node-js-Introduction-to-Worker-Threads" class="headerlink" title="Running CPU-Bound Tasks in Node.js: Introduction to Worker Threads"></a><a href="https://yarin.dev/nodejs-cpu-bound-tasks-worker-threads/" target="_blank" rel="noopener">Running CPU-Bound Tasks in Node.js: Introduction to Worker Threads</a></h3><p>Node.js 一向被認為不擅於解決 CPU 密集型的問題，因為 Node.js 的 JS 引擎是單執行緒的。但自從有了 worker thread 之後，Node.js 也可以把多個任務分配給多個 thread 執行，效能上也會好上許多</p><h3 id="How-to-Use-Promise-allSettled"><a href="#How-to-Use-Promise-allSettled" class="headerlink" title="How to Use Promise.allSettled()"></a><a href="https://dmitripavlutin.com/promise-all-settled/" target="_blank" rel="noopener">How to Use Promise.allSettled()</a></h3><p>從 Node v12.9.0 開始的 Promise 物件多了一個新的 method 叫 allSettled，這篇舉了一些例子來講解這個新的 allSettled 到底可以用來幹嘛，還不認識他的朋友們趕快來看看吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Docker-Compose-Alternatives-for-Kubernetes-Skaffold"><a href="#Docker-Compose-Alternatives-for-Kubernetes-Skaffold" class="headerlink" title="Docker Compose Alternatives for Kubernetes: Skaffold"></a><a href="https://loft.sh/blog/docker-compose-alternatives-for-kubernetes-skaffold/" target="_blank" rel="noopener">Docker Compose Alternatives for Kubernetes: Skaffold</a></h3><p>對於有在 K8s 開發應用程式的人來說，在本地端使用 Docker Compose 或許是個最簡單的解決方案，但有個問題就是這樣本地端環境跟真實的生產環境一定不同，直接在本地端來個 K8s Cluster 或許可以解決這個問題，但這樣每次改一點東西就要 Build 跟 Deploy Containers 到這個 K8s Cluster 中，其實很勞民傷財；所以這篇文章想要跟大家介紹怎麼使用由 Google 推出的 Skaffold 來讓本地開發流程更簡單！</p><h3 id="PromCat-A-resource-catalog-for-enterprise-class-Prometheus-monitoring"><a href="#PromCat-A-resource-catalog-for-enterprise-class-Prometheus-monitoring" class="headerlink" title="PromCat: A resource catalog for enterprise-class Prometheus monitoring"></a><a href="https://sysdig.com/blog/promcat-prometheus-catalog/" target="_blank" rel="noopener">PromCat: A resource catalog for enterprise-class Prometheus monitoring</a></h3><p>Prometheus 時常被用來監控 Cloud-Native 環境，也吸引到廣泛的社群資源，但是目前好像有點多到沒那麼容易去找到適合自己又品質好的資訊，畢竟文件都不太齊全或是已經過時，Sysdig 這邊想要提供給大家一個良好的 Prometheus 監控體驗，所以他們創造了 PromCat 平台，它提供了一個類似 Prometheus 相關資源分類目錄的概念，讓使用者可以透過他來輕易地找到針對 Kubernetes 和 Cloud-Native 服務的有用資訊跟工具，所以大家下次想要尋找什麼 Prometheus Rule, Exporter, Grafana Dashbord 都可以先來這邊翻翻看</p><h3 id="Kubernetes-1-22-Server-Side-Apply-moves-to-GA"><a href="#Kubernetes-1-22-Server-Side-Apply-moves-to-GA" class="headerlink" title="Kubernetes 1.22: Server Side Apply moves to GA"></a><a href="https://kubernetes.io/blog/2021/08/06/server-side-apply-ga/" target="_blank" rel="noopener">Kubernetes 1.22: Server Side Apply moves to GA</a></h3><p>K8s 在這次推出的 1.22 版當中，有一個叫做 Server Side Apply 的功能也跟著一起正式 GA，它主要是想幫助使用者或是管理者可以透過 Declarative Configuration 的方式來管理 K8s 資源，這個功能主要是想要取代掉以前由 Client 端透過 “kubectl apply” 去完成的任務，讓這類型的實作方式改成由 Server 端來完成，它在 api-server 中提供了新的合併演算法來追蹤欄位的所有權，當有兩個角色嘗試編輯同一個欄位的資料時，它可以透過衝突偵測的功能來發現，想要了解具體細節的話，可以參閱官方文件</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 93 期 - 父親節過了，也是時候把技術債都付清</title>
      <link href="/2021/08/10/93-deal-with-technical-debt/"/>
      <url>/2021/08/10/93-deal-with-technical-debt/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="你不能不知道的安全性-HTTP-headers"><a href="#你不能不知道的安全性-HTTP-headers" class="headerlink" title="你不能不知道的安全性 HTTP headers"></a><a href="https://medium.com/starbugs/must-know-security-http-headers-be78aeb93200" target="_blank" rel="noopener">你不能不知道的安全性 HTTP headers</a></h3><p>隨著網路上的 Web 應用程式越來越多，為了提升安全性，現在跟安全性有關的 HTTP header 也是多到記不得，所以這邊想要介紹幾個比較簡單、好設定的安全性 headers ，只要把這些 headers 加進去，網站就會突然變安全哦～</p><h2 id="資訊安全"><a href="#資訊安全" class="headerlink" title="資訊安全"></a>資訊安全</h2><h3 id="CORS-完全手冊（一）：為什麼會發生-CORS-錯誤？"><a href="#CORS-完全手冊（一）：為什麼會發生-CORS-錯誤？" class="headerlink" title="CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？"></a><a href="https://blog.huli.tw/2021/02/19/cors-guide-1/" target="_blank" rel="noopener">CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？</a></h3><p>這一系列的 CORS 完全手冊大概是我看過講 CORS 講得最清楚的，除了教你怎麼解決實務上的 CORS 問題之外，還花了不少篇幅講 CORS 為什麼要設計成這樣，不管你寫的是前端還是後端都該讀讀這篇～</p><h3 id="淺談-XSS-攻擊與防禦的各個環節"><a href="#淺談-XSS-攻擊與防禦的各個環節" class="headerlink" title="淺談 XSS 攻擊與防禦的各個環節"></a><a href="https://blog.huli.tw/2021/06/19/xss-attack-and-defense/" target="_blank" rel="noopener">淺談 XSS 攻擊與防禦的各個環節</a></h3><p>所謂的「網站被攻擊者植入程式碼」其實還可以分成許多環節及關卡，像是「阻止攻擊者在網站植入程碼」、「阻止惡意程式碼被執行」、「降低 XSS 攻擊之損害」其實是三件不同的事情，所以當然也要用不同的方法去防範～</p><h3 id="HTTP-Session-攻擊與防護"><a href="#HTTP-Session-攻擊與防護" class="headerlink" title="HTTP Session 攻擊與防護"></a><a href="https://devco.re/blog/2014/06/03/http-session-protection/" target="_blank" rel="noopener">HTTP Session 攻擊與防護</a></h3><p>雖然這篇由 DEVCORE 寫的文章已經是好幾年前發佈的，但最近又看了一遍還是覺得寫得很不錯，尤其是猜測 Session ID 的部分幾乎很少有文章會提到，所以很推薦所有後端開發者都能看看，也許能有一些意想不到的收穫</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="重新思考-jQuery"><a href="#重新思考-jQuery" class="headerlink" title="重新思考 jQuery"></a><a href="https://f2e.kalan.dev/javascript-basic/7.html#%E9%87%8D%E6%96%B0%E6%80%9D%E8%80%83-jquery" target="_blank" rel="noopener">重新思考 jQuery</a></h3><p>在當今主流的前端框架 React、Vue 和 Angular 等等之下，感覺已經比較少看到有人提到 JQuery 的新版本或開發方式，但是 JQuery 曾經提供給我們方便使用的那些語法，還是有很多值得我們學習的地方，這篇文章的作者列出一些在 JQuery 中那些熟悉的 API，看看那些從語法後學到的事。</p><h3 id="Tag-in-HTML-–-Example-Code"><a href="#Tag-in-HTML-–-Example-Code" class="headerlink" title=" Tag in HTML – Example Code"></a><a href="https://www.freecodecamp.org/news/pre-tag-in-html-example-code/" target="_blank" rel="noopener"><pre> Tag in HTML – Example Code</a></h3><p>HTML 中的 <code>pre</code> Tag 的內容可以在沒有任何 HTML 標籤或語法（<code>br</code> 或 <code>&amp;nbsp;</code>）的狀況下，保留所有在程式碼中的空白或換行，在使用上我常會用 <code>pre</code> 來顯示使用者輸入在 <code>textarea</code> 中的內容。</p><h3 id="8-Proper-Ways-to-Hide-Elements-on-Your-Website-With-CSS-2021"><a href="#8-Proper-Ways-to-Hide-Elements-on-Your-Website-With-CSS-2021" class="headerlink" title="8 Proper Ways to Hide Elements on Your Website With CSS (2021)"></a><a href="https://torquemag.io/2021/08/hide-elements-css/" target="_blank" rel="noopener">8 Proper Ways to Hide Elements on Your Website With CSS (2021)</a></h3><p>在網頁中隱藏元素最常用的方法應該就是視情況使用 <code>display: none;</code> 或 <code>visibility: hidden;</code>，不過文章還列舉出其他像是用 <code>transform</code> 把元素縮到最小、用 <code>position</code> 把元素放到看不見的地方等等（但文章中沒有列出用 <code>opacity</code> 直接把元素變成透明 😂），大家可以看看各種方法的差異和使用情境如何，之後遇到類似的情境可以考慮使用！🙌</p><h3 id="Understanding-React-Portals-and-Its-Use-Cases"><a href="#Understanding-React-Portals-and-Its-Use-Cases" class="headerlink" title="Understanding React Portals and Its Use-Cases"></a><a href="https://blog.bitsrc.io/understanding-react-portals-ab79827732c7" target="_blank" rel="noopener">Understanding React Portals and Its Use-Cases</a></h3><p>React Portal 算是一個蠻重要但是蠻進階的用法，當今天想要將一個元素永遠擺在最外層，例如永遠 append 在 document.body 之下，可以透過 Portal 的方式輕鬆地達到，甚至利用 Portal 你也可以輕鬆地把元素安插到某一個節點上都不是問題，最常見的用法就是把 Modal 利用 Portal 的方式 append 在最外層，這樣根據 HTML 的結構來看也比較合適。</p><h3 id="淺談-DOM-Clobbering-的原理及應用"><a href="#淺談-DOM-Clobbering-的原理及應用" class="headerlink" title="淺談 DOM Clobbering 的原理及應用"></a><a href="https://blog.techbridge.cc/2021/01/23/dom-clobbering/" target="_blank" rel="noopener">淺談 DOM Clobbering 的原理及應用</a></h3><p>這個算是蠻有趣議題，其實 DOM 可以直接透過元素 ID 的方式來抓取元素，不必藉由 <code>document.getElementById()</code> 的操作直接把元素的 ID 當作是全域變數的方式來抓取元素，也因為這個特性導致網站很有可能會因此被進行攻擊，所以才會鼓勵大家在寫 React 的時候透過 ref 的方式進行 DOM 操作，這篇文章闡述了 DOM clobbering 的議題，有興趣的讀者可以收藏起來閱讀。</p><h3 id="6-useful-frontend-techniques-that-you-may-not-know-about"><a href="#6-useful-frontend-techniques-that-you-may-not-know-about" class="headerlink" title="6 useful frontend techniques that you may not know about"></a><a href="https://dev.to/ra1nbow1/6-useful-frontend-techniques-that-you-may-not-know-about-47hd" target="_blank" rel="noopener">6 useful frontend techniques that you may not know about</a></h3><p>這個真的太有趣了，沒想到有這麼多小技巧可以達到一些平常會用到的效果，只能說前端真的太廣大了哈哈哈，太多比較細節的操作如果沒有親自去深入研究的話根本就不知道還有這麼多可玩之處。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="NSA-CISA-publish-Kubernetes-hardening-guide"><a href="#NSA-CISA-publish-Kubernetes-hardening-guide" class="headerlink" title="NSA, CISA publish Kubernetes hardening guide"></a><a href="https://therecord.media/nsa-cisa-publish-kubernetes-hardening-guide/" target="_blank" rel="noopener">NSA, CISA publish Kubernetes hardening guide</a></h3><p> NSA (National Security Agency) 和 CISA (Cybersecurity and Infrastructure Security Agency) 發布了一份 59 頁的技術報告，內容主要是想教導大家如何 Hardening Kubernetes，畢竟由 Google 所開發跟開源的 Kubernetes 是目前世界上最流行的 Container Orchestration，越多人越用的東西，對於駭客來說就越有研究的價值，報告內容主要涵蓋底下幾個大項：</p><ul><li>透過掃描 Container 和 Pod 來發現 Vulnerability 或是 Misconfiguration</li><li>盡可能使用最小權限來運行 Container 和 Pod</li><li>利用網路隔離性來控制被入侵時可能造成的損害</li><li>使用防火墻來限制不必要的網路連線，並且利用加密技術來保護敏感資訊</li><li>使用強勁的 Authentication 和 Authorization 機制來限制一般使用者和管理員存取，同時也能達成攻擊面的限縮</li><li>使用稽核 Log，管理員可以透過它來監控活動，並就潛在的惡意活動發出告警</li><li>週期性地檢查所有的 Kubernetes 設定，並且利用弱點掃描工具來發現風險和確保 Security Patch 都有記得安裝</li></ul><h3 id="Top-40-Docker-interview-questions"><a href="#Top-40-Docker-interview-questions" class="headerlink" title="Top 40 Docker interview questions"></a><a href="https://www.educative.io/blog/top-40-docker-interview-questions" target="_blank" rel="noopener">Top 40 Docker interview questions</a></h3><p>說是 Docker 帶起現今 Container 風潮也不爲過，它甚至成為了 Container 的代名詞，各個 IT 領域在日常工作中都常常使用它，所以把 Docker 當成面試問題還滿常見的，這篇文章便列舉了 40 個有關 Docker 的面試問題，<del>最近有在準備面試</del> 想要挑戰自己對於 Docker 熟稔程度的人千萬不要錯過了！</p><h3 id="Learn-the-networking-basics-every-sysadmin-needs-to-know"><a href="#Learn-the-networking-basics-every-sysadmin-needs-to-know" class="headerlink" title="Learn the networking basics every sysadmin needs to know"></a><a href="https://www.redhat.com/sysadmin/sysadmin-essentials-networking-basics" target="_blank" rel="noopener">Learn the networking basics every sysadmin needs to know</a></h3><p>有人跟我一樣把文章封面圖片的網路線看成一串香蕉的嗎XD 這篇文章從網路最基本簡單的 TCP, IP 概念開始介紹起，然後從 Linux 系統中的 Network Interface 為例來做更深入的探討，例如如何配置靜態 IP，設定網路路由，最後再介紹一點 Network Switch 和 Router，協助 sysadmin 能夠勝任日常工作</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@KyleMo</a> - 雜食性軟體工程師，喜歡的技術我都想學。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 92 期 - 大家上個週末有一起線上群聚嗎？</title>
      <link href="/2021/08/03/92-container-registry-sync/"/>
      <url>/2021/08/03/92-container-registry-sync/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Container-Image-影分身之術-—-失敗篇"><a href="#Container-Image-影分身之術-—-失敗篇" class="headerlink" title="Container Image 影分身之術 — 失敗篇"></a><a href="https://medium.com/starbugs/container-image-%E5%BD%B1%E5%88%86%E8%BA%AB%E4%B9%8B%E8%A1%93-%E5%A4%B1%E6%95%97%E7%AF%87-9f43feae0ae4" target="_blank" rel="noopener">Container Image 影分身之術 — 失敗篇</a></h3><p>Container Image 都透過同一個 Public Container Registry 上傳或是下載就好啦！例如 Docker Hub，Quay.io…等，這樣會有什麼問題嗎？就讓我們用這篇文章來了解這樣會有什麼樣的問題與可能的解決方法！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Complete-Guide-to-Localizing-your-App-with-JavaScript’s-Internationalization-API"><a href="#The-Complete-Guide-to-Localizing-your-App-with-JavaScript’s-Internationalization-API" class="headerlink" title="The Complete Guide to Localizing your App with JavaScript’s Internationalization API"></a><a href="https://blog.openreplay.com/the-complete-guide-to-localizing-your-app-with-javascript-s-internationalization-api" target="_blank" rel="noopener">The Complete Guide to Localizing your App with JavaScript’s Internationalization API</a></h3><p>現在有不少網頁都會需要服務不同語言的使用者，因此在前端中能夠恰當的處理多國語系也是很重要的，文中中介紹了很多處理多國語系中會遇到的問題，像是「不要透過 ip 來決定使用者瀏覽網站的語言」、「各個語言的複數形式不同」和「各個語言的字串長度會不會破壞 UI」等等小眉角，如果有想要或正在使用多國語系的開發者可以看看這篇文章。</p><h3 id="5-Cypress-E2E-Testing-Mistakes-to-Avoid"><a href="#5-Cypress-E2E-Testing-Mistakes-to-Avoid" class="headerlink" title="5 Cypress E2E Testing Mistakes to Avoid"></a><a href="https://hackernoon.com/5-cypress-e2e-testing-mistakes-to-avoid-8z2s37ev" target="_blank" rel="noopener">5 Cypress E2E Testing Mistakes to Avoid</a></h3><p>作者介紹了使用 Cypress 做 E2E 測試應該要避免的錯誤，除了最有感的不要使用 id 或是 class 去抓取你要測試的元素外，其他就是關於 Cypress 使用上需要注意的地方，不要讓測試的程式碼都變得和程式碼一樣難維護。 😂</p><h3 id="Vue源码学习-4个实用的Javascript技巧"><a href="#Vue源码学习-4个实用的Javascript技巧" class="headerlink" title="Vue源码学习 | 4个实用的Javascript技巧"></a><a href="https://juejin.cn/post/6971225536882278413?from=main_page" target="_blank" rel="noopener">Vue源码学习 | 4个实用的Javascript技巧</a></h3><p>想要寫好程式，多多閱讀大家常用的開源專案一定是個很好的方式之一，畢竟那就是現成的程式碼實戰教科書 😂，這篇文章介紹了幾個在 Vue 的開源專案中學到的 4 個 JavaScript 的實用技巧，以及 Vue 把這些技巧用在哪些地方，就算是寫其他框架的開發者也可以看一下哦！</p><h3 id="Fills-and-strokes-in-SVG"><a href="#Fills-and-strokes-in-SVG" class="headerlink" title="Fills and strokes in SVG"></a><a href="https://webplatform.github.io/docs/tutorials/fills_and_strokes_in_svg/" target="_blank" rel="noopener">Fills and strokes in SVG</a></h3><p>每次在修改 svg 顏色時都會不曉得該用 <code>fill</code> 還是 <code>stroke</code> 好，尤其在複雜的 svg 更是難以捉摸，透過這篇文章後有比較了解到底這兩個 css 是負責套用在哪種樣式上。</p><h3 id="delighter-js-—-CSS3-animation-effects-when-scrolling"><a href="#delighter-js-—-CSS3-animation-effects-when-scrolling" class="headerlink" title="delighter.js — -CSS3 animation effects when scrolling"></a><a href="https://diyifang.medium.com/delighter-js-css3-animation-effects-when-scrolling-2e9535f47a01" target="_blank" rel="noopener">delighter.js — -CSS3 animation effects when scrolling</a></h3><p>這個套件真的不錯蠻推薦的，可以讓使用者在滾動頁面時偵測是否達到該元素的 viewpoint 再進行一些動畫的效果讓使用者跟網頁有互動性，如果有網頁需要這種功能的話不妨可以使用 <a href="https://github.com/Q42/delighters" target="_blank" rel="noopener">delighter.js</a> 這個套件喔！</p><h3 id="This-is-How-JavaScript-Promises-Really-Work"><a href="#This-is-How-JavaScript-Promises-Really-Work" class="headerlink" title="This is How [JavaScript] Promises Really Work"></a><a href="https://dev.to/cleancodestudio/this-is-how-javascript-promises-really-work-a-promising-guide-dlg" target="_blank" rel="noopener">This is How [JavaScript] Promises Really Work</a></h3><p>相信很多學 JavaScript 的人都曾經敗在 promise 的手上，畢竟非同步這概念真的太抽象了很難去了解其運作原理，這篇文章完整的介紹整個 promise 的運作原理，想讓自己對於 promise 的印象更加深刻的讀者不妨可以把這篇文章收藏起來。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="看漫畫學-Linux"><a href="#看漫畫學-Linux" class="headerlink" title="看漫畫學 Linux"></a><a href="https://hackmd.io/@sysprog/linux-comic" target="_blank" rel="noopener">看漫畫學 Linux</a></h3><p>這個系列的漫畫主要在介紹 Linux 內部的機制，內容涵蓋 file system、process table 等等主題，重點是整個漫畫很可愛而且，如果想稍微了解 Linux 但又不想花太多時間讀文章，那這一系列漫畫真的很不錯</p><h3 id="Difference-between-Linux-distributions"><a href="#Difference-between-Linux-distributions" class="headerlink" title="Difference between Linux distributions"></a><a href="https://www.computernetworkingnotes.com/linux-tutorials/difference-between-linux-distributions.html" target="_blank" rel="noopener">Difference between Linux distributions</a></h3><p>眾所皆知 Linux 有很多種發行版，比較常聽到的大概是 Ubuntu、Debian、CentOS 等等，如果不太清楚各種發行版之間有什麼不同、針對不同的需求又該怎麼選，那就來看看這篇簡單的介紹吧！</p><h3 id="Netcat-All-you-need-to-know"><a href="#Netcat-All-you-need-to-know" class="headerlink" title="Netcat - All you need to know"></a><a href="https://blog.ikuamike.io/posts/2021/netcat/" target="_blank" rel="noopener">Netcat - All you need to know</a></h3><p>Netcat 是 Linux 中一個非常好用 CLI 工具，幾乎可以說是網路相關功能的瑞士刀，他可以用來掃 port、傳輸檔案、重新導向等等，而且指令用起來也非常簡單，有在用 Linux 但對 netcat 不熟的朋友們不妨跟著這篇的例子練習看看～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-1-22-–-What’s-new"><a href="#Kubernetes-1-22-–-What’s-new" class="headerlink" title="Kubernetes 1.22 – What’s new?"></a><a href="https://sysdig.com/blog/kubernetes-1-22-whats-new/" target="_blank" rel="noopener">Kubernetes 1.22 – What’s new?</a></h3><p>Kubernets 1.22 即將發佈啦～ Sysdig 不免俗的又來介紹這一版有哪些重要更新：</p><ul><li>Pod Security Policy Replacement: 大家應該還記得在 1.21 時宣佈了 Pod Security Policies 即將要退休的消息，而在 1.22 可以看到有一個新的功能叫做  PodSecurity Admission Controller 準備來接替它 </li><li>Rootless Mode Containers: 不要用 Root 帳號來運行 Container 是最佳的安全守則，所以在這一版中 K8s 將開始允許維運人員使用非 Root 帳號來運行整個 K8s，所就算整個 K8s Cluster 被攻陷了，也沒那麼容易去存取到其他資源</li><li>Seccomp by Default: 又是跟安全相關的功能，現在 K8s 允許將 Seccomp 變成預設功能，協助預防 CVE 或是 Zero-Day Vulnerability 可能造成的危害與風險</li><li>Node Swap Support: 讓運行在 K8s 中的 Workload 可以使用 Swap，讓 Java 和 Node 相關應用服務受惠</li><li>Cgroupsv2: Cgroups 的 v2 API 在兩年前就已經宣佈穩定了，很多的 Linux Distribution 都已經預設使用，現在看起來 K8s 也可以相容了！</li></ul><h3 id="Expiration-options-for-personal-access-tokens"><a href="#Expiration-options-for-personal-access-tokens" class="headerlink" title="Expiration options for personal access tokens"></a><a href="https://github.blog/changelog/2021-07-26-expiration-options-for-personal-access-tokens/" target="_blank" rel="noopener">Expiration options for personal access tokens</a></h3><p>大家應該或多或少都會使用到 GitHub 內的 Personal Access Token，現在新增 Token 的時候將會預設有過期日，既有的則被設定成永不過期，這可以避免 Token 外流後可以一直被拿來為非作歹，最近在新增 Token 的時候會需要注意一下</p><h3 id="7-Best-Automation-Testing-Tools-to-Consider-in-2021"><a href="#7-Best-Automation-Testing-Tools-to-Consider-in-2021" class="headerlink" title="7 Best Automation Testing Tools to Consider in 2021"></a><a href="https://www.geeksforgeeks.org/7-best-automation-testing-tools-to-consider-in-2021/" target="_blank" rel="noopener">7 Best Automation Testing Tools to Consider in 2021</a></h3><p>這篇文章介紹了 2021 七個最佳的自動化測試工具，自己只認識一半不到 (Selenium, Cucumber, Appium)，不知道大家公司或是組職內都是使用哪一些呢？</p><ul><li>Selenium</li><li>Ranorex</li><li>Kobiton</li><li>Cucumber</li><li>Eggplant</li><li>Appium</li><li>Katalon</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 91 期 - 台灣奧運加油！</title>
      <link href="/2021/07/27/91-olympics-taiwan-go/"/>
      <url>/2021/07/27/91-olympics-taiwan-go/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Dnote-在終端機做筆記-自架-Dnote-伺服器"><a href="#Dnote-在終端機做筆記-自架-Dnote-伺服器" class="headerlink" title="Dnote 在終端機做筆記 + 自架 Dnote 伺服器"></a><a href="https://medium.com/starbugs/207915604ca4" target="_blank" rel="noopener">Dnote 在終端機做筆記 + 自架 Dnote 伺服器</a></h3><p>當你在使用終端機時，想要快速記錄筆記，但是不想使用滑鼠時。這時候 Dnote 就派上用場啦。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Box-Model-Properties-–-Explained-With-Examples-✨"><a href="#CSS-Box-Model-Properties-–-Explained-With-Examples-✨" class="headerlink" title="CSS Box Model Properties – Explained With Examples ✨"></a><a href="https://www.freecodecamp.org/news/css-box-model-explained-with-examples/" target="_blank" rel="noopener">CSS Box Model Properties – Explained With Examples ✨</a></h3><p>如果是剛碰到網頁設計的初學者，這篇文章真的超級推薦！每個小節都專注介紹一些小部分的屬性對版面元素的影響，配合上例子讓人更能了解該如何使用 CSS！</p><h3 id="meta标签到底是做什么的-我竟一无所知"><a href="#meta标签到底是做什么的-我竟一无所知" class="headerlink" title="meta标签到底是做什么的|我竟一无所知"></a><a href="https://juejin.cn/post/6987919006468407309" target="_blank" rel="noopener">meta标签到底是做什么的|我竟一无所知</a></h3><p>雖然 meta 標籤在大部分網站點開 F12 的開發者工具都看得見，但是真的要解釋起來好像又有點一知半解，這篇文章的內容應該算是前端冷知識，但是還是可以了解看看文章裡有哪些神奇的標籤和屬性是我們沒有看過的！</p><h3 id="25-Vue-Tips-You-Need-to-Know"><a href="#25-Vue-Tips-You-Need-to-Know" class="headerlink" title="25 Vue Tips You Need to Know"></a><a href="https://dev.to/michaelthiessen/25-vue-tips-you-need-to-know-2h70" target="_blank" rel="noopener">25 Vue Tips You Need to Know</a></h3><p>相較於貼近原生 JavaScript 的 React 來說，Vue 就有很多黑科技語法可以直接使用，但是如果搞不清楚如何使用就會讓程式變得很難維護，文章中一口氣舉了 25 個在寫 Vue 時可以注意的小地方，一口氣給你滿滿的乾貨。</p><h3 id="Is-It-Possible-to-Allow-Literal-String-Values-With-TypeScript’s-Enum-Type"><a href="#Is-It-Possible-to-Allow-Literal-String-Values-With-TypeScript’s-Enum-Type" class="headerlink" title="Is It Possible to Allow Literal String Values With TypeScript’s Enum Type?"></a><a href="https://www.designcise.com/web/tutorial/is-it-possible-to-allow-literal-string-values-with-typeScripts-enum-type" target="_blank" rel="noopener">Is It Possible to Allow Literal String Values With TypeScript’s Enum Type?</a></h3><p>這招真的太炫砲了，以前想要把 enum 的值取出來並且作為某個 type 的 value 時，通常都要用迴圈的方式慢慢把 enum 的值抓出來，但其實可以用 template string 的技巧達到一樣的效果，如果讀者有類似的需求不妨也可以用這種方式也能讓整體程式碼看起來更乾淨俐落。</p><h3 id="React-Component-with-Dot-Notation"><a href="#React-Component-with-Dot-Notation" class="headerlink" title="React Component with Dot Notation"></a><a href="https://medium.com/risan/react-component-with-dot-notation-7a9853dbf33b" target="_blank" rel="noopener">React Component with Dot Notation</a></h3><p>有時候在使用 <a href="https://ant.design/components/overview/" target="_blank" rel="noopener">ant design</a> 時總是會看到一些可以利用 <code>&lt;A.B /&gt;</code> 的方式讓 B 元件也可以被引用，到底 React 是如何做到這點的呢？這篇文章有了詳細的介紹，如果有想要將自己的共用元件也設計成這種引用方式不妨可以把這篇文章收藏起來。</p><h3 id="Learn-Recoil"><a href="#Learn-Recoil" class="headerlink" title="Learn Recoil"></a><a href="https://learnrecoil.com/" target="_blank" rel="noopener">Learn Recoil</a></h3><p><a href="https://recoiljs.org/docs/introduction/installation" target="_blank" rel="noopener">Recoil.js</a> 算是在 React 中一個蠻新的狀態機，其實 Recoil.js 算是比較輕量化的狀態機，不像 Redux 那樣複雜，因此在比較小的專案上不妨都可以利用 Recoil 來進行狀態管理，當然想要自己一步一步的學習真的太累了，因此這邊介紹一個網站可以免費的看影片學習 Recoil，有興趣的讀者不妨可以收藏起來日後可以閱讀。</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="Zero-cost-abstractions-in-Rust"><a href="#Zero-cost-abstractions-in-Rust" class="headerlink" title="Zero-cost abstractions in Rust"></a><a href="https://carette.xyz/posts/zero_cost_abstraction/" target="_blank" rel="noopener">Zero-cost abstractions in Rust</a></h3><p>在讀 Rust 的文件時常會看到「零成本抽象化」這個名詞，但究竟什麼是抽象化，又是哪些部分零成本，一起來看看這篇文章的實驗吧～</p><h3 id="First-steps-with-Docker-Rust"><a href="#First-steps-with-Docker-Rust" class="headerlink" title="First steps with Docker + Rust"></a><a href="https://dev.to/rogertorres/first-steps-with-docker-rust-30oi" target="_blank" rel="noopener">First steps with Docker + Rust</a></h3><p>現在很多服務不管是什麼語言寫的，幾乎都會包成 Docker image 再進行部署，所以怎麼把 Rust 程式碼好好的打包成 Docker image 就很重要了。而這篇文章除了示範怎麼寫 Rust 的 Dockerfile 之外，還講了很多寫 Dockerfile 時的小技巧，推薦有在寫 Rust 的人都來讀讀～</p><h3 id="String-vs-amp-str-in-Rust"><a href="#String-vs-amp-str-in-Rust" class="headerlink" title="String vs &amp;str in Rust"></a><a href="https://blog.thoughtram.io/string-vs-str-in-rust/" target="_blank" rel="noopener">String vs &amp;str in Rust</a></h3><p>初學 Rust 時常被 String 跟 str 搞得很混亂，覺得一個程式語言怎麼會有兩種不同的字串型別，到底是想要幹嘛？但 Rust 這麼做其實是有他的道理，因為他們被儲存的方式確實不太一樣，只能說 Rust 這語言實在是很有趣（麻煩）呢！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Migrating-Facebook-to-MySQL-8-0"><a href="#Migrating-Facebook-to-MySQL-8-0" class="headerlink" title="Migrating Facebook to MySQL 8.0"></a><a href="https://engineering.fb.com/2021/07/22/data-infrastructure/mysql/" target="_blank" rel="noopener">Migrating Facebook to MySQL 8.0</a></h3><p>Facebook 內部有許多重要的應用服務都是使用 MySQL, 而且為了滿足內部的使用需求，他們在 MySQL 內開發了許多的功能，因此每次要升級 MySQL 主要版本都是相當浩大的工程，例如需要將客製化功能移到新版本，確保 Replication 在主要版本間的相容性，讓既有的應用服務只需要最小的改動就能夠繼續查詢資料，修復再升級中會遇到的效能問題，上一次升級到目前 5.6 這一版花了超過一年的時間，在 5.7 釋出時，內部開發的 MyRocks (LSM-Tree Storage Engine) 在弄到一半而已，假如這時候又決定要做主要版本升級將會拖慢 MyRocks 的開發進度，所以後來決定在開發完之前先待在目前的版本 5.6</p><p>而就在 8.0 推出之後，MyRocks 也弄的差不多了，內部想說升級到 8.0 可以獲得比 5.7 更多的新功能，而且這對於要修改 MyRocks 也有更多的好處，所以雖然這筆升級到 5.7 來得更加具挑戰性，但後來還是決定直升 8.0，而具體要做的事情有哪一些呢？首先要把已經在 5.6 Branch 超過 1700 個 Code Patch 移植到 8.0，也需要處理大量在生產環境的 MySQL 伺服器，而且有一些功能可以已經在 5.7 就淘汰掉了，所以從 5.6 升級到 8.0 必須要修改且升級應用服務的程式碼，有一些 Facebook 功能在 8.0 無法兼容，需要棄用或是改成其他用法，最後就是 MyRocks 也需要可以運行在 8.0 中，對於這些挑戰細節有興趣的人，推薦可以直接參考文章詳細內容</p><h3 id="Top-10-Useful-GitHub-Repos-for-Self-Development"><a href="#Top-10-Useful-GitHub-Repos-for-Self-Development" class="headerlink" title="Top 10 Useful GitHub Repos for Self-Development"></a><a href="https://dev.to/nehasoni__/top-10-useful-github-repos-for-self-development-25c0" target="_blank" rel="noopener">Top 10 Useful GitHub Repos for Self-Development</a></h3><p>軟體世界更新速度驚人，要怎麼自我學習其實是相當重要的，所以此篇文章的作者列出了十個對於開發本身或是改善開發有幫助的十個 GitHub 專案！</p><ol><li><a href="https://github.com/tuvtran/project-based-learning" target="_blank" rel="noopener">Project Based Learning</a>: 這個專案適合那些透過 Side Project 來學習新事物的人們，而且它還透過不同的程式語言來做分類，是個對於想要從無到有做出一個應用程式的好來源</li><li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">Awesome</a>: 擁有各種不容領域的大量資源，想要學習進入某個領域的開發者可以利用他所提供豐富資源</li><li><a href="https://github.com/EbookFoundation/free-programming-books" target="_blank" rel="noopener">Free Programming Books</a>: 根據不同的程式和人類語言條列大量的免費技術學習資源</li><li><a href="https://github.com/kamranahmedse/developer-roadmap" target="_blank" rel="noopener">Developer Roadmap</a>:  Web 相關開發的職涯道路發展技能樹</li><li><a href="https://github.com/public-apis/public-apis" target="_blank" rel="noopener">Public APIs</a>: 收集各種免費的 API</li><li><a href="https://github.com/jwasham/coding-interview-university" target="_blank" rel="noopener">Coding Interview University</a>: 準備面試時通常都會透過 Google 收集問題，而這個專案包含準備面試的完整資源</li><li><a href="https://github.com/goldbergyoni/javascript-testing-best-practices" target="_blank" rel="noopener">https://github.com/jwasham/coding-interview-university</a>: 收集很多的部落格文章，書籍還有在市場上的工具，讓你的 Javascript 測試技能可以邁向下一個階段</li><li><a href="https://github.com/vinta/awesome-python" target="_blank" rel="noopener">Awesome Python</a>: 收集了驚人的 Python Framework, 函式庫，軟體和資源，想要或是有在撰寫 Python 的人都適合逛一逛</li><li><a href="https://github.com/tensorflow/tensorflow" target="_blank" rel="noopener">TensorFlow</a>: TensorFlow 是在機器學習領域最流行的開源專案，裡面包含了從安裝 TensorFlow 到部署 ML 模型</li><li><a href="https://github.com/freeCodeCamp/freeCodeCamp" target="_blank" rel="noopener">FreeCodeCamp</a>: 為開發新手提供免費學習和增進寫程式效率的地方</li></ol><h3 id="Sysdig-and-Apolicy-join-forces-to-help-customers-secure-Infrastructure-As-Code-and-automate-remediation"><a href="#Sysdig-and-Apolicy-join-forces-to-help-customers-secure-Infrastructure-As-Code-and-automate-remediation" class="headerlink" title="Sysdig and Apolicy join forces to help customers secure Infrastructure As Code and automate remediation"></a><a href="https://sysdig.com/blog/sysdig-and-apolicy-join-forces-to-help-customer-secure-infrastructure-as-code/" target="_blank" rel="noopener">Sysdig and Apolicy join forces to help customers secure Infrastructure As Code and automate remediation</a></h3><p>Sysdig 於日前宣布獲取用來加強 Infrastructure as Code 安全性的 <a href="https://apolicy.io/" target="_blank" rel="noopener"> Apolicy</a>，而 Apolicy 主要的功能在於可以透過 Policy as Code 來加強使用者在 K8s 還有雲端上對於安全政策的遵守，因此它可以達成三個目標，分別是 Shift-left Security (在變更部署到 Production 環境前就先在 CI/CD Pipeline 先行發現問題)，Runtime security (在 Container 服務運行時偵測具有威脅性的行為，預防其發生，並且產生對應反應)和 Continuous compliance (在做到上面兩點後，就可以達成持續性保持安全合規，不再只有透過週期性或是單次的<br>稽核，來確保整體架構的安全性)；其他有關於他如何讓 IaC 跟 PaC 整合再一起的運行方式，例如 Terraform 或是 Open Policy Agent…等，可以直接參閱文章內容，或是直接試用看看 Apolicy</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 90 期 - 每段程式，都藏著一個故事</title>
      <link href="/2021/07/20/90-each-code-snippet-all-hide-a-story/"/>
      <url>/2021/07/20/90-each-code-snippet-all-hide-a-story/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用原生的-JavaScript-Intersection-Observer-API-實現-Lazy-Loading"><a href="#用原生的-JavaScript-Intersection-Observer-API-實現-Lazy-Loading" class="headerlink" title="用原生的 JavaScript Intersection Observer API 實現 Lazy Loading"></a><a href="https://medium.com/starbugs/%E7%94%A8%E5%8E%9F%E7%94%9F%E7%9A%84-javascript-intersection-observer-api-%E5%AF%A6%E7%8F%BE-lazy-loading-6bedccd0950" target="_blank" rel="noopener">用原生的 JavaScript Intersection Observer API 實現 Lazy Loading</a></h3><p>Lazy Loading 簡單說就是，雖然要顯示的資料量有 10 筆，但因為一個頁面大概只能呈現 2 到 3 筆，那我就先計算那 2 到 3 筆資料然後顯示就好，剩下的資料等使用者往下滾再繼續顯示，這樣等待時間就不會太久，那說到底，Lazy Loading 該如何實作呢？</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="部落格搜尋引擎優化-SEO"><a href="#部落格搜尋引擎優化-SEO" class="headerlink" title="部落格搜尋引擎優化 (SEO)"></a><a href="https://linyencheng.github.io/2021/05/07/marketing-seo-blog/?utm_source=fb&utm_medium=post&utm_campaign=night" target="_blank" rel="noopener">部落格搜尋引擎優化 (SEO)</a></h3><p>每個網站都希望曝光率可以越高，並且在網頁中停留更久的時間，但偏偏搜尋引擎最佳化（Search Engine Optimization）就不是那麼好相處的傢伙 😂，文章裡面介紹了作者如何利用一些小眉角，將自己部落格的每月訪問次數提高了一千左右。</p><h3 id="3-5-Years-as-a-Front-end-Engineer-Things-I-Learn-and-What-Next"><a href="#3-5-Years-as-a-Front-end-Engineer-Things-I-Learn-and-What-Next" class="headerlink" title="3.5 Years as a Front-end Engineer - Things I Learn and What Next?"></a><a href="https://adith.vercel.app/posts/three-and-a-half-years-as-frontend-engineer-what-i-learn" target="_blank" rel="noopener">3.5 Years as a Front-end Engineer - Things I Learn and What Next?</a></h3><p>在成為工程師後的一段時間，不時都會陷入「下一步到底該往哪裡走？」或是「接下來要學習什麼？」等問題的漩渦之中，然後久久爬不出來也尋找不到答案。這篇文章中的作者從「思考方式」、「技術深度與廣度的抉擇」和「如何提高價值」三個方向反思自己當下的狀況，以及他該準備什麼進入下個階段。</p><h3 id="5-HTML-Tags-That-Almost-Nobody-Knows"><a href="#5-HTML-Tags-That-Almost-Nobody-Knows" class="headerlink" title="5 HTML Tags That Almost Nobody Knows"></a><a href="https://dev.to/ayabouchiha/5-html-tags-that-almost-nobody-knows-5p5" target="_blank" rel="noopener">5 HTML Tags That Almost Nobody Knows</a></h3><p>HTML 提供越來越多語義化的標籤，但通常都不太會去特別看到底有哪些標籤可以使用 😂，文章裡就介紹了 5 個鮮為人知的標籤，來看看它們提供了什麼樣特別的語意吧！</p><h3 id="CSS-Trick-–-Customized-Dashed-or-Dotted-Border"><a href="#CSS-Trick-–-Customized-Dashed-or-Dotted-Border" class="headerlink" title="CSS Trick – Customized Dashed or Dotted Border"></a><a href="https://kovart.github.io/dashed-border-generator/" target="_blank" rel="noopener">CSS Trick – Customized Dashed or Dotted Border</a></h3><p>最近在做 border 的一些樣式上的研究，發現原生的 border 樣式其實很難達到很多當代的設計，但是怎麼會有前端工程師設計不出來的樣式呢？經過一番查詢之後發現要用 <code>background-image</code> 的方式繞過去，然後在經過一番查詢後查到一個網站竟然有人幫忙大家把各種樣式的 border 都設計好而且還會自動產生 css code 真的太酷了，趕緊來分享給大家XD</p><h3 id="How-to-render-pseudo-before-content-dynamically-in-styled-component"><a href="#How-to-render-pseudo-before-content-dynamically-in-styled-component" class="headerlink" title="How to render pseudo before content dynamically in styled-component"></a><a href="https://stackoverflow.com/questions/46339034/how-to-render-pseudo-before-content-dynamically-in-styled-component" target="_blank" rel="noopener">How to render pseudo before content dynamically in styled-component</a></h3><p>這個算是最近踩到的一個小地雷，平常在用 styled-components 久了，當偽元素的 content 必須要動態產生時，很容易直覺以為在 callback 中 return string 就會正常顯示出來了，但其實這樣還不夠因為在 css content 中本身就必須要先加上 ‘’ 了，所以在 callback 的外面也要加上 ‘’ 才能順利的把內容顯示出來。</p><h3 id="safari-IOS-menu-bar-conflicts-with-buttons-in-lower-10-of-the-screen"><a href="#safari-IOS-menu-bar-conflicts-with-buttons-in-lower-10-of-the-screen" class="headerlink" title="safari IOS menu bar conflicts with buttons in lower 10% of the screen"></a><a href="https://apple.stackexchange.com/questions/130822/safari-ios-menu-bar-conflicts-with-buttons-in-lower-10-of-the-screen" target="_blank" rel="noopener">safari IOS menu bar conflicts with buttons in lower 10% of the screen</a></h3><p>最近在解 ios safari 問題時(沒錯又是麻煩的 safari XD)，發現瀏覽器的 menu bar 會一直跟網頁中只要 button 在底部時會在滾動時產生樣式上的衝突，讓使用者無法在網頁上點擊到按鈕，沒想到網路上很多人都在問這個問題也有相對應的解答XD，如果有遇到這種問題的讀者都可以來看一下這邊的解答XD </p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="There-Are-Many-Ways-To-Safely-Count"><a href="#There-Are-Many-Ways-To-Safely-Count" class="headerlink" title="There Are Many Ways To Safely Count"></a><a href="https://brunocalza.me/there-are-many-ways-to-safely-count/" target="_blank" rel="noopener">There Are Many Ways To Safely Count</a></h3><p>在 Go 裡面要如何寫一個 thread-safe 的計數器呢？這邊提供了 mutex、channel、atomic 三種方法，我認為他們各有各的好處，如果對哪個比較不熟不妨點進來看看這個簡單的例子</p><h3 id="Writing-slower-Go-programs"><a href="#Writing-slower-Go-programs" class="headerlink" title="Writing slower Go programs"></a><a href="https://bitfieldconsulting.com/golang/slower" target="_blank" rel="noopener">Writing slower Go programs</a></h3><p>雖然這篇文章叫 Writing slower Go programs，但可不是在教你怎麼寫出很慢的程式碼，而是在告訴你說 Go 這語言本身就很快，所以你在寫 Go 時應該更注重可讀性而不是效能，除非你真的發現某個地方是效能瓶頸，那再著手去改善它就好了</p><h3 id="Dark-corners-of-go"><a href="#Dark-corners-of-go" class="headerlink" title="Dark corners of go"></a><a href="https://link.medium.com/HR2yKBUXJhb" target="_blank" rel="noopener">Dark corners of go</a></h3><p>Go 是一個易學難精的語言，尤其他的某些 feature 可能寫了很久都沒用過，而這篇文章就是把這些鮮為人知的 feature 整理出來，想更了解 Go 的話就快來看看吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-API-and-Feature-Removals-In-1-22-Here’s-What-You-Need-To-Know"><a href="#Kubernetes-API-and-Feature-Removals-In-1-22-Here’s-What-You-Need-To-Know" class="headerlink" title="Kubernetes API and Feature Removals In 1.22: Here’s What You Need To Know"></a><a href="https://kubernetes.io/blog/2021/07/14/upcoming-changes-in-kubernetes-1-22/" target="_blank" rel="noopener">Kubernetes API and Feature Removals In 1.22: Here’s What You Need To Know</a></h3><p>時光匆匆，下個月 K8s 1.22 就要推出了！底下列的這些 API 將會在 1.22 中都被刪除掉@@ 不過不是完全消失啦，是因為已經離開 Beta 階段，要進入到正式版本，文章中詳細的說明移除後會被影響的資源有哪一些，並且詳細的說明要升級的話會有哪一些步驟需要做～</p><ul><li>ValidatingWebhookConfiguration 和 MutatingWebhookConfiguration API 的 Beta 版本 (admissionregistration.k8s.io/v1beta1)</li><li>CustomResourceDefinition API 的 Beta 版本 (apiextensions.k8s.io/v1beta1)</li><li>APIService API 的 Beta 版本 (apiregistration.k8s.io/v1beta1)</li><li>TokenReview API 的 Beta 版本 (authentication.k8s.io/v1beta1)</li><li>SubjectAccessReview, LocalSubjectAccessReview 和 SelfSubjectAccessReview API 的 Beta 版本 (authorization.k8s.io/v1beta1)</li><li>CertificateSigningRequest API 的 Beta 版本 (certificates.k8s.io/v1beta1)</li><li>Lease API 的 Beta 版本 (coordination.k8s.io/v1beta1)</li><li>所有 Ingress API 的 Beta 版本 (extensions/v1beta1 和 networking.k8s.io/v1beta1)</li></ul><h3 id="7-GitHub-projects-to-make-you-a-better-Go-Developer💥"><a href="#7-GitHub-projects-to-make-you-a-better-Go-Developer💥" class="headerlink" title="7 GitHub projects to make you a better Go Developer💥"></a><a href="https://dev.to/ankit01oss/7-github-projects-to-make-you-a-better-go-developer-2nmh" target="_blank" rel="noopener">7 GitHub projects to make you a better Go Developer💥</a></h3><p>Go 一開始是由 Google 所開發出來的語言，後來他被用在很多的軟體專案內，根據 2020 stackoverflow 的開發者調查報告指出，Go 拿下開發者最想要學習程式語言中的第三名，所以作者列出了 7 個可以幫助大家學習 Go 的 GitHub 專案</p><ol><li><a href="https://github.com/avelino/awesome-go" target="_blank" rel="noopener">Awesome Go</a>: 收集了大量 Go 會使用到的 Framework, Library 和軟體的清單</li><li><a href="https://github.com/golang-standards/project-layout" target="_blank" rel="noopener">Standard Go Project Layout</a>: 這個專案定義了一個 Go 應用專案的基本 Layout 應該要長什麼樣子</li><li><a href="https://github.com/go-kit/kit" target="_blank" rel="noopener">Go kit</a>: 使用 Go 建立 MicroService 的工具，他可以幫忙解決分散式系統和應用架構的常見問題，讓開發者可以集中注意力在商業邏輯上</li><li><a href="https://github.com/tmrts/go-patterns" target="_blank" rel="noopener">Go Design patterns</a>: 收集了 Go 的各種 Design 和 Application Pattern</li><li><a href="https://github.com/quii/learn-go-with-tests" target="_blank" rel="noopener">Learn Go with test-driven development</a>: 學習如何使用 Go 達成 test-driven 的開發流程</li><li><a href="https://github.com/hoanhan101/ultimate-go" target="_blank" rel="noopener">The Ultimate Go Study Guide</a>: 參加 Ultimate Go 課程學生的學習筆記</li><li><a href="https://github.com/inancgumus/learngo" target="_blank" rel="noopener">1000+ Hand-crafted Go examples, exercises and quizzes</a>: 這個專案內有數以千計有關 Go 的範例，練習跟考題</li></ol><h3 id="Build-Your-Summer-Spotify-Playlist-with-Terraform"><a href="#Build-Your-Summer-Spotify-Playlist-with-Terraform" class="headerlink" title="Build Your Summer Spotify Playlist with Terraform"></a><a href="https://www.hashicorp.com/blog/build-your-summer-spotify-playlist-with-terraform" target="_blank" rel="noopener">Build Your Summer Spotify Playlist with Terraform</a></h3><p>目前使用 Terraform 來管理公有雲或是第三方服務內的組態是相當常見的事情，它擁有的眾多的Prodiver 讓維運人員可以站在巨人的肩膀上輕鬆地達成 Infrastructure as Code；繼之前有人寫了一個<a href="https://github.com/ndmckinley/terraform-provider-dominos" target="_blank" rel="noopener">訂達美樂披薩的 Provider</a> 之後，沒想到竟然還有人寫了 Spotify Provider 😂 有興趣的人透過文章內附的教學連結學習如何使用 Terraform 來建立專屬於自己的 Spotify 播放清單，裏面也有提到要如何透過分享自己的播放清單來贏得一件免費的 HashiCorp T-shirt！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 89 期 - 微解封後，也要繼續手手勤洗洗，病毒遠離你喔！</title>
      <link href="/2021/07/13/89-keep-virus-away-from-you/"/>
      <url>/2021/07/13/89-keep-virus-away-from-you/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="淺談-Shamir-私鑰分割演算法：切一切再拼回來"><a href="#淺談-Shamir-私鑰分割演算法：切一切再拼回來" class="headerlink" title="淺談 Shamir 私鑰分割演算法：切一切再拼回來"></a><a href="https://medium.com/starbugs/introduction-to-shamirs-secret-sharing-adf713e6430d" target="_blank" rel="noopener">淺談 Shamir 私鑰分割演算法：切一切再拼回來</a></h3><p>大家好我是 Larry，這週的專欄要跟大家分享一個很有趣的密碼學演算法 - Shamir’s Secret Sharing，他可以用來把 secret 分割成 n 份，並且你只需要其中 k 份就可以重組回來，這代表你可以把真的很重要的 secret 分散存在許多不同的地方，也就可以大幅降低被洩露出去的風險。重點是這個演算法只需要國中的數學，所以還不趕快進來看看嗎～</p><h2 id="資訊安全"><a href="#資訊安全" class="headerlink" title="資訊安全"></a>資訊安全</h2><h3 id="利用-Cookie-特性進行的-DoS-攻擊：Cookie-炸彈"><a href="#利用-Cookie-特性進行的-DoS-攻擊：Cookie-炸彈" class="headerlink" title="利用 Cookie 特性進行的 DoS 攻擊：Cookie 炸彈"></a><a href="https://blog.huli.tw/2021/07/10/cookie-bomb/" target="_blank" rel="noopener">利用 Cookie 特性進行的 DoS 攻擊：Cookie 炸彈</a></h3><p>雖然知道大部分伺服器會因為 payload 太大而拒絕請求，但想不到這個特性可以搭配 cookie bomb 用來進行 DOS 攻擊，只能說資安這領域真是太有趣了～</p><h3 id="為什麼忘記密碼時只能重設，不把舊密碼告訴我？"><a href="#為什麼忘記密碼時只能重設，不把舊密碼告訴我？" class="headerlink" title="為什麼忘記密碼時只能重設，不把舊密碼告訴我？"></a><a href="https://link.medium.com/gUjnv4W0Ohb" target="_blank" rel="noopener">為什麼忘記密碼時只能重設，不把舊密碼告訴我？</a></h3><p>對啊為什麼不把舊密碼告訴我，三不五時在那邊重設不是很麻煩嗎？其實是因為網站根本不會儲存你的原始密碼，那不存密碼有什麼好處呢？看完這篇文章就會知道啦</p><h3 id="一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash"><a href="#一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash" class="headerlink" title="一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash"></a><a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c" target="_blank" rel="noopener">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a></h3><p>想要學習密碼學，一定要先把編碼、加密跟雜湊三個東西搞清楚，所以在這邊我（自肥）推薦這篇自己的文章，把這三個概念搞懂之後再去看其他更深入的文章才不會越看越亂</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="JavaScript-Template-Literals-amp-Tag-Functions-for-Beginners"><a href="#JavaScript-Template-Literals-amp-Tag-Functions-for-Beginners" class="headerlink" title="JavaScript: Template Literals &amp; Tag Functions for Beginners"></a><a href="https://codeburst.io/javascript-template-literals-tag-functions-for-beginners-758a041160e1" target="_blank" rel="noopener">JavaScript: Template Literals &amp; Tag Functions for Beginners</a></h3><p>這個真的太有趣了，最近在看一些奇怪的 JavaScript 寫法時發現了這個 function call 的寫法，但其實也是自己見識太淺薄才不知道原來可以這樣寫，簡單來說就是利用 template literals 的方式進行 function call，讀者不妨也可以試著將自己的程式碼改寫成這樣，就能完美的達到 ninja code 的精神了(X</p><h3 id="jsfuck"><a href="#jsfuck" class="headerlink" title="jsfuck"></a><a href="https://github.com/aemkei/jsfuck?fbclid=IwAR1ovUOUGH2dZOBoUwLQKPlsXoyKrGwV7V3_mCc_GZaWnryxLL90J4URo6g#readme" target="_blank" rel="noopener">jsfuck</a></h3><p>我真的是太晚才知道這個網站了XD 沒想到 JavaScript 有這麼多奇奇怪怪的技巧可以達到一樣的事情，這資訊量大到讓我很難一時之間可以接受，有興趣的讀者不妨來看一下一些有趣的寫法，看完之後我只能說我自己實在是太不懂 JavaScript 了XD</p><h3 id="10-GitHub-repositories-to-become-a-better-JavaScript-Developer"><a href="#10-GitHub-repositories-to-become-a-better-JavaScript-Developer" class="headerlink" title="10 GitHub repositories to become a better JavaScript Developer"></a><a href="https://dev.to/pb/10-github-repositories-which-will-help-you-to-become-a-better-javascript-developer-5om" target="_blank" rel="noopener">10 GitHub repositories to become a better JavaScript Developer</a></h3><p>想要成為一個更進步的 JavaScript 開發者，有很多小細節是必須要學會的，這篇文章提供了 10 種可以幫助自己在 JavaScript 的開發上更進步的文件，想要更了解一些大神們的寫法不妨可以把這些 repo 都收藏起來了。</p><h3 id="How-to-Sort-Array-Elements-An-Essential-Guide"><a href="#How-to-Sort-Array-Elements-An-Essential-Guide" class="headerlink" title="How to Sort Array Elements: An Essential Guide"></a><a href="https://hackernoon.com/how-to-sort-array-elements-an-essential-guide-s41w370r" target="_blank" rel="noopener">How to Sort Array Elements: An Essential Guide</a></h3><p>排序是指對一堆資料進行有意義的排列過程，在文章中就是介紹 JavaScript 對 Array 排序的各種方法，包含以常見的數字（0-9）、字母（A-Z 的字典排序）等等排序，也展示了實務上最常拿到的裝著 Object 的 Array 做排序的例子。</p><h3 id="Is-everything-in-JavaScript-an-Object"><a href="#Is-everything-in-JavaScript-an-Object" class="headerlink" title="Is everything in JavaScript an Object?"></a><a href="https://dev.to/mayankav/is-everything-in-javascript-an-object-1alg" target="_blank" rel="noopener">Is everything in JavaScript an Object?</a></h3><p>「在 JavaScript 裡的一切都是物件嗎？」，作者先是直接宣告一個 String，再用 new String 建立另外一個 String Object，並解釋兩者之間的差別，這對於為什麼一般的 String 可以像 Object 一樣使用 Prototype 上的功能，但當你直接對它的屬性賦值時卻又沒有任何效用。</p><h3 id="【学不动了就回家喂猪】尤大大新活-petite-vue-尝鲜"><a href="#【学不动了就回家喂猪】尤大大新活-petite-vue-尝鲜" class="headerlink" title="【学不动了就回家喂猪】尤大大新活 petite-vue 尝鲜"></a><a href="https://juejin.cn/post/6983328034443132935" target="_blank" rel="noopener">【学不动了就回家喂猪】尤大大新活 petite-vue 尝鲜</a></h3><p><a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noopener">petite-vue</a>，提供了和 Vue 相似的開發思維和語法，且 petite-vue 不只是更輕量化的 Vue，在 <a href="https://github.com/vuejs/petite-vue#comparison-with-standard-vue" target="_blank" rel="noopener">petite-vue 的 README.md</a> 中，作者還特別強調 petite-vue 是在使用像 <a href="https://zh.wikipedia.org/wiki/%E6%B8%90%E8%BF%9B%E5%A2%9E%E5%BC%BA" target="_blank" rel="noopener">Progressive Enhancement</a> 特定情況時的最佳實踐！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="New-Google-Scorecards-Tool-Scans-Open-Source-Software-for-More-Security-Risks"><a href="#New-Google-Scorecards-Tool-Scans-Open-Source-Software-for-More-Security-Risks" class="headerlink" title="New Google Scorecards Tool Scans Open-Source Software for More Security Risks"></a><a href="https://thehackernews.com/2021/07/new-google-scorecards-tool-scans-open.html" target="_blank" rel="noopener">New Google Scorecards Tool Scans Open-Source Software for More Security Risks</a></h3><p>Google 推出了新版的 Scorecards，他是一個可以針對開源軟體專案自動產生出風險分數的自動安全工具，其實不僅在編譯階段，甚至在 Dockerfiles 或是 CI/CD 的工作流程中，將任何擁有相依套件地方的版本固定都是很有用的做法，Scorecards 可以針對這些固定版的的相依套件去做檢查，用以避免類似於最近 CodeCov 的惡意相依性攻擊</p><p>Google 同時指出從大量被分析的開源專案中可以發現到，其中很多專案並沒有持續進行模糊測試，而且也沒有定義提報安全漏洞的規範，甚至沒有去固定相依套件的版本，所以除了這些關鍵的開源專案需要透過改善來加強安全性之外，大家也必須要提高對於資安風險的危機意識</p><h3 id="Localstack-with-Terraform-and-Docker-for-running-AWS-locally"><a href="#Localstack-with-Terraform-and-Docker-for-running-AWS-locally" class="headerlink" title="Localstack with Terraform and Docker for running AWS locally"></a><a href="https://dev.to/mrwormhole/localstack-with-terraform-and-docker-for-running-aws-locally-3a6d" target="_blank" rel="noopener">Localstack with Terraform and Docker for running AWS locally</a></h3><p>一般來說使用 IaC 工具 Terraform 來管理 AWS 資源時，執行 <code>~$ terraform apply</code> 之後，就會在 AWS 上建立出對應的雲端資源，那有沒有辦法在本地端做出假的 AWS 資源呢？答案是可以的！利用 Localstack 這個工具，並且在 <a href="https://registry.terraform.io/providers/hashicorp/aws/latest/docs/guides/custom-service-endpoints" target="_blank" rel="noopener">Terraform AWS Provider 的 endpoints</a> 中指定不同 AWS 服務到本地端點，就可以利用 Localstack 在本地端建立出假造的 AWS 雲端資源，這篇文章便是舉例使用此種方式來讓程式可以在本地端做完測試，而不用真的在 AWS 上建立一堆服務，算是個省時間又省錢的做法！</p><h3 id="Difftastic"><a href="#Difftastic" class="headerlink" title="Difftastic"></a><a href="https://github.com/wilfred/difftastic" target="_blank" rel="noopener">Difftastic</a></h3><p>Difftastic 是一個可以根據程式語法來讓檔案做解構性比較的工具 (目前還在實驗階段中)，Parsing 檔案的靈感主要來自於 <a href="https://github.com/comby-tools/comby" target="_blank" rel="noopener">Comby</a>，所以可以用來處理多種程式語言，而在 Diffing 的部分是根據 <a href="https://fazzone.github.io/autochrome.html" target="_blank" rel="noopener">Autochrome 專案</a> 來實作，因為 Difftastic 將 diff 當作是圖像搜尋問題，它利用 Dijkstra 演算法來找出最小的 diff，而 Printing 出檔案比較的結果則可以參考範例圖片，感覺完成之後應該是個不賴的程式語言比較工具</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 88 期 - 有微解封，不知道有沒有微開發？</title>
      <link href="/2021/07/06/88-public-cloud-network-security/"/>
      <url>/2021/07/06/88-public-cloud-network-security/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Public-Cloud-Network-兩三事-沒有最安全只有更安全"><a href="#Public-Cloud-Network-兩三事-沒有最安全只有更安全" class="headerlink" title="Public Cloud Network 兩三事 - 沒有最安全只有更安全"></a><a href="https://medium.com/starbugs/public-cloud-network-%E5%85%A9%E4%B8%89%E4%BA%8B-%E6%B2%92%E6%9C%89%E6%9C%80%E5%AE%89%E5%85%A8%E5%8F%AA%E6%9C%89%E6%9B%B4%E5%AE%89%E5%85%A8-a6b3eee059cc" target="_blank" rel="noopener">Public Cloud Network 兩三事 - 沒有最安全只有更安全</a></h3><p>使用 Public Cloud 要如何規劃網路架構才算安全呢？其實端看組織的資源與要求，剛好最近花了一些時間在整理網路相關的工作任務，趁著這個機會把自己透過工作碰到學到的 Public Cloud 網路議題給整理成文章，透過簡易的情境設計對應到不同公司的規模或是需求之下，可以選擇什麼樣的解決方案與替代做法，讓大家可以用最短的時間獲得最多的知識</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="10-CSS-things-I-wish-I-knew-when-I-was-a-beginner"><a href="#10-CSS-things-I-wish-I-knew-when-I-was-a-beginner" class="headerlink" title="10 CSS things I wish I knew when I was a beginner"></a><a href="https://levelup.gitconnected.com/10-css-things-i-wish-i-knew-when-i-was-a-beginner-68ba4b5b3da8" target="_blank" rel="noopener">10 CSS things I wish I knew when I was a beginner</a></h3><p>文中中提到一些滿基本的觀念，當然還是有些爭議的內容，像是文章中有提到要淘汰 Bootstrap 這點，其實想要快速開發網頁還是會希望從一個方便好用的 UI 框架開始 😂。另外我覺得滿有趣的是他所提到 RWD 的 desktop first 和 mobile first 的區別和看法，大家可以先思考，然後再點進去看看原因和你想的一不一樣！ 🙌</p><h3 id="JavaScript-How-to-Redirect-to-Another-Webpage"><a href="#JavaScript-How-to-Redirect-to-Another-Webpage" class="headerlink" title="JavaScript: How to Redirect to Another Webpage"></a><a href="https://stackabuse.com/javascript-how-to-redirect-to-another-webpage" target="_blank" rel="noopener">JavaScript: How to Redirect to Another Webpage</a></h3><p>在開發網頁的時候，為了更好的使用者體驗，通常都會需要幫使用者重新導向新的頁面，但是在 JavaScript 能夠達到相同功能的方式在文章中就介紹了 <code>location.href</code>、<code>windows.location</code>、<code>location.assign()</code> 和 <code>location.replace()</code> 四種，這四種又有什麼不同呢？到底該用哪的方式會最適合使用者？</p><h3 id="三种前端实现VR全景看房的方案！说不定哪天就用得上！"><a href="#三种前端实现VR全景看房的方案！说不定哪天就用得上！" class="headerlink" title="三种前端实现VR全景看房的方案！说不定哪天就用得上！"></a><a href="https://juejin.cn/post/6973865268426571784" target="_blank" rel="noopener">三种前端实现VR全景看房的方案！说不定哪天就用得上！</a></h3><p>一直覺得在網頁前端顯示的 VR 實景展示超帥，但是都沒有機會好好瞭解到底該如何在前端中加入 VR 實景。而在這篇文章中，作者就舉出了三種方案實現 VR 技術，可以看看要把哪一個方案加入你的口袋名單！</p><h3 id="The-trouble-with-TypeScript-enums"><a href="#The-trouble-with-TypeScript-enums" class="headerlink" title="The trouble with TypeScript enums"></a><a href="https://thoughtbot.com/blog/the-trouble-with-typescript-enums" target="_blank" rel="noopener">The trouble with TypeScript enums</a></h3><p>很多人開始使用 typescript 後總是會遇到很多 type error，這篇文章介紹了關於使用 enum 時會遇到的 type error 以及如何解決，有遇到任何跟 enum 有關的問題的讀者都不妨可以藉由這個文章找到解答喔~</p><h3 id="JavaScript-Tips-and-Best-Practices"><a href="#JavaScript-Tips-and-Best-Practices" class="headerlink" title="JavaScript Tips and Best Practices"></a><a href="https://dev.to/apoorvtyagi/javascript-tips-and-best-practices-48ma" target="_blank" rel="noopener">JavaScript Tips and Best Practices</a></h3><p>這篇文章真的蠻厲害的，介紹了很多 JavaScript 不同的寫法以及一些比較好閱讀的 coding style 來幫助工程師們進行 JavaScript 的撰寫，有興趣改變自己寫法的讀者不妨可以收藏起來日後可以閱讀。</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Reducing-Memory-Allocations-in-Golang"><a href="#Reducing-Memory-Allocations-in-Golang" class="headerlink" title="Reducing Memory Allocations in Golang"></a><a href="https://chris124567.github.io/2021-06-21-go-performance/" target="_blank" rel="noopener">Reducing Memory Allocations in Golang</a></h3><p>這篇文章完美示範了怎麼對你的 Go 程式做 profile，並且著手去改善 memory allocation 的次數。雖然一般情況下 Go 寫出來的程式效能都還不錯，但真的需要調整時就需要用 pprof 下去分析了</p><h3 id="How-to-correctly-use-Basic-Authentication-in-Go"><a href="#How-to-correctly-use-Basic-Authentication-in-Go" class="headerlink" title="How to correctly use Basic Authentication in Go"></a><a href="https://www.alexedwards.net/blog/basic-authentication-in-go" target="_blank" rel="noopener">How to correctly use Basic Authentication in Go</a></h3><p>這篇文章介紹了什麼是 basic authentication（就是輸入網址後需要打帳號密碼那種驗證方式），並且教你怎麼在 Go 裡面實作，雖然這種方式現在已經比較少見，但有時想保護自己的網頁時還是不錯的選擇</p><h3 id="Contributing-the-Go-Compiler-Adding-New-Tilde-Operator"><a href="#Contributing-the-Go-Compiler-Adding-New-Tilde-Operator" class="headerlink" title="Contributing the Go Compiler: Adding New Tilde (~) Operator"></a><a href="https://medium.com/trendyol-tech/contributing-the-go-compiler-adding-new-tilde-operator-f66d0c6cff7" target="_blank" rel="noopener">Contributing the Go Compiler: Adding New Tilde (~) Operator</a></h3><p>這篇文非常非常的長，內容主要在講說怎麼加一個新的 operator 到 Go 的編譯器中，如果想了解 Go 編譯器的原理這篇真的不錯（但可能要讀兩三個小時就是XD）</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！"><a href="#不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！" class="headerlink" title="不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！"></a><a href="https://github.blog/2021-06-29-introducing-github-copilot-ai-pair-programmer/" target="_blank" rel="noopener">不用拘泥於程式只能寫到幾歲，而是以後還需要工程師嗎？！</a></h3><p>標題下得有點危言聳聽，其實是想要提 GitHub 推出了 AI Pair Programmer 的服務 - GitHub Copilot，他可以根據你正在寫的程式碼對某幾行或是整個 Function 提出建議，讓工程師可以更快發現更多的選擇來解決問題，撰寫測試和不透過 Google 搜尋就知道想要整合的 API 要如何使用</p><p>而這個服務的底層是使用 OpenAI Codex，他是一個使用 OpenAI 建立出來的 AI 系統，因為他使用廣大的公開程式碼做訓練，所以比 GPT-3 更能夠勝任產生程式碼的工作，而在目前的 Technical Preview 版本中，主要是針對 #Python, #JavaScript, #TypeScript, #Ruby 和 #Go 這幾種語言在訓練，有興趣的人現在可以報名加入 waitlist 中</p><h3 id="Top-10-Useful-GitHub-Browser-Extensions"><a href="#Top-10-Useful-GitHub-Browser-Extensions" class="headerlink" title="Top 10 Useful GitHub Browser Extensions"></a><a href="https://dev.to/abanoub7asaad/top-10-useful-github-browser-extensions-2k2d" target="_blank" rel="noopener">Top 10 Useful GitHub Browser Extensions</a></h3><p>這篇文章介紹了十個可以用來增加開發者使用 GitHub 時的生產力的 Chrome Extension，看完介紹後，有幾個真的令我感到腦洞大開，迫不期待安裝來使用！</p><ol><li><a href="https://github.com/ovity/octotree" target="_blank" rel="noopener">Octotree</a>: 直接讓瀏覽器多出 Repository 的檔案瀏覽功能，讓開發者在 Code Review 跟找檔案的時候來的更方便</li><li><a href="https://github.com/softvar/enhanced-github" target="_blank" rel="noopener">Enhanced GitHub</a>: 顯示整個 Repostiroy 和每個檔案的大小，並且加上下載連結跟複製檔案內容的按鈕</li><li><a href="https://github.com/noam3127/github-code-folding" target="_blank" rel="noopener">GitHub Code Folding</a>: 可以直接在 GitHub 網頁上使用折疊功能，把不需要看到的程式碼所屬的 Code Block 藏起來</li><li><a href="https://github.com/sourcegraph/sourcegraph/tree/main/client/browser" target="_blank" rel="noopener">Sourcegraph</a>: 直接找到程式碼中該函釋定義或是參照的程式碼在哪裡 (目前可以使用在 Go, java, TypeScript, JavaScript 跟 Python)</li><li><a href="https://github.com/tanmayrajani/notifications-preview-github" target="_blank" rel="noopener">Notifications Preview for GitHub</a>: 讓 GitHub 通知功能更好用，顯示通知個數，預覽通知內容，並可以在預覽時標示為已讀或是不再訂閱該通知</li><li><a href="https://github.com/homerchen19/github-file-icons" target="_blank" rel="noopener">File Icons for GitHub and GitLab</a>: 給予程式碼檔案不同的 ICON</li><li><a href="https://github.com/OctoLinker/OctoLinker" target="_blank" rel="noopener">OctoLinker</a>: 對於程式碼中 include, require 和 import 的 library 提供超連結，讓使用者直接點過去看</li><li><a href="https://github.com/jasonlong/isometric-contributions" target="_blank" rel="noopener">GitHub Isometric Contributions</a>: 可以把 GitHub 的 Contribution 圖轉換成不一樣的顯示方式，甚至變成 3D 的</li><li><a href="https://github.com/N1ck/gifs-for-github" target="_blank" rel="noopener">GIFs for GitHub</a>: 讓開發者更方便搜尋 GIPHY 中的 GIF 圖檔加在回覆裡</li><li><a href="https://github.com/sindresorhus/refined-github" target="_blank" rel="noopener">Refined GitHub</a>: 讓 GitHub 更好用的 Extension，例如讓空白可視化，按一鍵就可以 Merge Conflict，看到有哪些人在 Comment 按下表情符號，讓你在 PR 或是 Issue 中把不必要的 Comment 隱藏起來，在程式碼中把 Issue/PR 連結起來…等</li></ol><h3 id="FinOps-for-Kubernetes-Insufficient-–-or-nonexistent-–-Kubernetes-cost-monitoring-is-causing-overspend"><a href="#FinOps-for-Kubernetes-Insufficient-–-or-nonexistent-–-Kubernetes-cost-monitoring-is-causing-overspend" class="headerlink" title="FinOps for Kubernetes: Insufficient – or nonexistent – Kubernetes cost monitoring is causing overspend"></a><a href="https://www.cncf.io/blog/2021/06/29/finops-for-kubernetes-insufficient-or-nonexistent-kubernetes-cost-monitoring-is-causing-overspend/" target="_blank" rel="noopener">FinOps for Kubernetes: Insufficient – or nonexistent – Kubernetes cost monitoring is causing overspend</a></h3><p>根據 CNCF 的調查，去年有 68% 的人表示他們花在 Kubernetes 相關的成本增加了，而且其中一半的表示一整年增加超過了 20%，這樣的趨勢其實是在預期中的，因為有越來越多的組織採用的 Cloud Native 架構並跟著擴展 K8s 環境；不過根據報告同時也揭露了上升的成本其實跟使用者無法精確且有效的監控或是預測 K8s 成本有關，這造成了不必要的過度花費；<a href="https://blog.kubecost.com/blog/wasteful-kubernetes-spending/" target="_blank" rel="noopener">Kubecost</a> 也順道趁著這個機會來推廣大家使用它節省在 K8s 相關的開銷，Loft.sh 也發了篇<a href="https://loft.sh/blog/the-cost-of-managed-kubernetes-a-comparison/" target="_blank" rel="noopener">文章</a>比較各家 K8s 託管服務的價錢</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 87 期 - 我要成為海碼王！</title>
      <link href="/2021/06/29/87-one-piece-coder/"/>
      <url>/2021/06/29/87-one-piece-coder/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Mac-快速分割視窗，用-Rectangle-就對了"><a href="#Mac-快速分割視窗，用-Rectangle-就對了" class="headerlink" title="Mac 快速分割視窗，用 Rectangle 就對了"></a><a href="https://medium.com/starbugs/592ed40405e3" target="_blank" rel="noopener">Mac 快速分割視窗，用 Rectangle 就對了</a></h3><p>視窗的移動和切換, 對於一個開發者來說, 能懶則懶. 蘋果雖然有內建可以將視窗分為兩半的操作方式, 但是用滑鼠來操作, 需要把手移開鍵盤。如果這時候一個可以用快速鍵來分割畫面的軟體就太棒了。</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="前端開發者也可以懂的基礎-System-Design"><a href="#前端開發者也可以懂的基礎-System-Design" class="headerlink" title="前端開發者也可以懂的基礎 System Design"></a><a href="https://medium.com/starbugs/5468e0f43033" target="_blank" rel="noopener">前端開發者也可以懂的基礎 System Design</a></h3><p>前陣子在與朋友一起籌組的後端開發線上分享會 BESG 有成員分享了 TinyURL 的系統設計 (System Design)，剛好也看到了知名 YouTuber Terry 關於 Google 系統設計面試的影片，了解到在美國的資訊業，不論你是前端、後端、資料工程師還是 DevOps，System Design 系統設計幾乎都是面試時的必考題。有人可能會覺得，反正那是國外的狀況 …</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="🧑‍💻-How-I-developed-my-portfolio-for-a-month-🗓-Demo-🍿"><a href="#🧑‍💻-How-I-developed-my-portfolio-for-a-month-🗓-Demo-🍿" class="headerlink" title="🧑‍💻 How I developed my portfolio for a month 🗓 + Demo 🍿"></a><a href="https://dev.to/kerthin/how-i-developed-my-portfolio-for-a-month-demo-3ee7" target="_blank" rel="noopener">🧑‍💻 How I developed my portfolio for a month 🗓 + Demo 🍿</a></h3><p>身為開發者為自己做一個展示火力的個人網站應該是很正常的事情吧？但是在做個人網站時該考慮哪些事情呢？作者把它從開始規劃、決定技術、和每階段的開發狀況都寫下說明以及它想在網頁上表達的事情，我覺得內容非常棒！然後在看的過程中我只想問，從頭像到完成動畫之間到底發生了什麼？😂</p><h3 id="How-to-display-content-in-multiple-columns-using-CSS"><a href="#How-to-display-content-in-multiple-columns-using-CSS" class="headerlink" title="How to display content in multiple columns using CSS"></a><a href="https://kritika-pattalam.hashnode.dev/how-to-display-content-in-multiple-columns-using-css" target="_blank" rel="noopener">How to display content in multiple columns using CSS</a></h3><p>文章裡介紹了如何用 CSS 的 <code>column</code> 讓文章變成多欄顯示，以及使用 <code>orphans</code> 和 <code>widows</code> 做更細微的設定，如果對這些屬性還不熟悉，可以看看此篇作者解釋和範例！</p><h3 id="Reading-Clean-Code-Week-1"><a href="#Reading-Clean-Code-Week-1" class="headerlink" title="Reading Clean Code: Week 1"></a><a href="https://levelup.gitconnected.com/reading-clean-code-week-1-a4df2c392e66" target="_blank" rel="noopener">Reading Clean Code: Week 1</a></h3><p>這篇是作者閱讀 Clean Code 所記錄下來的讀書心得，而且作者還選了自己的一個專案，然後藉由從 Clean Code 中讀到的觀念來重構程式碼，如果對 <a href="https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/ref=sr_1_1?dchild=1&keywords=clean+code&qid=1622646055&sr=8-1" target="_blank" rel="noopener">Clean Code</a> 這本書有興趣的話，不妨可以和作者一起讀哦！依照文章最後的意思，作者是會週更的。 😂</p><h3 id="cssbattle"><a href="#cssbattle" class="headerlink" title="cssbattle"></a><a href="https://cssbattle.dev/" target="_blank" rel="noopener">cssbattle</a></h3><p>這個網站真的蠻屌的很推薦所有的前端工程師可以上去玩玩看，透過寫 html + css 的方式來達到目標的視覺畫面，然後比誰寫的 code 字數最少，不得不說透過這個網站可以了解很多不同的切版技巧，可以學到很多前端大神的思考方式。</p><h3 id="esbuild"><a href="#esbuild" class="headerlink" title="esbuild"></a><a href="https://esbuild.github.io/" target="_blank" rel="noopener">esbuild</a></h3><p>esbuild 算是近期蠻多人都在討論的前端打包套件，而且 esbuild 強調的就是打包速度飛快，比大家都在用 webpack 還快很多，的確看到一些介紹以及網路上的 DEMO 真的都比 webpack 快，但 webpack 厲害的地方就在於有很多可以玩的 plugin，不知道 esbuild 之後會不會也有那麼多 plugin 可以玩就是了XD</p><h3 id="monaco-editor"><a href="#monaco-editor" class="headerlink" title="monaco-editor"></a><a href="https://microsoft.github.io/monaco-editor/" target="_blank" rel="noopener">monaco-editor</a></h3><p>這個編輯器真的很酷是微軟自己做的線上編輯器，個人真的覺得比 Draft.js 好用很多(真的不曉得前陣子自己在那邊研究 Draft.js 那麼久到底在幹嘛哈哈哈)，而且這個編輯器其實就是 base on 微軟最有名的 vs code 編輯器底下的產物，所以編輯邏輯其實就跟 vs code 差不多算是可以無痛上手，最近如果有興趣再研究編輯器的不妨可以考慮看看這款套件，至於 Draft.js 就隨便他了哈哈哈哈。</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="Top-20-Dockerfile-best-practices"><a href="#Top-20-Dockerfile-best-practices" class="headerlink" title="Top 20 Dockerfile best practices"></a><a href="https://sysdig.com/blog/dockerfile-best-practices/" target="_blank" rel="noopener">Top 20 Dockerfile best practices</a></h3><p>看過那麼多篇 dockerfile security 的文章，這篇大概是講得最全面的了，如果上線之前不知道該怎麼讓自己的 image 更安全的話，看這篇就對了！</p><h3 id="Build-images-with-BuildKit"><a href="#Build-images-with-BuildKit" class="headerlink" title="Build images with BuildKit"></a><a href="https://docs.docker.com/develop/develop-images/build_enhancements/" target="_blank" rel="noopener">Build images with BuildKit</a></h3><p>Docker 自 18.09 以後就開始支援 buildkit，除了 log 更好看之外，還新增了一些其他的 feature，而且啟用的方式也超簡單，所以很推薦使用哦～</p><h3 id="用-docker-compose-優雅關閉服務"><a href="#用-docker-compose-優雅關閉服務" class="headerlink" title="用 docker-compose 優雅關閉服務"></a><a href="https://blog.wu-boy.com/2021/06/graceful-stop-service-using-docker-compose-in-golang/" target="_blank" rel="noopener">用 docker-compose 優雅關閉服務</a></h3><p>怎麼讓服務 gracefully shutdown 一直以來都是個很重要的問題，而 appleboy 這篇文章講到了怎麼在 docker-compose.yml 裡面自己設置 signal 跟 timeout，在部署、更新大量 container 時還滿實用的</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="JavaScript-What-is-short-circuit-evaluation"><a href="#JavaScript-What-is-short-circuit-evaluation" class="headerlink" title="JavaScript: What is short-circuit evaluation?"></a><a href="https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c" target="_blank" rel="noopener">JavaScript: What is short-circuit evaluation?</a></h3><p>說真的 JavaScript 總是有很多奇怪的寫法來達到想要的結果，由於以前寫 C++ 寫久了，所以一開始在寫 JS 看到都會覺得 <code>&amp;&amp;</code>、<code>||</code> 這個運算子就會直覺的認為只會返回不林子，殊不知 JS 的這兩個運算子能做的事情非常多而且非常奇妙，以後有想要進行邏輯取值的時候不妨都可以利用這種方式來寫，可以讓你的程式碼瞬間少了好幾行看起來很乾淨XD</p><h3 id="这些-JS-的新语法有点东西啊"><a href="#这些-JS-的新语法有点东西啊" class="headerlink" title="这些 JS 的新语法有点东西啊"></a><a href="https://juejin.cn/post/6976070529388118030" target="_blank" rel="noopener">这些 JS 的新语法有点东西啊</a></h3><p>作者整理了一些在 tc39 上的有趣提案，其中包含了現在滿常被討論的 <code>.at</code> 外，還有已經在第四階段的 Top-level <code>await</code>，之後使用 <code>await</code> 時甚至不需要放到 <code>async</code> 裡面，但其中最讓我感到噁心的還是 「管道运算符（The Pipeline Operator）」，還有其他有趣又實用的提案，大家一起看看吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="5-GitHub-Projects-to-make-you-a-better-DevOps-Engineer-⚡"><a href="#5-GitHub-Projects-to-make-you-a-better-DevOps-Engineer-⚡" class="headerlink" title="5 GitHub Projects to make you a better DevOps Engineer ⚡"></a><a href="https://dev.to/ankit01oss/5-github-projects-to-make-you-a-better-devops-engineer-2fkl" target="_blank" rel="noopener">5 GitHub Projects to make you a better DevOps Engineer ⚡</a></h3><p>DevOps 這個領域具有相當地挑戰性，需要不斷地學習，因此作者在此推薦五個 GitHub 專案，讓有興趣的人可以找到方向深入研究</p><ol><li><p><a href="https://github.com/trimstray/the-book-of-secret-knowledge" target="_blank" rel="noopener">The book of secret knowledge</a>: 收集了作者每天工作會用到的工具，從 CLI, GUI, Web 到網路…等相關工具清單一應俱全，看完覺得自己也應該來弄一個類似的 Repository 幫助自己越來越不行的記憶力</p></li><li><p><a href="https://github.com/binhnguyennus/awesome-scalability" target="_blank" rel="noopener">Awesome Scalability</a>: 收集了各種有關於大型系統的 Scalable, Reliable 和效能相關的文章，而且很多都是滿有名且大型的組織，相當的具有指標跟參考意義</p></li><li><p><a href="https://github.com/bregman-arie/devops-exercises" target="_blank" rel="noopener">DevOps Exercises</a>: 包含了各式各樣有關於 DevOps 和 SRE 技術領域的問題跟練習題，自己感覺很適合拿來當面試題目使用XD</p></li><li><p><a href="https://github.com/trimstray/test-your-sysadmin-skills" target="_blank" rel="noopener">Test your sysadmin skills</a>: 專門用來考  Linux 系統管理者的問題大補帖，跟上面一樣適合拿來當面試問題使用！</p></li><li><p><a href="https://github.com/upgundecha/howtheysre" target="_blank" rel="noopener">How they SRE</a>: 這個我記得我之前介紹過，這個 Repository 收集了世界上軟體技術相關的大型公司如何去培養自己的 Site Reliability Engineering</p></li></ol><h3 id="SLOs-should-be-easy-say-hi-to-Sloth"><a href="#SLOs-should-be-easy-say-hi-to-Sloth" class="headerlink" title="SLOs should be easy, say hi to Sloth"></a><a href="https://itnext.io/slos-should-be-easy-say-hi-to-sloth-9c8a225df0d4" target="_blank" rel="noopener">SLOs should be easy, say hi to Sloth</a></h3><p>每年都有比較熱門的技術詞彙，例如 2017 Cryptocurrency 和 Blockchain，2018 Observability 和 Tracing， 2019 Service Mesh，2020 GitOps，而作者認為 2021 就是 SLO 啦！這篇文章主要介紹他開發的 Sloth 專案 (一個可以讓 Prometheus 產生 SLO 的最簡單方式) 的心路歷程</p><p>而作者會開發出來這個專案的最主要原因在於…他在 2018 年讀到 Google 經典 SRE 巨作後知道了 SLO 的觀念，不過每次他在跟朋友討論到時都會發現，大家雖然都已經知道，但好像沒有人已經做得很好，都還在很努力地看怎麼應用或是將它實踐在日常的工作上的階段中，在這幾年經歷了在沒有 SLO 的公司嘗試導入 SLO，或是在已經應用 SLO 公司的工作經驗後，他決定把自己在 2018 年的一些開發和導入經驗開源出來成為 Sloth 專案，其中包含了 K8s Operator 和 CLI 工具來輕鬆的整合 Prometheus Stack，讓 SRE 可以經鬆的導入跟實踐 SLO！</p><h3 id="Announcing-etcd-3-5"><a href="#Announcing-etcd-3-5" class="headerlink" title="Announcing etcd 3.5"></a><a href="https://etcd.io/blog/2021/announcing-etcd-3.5/" target="_blank" rel="noopener">Announcing etcd 3.5</a></h3><p>有使用過 Kubernetes 的人應該都有聽過 etcd 這個 Key-Vaule 儲存系統，他最近發佈了 3.5，距離 3.4 也已經過了兩年，在這段期間隨著使用的人越來越多，穩定和可靠度當然成為了官方的開發重點項目，讓我們來瞧瞧看歷經了兩年時間的累積，etcd 完成了哪些事情，讓他們覺得夠格推出 3.5 這一版！</p><ul><li><p>Security: 畢竟 etcd 負責儲存處理不少機敏資訊，所以加強安全性是最高優先權的工作， 因此官方早在 2020 年就請了第三方幫忙做安全稽核，並且把發現的安全問題不管大小都修復掉</p></li><li><p>Features: 改成使用 <a href="https://github.com/uber-go/zap" target="_blank" rel="noopener">zap</a> 來處理 Log，並且也預設支援 Log Rotation，在對於昂貴的請求也可以記錄更詳細的資訊；然後在 Rollbak 功能下了些功夫，gRPC gateway endpoint 現在換成使用 /v3/*，在 etcd client 現在也換成使用新的 gRPC 版本 1.32.0</p></li><li><p>Performance: 最多使用 etcd 的人，其實都是 K8s 的使用者，而當 K8s API 在 Reflector Cache 找不到想找的資源時，就會去查找整個 Keyspace，這會造成 etcd 的回應時間變久，所以官方詳細的去調查造成這個問題的原因 (主要是跟記憶體使用率相關)，最後嘗試將記憶體的在最高峰時的使用量減半 (雖然改的程式碼不多，但修掉了這個困擾大家好幾年的問題)，然後也花了很大的心血改善了 Transaction 的效能，讓 K8s API 在新增和修改資源的速度可以更快</p></li><li><p>Others: 一開始有提到 etcd 的可靠和正確性相當地重要，所以官方將上個版本中被提出來的嚴重 Bug 都修掉了，而且在監控，測試，開發者體驗跟社群方面都做了不少事情，更詳細資訊可以參閱原文</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 86 期 - 雨下整夜，Bug 溢出就像雨水</title>
      <link href="/2021/06/22/86-raining-all-night-my-buf-overflow-like-rainwater/"/>
      <url>/2021/06/22/86-raining-all-night-my-buf-overflow-like-rainwater/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用簡單的-CSS-和-JavaScript-輕鬆製造視差滾動（Parallax-Scrolling）"><a href="#用簡單的-CSS-和-JavaScript-輕鬆製造視差滾動（Parallax-Scrolling）" class="headerlink" title="用簡單的 CSS 和 JavaScript 輕鬆製造視差滾動（Parallax Scrolling）"></a><a href="https://medium.com/starbugs/%E7%94%A8%E7%B0%A1%E5%96%AE%E7%9A%84-css-%E5%92%8C-javascript-%E8%BC%95%E9%AC%86%E8%A3%BD%E9%80%A0%E8%A6%96%E5%B7%AE%E6%BB%BE%E5%8B%95-parallax-scrolling-4e22af7c1c0" target="_blank" rel="noopener">用簡單的 CSS 和 JavaScript 輕鬆製造視差滾動（Parallax Scrolling）</a></h3><p>前一陣子在練習切版的時候，突然發現視差滾動在 Landing Page 上的出現率還滿高的，於是就想練習切一些關於視差滾動的頁面，本來是要直接用 ScrollMagic 的，但想說機會難得，就來了解一下它的原理，殊不知實作起來還滿容易的，一起看看怎麼處理的吧！</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="lodash-如何正確的-import-lodash"><a href="#lodash-如何正確的-import-lodash" class="headerlink" title="lodash | 如何正確的 import lodash"></a><a href="https://medium.com/starbugs/the-correct-way-to-import-lodash-libraries-bdf613235927" target="_blank" rel="noopener">lodash | 如何正確的 import lodash</a></h3><p>通常前端都會導入一些好用的第三方套件，但是有時候導入的套件並非是基於 es module 進行開發，webpack 沒辦法發揮 tree shaking 的功能，在 import 時一不注意就會載入一堆沒有必要的 function。在這篇文章中以 lodash 作為舉例，目前 lodash 本身並不是使用 es module。所以如果在意 bundle size 的大小，就要特別注意在 import lodash 的方式。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="5-Awesome-CSS-tricks-every-developer-should-know"><a href="#5-Awesome-CSS-tricks-every-developer-should-know" class="headerlink" title="5 Awesome CSS tricks every developer should know"></a><a href="https://dev.to/sumeet16/5-awesome-css-tricks-every-developer-should-know-2n5k" target="_blank" rel="noopener">5 Awesome CSS tricks every developer should know</a></h3><p>文章中介紹一些關於使用 CSS 的技巧，包含了可以讓使用者體驗更好的 Smooth scrolling，以及該如何設置圖片的大小、將自己喜愛的圖片或 icon 設置成鼠標、用 flex 更好的做水平和垂直置中，還有更容易控制內容行數的 <code>-webkit-line-clamp</code>，以上語法將來可能都可以成為你的排版小幫手！</p><h3 id="Be-the-boss-of-your-CSS-styles-with-Tailwind-CSS"><a href="#Be-the-boss-of-your-CSS-styles-with-Tailwind-CSS" class="headerlink" title="Be the boss of your CSS styles with Tailwind CSS"></a><a href="https://victoriaadedayo.hashnode.dev/be-the-boss-of-your-css-styles-with-tailwind-css-ckpxniz4o08il92s1huob0phr" target="_blank" rel="noopener">Be the boss of your CSS styles with Tailwind CSS</a></h3><p>Tailwind 是一個主張實用至上的 CSS 框架，它提供了很多實用且風格一致的介面，甚至是讓你不需要寫任何自己的 CSS，而且你也不用害怕被 Tailwind 綁死，因為如果你想做些修改，仍然可以做擴充、調整和改變！一起跟著文章作者入門 Tailwind 吧！</p><h3 id="React-18：新的-SSR-架構解決了什麼問題？"><a href="#React-18：新的-SSR-架構解決了什麼問題？" class="headerlink" title="React 18：新的 SSR 架構解決了什麼問題？"></a><a href="https://jigsawye.com/2021/06/10/react-18-new-ssr-architecture?fbclid=IwAR3bQq_W6HNFcNh9X0WOfAy9x544aJagDo4t7YyDX5nyqp0NcCbMtIndno4" target="_blank" rel="noopener">React 18：新的 SSR 架構解決了什麼問題？</a></h3><p>拜技術的進步所賜，SSR 可以說是越來越普及了，早期在 React 中想要使用 SSR 可以利用 <a href="https://nextjs.org/docs/getting-started" target="_blank" rel="noopener">Next.js</a> 這個套件，但 SSR 有一個非常嚴重的缺陷就是會讓整體的網頁在渲染的過程中一定會比 CSR 來的慢，因為 server 端會先抓取該內容所需的資料並且繪製出來，但最新的 React 18 帶來了新的 SSR 架構，讓未來 SSR 的渲染速度不會再繼續慢下去了。</p><h3 id="Develop-amp-test-React-components-in-isolation"><a href="#Develop-amp-test-React-components-in-isolation" class="headerlink" title="Develop &amp; test React components in isolation"></a><a href="https://dev.to/dhaiwat10/develop-test-react-components-in-isolation-3714" target="_blank" rel="noopener">Develop &amp; test React components in isolation</a></h3><p>之前在推薦 React component testing 的時候都會推薦 React testing library，沒想到也可以利用 storybook 進行 testing，而且這樣還能順便看到該元件的表現行為也算是蠻一舉兩得的，這篇文章介紹了如何利用 storybook 進行 testing 有興趣的讀者不妨可以收藏起來看~</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="從-V8-bytecode-探討-let-與-var-的效能問題"><a href="#從-V8-bytecode-探討-let-與-var-的效能問題" class="headerlink" title="從 V8 bytecode 探討 let 與 var 的效能問題"></a><a href="https://blog.huli.tw/2020/02/20/let-vs-var-bytecode/" target="_blank" rel="noopener">從 V8 bytecode 探討 let 與 var 的效能問題</a></h3><p>忘了之前有沒有分享過這篇，但我真心覺得這個研究還有趣的，如果對 let 跟 var 在 V8 引擎中的行為有興趣，而且也不排斥看一些 V8 bytecode，那真的一定要讀讀這篇</p><h3 id="What’s-New-in-RxJS-7"><a href="#What’s-New-in-RxJS-7" class="headerlink" title="What’s New in RxJS 7"></a><a href="https://link.medium.com/kmHrZy0Fggb" target="_blank" rel="noopener">What’s New in RxJS 7</a></h3><p>作為 reactive programming 在 JS 裡面的代表性函式庫，RxJS 已經要發佈第七個版本了，這個版本除了檔案更小、速度更快、更節省記憶體之外，用法上也有做出一些調整，如果最近有打算把 RxJS 從 6 升到 7 的話可以參考看看這篇～</p><h3 id="A-Comprehensive-Guide-To-JavaScript-Design-Patterns"><a href="#A-Comprehensive-Guide-To-JavaScript-Design-Patterns" class="headerlink" title="A Comprehensive Guide To JavaScript Design Patterns"></a><a href="https://www.lambdatest.com/blog/comprehensive-guide-to-javascript-design-patterns/" target="_blank" rel="noopener">A Comprehensive Guide To JavaScript Design Patterns</a></h3><p>如果你最近想學設計模式，而且你又剛好會寫 JS，那就來看看這篇吧～這篇文章雖然很長，但他從設計模式的分類開始講起，給你一個整體的概念，接著才下去細講每個模式，而且在講解時除了提供範例之外還有附圖，全部看完（雖然可能要很久XD）一定會有很多收穫</p><h3 id="JavaScript-What-is-short-circuit-evaluation"><a href="#JavaScript-What-is-short-circuit-evaluation" class="headerlink" title="JavaScript: What is short-circuit evaluation?"></a><a href="https://codeburst.io/javascript-what-is-short-circuit-evaluation-ff22b2f5608c" target="_blank" rel="noopener">JavaScript: What is short-circuit evaluation?</a></h3><p>說真的 JavaScript 總是有很多奇怪的寫法來達到想要的結果，由於以前寫 C++ 寫久了，所以一開始在寫 JS 看到都會覺得 <code>&amp;&amp;</code>、<code>||</code> 這個運算子就會直覺的認為只會返回不林子，殊不知 JS 的這兩個運算子能做的事情非常多而且非常奇妙，以後有想要進行邏輯取值的時候不妨都可以利用這種方式來寫，可以讓你的程式碼瞬間少了好幾行看起來很乾淨XD</p><h3 id="这些-JS-的新语法有点东西啊"><a href="#这些-JS-的新语法有点东西啊" class="headerlink" title="这些 JS 的新语法有点东西啊"></a><a href="https://juejin.cn/post/6976070529388118030" target="_blank" rel="noopener">这些 JS 的新语法有点东西啊</a></h3><p>作者整理了一些在 tc39 上的有趣提案，其中包含了現在滿常被討論的 <code>.at</code> 外，還有已經在第四階段的 Top-level <code>await</code>，之後使用 <code>await</code> 時甚至不需要放到 <code>async</code> 裡面，但其中最讓我感到噁心的還是 「管道运算符（The Pipeline Operator）」，還有其他有趣又實用的提案，大家一起看看吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CURL-BYE-BYE-TRAVIS-CI"><a href="#CURL-BYE-BYE-TRAVIS-CI" class="headerlink" title="CURL: BYE BYE TRAVIS CI"></a><a href="https://daniel.haxx.se/blog/2021/06/14/bye-bye-travis-ci/" target="_blank" rel="noopener">CURL: BYE BYE TRAVIS CI</a></h3><p>CURL 這個 Project 從 2013/10/17 在 Merge 某一個 Config 檔案時開始使用 Travis CI，正式取代了由自願者幫忙架設的 Autobuild 系統，以免費服務來說 Travis CI 真的提供了一個很棒的服務，過了四年到 2017 時，CURL 依然使用 Travis，這時候每一個 Commit 差不多有 10 個 Job 需要運行，到 2019 時變成 30 個左右，他依然表現良好，而且 Travis 官方甚至協助讓 CURL 可以比其他開源軟體運行更多平行化的 Job</p><p>不過到了 2021 時，每一個 Commit 最多可以跑到 100 個 Job，這次遇到了 travis-ci.org 搬家到 travis-ci.com 的事情，CURL 的作者不諱言不知道官方為什麼要這樣做之外，這次多的規則中，規定了開源專案不能接受商業公司或是組織的贊助，所以決定了 CURL 無法繼續使用 Travis CI，而且也開始沒有再收到來自 Travis 官方的免費 Credit</p><p>這時候來自 Zuul CI 和 Circle CI 開始協助幫忙把本來運行在 Travis CI 的 Job 搬家到他們的平台上，總算在 2021/06/14 將所有的 Job 從 Travis CI 搬走，有人說為什麼不乾脆付錢就好了，但 CURL 作者覺得 Travis CI 不再視 CURL 為開源專案這件事情讓他無法接受，而且現在市面上還有免費的就先擋著用，等到未來逼不得以需要付錢時再說了！</p><h3 id="Design-Patterns-Top-5-Techniques-for-Implementing-Fault-Tolerance-in-Distributed-Systems"><a href="#Design-Patterns-Top-5-Techniques-for-Implementing-Fault-Tolerance-in-Distributed-Systems" class="headerlink" title="Design Patterns: Top 5 Techniques for Implementing Fault Tolerance in Distributed Systems"></a><a href="https://levelup.gitconnected.com/design-patterns-top-5-techniques-for-implementing-fault-tolerance-in-distributed-systems-81bef4408c3b" target="_blank" rel="noopener">Design Patterns: Top 5 Techniques for Implementing Fault Tolerance in Distributed Systems</a></h3><p>過去四十年來許多在系統設計中監控和容錯的技術不斷地被開發，使用和改進，所以作者想要透過此篇文章介紹在分散系統中，讓自己的應用服務跟其他服務進行溝通時，需要使用到哪些技術，才仍夠讓自己的應用服務具備容錯性和監控能力</p><p>首先從什麼是分散式系統開始介紹起，接著細談容錯性是什麼，以及為什麼需要它，然後進入重點談到各種解決 Pattern 是想要解決什麼樣的問題，跟如何去實作，而且都畫了精美的架構圖來解釋，是很值得一看的文章，想要了解各種分散式系統容錯性設計 Pattern 的人趕緊打開原文參閱詳細內容吧！</p><ul><li>Acknowledgement</li><li>Circuit Breaker Pattern</li><li>Roll Forward</li><li>Roll Back</li><li>Active Replication Pattern</li></ul><h3 id="My-Top-12-Web-Tools-To-Make-Developers’-Life-Easier"><a href="#My-Top-12-Web-Tools-To-Make-Developers’-Life-Easier" class="headerlink" title="My Top 12 Web Tools To Make Developers’ Life Easier"></a><a href="https://betterprogramming.pub/my-top-12-web-tools-to-make-developers-life-easier-a8794be85d7f" target="_blank" rel="noopener">My Top 12 Web Tools To Make Developers’ Life Easier</a></h3><p>在這個網路時代，開發人員每天在工作上所面臨的常見問題，幾乎都可以在網路上找到解決問題的線上工具，而在這篇文章中，作者想要介紹 12 個他最愛用，而且可以讓 Developer 生活更簡單的線上工具</p><ol><li><a href="https://regex101.com/" target="_blank" rel="noopener">Regex</a>: 協助開發者驗證正規表示</li><li><a href="https://crontab.cronhub.io/" target="_blank" rel="noopener">Crontab</a>: 驗證 Crontab 的寫法有沒有問題</li><li><a href="https://www.epochconverter.com/" target="_blank" rel="noopener">EpochConverter</a>: 轉換人類時間跟 Unix Timestamp</li><li><a href="https://www.urlencoder.org/" target="_blank" rel="noopener">URL-Encoder</a>: Encode 跟 Decode 會在網址使用到的字串</li><li><a href="https://jwt.io/" target="_blank" rel="noopener">JWT</a>: 讓開發者可以解碼，驗證跟產生 JWT</li><li><a href="https://jsonformatter.curiousconcept.com/" target="_blank" rel="noopener">JSONFormatter and Validator</a>: 驗證 JSON 格式，並且印出漂亮格式的 JSON</li><li><a href="https://text-compare.com/" target="_blank" rel="noopener">Text Compare!</a>: 幫忙比對字串的不同之處</li><li><a href="https://www.flaticon.com/" target="_blank" rel="noopener">flaticon</a>: 提供免費的 ICON 讓 Web, iOS, Android 和 Desktop 應用使用</li><li><a href="https://www.freepik.com/" target="_blank" rel="noopener">freepik</a>: 跟 flation 有點像，可以提供免費的圖片</li><li><a href="https://chir.ag/projects/name-that-color/" target="_blank" rel="noopener">Name That Color</a>: 給予顏色最接近的名稱</li><li><a href="https://cloudconvert.com/" target="_blank" rel="noopener">Cloud Convert</a>: 協助各種影片格式轉檔</li><li><a href="https://appicon.co/" target="_blank" rel="noopener">App Icon</a>: 專門給 Mobile App 工程師拿來產生各種尺寸 ICON 的工具</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 85 期 - 南粽北粽，都沒有我的肉重！</title>
      <link href="/2021/06/15/85-got-fatter-this-weekend/"/>
      <url>/2021/06/15/85-got-fatter-this-weekend/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從作業系統的角度來談為什麼需要「虛擬記憶體」"><a href="#從作業系統的角度來談為什麼需要「虛擬記憶體」" class="headerlink" title="從作業系統的角度來談為什麼需要「虛擬記憶體」"></a><a href="https://larry850806.medium.com/why-do-os-need-virtual-memory-b47d6eeecbce" target="_blank" rel="noopener">從作業系統的角度來談為什麼需要「虛擬記憶體」</a></h3><p>大家好我是 Larry，因為上個月的專欄「<a href="https://medium.com/starbugs/do-you-understand-htop-ffb72b3d5629" target="_blank" rel="noopener">你一定用過 htop，但你有看懂每個欄位嗎？</a>」發佈出去之後有太多人來問我 Virtual Memory 到底是做什麼用的，所以就決定應觀眾要求寫一篇文章講 Virtual Memory 帶來的種種好處。雖然這篇文章的內容比較底層一點，但我盡量把它寫得淺顯易懂，所以就算你聽都沒聽過「虛擬記憶體」也可以進來看看哦～</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Storybook-用-addon-controls-打造更好的-storybook-體驗"><a href="#Storybook-用-addon-controls-打造更好的-storybook-體驗" class="headerlink" title="Storybook | 用 addon-controls 打造更好的 storybook 體驗"></a><a href="https://medium.com/starbugs/storybook-addon-controls-tutorial-857c58e20e45" target="_blank" rel="noopener">Storybook | 用 addon-controls 打造更好的 storybook 體驗</a></h3><p>在 2020 年以前使用 React storybook 時，想要動態操作 component 的 props 通常都是使用 <code>addon-knobs</code> 這個套件，但現在他的競爭者 <code>addon-controls</code> 出現了！除了下載次數急起直追外，<code>addon-controls</code> 也被 storybook 官方認列於 essential addons 中，因此有在用 storybook 的朋友們快來看看這個新崛起的 addon 該怎麼用吧～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="一探那些令人興奮的-React-18-三大新-features，auto-batching，startTransition，Suspense-SSR"><a href="#一探那些令人興奮的-React-18-三大新-features，auto-batching，startTransition，Suspense-SSR" class="headerlink" title="一探那些令人興奮的 React 18 三大新 features，auto batching，startTransition，Suspense SSR"></a><a href="https://jason-memo.dev/posts/react-18/" target="_blank" rel="noopener">一探那些令人興奮的 React 18 三大新 features，auto batching，startTransition，Suspense SSR</a></h3><p>上週才剛看到一篇關於 Server Component 的概念介紹，緊接著 React 就推出 <a href="https://reactjs.org/blog/2021/06/08/the-plan-for-react-18.html" target="_blank" rel="noopener">18 新版本的發布計畫</a>了！在這個新版本裡包含了三個主要的新功能，分別是 <a href="https://github.com/reactwg/react-18/discussions/21" target="_blank" rel="noopener">automatic batching</a>、<a href="https://github.com/reactwg/react-18/discussions/41" target="_blank" rel="noopener">startTransition</a> 和 <a href="https://github.com/reactwg/react-18/discussions/37" target="_blank" rel="noopener">New Suspense SSR</a>，有興趣可以瞭解看看這些功能對我們會有什麼影響！ 🙌</p><h3 id="My-3-tips-about-Flexbox-that-will-make-your-CSS-better"><a href="#My-3-tips-about-Flexbox-that-will-make-your-CSS-better" class="headerlink" title="My 3 tips about Flexbox that will make your CSS better"></a><a href="https://dev.to/melnik909/my-3-tips-about-flexbox-that-will-make-your-css-better-50g6" target="_blank" rel="noopener">My 3 tips about Flexbox that will make your CSS better</a></h3><p>文中介紹了幾種在使用 Flexbox 排版的技巧，其中把 <code>justify-content: space-between</code> 當作 <code>column-gap</code> 的設置，就是一個很常見的誤用，這可能會導致最後一排的元素不依照你期望的想法排列對齊。</p><h3 id="透過XSS取得localstorage和cookie上的資料"><a href="#透過XSS取得localstorage和cookie上的資料" class="headerlink" title="透過XSS取得localstorage和cookie上的資料"></a><a href="https://blog.yyisyou.tw/3da8aedb/?fbclid=IwAR12GJ3D2L4uOeiRxv3X5D8-XUGgbndpdzXKJMRLLDCg-JDh5X5zZvT_N48" target="_blank" rel="noopener">透過XSS取得localstorage和cookie上的資料</a></h3><p>XSS（Cross-site scripting）是利用把惡意程式碼寫入你的網站執行的攻擊方式，文章介紹了幾種利用 XSS 取得存在 localstorage 或 cookie 內的 token 的方式。並解釋為什麼「該把 token 存在 localstorage 還是 cookie？」這個問題是假議題，因為不管存在哪裡都取得到啊！ 😆</p><h3 id="husky"><a href="#husky" class="headerlink" title="husky"></a><a href="https://typicode.github.io/husky/#/" target="_blank" rel="noopener">husky</a></h3><p>推薦一個不錯的套件，這個套件可以讓你在每一次的 commit 或者是 push 的時候進行 lint 的檢查或 run test file 等等功能，讓你的程式碼在進行下一階段的開發或者 build 的時候不會遇到一些小問題的 bug，算是蠻不錯用的套件~</p><h3 id="How-YOU-can-use-React-Testing-Library-to-test-component-surface"><a href="#How-YOU-can-use-React-Testing-Library-to-test-component-surface" class="headerlink" title="How YOU can use React Testing Library to test component surface"></a><a href="https://dev.to/itnext/how-you-can-use-react-testing-library-to-test-component-surface-49pm" target="_blank" rel="noopener">How YOU can use React Testing Library to test component surface</a></h3><p>最近在練習寫一些 unit test 的時候，為了寫 React component 的 unit test 所以選了 <a href="https://testing-library.com/docs/react-testing-library/intro/" target="_blank" rel="noopener">react testing library</a> 這個套件，這篇文章介紹了如何寫 component 的 unit test，未來有需要寫測試的讀者不妨可以來參考這篇文章的教學~</p><h3 id="Mocking-methods-which-are-not-implemented-in-JSDOM"><a href="#Mocking-methods-which-are-not-implemented-in-JSDOM" class="headerlink" title="Mocking methods which are not implemented in JSDOM"></a><a href="https://jestjs.io/docs/manual-mocks#mocking-methods-which-are-not-implemented-in-jsdom" target="_blank" rel="noopener">Mocking methods which are not implemented in JSDOM</a></h3><p>這篇算是蠻有趣的，最近在寫測試的時候發現 jest 原生不支援 <code>window.matchMedia()</code> 這個全域的 method，所以在進行裝置大小比對的時候就會噴錯，連 jest 官方自己都出來寫一篇文章來說明如何解決這個問題，但 jest 官方為何不直接修改程式碼把這個 method 加進去就好呢XDD</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Top-5-Lessons-I-learned-while-working-with-Go-for-two-years"><a href="#Top-5-Lessons-I-learned-while-working-with-Go-for-two-years" class="headerlink" title="Top 5 Lessons I learned while working with Go for two years"></a><a href="https://sayedalesawy.hashnode.dev/top-5-lessons-i-learned-while-working-with-go-for-two-years" target="_blank" rel="noopener">Top 5 Lessons I learned while working with Go for two years</a></h3><p>這篇文章是作者寫了兩年的 Go 之後給出的 best practice，包括怎麼寫出 thread safe 的程式、記得要設定 timeout 等等，整篇看完覺得收穫不少</p><h3 id="Building-your-own-Ngrok-in-130-lines"><a href="#Building-your-own-Ngrok-in-130-lines" class="headerlink" title="Building your own Ngrok in 130 lines"></a><a href="https://dev.to/progrium/building-your-own-ngrok-in-130-lines-2lif" target="_blank" rel="noopener">Building your own Ngrok in 130 lines</a></h3><p>ngrok 這工具應該大家都用過，他可以讓外部連線進到內網來。而這篇文章就要教你怎麼用 go 自己寫一個 ngrok，雖然重複造輪子有點浪費時間，不過藉此了解一下 ngrok 的原理還是不錯的～</p><h3 id="The-other-sync-package"><a href="#The-other-sync-package" class="headerlink" title="The other sync package"></a><a href="https://ketansingh.me/posts/golang-x-sync/" target="_blank" rel="noopener">The other sync package</a></h3><p>除了大家都很熟悉的 sync 之外，Go 還有另外一個 package 叫做 <code>golang.org/x/sync</code>，他裡面提供了一些比較少見的功能像是 semaphore 跟 errgroup，而且這篇文章也有提供範例應該看完就知道怎麼用了～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-HashiCorp-Terraform-1-0-General-Availability"><a href="#Announcing-HashiCorp-Terraform-1-0-General-Availability" class="headerlink" title="Announcing HashiCorp Terraform 1.0 General Availability"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-1-0-general-availability" target="_blank" rel="noopener">Announcing HashiCorp Terraform 1.0 General Availability</a></h3><p>廣泛被大家使用的 IaC 工具 Terraform 在最近版號突然從 0.15 跳到 1.0 啦！而是什麼原因讓官方不是推出 0.16 呢？主要是因為他已經被很多人穩定的在 Production 環境上使用，再來是主要的使用需求都已經被滿足，最後就是良好的使用者體驗，讓我們順便來看看 1.0 這個里程碑的推出的具體內容:</p><ul><li><p>Terraform State 向下相容: 以前每次升級 Terraform，State 就會被更著升級，假如使用比較舊版本的 Terraform 就會被警告，State 的版本比較新，不過 0.14, 0.15 和 1.0 目前都已經可以向下相容 0.12.30, 0.13.6, 0.14.0, 0.15.0 和 1.0.x 所產生的 State 了，</p></li><li><p>升級體驗的改善: 從 0.15 開始，使用者想要升級 Terraform 將不再伴隨著痛苦，因為升級完之後，既有的工作流程還是可以正常運行，就像沒有升級的感覺一樣，不再需要為了升級到 1.0.x 而去更新周邊的工具，重構…等</p></li><li><p>擴展維護週期: 所有 1.x 版本將會擁有至少 18 個月的維護週期，這意味著官方會持續為 1.x 花費資源跟時間修復 Bug 和發佈新的功能</p></li><li><p>Terraform Plugin SDK v1 產品壽命結束: Terraform Plugin SDK 是讓開發者用來實作 Terraform Provider 的框架，官方會在 2021/07/31 停止支援 version 1 的發佈，Terraform CLI 和 Cloud 的使用者不會受到影響，但是官方鼓勵 Terraform Provider 的開發維護者開始升級到 version 2</p></li></ul><h3 id="AWS-announces-the-general-availability-of-AWS-Proton"><a href="#AWS-announces-the-general-availability-of-AWS-Proton" class="headerlink" title="AWS announces the general availability of AWS Proton"></a><a href="https://aws.amazon.com/about-aws/whats-new/2021/06/aws-announces-the-general-availability-of-aws-proton/" target="_blank" rel="noopener">AWS announces the general availability of AWS Proton</a></h3><p>AWS 最近推出一個叫做 Proton (質子) 的新功能，主要是為了管理 Container 和 Serverless 的應用程式，讓開發者可以在這個 IaC 盛行的時代裡，只需要寫好程式碼，然後透過使用 Proton ，就可以把安裝，部署和監控都一次搞定，但這樣一來維運平台的人要怎麼管理呢？ Proton 同時也讓維運人員還是可以保持一致性地進行管理方式，而且不會降低開發者的生產力，所以在 GA 的同時也支援了兩個最重要的功能，分別是可以使用跨帳號架構，並且在 API 內可以使用 IAM condition context keys</p><h3 id="Flagsmith"><a href="#Flagsmith" class="headerlink" title="Flagsmith"></a><a href="https://github.com/Flagsmith/flagsmith" target="_blank" rel="noopener">Flagsmith</a></h3><p>Flagsmith 是一個開源的 Feature Flag 和 Remote Config 服務，他讓應用服務可以跨越網站，行動裝置和後端來建立和管理 Features Flag，只要在應用服務中加上ㄧ小段程式碼，Flagsmith 就可以隨著不同的環境或是使用者將功能進行開關，而他主要支援以下的功能:</p><ul><li>Feature Flag</li><li>Remoet Config</li><li>A/B 或是多變量測試</li><li>方便組織管理</li><li>容易跟既有工具整合</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 84 期 - 一路跟小孩 WFH 到暑假嘍!</title>
      <link href="/2021/06/08/84-internal-dns-server/"/>
      <url>/2021/06/08/84-internal-dns-server/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="網址怎麼查不到？-DNS-管理的常見問題"><a href="#網址怎麼查不到？-DNS-管理的常見問題" class="headerlink" title="網址怎麼查不到？- DNS 管理的常見問題"></a><a href="https://medium.com/starbugs/%E7%B6%B2%E5%9D%80%E6%80%8E%E9%BA%BC%E6%9F%A5%E4%B8%8D%E5%88%B0-dns-%E7%AE%A1%E7%90%86%E7%9A%84%E5%B8%B8%E8%A6%8B%E5%95%8F%E9%A1%8C-4fcc61e1e1e6" target="_blank" rel="noopener">網址怎麼查不到？- DNS 管理的常見問題</a></h3><p>通常公司有規劃自己區域網路的話，其中一定會有 Internal DNS Server，當地端的 DNS Server 想要查詢到雲端的 Private Zone，或是雲端的 DNS Server想要查詢到地端的 Private Zone 時該怎麼做？希望透過這篇文章分享的概念，可以讓正在規劃公司內部網路架構的人不用像我當年一樣自己慢慢摸索 T_T</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="想學習-AWS-卻又不知道從何下手？初探-AWS-雲端架構"><a href="#想學習-AWS-卻又不知道從何下手？初探-AWS-雲端架構" class="headerlink" title="想學習 AWS 卻又不知道從何下手？初探 AWS 雲端架構"></a><a href="https://medium.com/starbugs/%E6%83%B3%E5%AD%B8%E7%BF%92-aws-%E5%8D%BB%E5%8F%88%E4%B8%8D%E7%9F%A5%E9%81%93%E5%BE%9E%E4%BD%95%E4%B8%8B%E6%89%8B-%E5%88%9D%E6%8E%A2-aws-%E9%9B%B2%E7%AB%AF%E6%9E%B6%E6%A7%8B-2c8d3093b10c" target="_blank" rel="noopener">想學習 AWS 卻又不知道從何下手？初探 AWS 雲端架構</a></h3><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="React-新概念-—-Server-Components"><a href="#React-新概念-—-Server-Components" class="headerlink" title="React 新概念 — Server Components"></a><a href="https://link.medium.com/Ycm6riY5Rgb" target="_blank" rel="noopener">React 新概念 — Server Components</a></h3><p>文中介紹了 React 團隊公布的最新的實驗性概念 React Server Components，Server Components 可以用來解決前端打包的 Bundle.js 資源檔太大和與 Server 來回請求次數太多的問題，雖然 Server Components 與當前主流的前後端分離有點不太一致，但是對於要針對 Client 的效能優化來說，還是個可以研究的方向。</p><h3 id="Future-of-CSS-Container-Query"><a href="#Future-of-CSS-Container-Query" class="headerlink" title="Future of CSS - Container Query"></a><a href="https://dev.to/suprabhasupi/future-of-css-container-query-4ma4" target="_blank" rel="noopener">Future of CSS - Container Query</a></h3><p>在現階段如果要做 RWD（Responsive Web Design）的話，都會需要使用 @media 判斷目前 window 的大小，來調整頁面中 element 的顯示方式，但在未來可能會出現 @container，讓開發者可以根據某個 container 的大小做調整。</p><h3 id="Design-Patterns-In-JavaScript"><a href="#Design-Patterns-In-JavaScript" class="headerlink" title="Design Patterns In JavaScript"></a><a href="https://dev.to/twinfred/design-patterns-in-javascript-1l2l" target="_blank" rel="noopener">Design Patterns In JavaScript</a></h3><p>如果你很喜歡使用設計模式來解決一些常見的問題，但卻不曉得該如何在 JavaScript 中使用的話可以參考這篇文章，作者詳細介紹了每個設計模式在 JavaScript 的使用範例，可惜的是少了一些實用的情境和上下文，所以如果本身就設計模式還不太熟的讀者，可以先了解設計模式想解決的問題後，再回來看這篇文章。</p><h3 id="現代前端工程化-基於-Monorepo-的-lerna"><a href="#現代前端工程化-基於-Monorepo-的-lerna" class="headerlink" title="現代前端工程化-基於 Monorepo 的 lerna"></a><a href="https://www.gushiciku.cn/pl/gQR9/zh-tw" target="_blank" rel="noopener">現代前端工程化-基於 Monorepo 的 lerna</a></h3><p>現代的前端開發越來越複雜，在管理一個大型專案上部分專案都會使用 monorepo 的方式來管理，最有名的就是 lerna 這個套件，這篇文章講述了 lerna 這個套件在管理 monorepo 上的一些相關知識，有興趣的讀者可以收藏起來日後閱讀。</p><h3 id="Frontity"><a href="#Frontity" class="headerlink" title="Frontity"></a><a href="https://docs.frontity.org/" target="_blank" rel="noopener">Frontity</a></h3><p>這是個看起來相當有趣的專案，利用 wordpress 當作 CMS 而且可以自己手動刻畫面，而且還是基於 React.js 做出來的套件，感覺日後會有很多可玩性這邊可以推薦讀者做後續的觀察XD</p><h3 id="JavaScript-—-async-await-的-race-condition"><a href="#JavaScript-—-async-await-的-race-condition" class="headerlink" title="JavaScript — async/await 的 race condition"></a><a href="https://toy9986619.medium.com/javascript-async-await-%E7%9A%84-race-condition-20927705569" target="_blank" rel="noopener">JavaScript — async/await 的 race condition</a></h3><p>在非同步中難免都會遇到 race condition 的問題，畢竟很有可能多個 request 在同一個時間點回傳 response 過來去做同一件事情的修改，這篇文章講述了 JavaScript 中的非同步 race condition 問題，有興趣的讀者可以收藏起來看~</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="What-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost"><a href="#What-is-the-difference-between-0-0-0-0-127-0-0-1-and-localhost" class="headerlink" title="What is the difference between 0.0.0.0, 127.0.0.1 and localhost?"></a><a href="https://stackoverflow.com/a/20778887" target="_blank" rel="noopener">What is the difference between 0.0.0.0, 127.0.0.1 and localhost?</a></h3><p>前幾天跟朋友討論到 server 監聽 127.0.0.1/0.0.0.0/localhost 三者的行為有什麼不同，想說應該也有很多人不太清楚，所以後來在 StackOverflow 上找了一篇不錯的問答，有相同疑惑的話可以參考看看～</p><h3 id="利用-Apps-Script-讓-Google-表單回覆自動產出-Google-文件"><a href="#利用-Apps-Script-讓-Google-表單回覆自動產出-Google-文件" class="headerlink" title="利用 Apps Script 讓 Google 表單回覆自動產出 Google 文件"></a><a href="https://harryuan-65.medium.com/%E5%88%A9%E7%94%A8apps-script-%E8%AE%93-google-%E8%A1%A8%E5%96%AE%E5%9B%9E%E8%A6%86%E8%87%AA%E5%8B%95%E7%94%A2%E5%87%BAgoogle-%E6%96%87%E4%BB%B6-26bf9dacddb6" target="_blank" rel="noopener">利用 Apps Script 讓 Google 表單回覆自動產出 Google 文件</a></h3><p>身為最愛偷懶的工程師，當然什麼事情都要儘量自動化。這篇文章示範了怎麼用 Google 提供的 App Script(很像 JS) 在表單送出時，自動產生出一個文件檔，非常有趣而且也實際解決了作者的問題～</p><h3 id="淺談-HTTP-3-與-QUIC"><a href="#淺談-HTTP-3-與-QUIC" class="headerlink" title="淺談 HTTP/3 與 QUIC"></a><a href="https://link.medium.com/Y6Jx7ZtwTgb" target="_blank" rel="noopener">淺談 HTTP/3 與 QUIC</a></h3><p>雖然還有很多網站連 HTTP2 都沒用上，但近幾年來 HTTP3 也越來成熟了，所以快趁現在來了解一下 HTTP3 以及其底層的 QUIC 吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Using-Kubernetes-to-rethink-your-system-architecture-and-ease-technical-debt"><a href="#Using-Kubernetes-to-rethink-your-system-architecture-and-ease-technical-debt" class="headerlink" title="Using Kubernetes to rethink your system architecture and ease technical debt"></a><a href="https://stackoverflow.blog/2021/05/19/rethinking-system-architecture-can-kubernetes-help-to-solve-rewrite-anxiety/" target="_blank" rel="noopener">Using Kubernetes to rethink your system architecture and ease technical debt</a></h3><p>開發人員以把程式重寫而聞名，特別是當他們無法理解交接到手上的軟體是如何運作的時候，但是有經驗的開發人員應該要知道，除非真的有其必要性，不然應該避免把整個程式重新撰寫，因為重寫的過程通常會涉及很多複雜的問題，而且也有可能在過程中引入新的問題；<strong>文章一開頭是這樣講沒錯，但後來整個系統後來還是被翻掉了XD</strong> 在文章中的 Pusher 資深工程師很詳細講述如何分析複雜系統的故事，然後嘗試重建既有系統到 K8s 時面臨的挑戰，最主要想讓讀者知道，在考量更換架構的風險和好處時，可能會需要多次嘗試才能找到最適合的解決方案，並且去說服其他人為什麼要這樣做</p><h3 id="Chaos-Experimentation-an-open-source-framework-built-on-top-of-Envoy-Proxy"><a href="#Chaos-Experimentation-an-open-source-framework-built-on-top-of-Envoy-Proxy" class="headerlink" title="Chaos Experimentation, an open-source framework built on top of Envoy Proxy"></a><a href="https://eng.lyft.com/chaos-experimentation-an-open-source-framework-built-on-top-of-envoy-proxy-df87519ed681" target="_blank" rel="noopener">Chaos Experimentation, an open-source framework built on top of Envoy Proxy</a></h3><p>線上應用服務一定會壞掉，而這只是時間早晚的問題，而不是運氣好不好，而且在分散式系統的架構下，微服務間互相依賴，也造成越來越難知道當某個服務運行不正常，回應時間變久或是成功率下降時，整體服務會是什麼樣的反應，而提早發現這些問題得答案便是 Chaos Engineering 可以幫上忙的地方；而因為 Lyft 所有服務的運行都會透過 Envoy Proxy，所以他們開源了一個構築於 Envoy Proxy 之上的 Chaos Experimentation Framework，讓開發人員可以更簡單的透過這個框架來實現 Chaos Engineering，想要知道具體內容的話，千萬不要錯過精彩的文章內容</p><h3 id="Infrastructure-as-code-platform-Oak9-raises-5-9M"><a href="#Infrastructure-as-code-platform-Oak9-raises-5-9M" class="headerlink" title="Infrastructure-as-code platform Oak9 raises $5.9M"></a><a href="https://venturebeat.com/2021/06/02/infrastructure-as-code-platform-oak9-raises-5-9m/" target="_blank" rel="noopener">Infrastructure-as-code platform Oak9 raises $5.9M</a></h3><p>Oak9 是一個專注於 Infrastructure as Code 安全的服務平台，他在最近的種子輪募資到將近六百萬的美金，看來隨著 IaC 的普及，這類型的工具的需求越來越高，其實從  Deloitte 在 2017 年的一項調查中顯示只有 42% 的受訪者對於他們組織在於管理網路安全風險方面具有信心，而且這幾年來雖然每間公司都逐漸增加資安的投資用以應對分散式 IT 架構還有在家工作的挑戰，但 IDG 表示還是有將近 80% 的資深 IT 從業人員認為自己的組織缺乏應對網路攻擊的防禦能力，所以 Oak9 可以拿到募資也不意外，因為他希望透過整合在軟體開發生命週期中為 Cloud Native 應用服務強化其安全性，並且分析 Infrastructure as Code，藉由不中斷地監控來協助維護各種雲端資源的安全性，讓 IT 從業人員可以對於自己的負責管理的服務更有信心</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 83 期 - Stay Home, Stay Safe.</title>
      <link href="/2021/06/01/83-stay-home-stay-safe/"/>
      <url>/2021/06/01/83-stay-home-stay-safe/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Macbook-膨脹的災情了嘛？Aldente-幫你自動斷電"><a href="#Macbook-膨脹的災情了嘛？Aldente-幫你自動斷電" class="headerlink" title="Macbook 膨脹的災情了嘛？Aldente 幫你自動斷電"></a><a href="https://medium.com/starbugs/%E4%BD%A0%E9%81%87%E5%88%B0-macbook-%E8%86%A8%E8%84%B9%E7%9A%84%E7%81%BD%E6%83%85%E4%BA%86%E5%98%9B-aldente-%E5%B9%AB%E4%BD%A0%E8%87%AA%E5%8B%95%E6%96%B7%E9%9B%BB-c35fd8a96b0b" target="_blank" rel="noopener">Macbook 膨脹的災情了嘛？Aldente 幫你自動斷電</a></h3><p>大約 2018 開始的 Macbook 開始邁向輕薄，但也是從這時候開始，開始有著電池膨脹的災情。看著身旁同事的筆電逐一膨脹送修，慶幸自己的筆電沒有遇到這種災情。<br>但，好景不長，從 2019 購入到現在約莫兩年多， 我的筆電電池終究是膨脹了…</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Learn-CSS-By-Playing-Games-👾"><a href="#Learn-CSS-By-Playing-Games-👾" class="headerlink" title="Learn CSS By Playing Games 👾"></a><a href="https://dev.to/suprabhasupi/learn-css-by-playing-games-1a36" target="_blank" rel="noopener">Learn CSS By Playing Games 👾</a></h3><p>最近玩魔物獵人常常就算放空了，手指還是反射性地做迴避或攻擊的動作。那如果說把學習 CSS 的各種技巧也都變成遊戲，然後一直玩下去是不是之後看到什麼版型配置也都可以反射性地想到如何解決。 😂</p><h3 id="Back-to-Basic-Should-we-use-Flexbox-or-Grid"><a href="#Back-to-Basic-Should-we-use-Flexbox-or-Grid" class="headerlink" title="Back to Basic: Should we use Flexbox or Grid?"></a><a href="https://dev.to/theodorusclarence/back-to-basic-should-we-use-flexbox-or-grid-1h9i" target="_blank" rel="noopener">Back to Basic: Should we use Flexbox or Grid?</a></h3><p>看了許多教學文章並學會 Flex 和 Gird 後，反而搞不太清楚什麼時候該使用 Flex，什麼時候又該使用 Grid 嗎？在這篇文章和留言裡面的總結是「如果你用 Flex 太複雜，就使用 Grid。Grid 可以是 Flex 的父項，反之亦然。」</p><h3 id="What-is-Vite-and-how-to-use-it-with-React"><a href="#What-is-Vite-and-how-to-use-it-with-React" class="headerlink" title="What is Vite and how to use it with React"></a><a href="https://wakanai.io/what-is-vite-and-how-to-use-it-with-react/" target="_blank" rel="noopener">What is Vite and how to use it with React</a></h3><p>這篇文章從零建構一個 React 的專案，並且使用 Vite 來協助打包專案以及處理開發中必不可缺的 Hot Module Replacement，看起來非常簡單，大家有興趣可以試試看。 🙌</p><h3 id="Throttling-vs-Debouncing-an-interesting-analogy"><a href="#Throttling-vs-Debouncing-an-interesting-analogy" class="headerlink" title="Throttling vs Debouncing - an interesting analogy"></a><a href="https://dev.to/mayankav/throttling-vs-debouncing-29e8" target="_blank" rel="noopener">Throttling vs Debouncing - an interesting analogy</a></h3><p>在前端開發中難免跟事件綁定脫離不了關係，有時候為了效能會採用 debounce 的方式來處理，最有名的方法就是 lodash 的 <a href="https://lodash.com/docs/4.17.11#debounce" target="_blank" rel="noopener">debounce</a>，這篇文章分析了兩種處理事件的方法，有興趣的讀者不妨可以收藏起來日後可以閱讀。</p><h3 id="重新認識-Pixel、DPI-PPI-以及像素密度"><a href="#重新認識-Pixel、DPI-PPI-以及像素密度" class="headerlink" title="重新認識 Pixel、DPI / PPI 以及像素密度"></a><a href="https://blog.infolink.com.tw/2021/rediscover-pixel-dpi-ppi-and-pixel-density/?fbclid=IwAR2zz3FN7k-q9FVMlpqeR79UtuFeEtacjCZjLAwmuQ7ko3ctkLuRlWX6Vrw" target="_blank" rel="noopener">重新認識 Pixel、DPI / PPI 以及像素密度</a></h3><p>身為一個前端工程師很常會遇到圖片像素的問題，或者是每個元素之間的 Pixel 距離，這篇文章介紹了幾個在網頁中常用單位，有興趣的讀者也可以收藏起來。</p><h3 id="How-To-Use-Mobile-App-ASO-And-SEO-For-Your-App-Promotion"><a href="#How-To-Use-Mobile-App-ASO-And-SEO-For-Your-App-Promotion" class="headerlink" title="How To Use Mobile App ASO And SEO For Your App Promotion"></a><a href="https://dev.to/krowser/how-to-use-mobile-app-aso-and-seo-for-your-app-promotion-36pg" target="_blank" rel="noopener">How To Use Mobile App ASO And SEO For Your App Promotion</a></h3><p>在 Google 宣布 AMP is dead 之後還有哪些方法可以提供手機版的 SEO 呢？這篇文章敘述了幾個可以提升 SEO 的方法。</p><h2 id="Web-Security"><a href="#Web-Security" class="headerlink" title="Web Security"></a>Web Security</h2><h3 id="CORS-完全手冊（一）：為什麼會發生-CORS-錯誤？"><a href="#CORS-完全手冊（一）：為什麼會發生-CORS-錯誤？" class="headerlink" title="CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？"></a><a href="https://blog.huli.tw/2021/02/19/cors-guide-1/" target="_blank" rel="noopener">CORS 完全手冊（一）：為什麼會發生 CORS 錯誤？</a></h3><p>這一份由胡立寫的 CORS 總共有六篇，內容真的紮實到不行，除了詳細說明 CORS 錯誤的原理之外，還帶著你思考瀏覽器究竟為什麼要做這樣的限制，真的是不可多得的一系列好文。</p><h3 id="防止-XSS-可能比想像中困難"><a href="#防止-XSS-可能比想像中困難" class="headerlink" title="防止 XSS 可能比想像中困難"></a><a href="https://blog.huli.tw/2021/05/25/prevent-xss-is-not-that-easy/" target="_blank" rel="noopener">防止 XSS 可能比想像中困難</a></h3><p>這篇同樣是由胡立大大寫的文章，內容主要在講述一個看似安全的網站，究竟是哪邊沒處理好導致有 XSS 的漏洞，分析的過程稍微有點複雜但也很有趣。</p><h3 id="跨出成為駭客的第一步，來打打看-CTF-Web-吧！"><a href="#跨出成為駭客的第一步，來打打看-CTF-Web-吧！" class="headerlink" title="跨出成為駭客的第一步，來打打看 CTF Web 吧！"></a><a href="https://medium.com/starbugs/ctf-the-first-step-to-becoming-a-hacker-a56eb8820fac" target="_blank" rel="noopener">跨出成為駭客的第一步，來打打看 CTF Web 吧！</a></h3><p>既然都說到 Web Security 了，那就不得不偷渡一下自己介紹 CTF 的文章XD。對我來說打 CTF 除了滿足當駭客的成就感之外，更重要的是知道怎麼攻擊之後，能用攻擊者的思維來檢視自己做的網站，如果連自己身為開發者都沒辦法攻下自家的網站，那才能說自家的網站是安全的對吧！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Argo-rollouts-1-0-released"><a href="#Argo-rollouts-1-0-released" class="headerlink" title="Argo rollouts 1.0 released!"></a><a href="https://www.cncf.io/blog/2021/05/27/argo-rollouts-1-0-released/" target="_blank" rel="noopener">Argo rollouts 1.0 released!</a></h3><p>Argo Rollouts 發布 1.0 啦！不過他是做什麼的啊XD Argo Rollouts 是專門用來補足原生 Kubernetes Deployment 功能不足的部署控制工具，他可以讓 K8s Deployment 具有更多的部署策略，例如 Blue/Green，Canary，Analysis 和 Experiment 部署策略，而他通常會和 Argo CD 一起搭配使用；不過他真的想達成的目標是成為 K8s Deployment Resource 的替代方案，提供應用服務一個更好的生命週管理機制，讓使用者可以利用各種適合自己的策略來進行部署，進而降低部署的風險，並且擁有部署期間自動中斷或是 Rollback 回上一個穩定版本的能力！</p><h3 id="Announcing-Tech-Preview-of-Consul-Service-Mesh-for-Amazon-ECS"><a href="#Announcing-Tech-Preview-of-Consul-Service-Mesh-for-Amazon-ECS" class="headerlink" title="Announcing Tech Preview of Consul Service Mesh for Amazon ECS"></a><a href="https://www.hashicorp.com/blog/announcing-consul-service-mesh-for-amazon-ecs" target="_blank" rel="noopener">Announcing Tech Preview of Consul Service Mesh for Amazon ECS</a></h3><p>使用 AWS ECS 的開發者們現在可以選擇 HashiCorp Consul 來作為 Service Mesh 的解決方案嘍！不過大家先不要太激動，因為還只是在 Tech Preview 的階段而已，他可以讓開發者先部署在非生產環境做測試看看，這篇文章先稍微介紹如何把 HashiCorp Consul 跟 ECS 整合再一起，緊接著手把手的使用 Terraform 來講解要怎麼部署，有興趣試試看的人不要錯過了！</p><h3 id="Fairwinds-Releases-Polaris-4-0-Provides-Support-for-All-Kubernetes-Resources"><a href="#Fairwinds-Releases-Polaris-4-0-Provides-Support-for-All-Kubernetes-Resources" class="headerlink" title="Fairwinds Releases Polaris 4.0, Provides Support for All Kubernetes Resources"></a><a href="https://www.fairwinds.com/news/fairwinds-releases-polaris-4.0" target="_blank" rel="noopener">Fairwinds Releases Polaris 4.0, Provides Support for All Kubernetes Resources</a></h3><p>感覺用來幫 K8s 做健康檢查的工具越來越多了，這次要介紹的解決方案叫做 Polaris，他在最近發佈了 4.0 版，他會自動地去幫忙檢查並且確保 K8s 內的 Pod 和 Controllers 有根據 Best Practices 來做設定，跟 <a href="https://github.com/derailed/popeye" target="_blank" rel="noopener">Popeye</a> 有點像，幫助 K8s 的維運人員避開可能遇到的問題，而在最新發佈的版本中，他支援了 K8s 的各種資源種類，包含 Ingress, Service 和 ClusterRole，增加根據 metadata 去做客製化檢查的能力，並且支援跨資源的檢查功能，例如確保所有的 Deployment 都有 HPA </p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 82 期 - Work from home 不孤單，我們陪你</title>
      <link href="/2021/05/25/82-we-work-from-home-together/"/>
      <url>/2021/05/25/82-we-work-from-home-together/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-為太龐大的程式碼做-Lazy-Loading-和-Code-Splitting"><a href="#React-為太龐大的程式碼做-Lazy-Loading-和-Code-Splitting" class="headerlink" title="React | 為太龐大的程式碼做 Lazy Loading 和 Code Splitting"></a><a href="https://medium.com/starbugs/react-%E7%82%BA%E5%A4%AA%E9%BE%90%E5%A4%A7%E7%9A%84%E7%A8%8B%E5%BC%8F%E7%A2%BC%E5%81%9A-lazy-loading-%E5%92%8C-code-splitting-7384626a6e0d" target="_blank" rel="noopener">React | 為太龐大的程式碼做 Lazy Loading 和 Code Splitting</a></h3><p>不曉得大家在使用 React 或是 Vue（抱歉我只用過這兩種前端框架，沒有要排擠的意思 😂）寫完程式要打包的時候，會不會遇到打包後的 JavaScript 太肥大了，讓網頁下載資源的時間變長，導致畫面出現在網頁的速度也跟著變慢。Lazy loading 和 code splitting 就是為了解決編譯後的打包檔太大的問題所存在的。雖然大部分人可能不會馬上遇到打包後的檔案太大的情況，但是遇到的話該如何優化呢？一起看看文章吧！ 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Use-CSS-Selectors-to-Style-Your-Web-Page"><a href="#How-to-Use-CSS-Selectors-to-Style-Your-Web-Page" class="headerlink" title="How to Use CSS Selectors to Style Your Web Page"></a><a href="https://www.freecodecamp.org/news/use-css-selectors-to-style-webpage/" target="_blank" rel="noopener">How to Use CSS Selectors to Style Your Web Page</a></h3><p>把 CSS 中常用的選擇器分成「簡單選擇器」、「組合選擇器」、「偽類選擇器」、「偽元素選擇器」和「屬性選擇器」，並仔細介紹它們的功能，大家可以先把這篇存起來，之後使用到時再打開找自己需要的，不然看過一次可能很快就會忘了。 😂</p><h3 id="Top-10-Chrome-DevTools-tips-amp-tricks"><a href="#Top-10-Chrome-DevTools-tips-amp-tricks" class="headerlink" title="Top 10 Chrome DevTools tips &amp; tricks"></a><a href="https://dev.to/areknawo/top-10-chrome-devtools-tips-tricks-2b8g" target="_blank" rel="noopener">Top 10 Chrome DevTools tips &amp; tricks</a></h3><p>本篇文章介紹了 Chrome DevTools 提供給開發者的各種好用功能，也許這些功能可以大大的減少你在查找 Bug 或是調整前端畫面的時間。</p><h3 id="The-future-of-Internet-Explorer-on-Windows-10-is-in-Microsoft-Edge"><a href="#The-future-of-Internet-Explorer-on-Windows-10-is-in-Microsoft-Edge" class="headerlink" title="The future of Internet Explorer on Windows 10 is in Microsoft Edge"></a><a href="https://blogs.windows.com/windowsexperience/2021/05/19/the-future-of-internet-explorer-on-windows-10-is-in-microsoft-edge/?fbclid=IwAR1-Y4O6Zn75V1Hj9cUbWX2tYUxNRDDF0x9bqVc0bwRalJHfMUWY-MazDOM" target="_blank" rel="noopener">The future of Internet Explorer on Windows 10 is in Microsoft Edge</a></h3><p>微軟將要把瀏覽器的主力通通放到 Edge 上了，因此會在 2022 年 6 月 15 日開始停止 IE 的使用（身為前端工程師，讓我歡呼一下 🎉），文章中描述了幾個將 IE 淘汰的原因（各位可以撇開私仇，從專業的角度了解一下 😂）。</p><h3 id="Google-AMP-is-dead-AMP-pages-no-longer-get-preferential-treatment-in-Google-search"><a href="#Google-AMP-is-dead-AMP-pages-no-longer-get-preferential-treatment-in-Google-search" class="headerlink" title="Google AMP is dead! AMP pages no longer get preferential treatment in Google search"></a><a href="https://plausible.io/blog/google-amp" target="_blank" rel="noopener">Google AMP is dead! AMP pages no longer get preferential treatment in Google search</a></h3><p>Google 終於要終止 AMP 專案了 🎉，以前很多新聞平台為了讓自己的新聞稿曝光率增加都會利用 amp 的方式讓手機可以快速的閱讀靜態網站的內容，所以很多大型公司為了讓自己的網站可以增加 Google 的自然搜尋都會要求前端工程師改寫網站成 amp 的模式，不過最近 Google 要終止這個專案了前端工程師們終於可以減少學習的技能了XD</p><h3 id="nth-of-type-amp-nth-last-of-type-你覺得燒腦但其實根本不燒腦的選取器趴兔"><a href="#nth-of-type-amp-nth-last-of-type-你覺得燒腦但其實根本不燒腦的選取器趴兔" class="headerlink" title=":nth-of-type() &amp; :nth-last-of-type() - 你覺得燒腦但其實根本不燒腦的選取器趴兔"></a><a href="https://ithelp.ithome.com.tw/articles/10227242" target="_blank" rel="noopener">:nth-of-type() &amp; :nth-last-of-type() - 你覺得燒腦但其實根本不燒腦的選取器趴兔</a></h3><p>會突然分享這篇文章的原因是因為最近看了一個 <a href="https://codepen.io/bad_printer/pen/abbdBVW?fbclid=IwAR0g2eadFlYV1cASg4BSGyIv4oPsCCEh2x4vTynx4a530JCsx0bHpC7FEw4" target="_blank" rel="noopener">codepen</a>，沒想到竟然會有多個元素同時一個選擇器選到，後來才知道原來 CSS 選擇器也可以利用數學公式的原理這樣玩真的太特別了！</p><h3 id="Array-prototype-flat"><a href="#Array-prototype-flat" class="headerlink" title="Array.prototype.flat()"></a><a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/flat" target="_blank" rel="noopener">Array.prototype.flat()</a></h3><p>最近在看新的 ES10 的功能中，發現了一個正在實驗性但是很好用的陣列操作 method，flat 簡單來說就是壓平的意思，可以幫助一個複雜的多維陣列壓平成一個一維陣列，目前基本上主流的瀏覽器都支援這個方法了，如果之後開發上有需要做到類似的操作不妨使用原生的方法就好，不用再額外引用 lodash 的 <a href="https://lodash.com/docs/4.17.15#flatten" target="_blank" rel="noopener">flattern</a> 了XD</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Comprehensive-Guide-to-Dates-and-Times-in-Go"><a href="#Comprehensive-Guide-to-Dates-and-Times-in-Go" class="headerlink" title="Comprehensive Guide to Dates and Times in Go"></a><a href="https://qvault.io/golang/golang-date-time/" target="_blank" rel="noopener">Comprehensive Guide to Dates and Times in Go</a></h3><p>常常被時區、時間差、日期輸出格式搞到很煩嗎？這篇文章整理了 Go 裡面各種跟時間的函數，教你怎麼在各種格式之間轉來轉去</p><h3 id="Graceful-Shutdowns-in-Golang-with-signal-NotifyContext"><a href="#Graceful-Shutdowns-in-Golang-with-signal-NotifyContext" class="headerlink" title="Graceful Shutdowns in Golang with signal.NotifyContext"></a><a href="https://millhouse.dev/posts/graceful-shutdowns-in-golang-with-signal-notify-context" target="_blank" rel="noopener">Graceful Shutdowns in Golang with signal.NotifyContext</a></h3><p>對於一個 API server 來說，除了流量要扛得住之外，在 server 即將要關閉時做 Gracefully shutdown 也是非常重要的事情。而這篇文章提供了一個很簡單的範例，教你怎麼用 <code>signal.NotifyContext</code> 在收到 signal 時開始 gracefully shutdown，而不是直接就把 server 關掉</p><h3 id="Go-Package-CI-CD-with-GitHub-Actions"><a href="#Go-Package-CI-CD-with-GitHub-Actions" class="headerlink" title="Go Package CI/CD with GitHub Actions"></a><a href="https://dev.to/jidicula/go-package-ci-cd-with-github-actions-350o" target="_blank" rel="noopener">Go Package CI/CD with GitHub Actions</a></h3><p>因為 Github Action 對於開源專案是完全免費的，而且跟 Github 的整合非常好，所以很多開源專案也紛紛從 Travis/Circle CI 轉過來。如果你手邊剛好也有 Go 的開源專案想要使用 Github Action 的話這篇是不錯的例子，不管是執行 Lint、Test 還是跨平台編譯這篇都寫得很清楚，懶得自己動手的話也可以借他的腳本過來改一改～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-6-open-source-tools-to-put-your-cluster-to-the-test"><a href="#Kubernetes-6-open-source-tools-to-put-your-cluster-to-the-test" class="headerlink" title="Kubernetes: 6 open source tools to put your cluster to the test"></a><a href="https://enterprisersproject.com/article/2021/5/kubernetes-6-open-source-tools-to-test-clusters" target="_blank" rel="noopener">Kubernetes: 6 open source tools to put your cluster to the test</a></h3><p>K8s 生態系中有很多蓬勃發展的工具可以用來協助使用者，這篇文章介紹了六個用來測試 K8s Cluster 和在其中應用程式的好用工具:</p><ul><li><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">Kubernetes Dashboard</a>: 大家都知道可以用來管理 Cluster 的 Admin Console</li><li><a href="https://github.com/asobti/kube-monkey" target="_blank" rel="noopener">Kube-monkey</a>: 把 Netflix 的 Chaos Monkey 改成專門運行在 K8s 中的版本</li><li><a href="https://github.com/aquasecurity/kube-hunter" target="_blank" rel="noopener">Kube-hunter</a>: 用來對  K8s Cluster 做滲透測試用以發現資安弱點的工具</li><li><a href="https://www.projectquay.io/" target="_blank" rel="noopener">Project Quay</a>: Quay 不只是 Container Image Registry，同時也可以幫忙掃描 Image 有沒有什麼 Vulnerability</li><li><a href="https://github.com/cloud-bulldozer/kube-burner" target="_blank" rel="noopener">Kube-burner</a>: 對 K8s Cluster 做壓力測試，例如一次建立很多的資源，然後再同時刪除掉</li><li><a href="https://github.com/aquasecurity/kube-bench" target="_blank" rel="noopener">Kube-bench</a>: 檢查 K8s Clustser 是否符合 CIS Kubernetes Benchmark</li></ul><h3 id="Introducing-AWS-App-Runner"><a href="#Introducing-AWS-App-Runner" class="headerlink" title="Introducing AWS App Runner"></a><a href="https://aws.amazon.com/blogs/containers/introducing-aws-app-runner/" target="_blank" rel="noopener">Introducing AWS App Runner</a></h3><p>AWS 最近發佈的一個新的服務叫做 App Runner，號稱用來運行容器化 Web 服務的最簡單方式，使用他就不用再去管什麼 K8s, 不用設定 Pipeline，也不用去優化 Load Balancer，或是需要擔心 TLS 憑證是不是要過期了，當然也沒有伺服器需要管理，只需要把 Container 丟進去就可以跑了，然後再根據運行時間去算錢！</p><h3 id="The-Architecture-of-Uber’s-API-gateway"><a href="#The-Architecture-of-Uber’s-API-gateway" class="headerlink" title="The Architecture of Uber’s API gateway"></a><a href="https://eng.uber.com/architecture-api-gateway/" target="_blank" rel="noopener">The Architecture of Uber’s API gateway</a></h3><p>API Gateway 是微服務架構中不可缺少的一環，因為他可以為所有的應用程式提供單一個入口，並且提供一個介面來取得資料，商業邏輯和功能性，他也是一個用來實作許多高階功能的地方，例如 routing，protocol 的轉換，Rate Limiting, Load Shedding，處理 Header，安全審核，使用者存取控制…等；而這篇文章是想要深入探討 Uber 自己使用的 API Gateway 系統內的每個技術元件，推薦給有使用微服務架構的人參考看看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 81 期 - 防疫期間與星巴哥一起在家耍廢、技術學會！</title>
      <link href="/2021/05/18/81-stay-at-home-with-starbugs/"/>
      <url>/2021/05/18/81-stay-at-home-with-starbugs/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="你一定用過-htop，但你有看懂每個欄位嗎？"><a href="#你一定用過-htop，但你有看懂每個欄位嗎？" class="headerlink" title="你一定用過 htop，但你有看懂每個欄位嗎？"></a><a href="https://medium.com/starbugs/do-you-understand-htop-ffb72b3d5629" target="_blank" rel="noopener">你一定用過 htop，但你有看懂每個欄位嗎？</a></h3><p>大家好我是 Larry，這週的專欄要跟大家詳細介紹 htop 中每個指標如 Load Acerage、Resident、Time+ 所代表的意義。文章比較長如果一次看不完也沒關係，可以收藏起來等哪天用到 htop 時再回來複習就好了～</p><h2 id="作業系統"><a href="#作業系統" class="headerlink" title="作業系統"></a>作業系統</h2><h3 id="Linux-的記憶體快取功能：系統把記憶體用光了？"><a href="#Linux-的記憶體快取功能：系統把記憶體用光了？" class="headerlink" title="Linux 的記憶體快取功能：系統把記憶體用光了？"></a><a href="https://blog.gtwang.org/linux/linux-cache-memory-linux/" target="_blank" rel="noopener">Linux 的記憶體快取功能：系統把記憶體用光了？</a></h3><p>看到電腦的記憶體快用完了千萬不要緊張，說不定是被系統借去做其他事了，因為 Linux 會把沒用到的記憶體借去做快取，不只可以提昇系統效能，而且還幾乎沒有副作用哦</p><h3 id="htop-explained"><a href="#htop-explained" class="headerlink" title="htop explained"></a><a href="https://peteris.rocks/blog/htop/" target="_blank" rel="noopener">htop explained</a></h3><p>這篇文章非常非常長，他仔細介紹了 htop 裡面的資訊是從哪邊取得的，整篇看完差不多也知道怎麼自己寫一個 htop 了XD</p><h3 id="Operating-System-Virtual-Memory"><a href="#Operating-System-Virtual-Memory" class="headerlink" title="Operating System - Virtual Memory"></a><a href="https://www.tutorialspoint.com/operating_system/os_virtual_memory.htm" target="_blank" rel="noopener">Operating System - Virtual Memory</a></h3><p>虛擬記憶體（Virtual Memory）是系統在做記憶體管理時非常重要的概念，而且這篇文章也寫得很淺顯易懂，就算完全沒有作業系統的背景知識也能看懂哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="做了一夜动画，让大家十分钟搞懂Webpack"><a href="#做了一夜动画，让大家十分钟搞懂Webpack" class="headerlink" title="做了一夜动画，让大家十分钟搞懂Webpack"></a><a href="https://juejin.cn/post/6961961165656326152" target="_blank" rel="noopener">做了一夜动画，让大家十分钟搞懂Webpack</a></h3><p>標題檔的部分在做了一夜動畫，但是 Webpack 的講解真的非常清楚！一步步把 Webpack 如何把專案裡的 JavaScript 全都整理成一份的過程，有興趣的話可以花些時間了解一下！</p><h3 id="Absolutely-Relative-CSS-Length-Units"><a href="#Absolutely-Relative-CSS-Length-Units" class="headerlink" title="Absolutely Relative CSS Length Units"></a><a href="https://levelup.gitconnected.com/absolutely-relative-css-length-units-fd990575ddb2" target="_blank" rel="noopener">Absolutely Relative CSS Length Units</a></h3><p>文中介紹了在 CSS 中常見的幾個長度的單位，像是代表絕對單位的 <code>px</code>、相對單位的 <code>em</code> 和 <code>rem</code> 或是與瀏覽器視窗有關係的 <code>vw</code>、<code>vh</code>、<code>vmin</code> 和 <code>vmax</code>，一起看看這些單位間有什麼不同吧！</p><h3 id="Why-do-you-need-to-know-about-the-JavaScript-Array-at-method"><a href="#Why-do-you-need-to-know-about-the-JavaScript-Array-at-method" class="headerlink" title="Why do you need to know about the JavaScript Array at() method?"></a><a href="https://blog.greenroots.info/why-do-you-need-to-know-about-the-javascript-array-at-method-ckoskkkee0ftmbws1ag0b4udt" target="_blank" rel="noopener">Why do you need to know about the JavaScript Array at() method?</a></h3><p>如果要在 JavaScript 中的 Array 取得某個元素大家通常都會使用中括號 <code>[]</code>，但用 <code>[]</code> 的話如果要取得最後一個元素，就得用 <code>arr[arr.length - 1]</code> 這種不直觀的寫法。而文章中介紹了全新用來取得 Array 元素的方法 <code>at(index)</code>，雖然該方法還沒有正式實裝到現有版本，但還是可以用 <a href="https://github.com/es-shims/Array.prototype.at" target="_blank" rel="noopener">polyfill</a> 早用早享受！</p><h3 id="variable-undefined-vs-typeof-variable-“undefined”-in-JavaScript"><a href="#variable-undefined-vs-typeof-variable-“undefined”-in-JavaScript" class="headerlink" title="variable === undefined vs. typeof variable === “undefined” in JavaScript"></a><a href="https://www.geeksforgeeks.org/variable-undefined-vs-typeof-variable-undefined-in-javascript/" target="_blank" rel="noopener">variable === undefined vs. typeof variable === “undefined” in JavaScript</a></h3><p>以往在比對某變數的值是否為 <code>undefined</code> 的時候都是直接用 <code>variable === undefined</code> 的方式，但其實還有另一種 <code>typeof variable === &#39;undefined&#39;</code> 的判斷方式，這兩種判斷方式最主要的差異在哪呢？這篇文章有完整的介紹可以參考。</p><h3 id="The-history-of-“typeof-null”"><a href="#The-history-of-“typeof-null”" class="headerlink" title="The history of “typeof null”"></a><a href="https://2ality.com/2013/10/typeof-null.html" target="_blank" rel="noopener">The history of “typeof null”</a></h3><p>這個真的是最近踩到的雷，在做物件的值是否為 null 的比對時，結果發現即便 value 為 null，但 <code>typeof null === &#39;object&#39;</code> 也會是 true，這真的是太怪了，於是就去翻 JavaScript 會把 null 的 type 定義為 null 就看到這篇，有興趣的讀者可以看一看但結論就是 <code>typeof null === &#39;object&#39;</code> 是 JavaScript 的 bug XD</p><h3 id="Introduction-To-Polyfills-amp-Their-Usage"><a href="#Introduction-To-Polyfills-amp-Their-Usage" class="headerlink" title="Introduction To Polyfills &amp; Their Usage"></a><a href="https://medium.com/beginners-guide-to-mobile-web-development/introduction-to-polyfills-their-usage-9cd6db4b1923" target="_blank" rel="noopener">Introduction To Polyfills &amp; Their Usage</a></h3><p>相信身為一個前端工程師很常遇到一些新的 method 是無法在舊的瀏覽器當中實現，這就是因為瀏覽器沒有去實作這個 method 的原因，這時候我們就必須要寫 polyfill，那 polyfill 要怎麼寫呢？這篇文章有詳細的介紹。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="5-Linux-commands-I-never-use"><a href="#5-Linux-commands-I-never-use" class="headerlink" title="5 Linux commands I never use"></a><a href="https://www.redhat.com/sysadmin/5-never-use-linux-commands" target="_blank" rel="noopener">5 Linux commands I never use</a></h3><p>這邊文章還滿有趣的，因為通常寫文章的人都會介紹正面的東西，例如最好用，最省時間，最省資源…等，不過這邊竟然是介紹最無用的 Command XD 大家覺得有道理嗎？！</p><ul><li>arch: 取得電腦的架構</li><li>arpaname: 取得 ARPA Name</li><li>bc: 互動式計算器</li><li>dumpkeys: 將鍵盤的對照表寫到標準輸出之中</li><li>uname: 取得當前電腦和作業系統的名稱、版本及其他細節</li></ul><h3 id="Automating-tagging-and-versioning-of-Terraform-modules"><a href="#Automating-tagging-and-versioning-of-Terraform-modules" class="headerlink" title="Automating tagging and versioning of Terraform modules"></a><a href="https://itnext.io/automating-tagging-and-versioning-of-terraform-modules-or-any-language-3a271966c63c" target="_blank" rel="noopener">Automating tagging and versioning of Terraform modules</a></h3><p>這篇文章很值得一讀，在解釋怎麼管理一個 Terraform Module Git Repositroy，裡面提到了版號要怎麼訂，Commit Message 的格式要怎麼寫比較好，並且怎麼把這些規矩融入到 CI Pipeline 中，最後再提到怎麼自動化產生 Change Log, 其實不只是 Terraform Modlue，其他的程式語言應該也可以參考</p><h3 id="karmada"><a href="#karmada" class="headerlink" title="karmada"></a><a href="https://github.com/karmada-io/karmada" target="_blank" rel="noopener">karmada</a></h3><p>在一個組織裡要管理多個 K8s Cluster 已經是無法逃避的一件事情，這邊想要介紹的工具叫做 Karmada，是用來管理跨雲的多重 K8s Cluster 開源方案，他跟原生的 K8s API 相容，可以避免 Vendor Lock-in，讓管理可以集中化，而且可以讓 Workload 在多組 Cluster 間找到最適合自己的居所，而這個專案有些基本觀念主要是來自 Federation v1 跟 v2，有興趣的人可以參考看看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 80 期 - 世界為我而轉動！</title>
      <link href="/2021/05/11/80-argo-cd-applicationset-controller/"/>
      <url>/2021/05/11/80-argo-cd-applicationset-controller/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Argo-CD-ApplicationSet-Controller-世界為我而轉動！"><a href="#Argo-CD-ApplicationSet-Controller-世界為我而轉動！" class="headerlink" title="Argo CD ApplicationSet Controller: 世界為我而轉動！"></a><a href="https://medium.com/starbugs/argo-cd-applicationset-controller-%E4%B8%96%E7%95%8C%E7%82%BA%E6%88%91%E8%80%8C%E8%BD%89%E5%8B%95-a837f9392298" target="_blank" rel="noopener">Argo CD ApplicationSet Controller: 世界為我而轉動！</a></h3><p>想要一次性自動地在所有管理的 Kubernetes Cluster 安裝好 Prometheus，或是在某一座 Kubernetes Cluster 內快速地 Bootstrap N 個 Namespace，有這些需求的人千萬不要錯過，由 Argo 新推出的 Argo CD ApplicationSet Controller，它讓使用者在單個 YAML 檔案內像是寫 For Loop 程式，隨需求一次性地建立大量的 Application，就讓我們使用實際範例來看它如何解放 Kubernetes 維運人員的雙手與時間</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Gatsby-簡單兩個步驟，讓你把-Gatsby-個人網站變成-PWA！"><a href="#Gatsby-簡單兩個步驟，讓你把-Gatsby-個人網站變成-PWA！" class="headerlink" title="Gatsby | 簡單兩個步驟，讓你把 Gatsby 個人網站變成 PWA！"></a><a href="https://medium.com/starbugs/gatsby-%E7%B0%A1%E5%96%AE%E5%85%A9%E5%80%8B%E6%AD%A5%E9%A9%9F-%E8%AE%93%E4%BD%A0%E6%8A%8A-gatsby-%E5%80%8B%E4%BA%BA%E7%B6%B2%E7%AB%99%E8%AE%8A%E6%88%90-pwa-450a07668fef" target="_blank" rel="noopener">Gatsby | 簡單兩個步驟，讓你把 Gatsby 個人網站變成 PWA！</a></h3><h3 id="前端開發者該負責寫-API-Endpoints-嗎？The-Backend-For-Frontend-Pattern-BFF-In-Microservices-World"><a href="#前端開發者該負責寫-API-Endpoints-嗎？The-Backend-For-Frontend-Pattern-BFF-In-Microservices-World" class="headerlink" title="前端開發者該負責寫 API Endpoints 嗎？The Backend For Frontend Pattern (BFF) In Microservices World"></a><a href="https://medium.com/starbugs/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC%E8%80%85%E8%A9%B2%E8%B2%A0%E8%B2%AC%E5%AF%AB-api-endpoints-%E5%97%8E-the-backend-for-frontend-pattern-bff-in-microservices-world-1368362c141c" target="_blank" rel="noopener">前端開發者該負責寫 API Endpoints 嗎？The Backend For Frontend Pattern (BFF) In Microservices World</a></h3><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Lazy-loading-using-the-Intersection-Observer-API"><a href="#Lazy-loading-using-the-Intersection-Observer-API" class="headerlink" title="Lazy loading using the Intersection Observer API"></a><a href="https://blog.logrocket.com/lazy-loading-using-the-intersection-observer-api/" target="_blank" rel="noopener">Lazy loading using the Intersection Observer API</a></h3><p>在前端處理圖片載入優化的效能時，Lazy loading 會是其中一個改善使用者體驗的選擇之一，而在文章裡面作者就使用了 Intersection Observer API 來實現 Lazy Loading！</p><h3 id="How-To-Use-Web-Worker"><a href="#How-To-Use-Web-Worker" class="headerlink" title="How To Use Web Worker"></a><a href="https://blog.bibekkakati.me/how-to-use-web-worker" target="_blank" rel="noopener">How To Use Web Worker</a></h3><p>透過 Web Worker API 可以產生一個在背景執行的 worker，這樣就不會讓同步執行的 JavaScript 因為執行比較長時間的程式碼產生應用程式沒有回應狀況。文章中解釋了一些關於 Worker 的基本操作。</p><h3 id="How-To-Use-Vibration-API-in-Your-Website"><a href="#How-To-Use-Vibration-API-in-Your-Website" class="headerlink" title="How To Use Vibration API in Your Website"></a><a href="https://dev.to/bibekkakati/how-to-use-vibration-api-in-your-website-4dp4" target="_blank" rel="noopener">How To Use Vibration API in Your Website</a></h3><p>Vibration API 可以透過 Web 對使用者的設備傳達震動的反應，雖然目前只能在 Android 上的 Chrome 上使用，但是相信 Web 就快要可以征服世界了 😂</p><h3 id="街口前端視覺搭建系統-創始篇"><a href="#街口前端視覺搭建系統-創始篇" class="headerlink" title="街口前端視覺搭建系統-創始篇"></a><a href="https://medium.com/jkopay-frontend/%E8%A1%97%E5%8F%A3%E5%89%8D%E7%AB%AF%E8%A6%96%E8%A6%BA%E6%90%AD%E5%BB%BA%E7%B3%BB%E7%B5%B1-%E5%89%B5%E5%A7%8B%E7%AF%87-e849f713fbe0" target="_blank" rel="noopener">街口前端視覺搭建系統-創始篇</a></h3><p>這篇真的蠻值得一看的，很多大公司為了方便管理自己的前台頁面內容都會設計一個後台給需求端使用，這篇文章敘述了一個好的後台會先從什麼樣的基礎架構進行撰寫，非常值得收藏起來看。</p><h3 id="TypeScript-中的-any-和-unknown"><a href="#TypeScript-中的-any-和-unknown" class="headerlink" title="TypeScript 中的 any 和 unknown"></a><a href="https://abstreamace.com/sglab/2021/05/06/typescript-%e4%b8%ad%e7%9a%84-any-%e5%92%8c-unknown/?fbclid=IwAR1t-VVVt4TsyBfv-AHDb9aJ_Qy-IBk0zqFDWyeX3DcMZpp27jUNDgPIL9Q" target="_blank" rel="noopener">TypeScript 中的 any 和 unknown</a></h3><p>TypeScipt 大家都知道要針對各個變數進行型別的定義，有的時候為了方便就會把變數型態定義成 any，因為 any 就不會做任何的型別檢查回到 JavaScript 的懷抱，但這種寫法其實不是個很好的寫法所以後來 TS 又推出了 unknown，這篇文章講述了 any 以及 unknown 的差別，但我覺得既然都花時間用 TS 了就乖乖把型別定義好吧XD</p><h3 id="重新認識-Pixel、DPI-PPI-以及像素密度"><a href="#重新認識-Pixel、DPI-PPI-以及像素密度" class="headerlink" title="重新認識 Pixel、DPI / PPI 以及像素密度"></a><a href="https://blog.infolink.com.tw/2021/rediscover-pixel-dpi-ppi-and-pixel-density/?fbclid=IwAR0fGyhFL0jVnq9hQjEmwE_cYvhGcOJbb-LzGUSXDLAqLUdsHwdIVZjPkwk" target="_blank" rel="noopener">重新認識 Pixel、DPI / PPI 以及像素密度</a></h3><p>在前端的生態圈相信大家很常都會為了圖片的像素而搞到心煩意亂，尤其是轉成 canvas 的時候總是覺得圖片糊糊的，這其實就跟 DPI 有很大的關聯性，這篇文章就在講述圖片的像素、DPI 等等觀念，讓你可以更了解圖片的原理。</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="How-JavaScript-Works"><a href="#How-JavaScript-Works" class="headerlink" title="How JavaScript Works"></a><a href="https://suprabhasupi.hashnode.dev/how-javascript-works" target="_blank" rel="noopener">How JavaScript Works</a></h3><p>這篇文章圖解了 JS 引擎裡面是怎麼執行 JS 的，而且也簡單講了 Heap、Stack、GC 大概的輪廓，就算是 JS 初學者也看得懂哦～</p><h3 id="寫一個簡單堪用的-ESLint-plugin"><a href="#寫一個簡單堪用的-ESLint-plugin" class="headerlink" title="寫一個簡單堪用的 ESLint plugin"></a><a href="https://blog.techbridge.cc/2021/03/20/write-your-own-eslint-plugin/" target="_blank" rel="noopener">寫一個簡單堪用的 ESLint plugin</a></h3><p>寫一個 ESLint plugin 其實沒有想像中難。胡立這篇文中介紹了他們在專案中遇到的問題，並且自己寫了一個堪用的 ESLint plugin 來解決他。雖然大部分人不會需要自己寫 ESLint plugin，但了解一下 plugin 內部是怎麼運作還是滿有趣的～</p><h3 id="Solving-a-Mystery-Behavior-of-parseInt-in-JavaScript"><a href="#Solving-a-Mystery-Behavior-of-parseInt-in-JavaScript" class="headerlink" title="Solving a Mystery Behavior of parseInt() in JavaScript"></a><a href="https://dmitripavlutin.com/parseint-mystery-javascript/" target="_blank" rel="noopener">Solving a Mystery Behavior of parseInt() in JavaScript</a></h3><p>這篇文章也很好玩，一般來說 JS 的 parseInt 如果輸入小於 1 的數（像是 <code>parseInt(0.5)</code>），那就會回傳 0，但作者卻意外發現 <code>parseInt(0.0000005)</code> 會回傳 5！究竟是為什麼呢？</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="CNCF-Technology-Radar-Highlights-HashiCorp-Vault’s-Broad-Multi-Cloud-Adoption"><a href="#CNCF-Technology-Radar-Highlights-HashiCorp-Vault’s-Broad-Multi-Cloud-Adoption" class="headerlink" title="CNCF Technology Radar Highlights HashiCorp Vault’s Broad Multi-Cloud Adoption"></a><a href="https://www.hashicorp.com/blog/cncf-technology-radar-highlights-vault-broad-multi-cloud-adoption" target="_blank" rel="noopener">CNCF Technology Radar Highlights HashiCorp Vault’s Broad Multi-Cloud Adoption</a></h3><p>Secret Management 在這兩三年來逐漸被受到重視，在最近 CNCF 所發佈的 Technology Radar 裡便提到 HashiCorp Vault 是目前最被廣泛且推薦使用的解決方案，而且他跟 K8s 的整合方式也越來越多元，除了 1) 可以整合 <a href="https://www.vaultproject.io/docs/auth/kubernetes" target="_blank" rel="noopener">K8s Authentication</a> 直接存取之外，2) 也可以透過 <a href="https://www.hashicorp.com/blog/injecting-vault-secrets-into-kubernetes-pods-via-a-sidecar" target="_blank" rel="noopener">SideCar 的方式</a>來 Inject Vault 存取的 Credentials，最近還宣佈可以透過 <a href="https://www.hashicorp.com/blog/retrieve-hashicorp-vault-secrets-with-kubernetes-csi" target="_blank" rel="noopener">Kubernetes CSI</a> 來存取，這麼多方便的整合方式，怪不得會成為目前 Secert Management 的第一把交椅</p><h3 id="5-must-read-books-for-DevOps-and-SRE"><a href="#5-must-read-books-for-DevOps-and-SRE" class="headerlink" title="5 must-read books for DevOps and SRE"></a><a href="https://www.learnsteps.com/5-must-read-books-for-devops-and-sre/" target="_blank" rel="noopener">5 must-read books for DevOps and SRE</a></h3><p>聽說是 DevOps 和 SRE 領域必讀的五本書籍，自己只有看過其中一兩本 (掩面而逃</p><ul><li><a href="https://www.amazon.in/gp/product/9352135245/" target="_blank" rel="noopener">Designing Data-Intensive Applications: The Big Ideas Behind Reliable, Scalable, and Maintainable Systems</a></li><li><a href="https://www.amazon.in/gp/product/1942788290/" target="_blank" rel="noopener">The Phoenix Project: A Novel about IT, DevOps, and Helping Your Business Win</a></li><li><a href="https://www.amazon.in/Computer-Networking-Top-Down-Kurose-James/dp/9332585490/" target="_blank" rel="noopener">Computer Networking | A Top-Down Approach</a></li><li><a href="https://www.amazon.in/gp/product/9332573905/" target="_blank" rel="noopener">Computer Systems: A Programmer’s Perspective</a></li><li><a href="https://www.amazon.in/gp/product/B01DCPXKZ6/" target="_blank" rel="noopener">Site Reliability Engineering: How Google Runs Production Systems</a></li></ul><h3 id="Introducing-Kubewarden-an-Open-Source-Policy-Engine"><a href="#Introducing-Kubewarden-an-Open-Source-Policy-Engine" class="headerlink" title="Introducing Kubewarden, an Open Source Policy Engine"></a><a href="https://community.suse.com/posts/introducing-kubewarden-an-open-source-policy-engine" target="_blank" rel="noopener">Introducing Kubewarden, an Open Source Policy Engine</a></h3><p>說到 Policy Engine 時，自己最先想到的是 Open Policy Agent，而最近有另外一套叫做 Kubewarden 的同等級解決方案也推了出來，它是特別針對 Kubernetes 而來 ，不免俗地也一樣透過 Admission Control 來達成 Policy as Code 的目的，樂見於這個領域有越來越多的競爭者，但也希望可以有越來越多現成的 Policy 可以直接套用XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 79 期 - 裁判:看我一眼？給你一個技術犯規！</title>
      <link href="/2021/05/04/79-technical-fault-is-for-you/"/>
      <url>/2021/05/04/79-technical-fault-is-for-you/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="學程式平台大比較-Udemy、Cousera、EDX、Youtube-超級比一比"><a href="#學程式平台大比較-Udemy、Cousera、EDX、Youtube-超級比一比" class="headerlink" title="學程式平台大比較 | Udemy、Cousera、EDX、Youtube 超級比一比"></a><a href="https://medium.com/starbugs/c7cb920a9c67" target="_blank" rel="noopener">學程式平台大比較 | Udemy、Cousera、EDX、Youtube 超級比一比</a></h3><p>今天來比較的是學程式的平台，想要「學程式」或是已經是軟體相關從業人員想要「更新自己技術能力」，通常我們會透過購買線上課程，合理分配自己的時間學習。<br>這次挑選的都是英文授課的平台，因為，軟體相關產業，例如：PM 產品經理、UI / UX 設計師或是最常見的軟體開發者，都是一個可以跨國的職業，那麼英文就是很重要的因素了 …</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CONTENT-AWARE-IMAGE-RESIZING-IN-JAVASCRIPT"><a href="#CONTENT-AWARE-IMAGE-RESIZING-IN-JAVASCRIPT" class="headerlink" title="CONTENT-AWARE IMAGE RESIZING IN JAVASCRIPT"></a><a href="https://trekhleb.dev/blog/2021/content-aware-image-resizing-in-javascript/" target="_blank" rel="noopener">CONTENT-AWARE IMAGE RESIZING IN JAVASCRIPT</a></h3><p>這篇文章太震撼我了，在看文章的時候都快忘記截稿當下是可憐的禮拜天晚上。作者在文章裡面解釋如何用演算法的 Dynamic Programming 實現 Seam Carving Algorithm，Seam Carving Algorithm 會去偵測圖片的內容，並且在調整圖片大小的時候裁掉相對不重要的區塊，文章裡不只有提供 Demo，還有完整的程式碼和解釋，不看看真的太可惜了！</p><h3 id="How-JavaScript-Works-🤷🏻‍"><a href="#How-JavaScript-Works-🤷🏻‍" class="headerlink" title="How JavaScript Works 🤷🏻‍"></a><a href="https://suprabhasupi.hashnode.dev/how-javascript-works" target="_blank" rel="noopener">How JavaScript Works 🤷🏻‍</a></h3><p>從運行原理中了解 JavaScript，從瀏覽器如何讀懂我們寫下的 JavaScript、JavaScript 執行的方式、內存的處理到 JavaScript 與瀏覽器的 Web API 運作方式。</p><h3 id="Using-the-PDF-Embed-API-with-Vue-js"><a href="#Using-the-PDF-Embed-API-with-Vue-js" class="headerlink" title="Using the PDF Embed API with Vue.js"></a><a href="https://www.raymondcamden.com/2021/02/17/using-the-pdf-embed-api-with-vuejs" target="_blank" rel="noopener">Using the PDF Embed API with Vue.js</a></h3><p>透過 Adobe 提供的 JavaScript API，就可以讓網頁變成簡單的 PDF 閱讀器，而作者在文章內提出一種將它導入 Vue.js 專案的方法。</p><h3 id="Solving-the-classic-Two-Sum-and-Three-Sum-Problem-in-JavaScript"><a href="#Solving-the-classic-Two-Sum-and-Three-Sum-Problem-in-JavaScript" class="headerlink" title="Solving the classic Two-Sum and Three-Sum Problem in JavaScript"></a><a href="https://paulrohan.medium.com/solving-the-classic-two-sum-and-three-sum-problem-in-javascript-7d5d1d47db03" target="_blank" rel="noopener">Solving the classic Two-Sum and Three-Sum Problem in JavaScript</a></h3><p>最近在練習演算法的時候有看到兩個經典的題目：Two Sum 以及 Three Sum，兩個其實都可以用暴力解解出來，但這篇文章使用了其他種方式讓整個時間複雜度降低，有興趣的讀者不妨也可以用這個方法來解決這兩種題目。</p><h3 id="Understanding-Currying-in-JavaScript"><a href="#Understanding-Currying-in-JavaScript" class="headerlink" title="Understanding Currying in JavaScript"></a><a href="https://blog.bitsrc.io/understanding-currying-in-javascript-ceb2188c339" target="_blank" rel="noopener">Understanding Currying in JavaScript</a></h3><p>Functional Programming 有一個非常重要的觀念叫：Curring，其實 JavaScript 本身有非常多的 method 都是用到 Currying 的觀念完成，這篇文章教大家了解 JavaScript 中的 Curring。</p><h3 id="Curry-and-Function-Composition"><a href="#Curry-and-Function-Composition" class="headerlink" title="Curry and Function Composition"></a><a href="https://medium.com/javascript-scene/curry-and-function-composition-2c208d774983" target="_blank" rel="noopener">Curry and Function Composition</a></h3><p>這篇文章動手舉例了非常多的 Currying 的例子，並告訴讀者為什麼 Currying Function 是非常好用的，雖然我覺得實務上真的很難達到所有的 Function 都 Currying 就是了😂</p><h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><h3 id="Faster-Python-with-Go-shared-objects"><a href="#Faster-Python-with-Go-shared-objects" class="headerlink" title="Faster Python with Go shared objects"></a><a href="https://blog.kchung.co/faster-python-with-go-shared-objects/" target="_blank" rel="noopener">Faster Python with Go shared objects</a></h3><p>嫌 Python 效能太差，但是又覺得編譯式語言寫起來很麻煩嗎？這篇文章教你怎麼把 Go 程式碼編譯成 Shared Objects 格式讓 Python 拿去用，如此一來就可以平常寫 Python，哪天遇到需要大量計算的效能瓶頸時就用 Go 來實作，實作完再包裝成 Python 的 function 就好了～</p><h3 id="time-rate-package"><a href="#time-rate-package" class="headerlink" title="time/rate package"></a><a href="https://pjchender.blogspot.com/2020/11/go-pkg-timerate-package.html" target="_blank" rel="noopener">time/rate package</a></h3><p>在 Go 裡面要開一個 Goroutine 非常簡單，但也因此衍伸出另一個問題 - 限流。譬如說你要發 HTTP 請求使用別人的 API，Go 可以輕易讓你做到每秒發上百個請求，但通常 API 都會有流量限制，所以你不可能真的同時把上百個請求發出去，否則一定會馬上被加進黑名單。</p><p>這時候就可以用 Go 內建的 time/rate 來做限流，不管是簡單的需求如「每秒最多發三個請求」，或是複雜的「每秒發起一個請求、同時最多有五個未完成的請求」都可以輕易做到哦～</p><h3 id="那些年我們追的-Goroutine-Pool"><a href="#那些年我們追的-Goroutine-Pool" class="headerlink" title="那些年我們追的 Goroutine Pool"></a><a href="https://medium.com/17media-tech/%E9%82%A3%E4%BA%9B%E5%B9%B4%E6%88%91%E5%80%91%E8%BF%BD%E7%9A%84-goroutine-pool-e8d211757ee" target="_blank" rel="noopener">那些年我們追的 Goroutine Pool</a></h3><p>雖然在 Go 裡面啟動、銷毀一個 goroutine 非常簡單快速，而且每個 goroutine 跟 thread 比起來也是非常輕量，但萬一 goroutine 的數量達到十萬甚至百萬時還是會造成效能問題。因此 17Live 團隊在遇到這問題時決定自己實作了一個 goroutine pool，而這篇文章中也講到了為什麼他們會遇到這個問題以及他們 goroutine pool 的架構，不長但很值得一讀的一篇文章</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Linux-File-System-Types-Explained-Which-One-Should-You-Use"><a href="#Linux-File-System-Types-Explained-Which-One-Should-You-Use" class="headerlink" title="Linux File System Types Explained, Which One Should You Use"></a><a href="https://linuxiac.com/linux-file-system-types-explained-which-one-should-you-use/" target="_blank" rel="noopener">Linux File System Types Explained, Which One Should You Use</a></h3><p>看完這篇文章才知道原來 Linux 支援這麼多種檔案系統，自己只對常用的 ext4 比較熟一點點，沒想到還有 XFS, Btrfs, ZFS 和 Resier4，文中詳細的介紹每一種檔案系統的功能和優勢，讓使用者可以針對自己的需求，選擇適合的檔案系統來使用</p><h3 id="Updating-Kubernetes-CA-certificates-the-hard-way"><a href="#Updating-Kubernetes-CA-certificates-the-hard-way" class="headerlink" title="Updating Kubernetes CA certificates the hard way"></a><a href="https://deezer.io/updating-kubernetes-ca-certificates-the-hard-way-f9518108791d" target="_blank" rel="noopener">Updating Kubernetes CA certificates the hard way</a></h3><p>在 2017 年時 Deezer 使用 Ansible 完成了架設 K8s 的工作，而其中內部使用到的 K8s CA Certificate 已經到了快要過期的時候了，而為什麼會拖到最後一刻，才想來做這件事情呢？因為更新 K8s 內部使用到的 CA Certificate 並不是個簡單的工作，所以 Deezer 想要找出一個可以線上更新，而且不影響使用者的方法，從一開始需要考量的要點一個一個談起，並且在途中順便整合了 HashiCorp Vault，最後總算成功完成任務，推薦給自架 K8s 的維運人員</p><h3 id="Introducing-git-xargs-an-open-source-tool-to-update-multiple-GitHub-repos"><a href="#Introducing-git-xargs-an-open-source-tool-to-update-multiple-GitHub-repos" class="headerlink" title="Introducing git-xargs: an open source tool to update multiple GitHub repos"></a><a href="https://blog.gruntwork.io/introducing-git-xargs-an-open-source-tool-to-update-multiple-github-repos-753f9f3675ec" target="_blank" rel="noopener">Introducing git-xargs: an open source tool to update multiple GitHub repos</a></h3><p>大家應該都有相當多的 Repository 需要管理，而且這些 Repository 當中其實會有一些同樣的檔案，例如 License 檔案, CI/CD Pipleline YAML 檔案…等，每次要修改這些檔案就會有點煩悶，所以 gruntwork 開源了一個 CLI 工具叫做 git-xargs，讓使用者使用它來同時修改多 Git Repository，進而增進工作效率，事半功倍</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 78 期 - 認命吧！有一好，就沒兩好！</title>
      <link href="/2021/04/27/78-k8s-multi-tenancy/"/>
      <url>/2021/04/27/78-k8s-multi-tenancy/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Multi-Tenancy-Kubernetes-Cluster-Part-1-認命吧！有一好，就沒兩好！"><a href="#Multi-Tenancy-Kubernetes-Cluster-Part-1-認命吧！有一好，就沒兩好！" class="headerlink" title="Multi-Tenancy Kubernetes Cluster Part 1: 認命吧！有一好，就沒兩好！"></a><a href="https://medium.com/starbugs/multi-tenancy-kubernetes-cluster-part-1-%E8%AA%8D%E5%91%BD%E5%90%A7-%E6%9C%89%E4%B8%80%E5%A5%BD-%E5%B0%B1%E6%B2%92%E5%85%A9%E5%A5%BD-3eddb75eeb4c" target="_blank" rel="noopener">Multi-Tenancy Kubernetes Cluster Part 1: 認命吧！有一好，就沒兩好！</a></h3><p>大家知道其實 Multi-Tenancy 還有分軟的 (Soft) 跟硬的 (Hard) 嗎？那 K8s 到底是哪一種呢？而現在大家為了安全性和可用性都會使用 Multi-Cluster 的做法，但也因此導致維運和管理成本節節上升，那有沒有什麼比較好的解決方案呢？就讓我們透過這篇文章，來了解目前 K8s 在 Multi-Tenancy 所遇到的問題和相對應的解決方案</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Javascript-非同步-amp-Event-Loop！10-分鐘輕鬆圖解學習！"><a href="#Javascript-非同步-amp-Event-Loop！10-分鐘輕鬆圖解學習！" class="headerlink" title="Javascript 非同步 &amp; Event Loop！10 分鐘輕鬆圖解學習！"></a><a href="https://chan-chan-dev.com/js/Async/async-sync-intro/2534378084/" target="_blank" rel="noopener">Javascript 非同步 &amp; Event Loop！10 分鐘輕鬆圖解學習！</a></h3><p>程式碼搭配簡潔的插圖把 JavaScript 的 Call Stack 和 Callback Queue 講解的很清楚，讀完後不只有了 Event loop 的概念，也理解了 Queue 和 Stack 的資料結構！</p><h3 id="What-is-JavaScript-Map"><a href="#What-is-JavaScript-Map" class="headerlink" title="What is JavaScript Map?"></a><a href="https://javascript.plainenglish.io/what-is-javascript-map-8172bc42265a" target="_blank" rel="noopener">What is JavaScript Map?</a></h3><p>在 JavaScript 中有許多開發者會直接把 Object 當作 Map 來使用，但是如果把 Object 當作 Map 還是會有一些潛在的缺點，例如 Object 總是會將 Key 轉換成 String。不過在 ES6 的時候 JavaScript 就引入了一種新的 Map，能讓 key 和 value 的對應更加容易！</p><h3 id="The-Best-Free-Resources-To-Learn-Web-Development"><a href="#The-Best-Free-Resources-To-Learn-Web-Development" class="headerlink" title="The Best Free Resources To Learn Web Development"></a><a href="https://hackernoon.com/the-best-free-resources-to-learn-web-development-0bo334x" target="_blank" rel="noopener">The Best Free Resources To Learn Web Development</a></h3><p>如果你是剛走入 Web 開發的初學者，你一定會對眾多複雜的技術感到不知所措，如果要購買線上課程又擔心自己會看不懂，以及錢錢不開心，而這篇文章列出許多對初學者學習 Web 友善的網站或是 Youtuber 頻道，重點是它們都是免費的！如果想要學程式順便熟悉英文，可以參考看看！ 🙌</p><h3 id="徹底搞懂Javascript閉包，柯里化，手寫代碼！"><a href="#徹底搞懂Javascript閉包，柯里化，手寫代碼！" class="headerlink" title="徹底搞懂Javascript閉包，柯里化，手寫代碼！"></a><a href="https://www.readfog.com/a/1631928679665864704?fbclid=IwAR05cBuC424-e-AfKsKtATftSgKUea4EYF8oHIJV5nj24xataysrqoenoKY" target="_blank" rel="noopener">徹底搞懂Javascript閉包，柯里化，手寫代碼！</a></h3><p>JavaScript 的閉包可以說是非常重要的觀念，透過閉包的特性我們可以輕鬆的保存 function 內部變數的值，也因為這樣的特性就可以輕鬆地達到 functional programming 內非常重要的 currying，這篇文章深入帶大家了解閉包以及科里化的流程。</p><h3 id="CSS3-Cubic-Bezier"><a href="#CSS3-Cubic-Bezier" class="headerlink" title="CSS3 Cubic Bezier"></a><a href="https://www.oxxostudio.tw/articles/201406/css-cubic-bezier.html" target="_blank" rel="noopener">CSS3 Cubic Bezier</a></h3><p>最近在研究 css animation 時發現想要讓元素可以忽快忽慢的移動到指定位置可以透過貝茲曲線(cubic bezier)的方式達成，這篇文章深入理解 css animation 是如何利用貝茲曲線達到這些移動效果。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Golang-for-Node-js-Developers"><a href="#Golang-for-Node-js-Developers" class="headerlink" title="Golang for Node.js Developers"></a><a href="https://github.com/miguelmota/golang-for-nodejs-developers" target="_blank" rel="noopener">Golang for Node.js Developers</a></h3><p>這個 repository 整理了一堆 Node.js 跟 Go 的範例程式碼，如果你已經會寫 JS 了想來學 Go，因為 Go 真的很簡單好學，看完這個 repo 的 README 應該就差不多會了XD</p><h3 id="Must-Bookmarks-to-become-good-in-Go"><a href="#Must-Bookmarks-to-become-good-in-Go" class="headerlink" title="Must-Bookmarks to become good in Go"></a><a href="https://dev.to/rubenwap/must-bookmarks-to-become-good-in-go-ln8" target="_blank" rel="noopener">Must-Bookmarks to become good in Go</a></h3><p>如果 Go 已經學到一定程度，想繼續深入的話這篇整理了很多學習資源，包括怎麼寫出高效率的程式、用好指標跟做 profiling 等等，應該夠看好幾個禮拜了XD</p><h3 id="Gotchas-in-the-Go-Network-Packages-Defaults"><a href="#Gotchas-in-the-Go-Network-Packages-Defaults" class="headerlink" title="Gotchas in the Go Network Packages Defaults"></a><a href="https://martin.baillie.id/wrote/gotchas-in-the-go-network-packages-defaults/" target="_blank" rel="noopener">Gotchas in the Go Network Packages Defaults</a></h3><p>Go 的 network package 有一些預設行為，如果不熟的話可能會不小心被雷到，像預設的 http request 是沒有 timeout 的、而且預設會開啟 keep alive。這篇文章把這些 Go 的預設行為整理起來，如果有一些奇怪的 bug 一直解不掉，不妨可以看看這篇</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Grafana-Loki-and-Tempo-will-be-relicensed-to-AGPLv3"><a href="#Grafana-Loki-and-Tempo-will-be-relicensed-to-AGPLv3" class="headerlink" title="Grafana, Loki, and Tempo will be relicensed to AGPLv3"></a><a href="https://grafana.com/blog/2021/04/20/grafana-loki-tempo-relicensing-to-agplv3/" target="_blank" rel="noopener">Grafana, Loki, and Tempo will be relicensed to AGPLv3</a></h3><p>這幾年因為 AWS 推出了很多使用者喜愛的開源軟體託管服務，因而讓社群這邊群情激憤，紛紛開始改變授權的 License，之前吵得最兇的為 <a href="https://www.elastic.co/pricing/faq/licensing" target="_blank" rel="noopener">Elastic</a>，然後 AWS 也順便把原來自己開源的 Open Distro for ElasticSearch 正名為 <a href="https://aws.amazon.com/blogs/opensource/introducing-opensearch/" target="_blank" rel="noopener">OpenSearch</a>；而隨著 <a href="https://www.infoq.com/news/2021/01/aws-grafana-prometheus/" target="_blank" rel="noopener">AWS 推出託管的 Prometheus 和 Grafana</a> 之後，Grafana Labs 也跳出來把 Grafana，Loki 和 Tempo 的 License 改成 AGPLv3，不知道未來 AWS 是不是又會搞個 OpenMetric 出來?!</p><h3 id="Airbnb-Deploys-125-000-Times-per-Year-with-Multicluster-Kubernetes"><a href="#Airbnb-Deploys-125-000-Times-per-Year-with-Multicluster-Kubernetes" class="headerlink" title="Airbnb Deploys 125,000+ Times per Year with Multicluster Kubernetes"></a><a href="https://www.altoros.com/blog/airbnb-deploys-125000-times-per-year-with-multicluster-kubernetes/" target="_blank" rel="noopener">Airbnb Deploys 125,000+ Times per Year with Multicluster Kubernetes</a></h3><p>Airbnb 在一開始時，小小的工程團隊構築了 Ruby on Rails 的單體服務，但是隨著公司規模越來越大，問題逐漸因為人員和程式模組上的相依性而發生，而且單體服務在橫向擴充上也不容易，所以他們開始進行改造，從使用 AWS EC2 轉型成 SOA (service-oriented architecture) 開始，然後再接著導入 MicroService，並且建立的 Code Repoistory 的模板，避免工程師重造輪子；後來當然不意外的使用的 K8s，在 2018 初時，他們的 Production Cluster 已經有將近 450 個節點，在 2018 底時，節點個數翻倍成 900 個，他們也開始擔心 Eted 是不是會撐不住，而且公司內節點數量一直翻倍再成長，所以他們後來開始往 Multi-Cluster 的方向前進，並且還做到多個 Cluster 間 Workload 的同步，感覺還滿精彩的，想要知道更詳細的內容也可以看他們在 <a href="https://www.youtube.com/watch?v=ay7NibpRAYU" target="_blank" rel="noopener">KubeCon 分享的影片</a></p><h3 id="Announcing-Pulumi-3-0"><a href="#Announcing-Pulumi-3-0" class="headerlink" title="Announcing Pulumi 3.0"></a><a href="https://www.pulumi.com/blog/pulumi-3-0/" target="_blank" rel="noopener">Announcing Pulumi 3.0</a></h3><p>Pulumi 在 IaC 領域裡雖然起步的比較晚，但是追趕的速度還滿快的，從一開始到現在都維持著每一年發布一個大版號更新，最近發布的 3.0 裡，提供了 Pulumi Automation API，讓開發者可以把 IaC 加到 Node.js, Python, Go 和  .NET 用以達成自動化；早期都是直接利用 Terraform 的 Provider 來做事情，現在有持續在構築自己的 Provider 生態圈，包含 Pulumi 原生的 Azure Providers (GA) 和 Google Cloud Provider (Preview)，很樂於見到 Pulumi 的蓬勃發展，畢竟有競爭才會有進步！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 77 期 - 解了一個 bug，還有千千萬萬個 bug</title>
      <link href="/2021/04/20/77-so-many-bugs-QQ/"/>
      <url>/2021/04/20/77-so-many-bugs-QQ/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="想更快算出費氏數列嗎？來看看矩陣快速冪吧！"><a href="#想更快算出費氏數列嗎？來看看矩陣快速冪吧！" class="headerlink" title="想更快算出費氏數列嗎？來看看矩陣快速冪吧！"></a><a href="https://medium.com/starbugs/find-nth-fibonacci-number-by-fast-doubling-6ac2857a7834" target="_blank" rel="noopener">想更快算出費氏數列嗎？來看看矩陣快速冪吧！</a></h3><p>大家好，我是 Larry。這週的專欄「想更快算出費氏數列嗎？來看看矩陣快速冪吧！」要跟大家介紹如何用矩陣乘法來計算費氏數列，並且用快速冪的技巧把他加速到 O(log(n))。</p><p>雖然矩陣乘法聽起來就很恐怖，不過我有畫了很多精美的圖來幫助理解，所以整體來說應該不會太難讀，也祝福大家都可以在學習演算法的過程中找到樂趣～</p><h2 id="演算法"><a href="#演算法" class="headerlink" title="演算法"></a>演算法</h2><h3 id="基礎電腦科學：演算法概要"><a href="#基礎電腦科學：演算法概要" class="headerlink" title="基礎電腦科學：演算法概要"></a><a href="https://blog.techbridge.cc/2019/03/01/computer-science-algorithm-introduction/" target="_blank" rel="noopener">基礎電腦科學：演算法概要</a></h3><p>剛開始在學習程式時很常聽到「演算法」這個名詞，但演算法到底是什麼呢？TechBridge 的這篇文章用很淺顯易懂的例子介紹了何謂「演算法」，以及必須要滿足哪些條件才可以叫做一個演算法，如果是剛開始學習寫程式的朋友們很推薦看看這一篇～</p><h3 id="從時間複雜度認識常見演算法"><a href="#從時間複雜度認識常見演算法" class="headerlink" title="從時間複雜度認識常見演算法"></a><a href="https://medium.com/appworks-school/%E5%88%9D%E5%AD%B8%E8%80%85%E5%AD%B8%E6%BC%94%E7%AE%97%E6%B3%95-%E5%BE%9E%E6%99%82%E9%96%93%E8%A4%87%E9%9B%9C%E5%BA%A6%E8%AA%8D%E8%AD%98%E5%B8%B8%E8%A6%8B%E6%BC%94%E7%AE%97%E6%B3%95-%E4%B8%80-b46fece65ba5" target="_blank" rel="noopener">從時間複雜度認識常見演算法</a></h3><p>初學演算法時常常會聽到有人說這個演算法的複雜度是 O(1)/O(n)/O(nlog(n))，那這個複雜度究竟代表什麼，各個複雜度又有什麼常見的演算法呢？這篇文章用了很多例子來講解各個複雜度究竟怎麼回事，想要更直觀的了解時間複雜度的話就看這篇了～</p><h3 id="Counting-Sort-amp-Radix-Sort"><a href="#Counting-Sort-amp-Radix-Sort" class="headerlink" title="Counting Sort &amp; Radix Sort"></a><a href="https://medium.com/nerd-for-tech/counting-sort-radix-sort-ccd9f77a00a2" target="_blank" rel="noopener">Counting Sort &amp; Radix Sort</a></h3><p>一般我們所說到的排序演算法如 BubbleSort/MergeSort/QuickSort 多半是「比較排序」，也就是要透過各個元素之間的比較大小來進行排序，而這類比較排序的最佳時間複雜度就是 O(nlog(n))。那除了比較排序之外其實還有另外一類「非比較排序」，也就是不需要進行元素間的比較就可以排出順序，雖然聽起來很神奇（不比較究竟要怎麼排XD），不過在特定條件之下確實是可以做到的哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-property，让不可能变可能"><a href="#CSS-property，让不可能变可能" class="headerlink" title="CSS @property，让不可能变可能"></a><a href="https://juejin.cn/post/6951201528543707150" target="_blank" rel="noopener">CSS @property，让不可能变可能</a></h3><p>CSS @property 是 CSS 最新的特性，它可以讓你先定義 property（例如顏色、長度等）並在之後做使用。而文章中也用一些例子解釋 CSS @property 和一般的自定義變數的差異在哪裡，以及有哪些之前無法實現的效果可以透過 CSS @property 解決。</p><h3 id="Toggle-dark-light-mode-by-clapping-your-hands"><a href="#Toggle-dark-light-mode-by-clapping-your-hands" class="headerlink" title="Toggle dark/light mode by clapping your hands"></a><a href="https://dev.to/devdevcharlie/toggle-dark-light-mode-by-clapping-your-hands-li7" target="_blank" rel="noopener">Toggle dark/light mode by clapping your hands</a></h3><p>使用 TensorFlow.js 開發一個 Chrome 擴充功能，讓網站可以辨識拍手的聲音去執行對應的動作！像是文章裡就是去切換網站的主題顏色，Demo 效果實在是太厲害，心裡想著找時間也來試試看好了！😂</p><h3 id="How-to-Build-a-Chess-Clock-with-JavaScript-and-setInterval"><a href="#How-to-Build-a-Chess-Clock-with-JavaScript-and-setInterval" class="headerlink" title="How to Build a Chess Clock with JavaScript and setInterval"></a><a href="https://www.freecodecamp.org/news/how-to-build-a-chess-clock-with-javascript-and-setinterval/" target="_blank" rel="noopener">How to Build a Chess Clock with JavaScript and setInterval</a></h3><p>利用 JavaScript 中的 setInterval 來製作在西洋棋中互相讀秒倒數的功能，來看看筆者是如何一步步建構整個應用程式的！</p><h3 id="当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？"><a href="#当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？" class="headerlink" title="当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？"></a><a href="https://juejin.cn/post/6899796711401586695" target="_blank" rel="noopener">当浏览器切换到其他标签页或者最小化时，你的js定时器还准时吗？</a></h3><p>這個議題真的太有趣了，當使用者沒有 focus 在頁面的時候 JS 的 <code>setInterval()</code> 或 <code>setTimeout()</code> 還會準時嗎？我一直以為會是準時的，沒想到瀏覽器為了效能會自動把定時器的時間拉長。</p><h3 id="ES2021-ES12-令人期待的新特性"><a href="#ES2021-ES12-令人期待的新特性" class="headerlink" title="ES2021-ES12 令人期待的新特性"></a><a href="https://www.readfog.com/a/1633008867120091136" target="_blank" rel="noopener">ES2021-ES12 令人期待的新特性</a></h3><p>轉眼間 ECMAScript 也要進入第 12 版了，透過這篇文章可以帶大家了解新的 ECMAScript 到底加入了哪些新的功能，想當年我開始寫的時候還是 ES5 呢！真的是時代的眼淚😂</p><h3 id="10-CSS-BORDER-ANIMATION-EXAMPLE"><a href="#10-CSS-BORDER-ANIMATION-EXAMPLE" class="headerlink" title="10+ CSS BORDER ANIMATION EXAMPLE"></a><a href="https://dev.to/mike37/10-css-border-animation-example-4jjf" target="_blank" rel="noopener">10+ CSS BORDER ANIMATION EXAMPLE</a></h3><p>隨著瀏覽器越來越進步，能用網頁實現的東西也越來越多，前端工程師也要開始學習一些動畫讓自己的網頁越來越炫砲，這篇文章介紹了 10 種讓 <code>border</code> 變得很炫炮的方式。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="KDash"><a href="#KDash" class="headerlink" title="KDash"></a><a href="https://github.com/kdash-rs/kdash" target="_blank" rel="noopener">KDash</a></h3><p>雖然 K8s 本身有 UI Dashboard 可以透過 Browser 來操控 K8s 的相關資源，也有 <a href="https://k8slens.dev/" target="_blank" rel="noopener">Lens</a> 這種 Desktop UI IDE，可是對於喜歡使用 Terminal 的人來說，其實更喜歡的是像 <a href="https://github.com/derailed/k9s" target="_blank" rel="noopener">K9s</a> 這種 Terminal UI 工具，大多數習慣於 Terminal 工作的開發維運人員應該都會安裝，而最近我發現有另外一套也是 K8s Managed Terminal UI 工具叫做 KDash，看起來感覺也是滿好用的，不過現在還在 Beta 前期開發階段，希望未來功能可以越來越完整，讓離不開 Terminal 的人多可以多一個選擇</p><h3 id="Managing-network-devices-with-Golang-using-Netrasp"><a href="#Managing-network-devices-with-Golang-using-Netrasp" class="headerlink" title="Managing network devices with Golang using Netrasp"></a><a href="https://networklore.com/hello-netrasp/" target="_blank" rel="noopener">Managing network devices with Golang using Netrasp</a></h3><p>在網路設備的世界裡，可以怎麼達成 Infrastructure as Code 呢？以前我知道 Ansible 有 <a href="https://docs.ansible.com/ansible/2.9/modules/list_of_network_modules.htmlv" target="_blank" rel="noopener">Network Module</a>，後來隨著 Terraform 的盛行，也有很多網路設備廠商開發對應的 Terraform Provider，這兩天看到有一個叫做 Netrasp 的 Golang Library 也可以達成一樣的事情，看了一下這篇介紹文章，發現真的跟寫程式沒什麼兩樣，假如本身就是 Golang 好手，而又有管理網路設備需求的話，就可以考慮看看這個工具</p><h3 id="Awesome-GHA-Snippets"><a href="#Awesome-GHA-Snippets" class="headerlink" title="Awesome GHA Snippets"></a><a href="https://github.com/yengoteam/awesome-gha-snippets" target="_blank" rel="noopener">Awesome GHA Snippets</a></h3><p>早年大家對於 CI/CD Framework 的印象都停留在像 Jenkins 那種獨立於 Version Controler Service 的做法，但近年來隨著 GitLab CI/CD 的流行，以及 GitHub Action 的推出，大家也越來越習慣這樣的做法，畢竟如此一來可以少掉整合獨立系統所會遇到的一堆問題，使用起來也直覺很多，而這個 Repository 把常用的 GitHub Action 設定檔整理再一起，讓有需要撰寫的人可以直接拿來複製貼上稍微修改一下就可以使用！感謝這些超級佛心的社群熱血人士</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@LarryLu</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 76 期 - 自己挖的洞自己填</title>
      <link href="/2021/04/13/76-gatsby-comment-github-issue/"/>
      <url>/2021/04/13/76-gatsby-comment-github-issue/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Gatsby-用-utterances-替-Gatsby-的-Blog-網站申裝-GitHub-Issue-留言功能"><a href="#Gatsby-用-utterances-替-Gatsby-的-Blog-網站申裝-GitHub-Issue-留言功能" class="headerlink" title="Gatsby | 用 utterances 替 Gatsby 的 Blog 網站申裝 GitHub Issue 留言功能"></a><a href="https://medium.com/starbugs/gatsby-%E7%94%A8-utterances-%E6%9B%BF-gatsby-%E7%9A%84-blog-%E7%B6%B2%E7%AB%99%E7%94%B3%E8%A3%9D-github-issue-%E7%95%99%E8%A8%80%E5%8A%9F%E8%83%BD-e8593318e5a3" target="_blank" rel="noopener">Gatsby | 用 utterances 替 Gatsby 的 Blog 網站申裝 GitHub Issue 留言功能</a></h3><p>Hi！大家好，我是神 Q 超人！忘記是在去年還是前年，我曾經分享過如何使用 Gatsby 打造自己的 Blog（在這裡），可以在上面寫寫文章發佈分享。但我有個想完成的小 feature 被遺失在那篇文章，一直沒有去達成，<strong>那就是所有的文章都少了留言的功能！</strong> 自己挖的洞只好自己填起來，那現在就來分享一下該怎麼在 Gatsby 中加上留言功能吧！ 🙌</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Insert-JavaScript-Into-HTML-Script-Tag-In-JavaScript"><a href="#Insert-JavaScript-Into-HTML-Script-Tag-In-JavaScript" class="headerlink" title="Insert JavaScript Into HTML - Script Tag In JavaScript"></a><a href="https://cloudaffle.com/post/insert-javascript-in-html" target="_blank" rel="noopener">Insert JavaScript Into HTML - Script Tag In JavaScript</a></h3><p>雖然隨著前端 frameworks 的興起，現在的開發者普遍都會使用 webpack 之類的打包工具，再透過打包網站需要用到的套件，比較碰不到一直寫 script 標籤一直爽的狀況，這也讓我們與 script 標籤慢慢變得陌生，而這篇文章介紹了 script 標籤的各個屬性，大家可以瞭解看看！</p><h3 id="JavaScript-Switch-Statement-–-With-JS-Switch-Case-Example-Code"><a href="#JavaScript-Switch-Statement-–-With-JS-Switch-Case-Example-Code" class="headerlink" title="JavaScript Switch Statement – With JS Switch Case Example Code"></a><a href="https://www.freecodecamp.org/news/javascript-switch-statement-with-js-switch-case-example-code/" target="_blank" rel="noopener">JavaScript Switch Statement – With JS Switch Case Example Code</a></h3><p>介紹 switch 的基本用法和使用時需要注意的事情，也在最後比較了 switch 和 if…else 兩者的不同和使用情境！</p><h3 id="5-JavaSript-GitHub-Repositories-for-Interview-Prep-📝"><a href="#5-JavaSript-GitHub-Repositories-for-Interview-Prep-📝" class="headerlink" title="5 JavaSript GitHub Repositories for Interview Prep!📝"></a><a href="https://dev.to/prnvbirajdar/5-javasript-github-repositories-for-interview-prep-306h" target="_blank" rel="noopener">5 JavaSript GitHub Repositories for Interview Prep!📝</a></h3><p>雖然標題是說給準備面試的 5 個 Repositories 啦（看來外國人也習慣面試前抱佛腳 😂），但推薦的每個 Respositories 都涵蓋了相當的質量，除了知名的 You Don’t Know JS 外，其他的 Respositories 也充分的講解了有關 JavaScript 的基礎和底層知識，還有用 JavaScript 來解釋常見的資料結構及演算法，滿山滿谷的大秘寶大家衝啊！ 🔥</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="What’s-new-in-SocketIO-4"><a href="#What’s-new-in-SocketIO-4" class="headerlink" title="What’s new in SocketIO 4?"></a><a href="https://ably.com/blog/whats-new-in-socketio-4" target="_blank" rel="noopener">What’s new in SocketIO 4?</a></h3><p>不久前 socket.io 發佈了新版本 v4，雖然沒有太大的變化，不過還是有一些小小的改進，有在用 socket.io 的朋友們趕快參考他的 migration guide 升級上去吧～</p><h3 id="17LIVE-Next-Gen-Database-選型分析"><a href="#17LIVE-Next-Gen-Database-選型分析" class="headerlink" title="17LIVE Next-Gen Database 選型分析"></a><a href="https://medium.com/17media-tech/17live-next-gen-database-%E9%81%B8%E5%9E%8B%E5%88%86%E6%9E%90-7a72b976cd2b" target="_blank" rel="noopener">17LIVE Next-Gen Database 選型分析</a></h3><p>俗話說「DB 選得好，開發沒煩惱」，要選擇一個資料庫系統除了要評估效能之外，還要仔細考慮開發時的需求（需不需要 join、強一致性等等），今天就一起來看看 17LIVE 在做資料庫選型時的心路歷程吧</p><h3 id="当浏览器切换到其他标签页或者最小化时，你的-js-定时器还准时吗？"><a href="#当浏览器切换到其他标签页或者最小化时，你的-js-定时器还准时吗？" class="headerlink" title="当浏览器切换到其他标签页或者最小化时，你的 js 定时器还准时吗？"></a><a href="https://juejin.cn/post/6899796711401586695" target="_blank" rel="noopener">当浏览器切换到其他标签页或者最小化时，你的 js 定时器还准时吗？</a></h3><p>說真的我從來沒去想過切換瀏覽器分頁時 setInterval 跟 setTimeout 會不會準的問題 XD，感覺頻率應該不能太高否則會影響效能，而這篇文章有實際到各個瀏覽器去測試，文章不長推薦大家都可以讀一讀增廣見聞</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-we-use-metamonitoring-Prometheus-servers-to-monitor-all-other-Prometheus-servers-at-Grafana-Labs"><a href="#How-we-use-metamonitoring-Prometheus-servers-to-monitor-all-other-Prometheus-servers-at-Grafana-Labs" class="headerlink" title="How we use metamonitoring Prometheus servers to monitor all other Prometheus servers at Grafana Labs"></a><a href="https://grafana.com/blog/2021/04/08/how-we-use-metamonitoring-prometheus-servers-to-monitor-all-other-prometheus-servers-at-grafana-labs/" target="_blank" rel="noopener">How we use metamonitoring Prometheus servers to monitor all other Prometheus servers at Grafana Labs</a></h3><p>大家都知道要幫線上應用服務設定好監控，這樣一來應用服務出問題的時候就可以馬上知道，不過大家有沒有被人問過一個問題，就是那誰要幫你監控你的監控服務？！(好繞口令XD) 我自己就曾經被客戶問過這個問題XD Grafana Lab 稱這樣的概念叫做 metamonitoring，而這篇文章就是想要解釋他們如何透過少數幾個分散在各處地理區域的 metamonitoring Prometheus 來監控所有其他的 Prometheus！</p><h3 id="Argo-Workflows-3-0-Released"><a href="#Argo-Workflows-3-0-Released" class="headerlink" title="Argo Workflows 3.0 Released!"></a><a href="https://www.cncf.io/blog/2021/04/02/argo-workflows-3-0-released/" target="_blank" rel="noopener">Argo Workflows 3.0 Released!</a></h3><p>Argo 家族中的專案 Argo Workflows 最近發佈了 3.0，底下列出三項重點更新，其他的可以參考官方更詳細的 <a href="https://blog.argoproj.io/argo-workflows-v3-0-4d0b69f15a6e" target="_blank" rel="noopener">Release Note</a></p><ul><li>特別強化 UI 並且讓他更簡易使用 (話說 ArgoCD 的 UI 真的滿厲害的)</li><li>讓 Controller 達到 High-Availability，減少 Down Time 的發生</li><li>在 Artifact 方面，讓使用者可以設定 Namespace 的預設 Repository，而且以後只需要在 Manifests 中設定 Key，非 Key 的部分則會從 Repository 中獲得 (翻成中文好怪XD)</li></ul><h3 id="Fast-Docker"><a href="#Fast-Docker" class="headerlink" title="Fast-Docker"></a><a href="https://github.com/omerbsezer/Fast-Docker" target="_blank" rel="noopener">Fast-Docker</a></h3><p>最後來介紹一個叫做 Fast-Docker 的 GitHub Repository，裡面涵蓋了所有 Docker 的細節 (Dockerfile, Image, Container, Commands, Volumes, Docker-Compose, Networks, Swarm, Stack)，包含了可能的範例和使用情境，感覺很適合新手上路！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 75 期 - 連假結束，收心上班去。</title>
      <link href="/2021/04/06/75-vacation-is-over/"/>
      <url>/2021/04/06/75-vacation-is-over/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Git-Blame-出我的名字？等一等-我是冤枉的-feat-版本控制-Git-簡介"><a href="#Git-Blame-出我的名字？等一等-我是冤枉的-feat-版本控制-Git-簡介" class="headerlink" title="Git Blame 出我的名字？等一等 我是冤枉的 feat. 版本控制 Git 簡介"></a><a href="https://medium.com/starbugs/ec2c5b8fee69" target="_blank" rel="noopener">Git Blame 出我的名字？等一等 我是冤枉的 feat. 版本控制 Git 簡介</a></h3><p>是不是有發生過，明明想要整理一下程式碼風格，卻讓協作者用 <code>git blame</code> 指令看看是誰開發的，發現程式碼上面的名字是你，但其實你將程式碼稍作整理。並非原始的開發者，發生這種情形，請把這篇貼給協作者看，釐清究竟問題的產生，是怎麼造成的。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Mutability-Vs-Immutability-In-JavaScript"><a href="#Mutability-Vs-Immutability-In-JavaScript" class="headerlink" title="Mutability Vs Immutability In JavaScript"></a><a href="https://cloudaffle.com/post/mutability-vs-immutability-javascript" target="_blank" rel="noopener">Mutability Vs Immutability In JavaScript</a></h3><p>從 JavaScript 的 Primitive Types 和 Reference Types 開始，循序漸進說到 Mutability 與 Immutability 的差異，如果沒搞懂這些基本，那在 JavaScript 的執行中可能會寫出許多奇妙的 Side Effect。</p><h3 id="我常用的设计模式"><a href="#我常用的设计模式" class="headerlink" title="我常用的设计模式"></a><a href="https://juejin.cn/post/6947575368282800136#heading-10" target="_blank" rel="noopener">我常用的设计模式</a></h3><p>在學習程式的路上常常會聽到設計模式，但每次學了都不曉得可以用在哪裡，這篇文章介紹了幾個平常常見的設計模式和實作方法，讓各位可以更了解設計模式，別再說設計模式只是物件導向的專利啦！ 😂</p><h3 id="Every-CSS-Background-Property-Illustrated-and-Explained-with-Code-Examples-🎖️"><a href="#Every-CSS-Background-Property-Illustrated-and-Explained-with-Code-Examples-🎖️" class="headerlink" title="Every CSS Background Property Illustrated and Explained with Code Examples 🎖️"></a><a href="https://www.freecodecamp.org/news/learn-css-background-properties/" target="_blank" rel="noopener">Every CSS Background Property Illustrated and Explained with Code Examples 🎖️</a></h3><p>這篇真是關於 CSS 的 Background 屬性一口氣全說完（要很大的一口氣 😂）！</p><h3 id="【無障礙網頁祕技】介面設計大補丸"><a href="#【無障礙網頁祕技】介面設計大補丸" class="headerlink" title="【無障礙網頁祕技】介面設計大補丸"></a><a href="https://medium.com/as-a-product-designer/%E7%84%A1%E9%9A%9C%E7%A4%99%E7%B6%B2%E9%A0%81%E7%A5%95%E6%8A%80-%E4%BB%8B%E9%9D%A2%E8%A8%AD%E8%A8%88%E5%A4%A7%E8%A3%9C%E4%B8%B8-9640dc1fde2b" target="_blank" rel="noopener">【無障礙網頁祕技】介面設計大補丸</a></h3><p>近期無障礙網頁設計越來越多人在討論，因為網頁其實非常不利於身障者操作，即便已經用了各種語義化標籤也沒辦法達到更好的使用者體驗，因此無障礙網頁設計漸漸有了雛型出來，這篇文章解釋了如何完美設計出一個無障礙網頁，有興趣的讀者不妨收藏起來閱讀。</p><h3 id="React-設計模式-—-複合元件-Compound-Component"><a href="#React-設計模式-—-複合元件-Compound-Component" class="headerlink" title="React 設計模式 — 複合元件 ( Compound Component )"></a><a href="https://moojing.medium.com/react-%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E8%A4%87%E5%90%88%E5%85%83%E4%BB%B6-compound-component-9e7420e55327" target="_blank" rel="noopener">React 設計模式 — 複合元件 ( Compound Component )</a></h3><p>在 React 中可以透過 <code>props.children</code> 的方式來自身的元件變得更彈性，透過 <code>children</code> 的傳遞可以讓元件與元件之間的耦合性降低，這篇文章介紹了如何使用這種方式來創造出耦合性低的複合式元件。</p><h3 id="How-To-Apply-SOLID-Principles-To-Clean-Your-Code-in-React"><a href="#How-To-Apply-SOLID-Principles-To-Clean-Your-Code-in-React" class="headerlink" title="How To Apply SOLID Principles To Clean Your Code in React"></a><a href="https://betterprogramming.pub/how-to-apply-solid-principles-to-clean-your-code-in-react-cdfd5e0a9cea" target="_blank" rel="noopener">How To Apply SOLID Principles To Clean Your Code in React</a></h3><p>SOLID 是一種非常多人使用的設計模式，透過低耦合高內聚的方式來達到完美的 clean code 效果，但要如何在 React 中實現呢？這篇文章就在教讀者如何將 SOLID 設計模式導入 React 中。</p><h2 id="資料分析"><a href="#資料分析" class="headerlink" title="資料分析"></a>資料分析</h2><h3 id="資料前處理必須要做的事-資料清理與型態調整"><a href="#資料前處理必須要做的事-資料清理與型態調整" class="headerlink" title="資料前處理必須要做的事 - 資料清理與型態調整"></a><a href="https://blog.v123582.tw/2020/12/04/%E8%B3%87%E6%96%99%E5%89%8D%E8%99%95%E7%90%86%E5%BF%85%E9%A0%88%E8%A6%81%E5%81%9A%E7%9A%84%E4%BA%8B-%E8%B3%87%E6%96%99%E6%B8%85%E7%90%86%E8%88%87%E5%9E%8B%E6%85%8B%E8%AA%BF%E6%95%B4/" target="_blank" rel="noopener">資料前處理必須要做的事 - 資料清理與型態調整</a></h3><p>資料分析並不只是把資料抓一抓、程式跑一跑就可以得到結果。因為很多網路上爬來、下載到的資料都會有缺失，或是有一些值明顯不合理，這樣的資料會導致模型無法正確運作，所以在真正分析之前都會需要做資料清洗，才能確保資料是可用的</p><h3 id="簡明-Python-Pandas-入門教學"><a href="#簡明-Python-Pandas-入門教學" class="headerlink" title="簡明 Python Pandas 入門教學"></a><a href="https://blog.techbridge.cc/2020/09/21/python-pandas-zen-tutorial/" target="_blank" rel="noopener">簡明 Python Pandas 入門教學</a></h3><p>說到用 Python 做資料分析就不得不提 pandas 這個 library。pandas 提供的 DataFrame 就像 Excel 的試算表一樣，可以讓你很方便的讀取、搜尋、儲存資料，而且因為底層是用 numpy 實作的所以效能也很不錯，是做資料分析必備的工具之一</p><h3 id="資料視覺化-Matplotlib-Seaborn-Plotly"><a href="#資料視覺化-Matplotlib-Seaborn-Plotly" class="headerlink" title="資料視覺化(Matplotlib, Seaborn, Plotly)"></a><a href="https://medium.com/jameslearningnote/%E8%B3%87%E6%96%99%E5%88%86%E6%9E%90-%E6%A9%9F%E5%99%A8%E5%AD%B8%E7%BF%92-%E7%AC%AC2-5%E8%AC%9B-%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96-matplotlib-seaborn-plotly-75cd353d6d3f" target="_blank" rel="noopener">資料視覺化(Matplotlib, Seaborn, Plotly)</a></h3><p>做完資料分析之後，最後一步就是把資料視覺化，畢竟大家都喜歡看漂亮的圖。但 Python 用來做視覺化的 lib 就有好幾套，一起來看看他們各有什麼優缺點吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="K8s-1-21-下週就要發布嘍"><a href="#K8s-1-21-下週就要發布嘍" class="headerlink" title="K8s 1.21 下週就要發布嘍!"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-21/" target="_blank" rel="noopener">K8s 1.21 下週就要發布嘍!</a></h3><p>這版多個幾個新功能，例如…<br>☸ 在 Kubelet 的生態系裡多了 Memory Manager<br>☸ Pod affinity/anti-affinity 新增了 namespaceSelector<br>☸ Scheduler 分配 Pod 時會先查看 Nominated Nodes<br>☸ 當 Deployment 在做 Scale Down 時候可以選擇 Pod 被砍掉的順序<br>☸ 平行化 Job 的 Pod 可以加上 Completion Index<br>☸ Network Policy 可以在單一條 Rule 設定 Port 的範圍</p><p>但同時也有個不幸的消息，從 1.8 開始被引進的 Pod Security Policy 宣布要在被淘汰掉，預計在 1.25 時完全移除掉 T_T</p><h3 id="Infrastructure-as-Code-也可以測試嗎？！"><a href="#Infrastructure-as-Code-也可以測試嗎？！" class="headerlink" title="Infrastructure as Code 也可以測試嗎？！"></a><a href="https://github.com/hashicorp/terraform/pull/27873" target="_blank" rel="noopener">Infrastructure as Code 也可以測試嗎？！</a></h3><p>其實是可以的啦～ 除了行之有年的 <strong>Terratest</strong>,  <strong>Kitchen</strong> 和 <strong>Server Spec</strong> 之類的工具之外，最近在看 <strong>Terraform</strong> 0.15 Change Log 的時候，發現以後會多一個 CLI Command 叫做 Terraform Test，執行他的話就會對 tests 這個資料夾內的 Terraform 程式碼執行 plan &amp; apply，到時候再來試用看看 = =+ 對於不寫 Golang 的人應該是個不錯的選擇</p><h3 id="Kubecost-raises-5-5-million-to-help-teams-monitor-and-reduce-their-Kubernetes-spend"><a href="#Kubecost-raises-5-5-million-to-help-teams-monitor-and-reduce-their-Kubernetes-spend" class="headerlink" title="Kubecost raises $5.5 million to help teams monitor and reduce their Kubernetes spend"></a><a href="http://blog.kubecost.com/blog/announcing-kubecost-first-round/" target="_blank" rel="noopener">Kubecost raises $5.5 million to help teams monitor and reduce their Kubernetes spend</a></h3><p>大家還記得在 2019 年 Kubecost 推出了能夠讓開發者們將 K8s 環境中資源利用與真實花費給視覺化呈現的開源專案嗎？！如今他們已經成長為一個團隊，並且獲得第一輪 550 萬美金的投資，而在這兩年間已經有數以千計的公司使用他們的服務，統計起來大家差不多在 K8s 上面花了超過十億美金，而有了這筆投資之後將可以讓團隊開始提供監控和最佳化 K8s 花費的服務，想要瞭解更多的話，可以到他們的<a href="https://www.kubecost.com/" target="_blank" rel="noopener"><strong>官方網頁</strong></a>參觀</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 74 期 - 有個 Bug 卡了和 Ever Given 一樣久，但還好損失的金額沒有一樣多</title>
      <link href="/2021/03/30/74-I-have-a-difficult-bug-as-same-as-ever-given/"/>
      <url>/2021/03/30/74-I-have-a-difficult-bug-as-same-as-ever-given/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來征服資料結構與演算法吧-一直解-Linked-List-一直爽-feat-JavaScript"><a href="#來征服資料結構與演算法吧-一直解-Linked-List-一直爽-feat-JavaScript" class="headerlink" title="來征服資料結構與演算法吧 | 一直解 Linked List 一直爽 feat. JavaScript"></a><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E4%B8%80%E7%9B%B4%E8%A7%A3-linked-list-%E4%B8%80%E7%9B%B4%E7%88%BD-feat-javascript-310e42bf555e" target="_blank" rel="noopener">來征服資料結構與演算法吧 | 一直解 Linked List 一直爽 feat. JavaScript</a></h3><p>Hi！大家好，我是神 Q 超人！在同一個系列中之前有分享有 <a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E9%97%9C%E6%96%BC-linked-list-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9-feat-javascript-ff0ed89c326d" target="_blank" rel="noopener">關於 Linked List 這數據結構的基本用法</a>，也有用兩個在 Leetcode 上的題目讓大家練習操作，而打鐵要趁熱（其實也過了一個月了 😂）！這一篇會把我覺得一些有趣的題目都收錄，搭配上之前提過的基本概念來解析，讓大家可以更理解 Linked List，也順便給自己複習一下。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="函数式编程的那些事"><a href="#函数式编程的那些事" class="headerlink" title="函数式编程的那些事"></a><a href="https://juejin.cn/post/6944872588019499044" target="_blank" rel="noopener">函数式编程的那些事</a></h3><p>使用簡單的例子帶入函式編程的主題，一開始先是比較了函式編程和物件導向的差異，接著帶入在 JavaScript 的函式執行原理，最後又總結了幾個函式編程內的常見方法，文章內知識量相當豐富！</p><h3 id="Icon-systems-for-the-web-an-in-depth-guide"><a href="#Icon-systems-for-the-web-an-in-depth-guide" class="headerlink" title="Icon systems for the web - an in-depth guide"></a><a href="https://codeadrian.hashnode.dev/icon-systems-for-the-web-an-in-depth-guide" target="_blank" rel="noopener">Icon systems for the web - an in-depth guide</a></h3><p>Icon 在網頁上可以說是不可或缺的元素，但你知道 Icon 呈現在網頁上有哪幾種實現方式嗎？比較常見的可能有 SVG 或是 Icon font，那這些不同的方式又有哪些優缺點呢？看看作者怎麼說吧！</p><h3 id="CSS-Position-Property-Explained"><a href="#CSS-Position-Property-Explained" class="headerlink" title="CSS Position Property Explained!"></a><a href="https://dev.to/surajondev/css-position-property-explained-3eg7" target="_blank" rel="noopener">CSS Position Property Explained!</a></h3><p>用簡單的動畫解釋 CSS Position 的每種設置的效果，讓你之後不用再選來選去，還可能搞不清楚它們之間的差別！</p><h3 id="淺談-Tailwind-CSS"><a href="#淺談-Tailwind-CSS" class="headerlink" title="淺談 Tailwind CSS"></a><a href="https://medium.com/@hayato.chang/%E6%B7%BA%E8%AB%87-tailwind-css-4153d86eb661" target="_blank" rel="noopener">淺談 Tailwind CSS</a></h3><p><a href="https://tailwindcss.com/" target="_blank" rel="noopener">Tailwind CSS</a>算是近期蠻熱門 CSS 框架，用了這個框架的好處是可以讓你的元件不用一直去寫 CSS 檔來覆蓋原先的樣式，而且也可以客製化每個元件的表現型態，但缺點就是你的元件會有非常長的 className 就是了XD</p><h3 id="你真的懂-Event-Loop-嗎"><a href="#你真的懂-Event-Loop-嗎" class="headerlink" title="你真的懂 Event Loop 嗎"></a><a href="https://johnnywang1994.github.io/book/articles/js/event-loop.html#%E5%9F%B7%E8%A1%8C%E7%92%B0%E5%A2%83-runtime-concept" target="_blank" rel="noopener">你真的懂 Event Loop 嗎</a></h3><p>這篇文章完整的解釋了整個 JavaScript 的非同步運作流程，讓你可以更了解 JavaScript 的非同步世界，很適合給剛接觸 JavaScript 的讀者閱讀。</p><h3 id="The-Ultimate-Guide-To-Writing-Self-Documenting-Code"><a href="#The-Ultimate-Guide-To-Writing-Self-Documenting-Code" class="headerlink" title="The Ultimate Guide To Writing Self-Documenting Code"></a><a href="https://javascript.plainenglish.io/the-ultimate-guide-to-writing-self-documenting-code-998ea9a38bd3" target="_blank" rel="noopener">The Ultimate Guide To Writing Self-Documenting Code</a></h3><p>命名一直是寫程式非常有趣的探討話題，要如何命名才能讓後人可以直接搞懂這個 function 或是這個 variable 的功能真的是一門很大的學問，透過這篇文章可以更幫助讀者進行變數以及函式的命名。</p><h2 id="Node-JS"><a href="#Node-JS" class="headerlink" title="Node.JS"></a>Node.JS</h2><h3 id="Why-I-Prefer-Makefiles-Over-package-json-Scripts"><a href="#Why-I-Prefer-Makefiles-Over-package-json-Scripts" class="headerlink" title="Why I Prefer Makefiles Over package.json Scripts"></a><a href="https://spin.atomicobject.com/2021/03/22/makefiles-vs-package-json-scripts/" target="_blank" rel="noopener">Why I Prefer Makefiles Over package.json Scripts</a></h3><p>雖然 npm 允許開發者在 package.json 裡面寫一些腳本，但如果腳本包含多個指令就要一直用 &amp;&amp; 接下去，若指令之間有相依性那更是難以管理，所以這篇文章的作者認為某些時候可以用 Makefile 來取代 npm script，不管是在開發還是維護上都會比較簡單。</p><h3 id="How-To-Secure-Node-js-Applications-with-a-Content-Security-Policy"><a href="#How-To-Secure-Node-js-Applications-with-a-Content-Security-Policy" class="headerlink" title="How To Secure Node.js Applications with a Content Security Policy"></a><a href="https://www.digitalocean.com/community/tutorials/how-to-secure-node-js-applications-with-a-content-security-policy" target="_blank" rel="noopener">How To Secure Node.js Applications with a Content Security Policy</a></h3><p>Content Security Policy(CSP) 幾乎是現在網站必備的安全性 Header 了，除了可以預防 XSS 之外，還可以避免網站不小心載入一些奇怪的資源（之前很多網站被惡搞都是被載入外部 CSS），對 CSP 還不熟悉的話真的要快來看看了～</p><h3 id="The-4-Types-of-Memory-Leaks-in-Node-js-and-How-to-Avoid-Them"><a href="#The-4-Types-of-Memory-Leaks-in-Node-js-and-How-to-Avoid-Them" class="headerlink" title="The 4 Types of Memory Leaks in Node.js and How to Avoid Them"></a><a href="https://betterprogramming.pub/the-4-types-of-memory-leaks-in-node-js-and-how-to-avoid-them-with-the-help-of-clinic-js-part-1-3f0c0afda268" target="_blank" rel="noopener">The 4 Types of Memory Leaks in Node.js and How to Avoid Them</a></h3><p>這篇文章說明了四種在 Node.JS 中最容易發生 memory leak 的情況，而且也介紹了 Clinic.js 跟 autocannon 兩個工具用來做 loadtest 及分析，如果懷疑自己的寫的程式有 memory leak 但不知道怎麼進行測試，看完這篇應該就有點概念了～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="The-Evolution-of-Distributed-Systems-on-Kubernetes"><a href="#The-Evolution-of-Distributed-Systems-on-Kubernetes" class="headerlink" title="The Evolution of Distributed Systems on Kubernetes"></a><a href="https://www.infoq.com/articles/distributed-systems-kubernetes/" target="_blank" rel="noopener">The Evolution of Distributed Systems on Kubernetes</a></h3><p>在 K8s 上演化的分散式系統，這個標題滿抽象的XD 文章內容則是先點出分散式應用程式應該要具備的必要元素：Lifecycle Management, Advanced Networking, Resource Binding, Stateful Abstraction，接著指出傳統 Monolithic 架構為什麼無法滿足這些需求，並且說明 Cloud-Native 下的 MicroService 架構如何滿足這些需求，所以 K8s 現在才會這麼地火紅，整篇看完有點像是考試在寫申論題一樣XD 但對於很多功能為什麼會存在可以有更深入與全面的了解</p><h3 id="How-to-build-an-elastic-search-cluster-for-production"><a href="#How-to-build-an-elastic-search-cluster-for-production" class="headerlink" title="How to build an elastic search cluster for production?"></a><a href="https://www.cncf.io/blog/2021/03/25/how-to-build-an-elastic-search-cluster-for-production/" target="_blank" rel="noopener">How to build an elastic search cluster for production?</a></h3><p>此篇如何在 Production 環境架設 ElasticSearch 的文章來自於 Padok 的 SRE，一開始先從 ES 的各種不同節點介紹起，解釋為什麼需要 N / 2 + 1 個 Master 節點，接著詳述要如何規劃機器的記憶體，硬碟與 CPU 資源，最後再提到 Sharding 對於效能的影響，有需要在 Production 環境自己架設 ES 的人建議可以參考這篇文章的一些經驗談</p><h3 id="Incident-Metrics-in-SRE-Google-Site-Reliability-Engineering"><a href="#Incident-Metrics-in-SRE-Google-Site-Reliability-Engineering" class="headerlink" title="Incident Metrics in SRE - Google - Site Reliability Engineering"></a><a href="https://sre.google/resources/practices-and-processes/incident-metrics-in-sre/" target="_blank" rel="noopener">Incident Metrics in SRE - Google - Site Reliability Engineering</a></h3><p>大概看完這篇論文在心中冒出的第一個感想是…要多常出事才能寫完這篇論文呢?! 文章點出以往用來衡量處理 Incident 有沒有改善的指標：mean time to recovery (MTTR) 或是 mean time to mitigation (MTTM) 其實是不準確的，所以論文裡使用了 Google 和其他兩間匿名公司的數據，利用 Monte Carlo 來證明使用 MTTR 或是 MTTR 來分析 Production Incident 是不太適合的，並在最後提出一些作者認為比較好的量測方式</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 73 期 - 天氣太冷，好想泡溫泉</title>
      <link href="/2021/03/23/73-I-need-hot-spring/"/>
      <url>/2021/03/23/73-I-need-hot-spring/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="身為-Rust-開發者，一定要知道的十個超實用-Macro"><a href="#身為-Rust-開發者，一定要知道的十個超實用-Macro" class="headerlink" title="身為 Rust 開發者，一定要知道的十個超實用 Macro"></a><a href="https://medium.com/starbugs/ten-must-know-rust-macros-f17b9252876e" target="_blank" rel="noopener">身為 Rust 開發者，一定要知道的十個超實用 Macro</a></h3><p>Larry 我寫 Rust 也寫了好一陣子了，真心覺得雖然 Rust 有一些地方不太討喜，但還是有很多不錯的優點，像是變數所有權、Macro、零成本抽象化等等。而今天我就要來跟大家介紹十個超厲害、超實用、不學會後悔的 macro，不管你是剛在學 Rust 還是已經有開發經驗，都很適合看看這篇哦</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="6-useful-Rust-macros-that-you-might-not-have-seen-before"><a href="#6-useful-Rust-macros-that-you-might-not-have-seen-before" class="headerlink" title="6 useful Rust macros that you might not have seen before"></a><a href="https://blog.usejournal.com/6-useful-rust-macros-that-you-might-not-have-seen-before-59d1386f7bc5" target="_blank" rel="noopener">6 useful Rust macros that you might not have seen before</a></h3><p>因為整個 Rust 生態系的 macro 實在太多，每個人喜歡的都不太一樣。所以除了我推薦的十個之外，這篇的作者也分享了六個 Rust macro，而且跟我講的十個完全沒有交集XD，真的是很有趣。</p><h3 id="Macros-in-Rust-A-tutorial-with-examples"><a href="#Macros-in-Rust-A-tutorial-with-examples" class="headerlink" title="Macros in Rust: A tutorial with examples"></a><a href="https://blog.logrocket.com/macros-in-rust-a-tutorial-with-examples/" target="_blank" rel="noopener">Macros in Rust: A tutorial with examples</a></h3><p>如果覺得別人寫的 macro 用不順手，或是想到一個絕妙的點子想要把它寫成 macro，但卻不知從何下手。那可以來看看這篇，這篇文章用了超多例子教你怎麼寫出各式各樣的 macro。</p><h3 id="Why-is-a-Rust-executable-large"><a href="#Why-is-a-Rust-executable-large" class="headerlink" title="Why is a Rust executable large?"></a><a href="https://lifthrasiir.github.io/rustlog/why-is-a-rust-executable-large.html" target="_blank" rel="noopener">Why is a Rust executable large?</a></h3><p>在這週的專欄中有提到展開 macro 會讓 Rust 的執行檔變肥，但除了 macro 之外其實還有很多其他的原因，如果想知道為什麼 Rust 執行檔會這麼肥，或是想要透過調整編譯器設定降低執行檔大小，都可以參考看看這篇哦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="一起理解-HTML-當中的-form-data"><a href="#一起理解-HTML-當中的-form-data" class="headerlink" title="一起理解 HTML 當中的 form-data"></a><a href="https://blog.kalan.dev/2021-03-13-html-form-data/?fbclid=IwAR3bUOexknKpIluPAw2wyT32Vzsssy8auXAZwBEqfcvlruEGmwqIDBAwXEQ" target="_blank" rel="noopener">一起理解 HTML 當中的 form-data</a></h3><p><code>multipart/form-data</code> 最大的好處就是可以將不同類型的資料（例如使用者輸入的文字、上傳的檔案或圖片）透過在 <code>&lt;form&gt;</code> 標籤上定義 action 和 method，把整個表單的資料都抓起來一起在一次請求中送出，它是如何做到這件事情的呢？來看看作者如何分析及實作吧！</p><h3 id="HTML-Bold-Text-Tutorial-–-How-to-Use-the-lt-b-gt-Tag"><a href="#HTML-Bold-Text-Tutorial-–-How-to-Use-the-lt-b-gt-Tag" class="headerlink" title="HTML Bold Text Tutorial – How to Use the &lt;b&gt; Tag"></a><a href="https://www.freecodecamp.org/news/html-bold-text-tutorial-how-to-use-the-b-tag/" target="_blank" rel="noopener">HTML Bold Text Tutorial – How to Use the &lt;b&gt; Tag</a></h3><p>你知道 HTML 中的 <code>&lt;b&gt;</code> 和 <code>&lt;strong&gt;</code> 標籤的差異在哪裡嗎？雖然兩者最後顯示在畫面上都是粗體的樣子，不過他們在語義上可是大大的不同，另外在 <a href="https://stackoverflow.com/questions/271743/whats-the-difference-between-b-and-strong-i-and-em" target="_blank" rel="noopener">What’s the difference between &lt;b&gt; and &lt;strong&gt;, &lt;i&gt; and &lt;em&gt;?</a> 此篇問答的最佳解答中也提到，雖然我們「看」起來相同，但是對於像是 <a href="https://freedomscientific.github.io/VFO-standards-support/html.html" target="_blank" rel="noopener">Jaws</a> 此類針對盲人的閱讀器，就會有所差異！也提到了 HTML 從來都不是關於樣式的設定，它是用來描述這段文字的語意如何，而不是在於它該如何顯示。</p><h3 id="Pure-vs-Impure-Functions"><a href="#Pure-vs-Impure-Functions" class="headerlink" title="Pure vs Impure Functions"></a><a href="https://dev.to/sanspanic/pure-vs-impure-functions-50aj" target="_blank" rel="noopener">Pure vs Impure Functions</a></h3><p>在軟體工程的世界中充滿著一堆領域內的用詞，搞到有時候連最簡單的一個名詞都要思考很久，而這篇文章簡單的描述了有關純與不純函式的差別到底在哪，也替大家常在 JavaScript 內時常用的原生方法做分類與比較。</p><h3 id="Microtask-v-s-Marcotask"><a href="#Microtask-v-s-Marcotask" class="headerlink" title="Microtask v.s. Marcotask"></a><a href="https://javascript.info/event-loop" target="_blank" rel="noopener">Microtask v.s. Marcotask</a></h3><p>在 JS 的非同步中，除了大家最熟悉的 event loop 外，其實在 event loop 中還有兩個很重要的觀念，分別是 microtask 以及 marcotask，搞懂這兩個觀念後就可以更深入了解 JS 的非同步了！</p><h3 id="Caching-clash-useSWR-vs-react-query"><a href="#Caching-clash-useSWR-vs-react-query" class="headerlink" title="Caching clash: useSWR() vs. react-query"></a><a href="https://blog.logrocket.com/caching-clash-useswr-vs-react-query/" target="_blank" rel="noopener">Caching clash: useSWR() vs. react-query</a></h3><p>現在的前端開發越來越強調 cache，有了 cache 的幫助不但可以降低 data fetching 的次數同時也可以降低網頁重新渲染的次數，這篇文章提到 React 兩個非常有名用來做 cache 的套件，如果有讀者需要做 cache 機制不妨可以參考這篇文章。</p><h3 id="使用-JSON-LD-處理-SEO"><a href="#使用-JSON-LD-處理-SEO" class="headerlink" title="使用 JSON-LD 處理 SEO"></a><a href="https://z3388638.medium.com/%E4%BD%BF%E7%94%A8-json-ld-%E8%99%95%E7%90%86-seo-%E4%B8%A6%E8%AE%93-google-%E9%87%9D%E5%B0%8D%E4%B8%8D%E5%90%8C%E5%BD%A2%E5%BC%8F%E7%B6%B2%E7%AB%99%E5%81%9A%E7%8D%A8%E7%89%B9%E7%9A%84%E6%90%9C%E5%B0%8B%E7%B5%90%E6%9E%9C%E5%91%88%E7%8F%BE-9c74783c017a" target="_blank" rel="noopener">使用 JSON-LD 處理 SEO</a></h3><p>每次用 google 搜尋新聞的時候都會看到一些比較不一樣的搜尋結果，不再只是單純的 Link 跟 Description 而已，後來研究了一下才知道原來是 <a href="https://json-ld.org/" target="_blank" rel="noopener">JSON-LD</a> 的結構化資料，這篇文章闡述了如何利用 JSON-LD 處理 SEO 問題，有興趣的讀者不妨可以收藏起來日後可以拿來看XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="REST-vs-GraphQL-vs-gRPC"><a href="#REST-vs-GraphQL-vs-gRPC" class="headerlink" title="REST vs. GraphQL vs. gRPC"></a><a href="https://www.danhacks.com/software/grpc-rest-graphql.html" target="_blank" rel="noopener">REST vs. GraphQL vs. gRPC</a></h3><p>記得在兩週前有提到一篇不錯的<a href="https://blog.bitsrc.io/apis-vs-websockets-vs-webhooks-what-to-choose-5942b73aeb9b" target="_blank" rel="noopener">文章</a>，再跟大家比較 API, WebSocket 和 WebHook 有什麼不同，以及該如何替自己的服務從中挑選適合的協定；而今天這篇文章則是要跟大家介紹 REST, GraphQL 和 gRPC 各有什麼優缺點，讓使用者未來在替自己的應用服務做選擇時可以當個依據</p><h3 id="SRE-vs-Platform-Engineering"><a href="#SRE-vs-Platform-Engineering" class="headerlink" title="SRE vs Platform Engineering"></a><a href="https://blog.getambassador.io/the-rise-of-cloud-native-engineering-organizations-1a244581bda5" target="_blank" rel="noopener">SRE vs Platform Engineering</a></h3><p>過去這十年來，整個 IT 產業一直在透過一些最佳準則逐漸地往 Cloud Native 的方向在前進，例如: 持續交付，容器化和觀測系統…等，而在此同時組織也開始產生變化，不再以龐大的部門來開發和發布產品，取而代之的是比較小而且相依性低的開發團隊，而且其中還產生了兩種新的角色，分別是 Site Reliability 和 Platform Engineering，而這篇文章就要帶大家來看看這兩種新的角色分別負責什麼樣的任務，彼此間又有何不同？</p><h3 id="Differences-Between-Git-Merge-and-Rebase-—-and-Why-You-Should-Care"><a href="#Differences-Between-Git-Merge-and-Rebase-—-and-Why-You-Should-Care" class="headerlink" title="Differences Between Git Merge and Rebase — and Why You Should Care"></a><a href="https://betterprogramming.pub/differences-between-git-merge-and-rebase-and-why-you-should-care-ae41d96237b6" target="_blank" rel="noopener">Differences Between Git Merge and Rebase — and Why You Should Care</a></h3><p>不管你的專案使用的是哪一種 Git Flow，你一定需要透過 Merge 或是 Rebase 來將 Branch 中變更的程式碼整合再一起，而作者在這篇文章中透過精美的動畫，把 Merge 和 Rebase 操作中產生的變化鉅細彌遺地展現出來，並且同時也把這兩種 Git 操作的不同之處詳細地記錄下來，真的是超級用心的！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 72 期 - 謎之聲對 Connection 說道：你已經死了！</title>
      <link href="/2021/03/16/72-connection_reset_by_peer/"/>
      <url>/2021/03/16/72-connection_reset_by_peer/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="謎之聲對-Connection-說道-你已經死了！"><a href="#謎之聲對-Connection-說道-你已經死了！" class="headerlink" title="謎之聲對 Connection 說道: 你已經死了！"></a><a href="https://medium.com/starbugs/%E8%AC%8E%E4%B9%8B%E8%81%B2%E5%B0%8D-connection-%E8%AA%AA%E9%81%93-%E4%BD%A0%E5%B7%B2%E7%B6%93%E6%AD%BB%E4%BA%86-b53d27c7ecb7" target="_blank" rel="noopener">謎之聲對 Connection 說道: 你已經死了！</a></h3><p>身為一個 Server Side 網路應用提供者，假如來存取的 Client Side 遇到問題該怎麼辦呢？直接跟他說，這一定是你的問題，我這邊都好好的 (大誤)，此文以自己最近遇到的一個 Connection Reset by Peer 議題來當作例子</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-well-do-you-know-“this”"><a href="#How-well-do-you-know-“this”" class="headerlink" title="How well do you know “this”?"></a><a href="https://anmshpndy.com/how-well-do-you-know-this?ref=hackernoon.com" target="_blank" rel="noopener">How well do you know “this”?</a></h3><p>在剛開始學習 JavaScript 的時候總是會讓人搞不懂當前的 <code>this</code> 到底是代表什麼，但其實只需要掌握幾種使用情況和關鍵字，<code>this</code> 就再也難不倒你啦！</p><h3 id="Announcing-the-New-TypeScript-Handbook"><a href="#Announcing-the-New-TypeScript-Handbook" class="headerlink" title="Announcing the New TypeScript Handbook"></a><a href="https://devblogs.microsoft.com/typescript/announcing-the-new-typescript-handbook/" target="_blank" rel="noopener">Announcing the New TypeScript Handbook</a></h3><p>微軟從 2018 年開始的新 TypeScript 指南已經超過的 beta 版本，成為學習 TypeScript 的主要資源啦！新的指南不在解釋 JavaScript 的細節，並著重在漸進式教學（避免使用尚未說明的 TypeScript 功能）、同步範例程式碼和 TypeScript 的版本（確保所有的範例程式碼都是最新的），還把一些平常不常使用的語法另外移到手冊的參考篇章裡，避免初學者過早讀到而產生「這到底可以用在哪裡？」等問題而停止學習。</p><h3 id="CSS-Modules-vs-CSS-in-JS-Who-wins"><a href="#CSS-Modules-vs-CSS-in-JS-Who-wins" class="headerlink" title="CSS Modules vs CSS-in-JS. Who wins?"></a><a href="https://dev.to/alexsergey/css-modules-vs-css-in-js-who-wins-3n25" target="_blank" rel="noopener">CSS Modules vs CSS-in-JS. Who wins?</a></h3><p>如果有接觸過 React，那對使用 CSS 的 CSS Modules 和 CSS-in-JS 兩種方法一定不陌生，然後就會開始考慮到底該使用哪一種才是對的？優缺點各是什麼？到底該投入哪個陣營？為什麼已經從三大框架抉擇完後還需要繼續抉擇？等等前端人生上的哲學問題，但是即使他們是那麼不同的兩種方式，但這個抉擇其實一點都不重要，不論你最後選了什麼都沒存在對錯，兩種寫法都還是各有存在的意義。</p><h3 id="jQuery-3-6-0-Released"><a href="#jQuery-3-6-0-Released" class="headerlink" title="jQuery 3.6.0 Released!"></a><a href="https://blog.jquery.com/2021/03/02/jquery-3-6-0-released/" target="_blank" rel="noopener">jQuery 3.6.0 Released!</a></h3><p>看到這則消息算是蠻感動的，想當年第一次學前端用的 Library 就是 JQuery，轉眼間現在的前端都是以各式各樣的 Framework 為主，幾乎沒有人在用 JQuery 了，想要從 JQuery 轉型的專案也都漸漸用 Vue 取代了，沒想到這個骨灰級的 Library 竟然還在更新推出新的 Release，看來我大 JQuery 還可以再戰 10 年XD</p><h3 id="Cheatsheet-XSS-that-works-in-2021"><a href="#Cheatsheet-XSS-that-works-in-2021" class="headerlink" title="Cheatsheet: XSS that works in 2021"></a><a href="https://netsec.expert/posts/xss-in-2021/?fbclid=IwAR1I8TbUtMSgasaxBjRxmRCpuFfEokwIkyHFyq3LweF4X4uDCZMPRmH81JQ#v3" target="_blank" rel="noopener">Cheatsheet: XSS that works in 2021</a></h3><p>現在的前端開發基本上 Framework 已經實作了許多 XSS 攻擊的基本防範，但只要是程式碼就一定會有漏洞，這篇文章直接舉例了在 2021 年中還可以用哪些方式來進行 XSS 攻擊，看完之後真的覺得前端好可怕是時候要準備離開前端領域了(X</p><h3 id="Testing-Library"><a href="#Testing-Library" class="headerlink" title="Testing Library"></a><a href="https://testing-library.com/docs/" target="_blank" rel="noopener">Testing Library</a></h3><p>最近剛好在研究前端的 e2e testing，由於因為自身的懶惰所以幾乎都用 create-react-app 進行基礎架構建設，而 testing library 剛好可以完美的支援 create-react-app 的專案，有了這套完美的工具，0接下來就可以開始好好研究 e2e testing 了。</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Which-backend-language-to-learn-in-2020"><a href="#Which-backend-language-to-learn-in-2020" class="headerlink" title="Which backend language to learn in 2020?"></a><a href="https://mxx.news/backend-language-to-learn-in-2020-comparing-community-job-market-cloud-support-and-performance" target="_blank" rel="noopener">Which backend language to learn in 2020?</a></h3><p>如果最近想要開始學習後端開發，但不知道該學什麼語言的話，可以看看這篇文章。這篇文比較了 Python、Node.js、Java、Go 等等比較熱門的語言，個別分析他們的社群活躍程度跟工作機會，雖然已經是去年的文章，不過還是值得刊考看看</p><h3 id="Top-Serverless-Computing-Platforms-in-2020"><a href="#Top-Serverless-Computing-Platforms-in-2020" class="headerlink" title="Top Serverless Computing Platforms in 2020"></a><a href="https://blog.bitsrc.io/a-review-of-top-serverless-computing-platforms-in-2020-f8df4c1ff39f" target="_blank" rel="noopener">Top Serverless Computing Platforms in 2020</a></h3><p>因為 Serverless Computing 實在太過方便（雖然貴了點XD），近年來許多公司在開發初期時都會直接選用 Serverless 服務如 AWS Lambda、GCP Cloud Functions進行部署。而這篇文章就是把目前三家最大的 Serverless 服務拿出來比一比，讓你知道該怎麼選</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="初階-DevOps-SRE-工程師是如何煉成的"><a href="#初階-DevOps-SRE-工程師是如何煉成的" class="headerlink" title="初階 DevOps/SRE 工程師是如何煉成的"></a><a href="https://tech-blog.jameshsu.csie.org/post/devops-entry-level-sre-road/" target="_blank" rel="noopener">初階 DevOps/SRE 工程師是如何煉成的</a></h3><p>多後端開發者在後端待久了之後都會想往 DevOps/SRE 領域發展，而這篇文章剛好就講了想成為一個 SRE 工程師大概需要哪些技能，而且也包含了作者自己的心得，很棒的一篇文章！</p><h3 id="ConsoleMe-A-Central-Control-Plane-for-AWS-Permissions-and-Access"><a href="#ConsoleMe-A-Central-Control-Plane-for-AWS-Permissions-and-Access" class="headerlink" title="ConsoleMe: A Central Control Plane for AWS Permissions and Access"></a><a href="https://netflixtechblog.com/consoleme-a-central-control-plane-for-aws-permissions-and-access-fd09afdd60a8" target="_blank" rel="noopener">ConsoleMe: A Central Control Plane for AWS Permissions and Access</a></h3><p>雲端已經進入爆炸時代，現在越來越容易動態地創建基礎架構，組織內的每個 Group 都在建立他們自己的系統和自動化機制，這樣的風氣替提供了許多讓產品創新的機會，但是管理這麼多系統，讓他們確保適當的安全認證和授權已經成為不可被忽視的問題，Netflix 身為 AWS 的重度使用者，當然會遇到這方面的挑戰，因此在 AWS re:Invent 2020 裏 Netflix 開源了兩個用來管理 AWS 多重帳號存取與權限控制的工具，分別是 ConsoleMe 和用來與它互動的 CLI 輔助工具 Weep，有興趣的人可以參考當初的<a href="https://www.youtube.com/watch?v=fXNRYcNyw0c&t=5s" target="_blank" rel="noopener">發表影片</a></p><h3 id="Git-Cheat-Sheet-–-50-Git-Commands-You-Should-Know"><a href="#Git-Cheat-Sheet-–-50-Git-Commands-You-Should-Know" class="headerlink" title="Git Cheat Sheet – 50 Git Commands You Should Know"></a><a href="https://www.freecodecamp.org/news/git-cheat-sheet/" target="_blank" rel="noopener">Git Cheat Sheet – 50 Git Commands You Should Know</a></h3><p>自己 Git 也用好幾年了，但好像每天怎麼用，都還是那幾個而已 (羞)，趕快來看看這篇 50 個一定要知道的 Git Command，複習一下有哪一些 Command 其實是可以學起來，加速自己平日開發的速度！ </p><h3 id="Hassle-free-multi-tenant-K8S-clusters-management-using-Argo-CD"><a href="#Hassle-free-multi-tenant-K8S-clusters-management-using-Argo-CD" class="headerlink" title="Hassle-free multi-tenant K8S clusters management using Argo CD"></a><a href="https://blog.argoproj.io/hassle-free-multi-tenant-k8s-clusters-management-using-argo-cd-7dd35619046a" target="_blank" rel="noopener">Hassle-free multi-tenant K8S clusters management using Argo CD</a></h3><p>Argo CD 算是目前在 K8s GitOps Flow 最被廣泛使用的工具了，因為其提供了方便的 UI 和 CLI 介面，使用 CRD 深入地整合進到 K8s 中，不過同一座 K8s 叢集當中，除了有開發者負責需要將應用服務部署到 K8s 中之外，還有其他的維運人員也需要一起使用或是管理 K8s 叢集，而 Argo CD 同樣也可以幫助到他們的日常工作，這篇文章就是想要跟大家說明如何透過 Argo CD 來在多個 K8s 叢集的基礎之下，建立一個 Multi-Tenant 的平台</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 71 期 - 天竺鼠車車開車囉</title>
      <link href="/2021/03/09/71-pui-pui/"/>
      <url>/2021/03/09/71-pui-pui/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="電腦科學入門-Crash-Course"><a href="#電腦科學入門-Crash-Course" class="headerlink" title="電腦科學入門 Crash Course"></a><a href="https://medium.com/starbugs/%E9%9B%BB%E8%85%A6%E7%A7%91%E5%AD%B8%E5%85%A5%E9%96%80-crash-course-cba334ddfb0c" target="_blank" rel="noopener">電腦科學入門 Crash Course</a></h3><p>今天來介紹一下 Crash Course 。Crash Course 是 Youtube 一億美元原創計畫的所創造的頻道之一 。由葛林兄弟所創立。內容以人文、科學系列向外延伸。截至今日已經有 1200萬的訂閱者。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析-8-個明顯的缺點"><a href="#也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析-8-個明顯的缺點" class="headerlink" title="也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析 8 個明顯的缺點"></a><a href="https://wp-valley.com/opinion-on-sliders" target="_blank" rel="noopener">也許您的網站其實並不需要使用圖片輪播（Slider）功能，分析 8 個明顯的缺點</a></h3><p>本篇文章從效能、SEO、需求或 RWD 版面等…各個角度來看圖片輪播在中小型網站使用的看法，並且用了許多目前大家隨處可看見的圖片輪播網站當做例子，分成幾個主題解釋它們為何能夠使用，以及你為什麼可能不需要。</p><h3 id="CSS-Grid-Cheat-Sheet-Illustrated-in-2021🎖️"><a href="#CSS-Grid-Cheat-Sheet-Illustrated-in-2021🎖️" class="headerlink" title="CSS Grid Cheat Sheet Illustrated in 2021🎖️"></a><a href="https://dev.to/joyshaheb/css-grid-cheat-sheet-illustrated-in-2021-1a3" target="_blank" rel="noopener">CSS Grid Cheat Sheet Illustrated in 2021🎖️</a></h3><p>如果你看了 MDN 或其他教學的文件卻始終搞不太清楚如何使用 CSS 中的 Grid，那我猜應該是少了可愛的獨角獸，快來給這清楚明瞭又可愛的獨角獸一次機會！ 😂</p><h3 id="JS中的EventLoop、宏任务、微任务"><a href="#JS中的EventLoop、宏任务、微任务" class="headerlink" title="JS中的EventLoop、宏任务、微任务"></a><a href="https://juejin.cn/post/6936630572936593422" target="_blank" rel="noopener">JS中的EventLoop、宏任务、微任务</a></h3><p>當你在面試前端工程師時，對方起手先列出了一堆 <code>setTimeout</code>、<code>Promise</code>、<code>async</code>、<code>await</code> 要問你執行順序時，大概有 870％ 都是想考有關 Event loop 的概念，為了不要和當初被電到不行的我一樣 😂，趁這機會一次搞懂吧！</p><h3 id="innerText、innerHTML、textContent、outerHTML-的差別"><a href="#innerText、innerHTML、textContent、outerHTML-的差別" class="headerlink" title="innerText、innerHTML、textContent、outerHTML 的差別"></a><a href="https://orandigo.github.io/blog/2020/03/22/20200322-innerText-innerHTML-textContent-outerHTML/" target="_blank" rel="noopener">innerText、innerHTML、textContent、outerHTML 的差別</a></h3><p>最近在研究以前 DOM 的 API 時，以往我只會用 <code>innerHTML</code> 但後來發現這個 method 其實存在了蠻多資安風險，後來有了 sanitise 的觀念後知道其實還有 <code>textContent</code> 的做法可以讓整個 injection 更安全一點，這篇文章講述了幾個最原始用來 inject html 的方法。</p><h3 id="Linked-lists-in-the-wild-React-Hooks"><a href="#Linked-lists-in-the-wild-React-Hooks" class="headerlink" title="Linked lists in the wild: React Hooks"></a><a href="https://dev.to/wuz/linked-lists-in-the-wild-react-hooks-3ep8" target="_blank" rel="noopener">Linked lists in the wild: React Hooks</a></h3><p>以往真的覺得演算法在前端開發完全沒有太直接的利益關係，畢竟前端要求的很多都是對於 DOM 的操作要熟悉，後來才知道 React Hooks 其實內部是用 linked-list 實作的。</p><h3 id="Before-You-memo"><a href="#Before-You-memo" class="headerlink" title="Before You memo()"></a><a href="https://overreacted.io/before-you-memo/" target="_blank" rel="noopener">Before You memo()</a></h3><p>在 React 中有一句話非常經典：優化必須要花很多成本，有時候自己以為的優化其實只會拖垮整個效能，像在 class component 時期有一個 <code>PureComponent</code> 以及現在 Hook 的 <code>memo()</code> 都是讓 component 優化的方法，但在使用這些方法之前不妨先看一下此 component 是否真的適用這些優化方法。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Remove-source-path-from-Go’s-panic-stack-trace"><a href="#Remove-source-path-from-Go’s-panic-stack-trace" class="headerlink" title="Remove source path from Go’s panic stack trace"></a><a href="https://johnpili.com/remove-source-path-from-gos-panic-stack-trace/" target="_blank" rel="noopener">Remove source path from Go’s panic stack trace</a></h3><p>這篇文章很短，主要講說平常在 Go 裡面呼叫 panic 時，程式會把整個完整的路徑輸出出來，但有時路徑太長反而會不容易看，而這時就可以在編譯時加個 <code>-trimpath</code>，輸出的路徑就會簡潔很多～</p><h3 id="Life-of-an-HTTP-request-in-a-Go-server"><a href="#Life-of-an-HTTP-request-in-a-Go-server" class="headerlink" title="Life of an HTTP request in a Go server"></a><a href="https://eli.thegreenplace.net/2021/life-of-an-http-request-in-a-go-server" target="_blank" rel="noopener">Life of an HTTP request in a Go server</a></h3><p>平常在用 Go 架 HTTP server 時，很少人會仔細去研究一個請求從進來到出去到底經過了哪些關卡。不過現在有人幫你研究完寫成文章了，雖然文有點長但寫得滿好的，看完真的可以更了解 Go 內建的 http package 是怎麼處理請求</p><h3 id="Go-internals-invariance-and-memory-layout-of-slices"><a href="#Go-internals-invariance-and-memory-layout-of-slices" class="headerlink" title="Go internals: invariance and memory layout of slices"></a><a href="https://eli.thegreenplace.net/2021/go-internals-invariance-and-memory-layout-of-slices/" target="_blank" rel="noopener">Go internals: invariance and memory layout of slices</a></h3><p>這篇文章跟第二篇是同一個作者，不過這篇更硬一點，主要是在介紹 Go slice 在記憶體內長什麼樣子，建議至少有寫過一些 Go 再來看，不然可能會完全看不懂他在分析什麼XD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Testing-HashiCorp-Terraform"><a href="#Testing-HashiCorp-Terraform" class="headerlink" title="Testing HashiCorp Terraform"></a><a href="https://www.hashicorp.com/blog/testing-hashicorp-terraform" target="_blank" rel="noopener">Testing HashiCorp Terraform</a></h3><p>雖然在執行 <code>terraform apply</code> 之前可以透過 <code>terraform validate</code> 和 <code>terraform plan</code> 稍微檢查一下，不過這樣就夠了嗎？大家都希望把變更在生產環境執行之前可以快速先發現問題，讓 <code>terraform apply</code> 的執行更有信心，所以這篇文章想要跟大家談談如何達成這個目標，一路從 Unit Test 介紹起，接著談到 Contract Tests, Integration Tests, End-to-End Tests…等</p><h3 id="Spectral-raises-6-2M-for-its-DevSecOps-service"><a href="#Spectral-raises-6-2M-for-its-DevSecOps-service" class="headerlink" title="Spectral raises $6.2M for its DevSecOps service"></a><a href="https://techcrunch.com/2021/02/17/spectral-raises-6-2m-for-its-devsecops-service/" target="_blank" rel="noopener">Spectral raises $6.2M for its DevSecOps service</a></h3><p>DevSecOps 的議題在最近兩三年還滿熱門的，Spectral 最近除了為大家帶來他的 Code Scanner 服務之外，也宣布獲得 620 萬美金的投資，這間新創公司希望可以從程式碼和日誌就發現潛藏的資安漏洞，例如找出寫在程式碼中的 API Key 和其他機敏資訊，除此之外，也可以找出有資安問題的錯誤組態設定…等，對這些議題有興趣的人，可以看看他們是如何實作這些功能的</p><h3 id="Introduction-to-k3d-Run-K3s-in-Docker"><a href="#Introduction-to-k3d-Run-K3s-in-Docker" class="headerlink" title="Introduction to k3d: Run K3s in Docker"></a><a href="https://www.suse.com/c/introduction-k3d-run-k3s-docker-src/" target="_blank" rel="noopener">Introduction to k3d: Run K3s in Docker</a></h3><p>因為 K8s 的盛行，越來越多 Kxx 的工具如雨後春筍般冒出，這次的工具叫做 K8d，他讓使用者可以利用最輕盈的 K8s Distribution - K3s (單一個 Binary 檔案，而且只需要 512 MB 的 Ram) 在有安裝 Docker 的電腦就將 K8s Cluster 給運行起來；而此工具最主要的目的是希望讓 K8s 的本地端開發可以又輕鬆又節省資源！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 70 期 - 天上的 Bug 笑地上的工程師</title>
      <link href="/2021/03/02/70-the-bugs-in-the-sky-smile-at-developers-on-the-ground/"/>
      <url>/2021/03/02/70-the-bugs-in-the-sky-smile-at-developers-on-the-ground/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="來征服資料結構與演算法吧-關於-Linked-List-的基本介紹-feat-JavaScript"><a href="#來征服資料結構與演算法吧-關於-Linked-List-的基本介紹-feat-JavaScript" class="headerlink" title="來征服資料結構與演算法吧 | 關於 Linked List 的基本介紹 feat. JavaScript"></a><a href="https://medium.com/starbugs/%E4%BE%86%E5%BE%81%E6%9C%8D%E8%B3%87%E6%96%99%E7%B5%90%E6%A7%8B%E8%88%87%E6%BC%94%E7%AE%97%E6%B3%95%E5%90%A7-%E9%97%9C%E6%96%BC-linked-list-%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BB%8B%E7%B4%B9-feat-javascript-ff0ed89c326d" target="_blank" rel="noopener">來征服資料結構與演算法吧 | 關於 Linked List 的基本介紹 feat. JavaScript</a></h3><p>不曉得大家會不會和我一樣，每一次打開 LeetCode 看到什麼 Linked List 或是 Tree 的題目，腦袋就直接當機，呈現失智狀態。雖然要完全搞懂得花一番功夫，但學會後絕對是想忘也忘不掉啦（畢竟是曾經那麼苦惱的記憶 😂）！本篇文章就來分享關於 Linked List 的學習心得和一些相關題目的解析方式。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Maximally-optimizing-image-loading-for-the-web-in-2021"><a href="#Maximally-optimizing-image-loading-for-the-web-in-2021" class="headerlink" title="Maximally optimizing image loading for the web in 2021"></a><a href="https://www.industrialempathy.com/posts/image-optimizations/" target="_blank" rel="noopener">Maximally optimizing image loading for the web in 2021</a></h3><p>如果你正愁著該如何優化圖片載入的速度，或是不想要破壞使用者的操作體驗，那一定不能錯過這一篇！文章裡提到了 8 種載入圖片的方式，來看看哪種最適合應用到你的網頁上！</p><h3 id="A-beginner’s-guide-to-applying-color-in-UI-design"><a href="#A-beginner’s-guide-to-applying-color-in-UI-design" class="headerlink" title="A beginner’s guide to applying color in UI design"></a><a href="https://dev.to/georgedoescode/a-beginner-s-guide-to-applying-color-in-ui-design-3904" target="_blank" rel="noopener">A beginner’s guide to applying color in UI design</a></h3><p>這是一篇非常棒的文章！作者用一個簡單的 Product card，一步步解釋該如何配色可以讓整個畫面更協調，整個過程包含了確定主題、如何利用陰影，以及尋找一個單一的原色到應用！雖然一步一步往下看會覺得 Product card 沒什麼變化，但是當你看到最後，再往上滑到修改前的樣子，就會有「哇！那麼神奇！」的感覺！</p><h3 id="Add-A-Little-Whimsy-to-Your-Forms"><a href="#Add-A-Little-Whimsy-to-Your-Forms" class="headerlink" title="Add A Little Whimsy to Your Forms"></a><a href="https://dev.to/jh3y/add-a-little-whimsy-to-your-forms-2c1f" target="_blank" rel="noopener">Add A Little Whimsy to Your Forms</a></h3><p>這篇不算是什麼技術分享的文章，但是卻能給人滿滿的歡樂！有時候我們在做作品時總是一成不變的在切版、寫 JS 串 API 或是前端操作邏輯，那些看起來很有趣的作品早就已經是像公式一樣的存在了，但也許今天你只要小小的加入一些有趣的元素，例如在填寫完表單，並按下送出按鈕時噴射出七彩的紙屑怎麼樣？我們在做的東西，應該是更有趣的才對，對吧？😊</p><h3 id="Promise-中的三兄弟-all-race-allSettled"><a href="#Promise-中的三兄弟-all-race-allSettled" class="headerlink" title="Promise 中的三兄弟 .all(), .race(), .allSettled()"></a><a href="https://juejin.cn/post/6844903912592375821" target="_blank" rel="noopener">Promise 中的三兄弟 .all(), .race(), .allSettled()</a></h3><p>為了要在 Promise 陣列中可以順利回傳資料回來，以前都會用 <code>Promise.all</code> 但這個 method 有個問題就是要全部的 Promise 都 resolved 才會回傳值，可是現在很多網站如果都用這種方式來取得資料的話可能會讓使用者體驗下降，因此後來官方又推出了一個 <code>Promise.allSettled</code>，這個方法是會把 Promise array 中所有的 Promise 都執行完畢，即便有 Promise 被 rejected 也會回傳，這樣就可以針對一些錯誤的資料做例外處理了非常方便。</p><h3 id="Moment-Timezone"><a href="#Moment-Timezone" class="headerlink" title="Moment Timezone"></a><a href="https://momentjs.com/timezone/docs/" target="_blank" rel="noopener">Moment Timezone</a></h3><p>有時候在對接一些 API 時會需要傳入跟時間相關的 query string，假如產品是架設在雲端機器上那就一定會有時差問題，這時候就必須要考慮 timezone 了，而大家最常用的時間套件 <a href="https://momentjs.com/" target="_blank" rel="noopener">moment.js</a> 也有針對 timezone 做 plugin，這樣就可以無痛使用 moment.js 來處理 server time 跟 client time 的時差問題了。</p><h3 id="React-app中常見的跨站攻擊漏洞"><a href="#React-app中常見的跨站攻擊漏洞" class="headerlink" title="React app中常見的跨站攻擊漏洞"></a><a href="https://medium.com/frochu/%E5%9C%A8react-app%E4%B8%AD%E6%9C%80%E7%82%BA%E5%B8%B8%E8%A6%8B%E7%9A%84%E8%B7%A8%E7%AB%99%E6%94%BB%E6%93%8A%E6%BC%8F%E6%B4%9E-2fdd95f08466" target="_blank" rel="noopener">React app中常見的跨站攻擊漏洞</a></h3><p>以前我一直以為 React 已經完美的防範 XSS 攻擊了，直到我看到這篇文章才知道原來如果今天用的是 Isomorphic Rendering，就有可能會讓黑客有機可趁了，這時候就需要用到 <a href="https://github.com/apostrophecms/sanitize-html" target="_blank" rel="noopener">sanitize-html</a> 的方式來解析 html </p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="用-10-分鐘了解-Go-語言-context-package-使用場景及介紹"><a href="#用-10-分鐘了解-Go-語言-context-package-使用場景及介紹" class="headerlink" title="用 10 分鐘了解 Go 語言 context package 使用場景及介紹"></a><a href="https://blog.wu-boy.com/2020/05/understant-golang-context-in-10-minutes/" target="_blank" rel="noopener">用 10 分鐘了解 Go 語言 context package 使用場景及介紹</a></h3><p>很多人（包括我）在初學 Go 時都會不知道 context 是做什麼用的，碰到參數需要傳 context 的情況就直接用 ‘context.Background()` 矇混過去XD，而這篇文章解釋了為什麼會需要 context，看完後除了會用 context 之外，也不會再覺得官方為什麼要把這樣種奇怪的寫法納入標準</p><h3 id="Go-is-not-an-easy-language"><a href="#Go-is-not-an-easy-language" class="headerlink" title="Go is not an easy language"></a><a href="https://www.arp242.net/go-easy.html" target="_blank" rel="noopener">Go is not an easy language</a></h3><p>雖然 Go 被認為是個很簡單、易學的程式語言，但這篇文章認為那僅有在實現簡單的功能時是這樣，如果想要寫出高效能的程式，那很多時候程式碼就沒辦法那麼直觀，甚至會變得有點複雜</p><h3 id="50-Shades-of-Go-Traps-Gotchas-and-Common-Mistakes"><a href="#50-Shades-of-Go-Traps-Gotchas-and-Common-Mistakes" class="headerlink" title="50 Shades of Go: Traps, Gotchas, and Common Mistakes"></a><a href="http://devs.cloudimmunity.com/gotchas-and-common-mistakes-in-go-golang/" target="_blank" rel="noopener">50 Shades of Go: Traps, Gotchas, and Common Mistakes</a></h3><p>這篇文章列出了 50 個在寫 Go 時最常犯的小錯誤，看了一下真的有一些我自己也犯過的錯XD，建議大家都可以看看（不想看英文的話文章最上方有中文翻譯的連結）</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="APIs-vs-WebSockets-vs-WebHooks-What-to-Choose"><a href="#APIs-vs-WebSockets-vs-WebHooks-What-to-Choose" class="headerlink" title="APIs vs. WebSockets vs. WebHooks: What to Choose?"></a><a href="https://blog.bitsrc.io/apis-vs-websockets-vs-webhooks-what-to-choose-5942b73aeb9b" target="_blank" rel="noopener">APIs vs. WebSockets vs. WebHooks: What to Choose?</a></h3><p>當 Client 和 Server 要進行溝通時，可以使用 API, WebSocket 或是 WebHook 這三種的其中一種，雖然這三種都可以達成溝通的目的，但其實彼此之間有很大的不同點，所以作者透過這篇文章來討論這三種方法是如何運行，以及如何根據使用情境來選擇三者之中最合適的方法</p><h3 id="50-Reasons-Kubernetes-Sucks"><a href="#50-Reasons-Kubernetes-Sucks" class="headerlink" title="50 Reasons Kubernetes Sucks"></a><a href="https://www.teamblind.com/post/50-Reasons-Kubernetes-Sucks-S77O8VZ8" target="_blank" rel="noopener">50 Reasons Kubernetes Sucks</a></h3><p>有人覺得其實 K8s 根本就不是一個好的平台，但卻沒有人敢站出來說，所以作者條列了 50 個為什麼他覺得 K8s 很爛的原因，例如：API 總是進行不相容的大改動，Service Meshes 根本是把垃圾構築在一堆垃圾上面，有種你用兩年前的版本來更新看看…等，老實說自己看完覺得有些不無道理</p><h3 id="Kubecost"><a href="#Kubecost" class="headerlink" title="Kubecost"></a><a href="https://github.com/kubecost/cost-model" target="_blank" rel="noopener">Kubecost</a></h3><p>本週最後不免俗要來介紹個人看到滿有趣的開源工具叫做 Kubecost，它提供的模型可以讓使用 Kubernetes 的團隊了解目前 K8s 資源使用情況，而且他還可以直接把這些資源所反映的真實成本根據不同的應用服務，團隊或是部門…等給計算出來，很簡單的就可以知道目前 K8s 燒錢的狀況XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 69 期 - 開學了才發現有寒假作業</title>
      <link href="/2021/02/23/69-back-to-school-without-doing-homework/"/>
      <url>/2021/02/23/69-back-to-school-without-doing-homework/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="不知道-bug-躲在哪個-commit-嗎？來試試-Git-bisect-吧！"><a href="#不知道-bug-躲在哪個-commit-嗎？來試試-Git-bisect-吧！" class="headerlink" title="不知道 bug 躲在哪個 commit 嗎？來試試 Git bisect 吧！"></a><a href="https://medium.com/starbugs/use-git-bisect-to-find-the-buggy-commit-b35e12ddd26b" target="_blank" rel="noopener">不知道 bug 躲在哪個 commit 嗎？來試試 Git bisect 吧！</a></h3><p>大家好我是 Larry，這週的專欄要來跟大家分享 Git 的進階技巧 - Git bisect，他主要是用來幫你找到哪個 commit 是有問題的。很多時候雖然我們有用 Git 做版本控制，但在主線上發現 bug 時往往已經過了一陣子，面對一兩個禮拜的歷史紀錄也無法快速揪出 buggy commit 是哪一個，這時候就可以把 Git bisect 請出來幫忙啦～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Announcing-Vite-2-0"><a href="#Announcing-Vite-2-0" class="headerlink" title="Announcing Vite 2.0"></a><a href="https://dev.to/yyx990803/announcing-vite-2-0-2f0a" target="_blank" rel="noopener">Announcing Vite 2.0</a></h3><p>Vite 2.0 在今年 2/16 號發佈啦！Vite 以最速稱號降臨在 Web 前端開發的生態圈內，作者在講解 Vite 2.0 的新功能前，還先分享了一則用 create-react-app 當作祭品，比較了兩者間的運行速度的 <a href="https://twitter.com/amasad/status/1355379680275128321" target="_blank" rel="noopener">twitter 貼文</a>，看到後瞬間將 Vite 的學習優先度在心中拉到最前面。😂</p><h3 id="How-to-convert-any-website-webpage-into-an-installable-progressive-web-app-PWA"><a href="#How-to-convert-any-website-webpage-into-an-installable-progressive-web-app-PWA" class="headerlink" title="How to convert any website/webpage into an installable progressive web app (PWA)"></a><a href="https://dev.to/zippytyro/how-to-convert-any-website-webpage-into-an-installable-progressive-web-app-pwa-59ai" target="_blank" rel="noopener">How to convert any website/webpage into an installable progressive web app (PWA)</a></h3><p>文章中介紹了什麼是 PWA，也講解了如何透過簡單的 4 個步驟讓你的網站轉換成可以安裝在電腦或手機上的應用程式！（其實更讓我驚訝的是作者的年紀才 17 歲！😂）</p><h3 id="Don’t-comment-your-code"><a href="#Don’t-comment-your-code" class="headerlink" title="Don’t comment your code"></a><a href="https://dev.to/nadaelokaily/don-t-comment-your-code-5e9h" target="_blank" rel="noopener">Don’t comment your code</a></h3><p>雖然這篇文章有點標題殺人，但作者想表達的意思其實是「註解存在的意義應該是要增加價值，而不是讓人更難理解甚至是產生混亂。」文章中舉了滿多種不適當的註解（個人最受不了的就是明明就有用 Git 但還註解程式碼）。</p><h3 id="access-control-allow-origin"><a href="#access-control-allow-origin" class="headerlink" title="access control allow origin"></a><a href="https://portswigger.net/web-security/cors/access-control-allow-origin" target="_blank" rel="noopener">access control allow origin</a></h3><p>相信很多前端工程師一定會遇到這個問題，但其實 CORS 可以說是瀏覽器用來存取 API 限制器，很多初學者都會覺得 CORS 是我某個 header 沒帶到而導致的錯誤，但其實 CORS 是 response 被瀏覽器屏蔽的起來，所以基本上遇到 CORS 問題是沒辦法純前端解決的一定要靠後端。</p><h3 id="When-to-useMemo-and-useCallback"><a href="#When-to-useMemo-and-useCallback" class="headerlink" title="When to useMemo and useCallback"></a><a href="https://kentcdodds.com/blog/usememo-and-usecallback" target="_blank" rel="noopener">When to useMemo and useCallback</a></h3><p>基本上這個問題應該已經被問到爛了，但有些前端工程師為了優化還是會濫用這些方法，但有時候反而會讓整個優化後的效能更差，畢竟優化都是要付出代價的，其實 React 已經會做初步的優化了，如果還要自己進行優化的話真的要更了解自己的架構不要為了優化而優化。</p><h3 id="穩定排序和不穩定排序"><a href="#穩定排序和不穩定排序" class="headerlink" title="穩定排序和不穩定排序"></a><a href="https://www.itread01.com/content/1549218625.html" target="_blank" rel="noopener">穩定排序和不穩定排序</a></h3><p>最近在研究前端的 sort api 時無意間看到這個文章，才知道原來排序有那麼多眉角還有分穩定跟不穩定，不是只有單純的排序而已，讓只會氣泡排序的我真的是看到了一個新世界XD</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="Dependency-Confusion-How-I-Hacked-Into-Apple-Microsoft-and-Dozens-of-Other-Companies"><a href="#Dependency-Confusion-How-I-Hacked-Into-Apple-Microsoft-and-Dozens-of-Other-Companies" class="headerlink" title="Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies"></a><a href="https://medium.com/@alex.birsan/dependency-confusion-4a5d60fec610" target="_blank" rel="noopener">Dependency Confusion: How I Hacked Into Apple, Microsoft and Dozens of Other Companies</a></h3><p>這大概是近期我看過最有趣的攻擊方式XD，他的原理是利用 npm install 在安裝時，如果遇到某個 package 的名稱在 private registery 跟 npm 上都有，那會優先選擇版本比較新的。所以只要猜一下別人的公司的 private package 叫什麼，然後到 npm 上發佈一樣名字的惡意 package，對方就會意外執行到你寫的程式碼</p><h3 id="New-JavaScript-Features-You-Can-Expect-in-ES2021"><a href="#New-JavaScript-Features-You-Can-Expect-in-ES2021" class="headerlink" title="New JavaScript Features You Can Expect in ES2021"></a><a href="https://blog.bitsrc.io/new-javascript-features-you-can-expect-in-es2021-c8adf0301293" target="_blank" rel="noopener">New JavaScript Features You Can Expect in ES2021</a></h3><p>雖然 2021 年才剛開始而已，但 ES2021 可能會有的新 feature 已經出來啦～包括前陣子討論度很高的 Promise.any 跟 WeakRefs 都在這個版本裡面，快來事先預習一下吧</p><h3 id="JavaScript-Symbols-But-Why"><a href="#JavaScript-Symbols-But-Why" class="headerlink" title="JavaScript Symbols: But Why?"></a><a href="https://medium.com/intrinsic/javascript-symbols-but-why-6b02768f4a5c" target="_blank" rel="noopener">JavaScript Symbols: But Why?</a></h3><p>JS 的 Symbol 有一些很有趣的特性，像是每個 Symbol 都是獨一無二的，而且還可以被拿來當 property 名稱，因此可以拿來做一些有趣的應用，像是防止 property 撞名、模擬 private property 等等</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="How-they-SRE"><a href="#How-they-SRE" class="headerlink" title="How they SRE"></a><a href="https://github.com/upgundecha/howtheysre" target="_blank" rel="noopener">How they SRE</a></h3><p>許多技術組織或是公司都會定期在各種公開平台 (例如 技術部落格，研討會，小聚…等) 提出並分享其最佳實踐，工具，技術還有工程文化的見解，而作者很熱心地把這所有的文章，書籍，影片都收集到這個 How they SRE 的 GitHub Repository 中，涵蓋的主題主要分為底下幾個大類</p><ul><li>Site Reliability Engineering</li><li>Hiring and Building SRE teams</li><li>SRE Culture</li><li>DevOps</li><li>Monitoring &amp; Observability</li><li>Alerting</li><li>Incident Response &amp; Post-Mortem</li><li>On-Call</li><li>Testing in Production</li><li>Chaos Engineering</li><li>Automation</li><li>Performance</li></ul><h3 id="Extending-applications-on-Kubernetes-with-multi-container-pods"><a href="#Extending-applications-on-Kubernetes-with-multi-container-pods" class="headerlink" title="Extending applications on Kubernetes with multi-container pods"></a><a href="https://learnk8s.io/sidecar-containers-patterns" target="_blank" rel="noopener">Extending applications on Kubernetes with multi-container pods</a></h3><p>這篇文章介紹要如何在不修改程式碼的情況之下，透過 Ambassador, Adapter, Sidecar 和 Init Container 來擴展運行在 K8s 中的應用服務功能，例如讓不支援 TLS 加密的服務透過 Nginx Proxy Container 來達成 TLS 加密傳輸；並且詳細解說在 Multi-Container 運行的 Pod 中，裡面的每個 Container 在網路跟資料層面上要會如何運作</p><h3 id="Command-Line-Interface-for-Terraform-Enterprise-Cloud-tecli"><a href="#Command-Line-Interface-for-Terraform-Enterprise-Cloud-tecli" class="headerlink" title="Command Line Interface for Terraform Enterprise/Cloud: tecli"></a><a href="https://github.com/awslabs/tecli" target="_blank" rel="noopener">Command Line Interface for Terraform Enterprise/Cloud: tecli</a></h3><p>連續好幾週都會介紹一個工具類的開源專案，而這週要談的是一個叫做 <strong>TECLI</strong> 的 CLI 工具，作者要大家想像在一個一切雲端資源都是由 Terraform 所掌控的世界裡，要如何方便地透過 Terraform Cloud API 操控 Terraform 進而管理所有的雲端資源？！當然就是透過今天介紹的這個 TECLI CLI 工具，在維運人員終端機器上或是 CI/CD 系統上執行簡單的命令，讓 Terraform 幫你管理好所有的雲端資源，有在使用 Terraform Cloud 的人千萬不要錯過了！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 68 期 - 改個 DNS 是要改多久？- Domain 管理的常見問題</title>
      <link href="/2021/02/16/68-domain-common-problem/"/>
      <url>/2021/02/16/68-domain-common-problem/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="改個-DNS-是要改多久？-Domain-管理的常見問題"><a href="#改個-DNS-是要改多久？-Domain-管理的常見問題" class="headerlink" title="改個 DNS 是要改多久？- Domain 管理的常見問題"></a><a href="https://medium.com/starbugs/%E9%80%A3-pm-%E4%B9%9F%E6%87%89%E8%A9%B2%E7%9F%A5%E9%81%93%E7%9A%84-dns-%E5%B0%8F%E7%9F%A5%E8%AD%98-d00b43e4fe9a" target="_blank" rel="noopener">改個 DNS 是要改多久？- Domain 管理的常見問題</a></h3><p>身為網路世界的一般使用者或是開發者，其實無時無刻都在使用 DNS 解析位於網址其後的真實運算資源在哪邊，因此當一個網路服務準備上線讓其他人或是服務可以使用前，一定需要先把 DNS 設定好，而這篇文章並沒有要講解 DNS 背後太深入的運行機制，因為自己對於網路底層也不太熟，只有一些堪用的常識而已；最主要是想藉由這篇文章談談自己這幾年來協助相關 DNS 設定時所遇到的常見問題，希望跟我一樣對 DNS 不熟的人看到這篇文章後，可以避免未來犯下一樣錯誤</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="實作開源小工具，與-Github-Actions-的第一次相遇！"><a href="#實作開源小工具，與-Github-Actions-的第一次相遇！" class="headerlink" title="實作開源小工具，與 Github Actions 的第一次相遇！"></a><a href="https://medium.com/starbugs/%E5%AF%A6%E4%BD%9C%E9%96%8B%E6%BA%90%E5%B0%8F%E5%B7%A5%E5%85%B7-%E8%88%87-github-actions-%E7%9A%84%E7%AC%AC%E4%B8%80%E6%AC%A1%E7%9B%B8%E9%81%87-3dd2d70eeb" target="_blank" rel="noopener">實作開源小工具，與 Github Actions 的第一次相遇！</a></h3><h3 id="面試-前端工程師一定要會的-JS-觀念題-中英對照之上篇"><a href="#面試-前端工程師一定要會的-JS-觀念題-中英對照之上篇" class="headerlink" title="[面試] 前端工程師一定要會的 JS 觀念題-中英對照之上篇"></a><a href="https://medium.com/starbugs/%E9%9D%A2%E8%A9%A6-%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E4%B8%80%E5%AE%9A%E8%A6%81%E6%9C%83%E7%9A%84-js-%E8%A7%80%E5%BF%B5%E9%A1%8C-%E4%B8%AD%E8%8B%B1%E5%B0%8D%E7%85%A7%E4%B9%8B%E4%B8%8A%E7%AF%87-3b0a3feda14f" target="_blank" rel="noopener">[面試] 前端工程師一定要會的 JS 觀念題-中英對照之上篇</a></h3><h3 id="與-Github-Actions-的再次相遇！AWS-S3-CloudFront-自動部署-React-Web-App"><a href="#與-Github-Actions-的再次相遇！AWS-S3-CloudFront-自動部署-React-Web-App" class="headerlink" title="與 Github Actions 的再次相遇！AWS S3 + CloudFront 自動部署 React Web App"></a><a href="https://medium.com/starbugs/%E8%88%87-github-actions-%E7%9A%84%E5%86%8D%E6%AC%A1%E7%9B%B8%E9%81%87-aws-s3-cloudfront-%E8%87%AA%E5%8B%95%E9%83%A8%E7%BD%B2-react-web-app-e2c11942263f" target="_blank" rel="noopener">與 Github Actions 的再次相遇！AWS S3 + CloudFront 自動部署 React Web App</a></h3><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Build-a-Hacker-News-Clone-Using-React"><a href="#How-to-Build-a-Hacker-News-Clone-Using-React" class="headerlink" title="How to Build a Hacker News Clone Using React"></a><a href="https://www.freecodecamp.org/news/how-to-build-a-hacker-news-clone-using-react/" target="_blank" rel="noopener">How to Build a Hacker News Clone Using React</a></h3><p>如果有訂閱像 StarBugs 那麼優質的週刊，就應該會聽過有個網頁叫做 <a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a>(就像現在 😂)，而 <a href="https://news.ycombinator.com/" target="_blank" rel="noopener">Hacker News</a> 本身就有在<a href="https://github.com/HackerNews/API" target="_blank" rel="noopener">提供 API 在 GitHub</a> 上，既然又有了現成的網頁可以參考，也能找到開放的 API，不就輪到前端工程師們登場了嗎？文章中的作者就是利用的 <a href="https://github.com/HackerNews/API" target="_blank" rel="noopener">Hacker News 的 API</a>，用 React 寫了一個簡單的 Hacker News！大家也可以試試看哦！ 🙌</p><h3 id="10-Major-UI-UX-Design-Trends-for-2021"><a href="#10-Major-UI-UX-Design-Trends-for-2021" class="headerlink" title="10 Major UI/UX Design Trends for 2021"></a><a href="https://dev.to/codicacom/10-major-ui-ux-design-trends-for-2021-1n1j" target="_blank" rel="noopener">10 Major UI/UX Design Trends for 2021</a></h3><p>又到了部分前端工程師最需要的 UI 火力展示時間了（個人很喜歡看一些漂亮的設計 😂，非常視覺動物），但就像留言區一樓討論的，盲目的 follow 這些設計趨勢是沒有好處的，因為良好的 UI/UX 特性還是要以產品的類型和使用者需求下去設計（術業有專攻的部分）！話說如果看了上方的文章，也想做個 Hacker News，不妨從這篇文章裡挑個喜歡的設計來練練手！</p><h3 id="github1s"><a href="#github1s" class="headerlink" title="github1s"></a><a href="https://github.com/conwnet/github1s" target="_blank" rel="noopener">github1s</a></h3><p>有時候因為在 GitHub 上面太難閱讀程式碼了，總是希望可以在熟悉的介面 Visual Studio Code 中跳來跳去，所以通常都會先 clone 後再慢慢閱讀，而 <a href="https://github.com/conwnet/github1s" target="_blank" rel="noopener">github1s</a> 主打著，只需一秒就能讓你在 VS Code 上閱讀 GitHub 上的程式碼！妳只要在某個 repo 下，把網址的 github 改成 github1s 就可以了，各位一定要試看看！如果覺得每次都要改很麻煩，README.md 最後也有附上一些 Browser 的 extensions 可以更方便使用！</p><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><h3 id="New-aspect-ratio-CSS-property"><a href="#New-aspect-ratio-CSS-property" class="headerlink" title="New aspect-ratio CSS property"></a><a href="https://web.dev/aspect-ratio/?fbclid=IwAR2y11dK1vANSdGFDxAShFV7gfKgk8s4EoaUklHtdO45FXgC1ABwmxXgv1k" target="_blank" rel="noopener">New aspect-ratio CSS property</a></h3><p>當初看到這篇文章的時候真的蠻興奮的，以往要寫一個 aspect-ratio box 必須要自己去設定 <code>padding-bottom</code>，例如 <code>padding-bottom: 56.25%</code> 代表 16:9 的比例，但這個真的有夠不直觀直到今日我還是要上網查一下各個比例的 aspect-ratio 值，但現在 CSS3 直接產生一個新的屬性叫 <code>aspect-ratio</code> 透過這篇文章一起來看看新的屬性有什麼功能吧！</p><blockquote><p>P.S. 目前這個屬性瀏覽器支援度還是比較低，不建議現在進行轉換，想知道這個屬性目前瀏覽器的支援度可以點擊<a href="https://caniuse.com/?search=aspect-ratio" target="_blank" rel="noopener">這裡</a></p></blockquote><h3 id="background-image-vs-html-img-tag"><a href="#background-image-vs-html-img-tag" class="headerlink" title="background-image vs html img tag"></a><a href="https://buildawesomewebsites.com/html-img-vs-css-background-image/" target="_blank" rel="noopener">background-image vs html img tag</a></h3><p>這是個蠻有趣的議題，到底是 html tag 中的 <code>&lt;img /&gt;</code> 效能好還是 CSS 屬性的 <code>background-image</code> 效能好？兩者都可以達到一樣的視覺效果但背後的做法完全不同，這篇文章解釋了兩者的差異，有興趣的讀者不妨可以看一下增加一些冷知識XD</p><h3 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a><a href="https://cythilya.github.io/2018/05/22/bem/" target="_blank" rel="noopener">BEM</a></h3><p>之前在寫網頁的時候都會覺得 <code>className</code> 的命名很難理解元素跟元素之間的關聯性，很常把一些不相關的 <code>className</code> 濫用導致最後程式碼難以理解，因此有一大段時間自己都是用 <code>styled-component</code> 或 <code>inline-style</code> 的方式解決這個問題，但缺點就是很難重複利用，直到認識了 <a href="http://getbem.com/introduction/" target="_blank" rel="noopener">BEM</a> 才徹底的解決了上面的問題，透過這篇文章讓大家可以更了解 <code>className</code> 的命名規則該如何設計會比較直觀～</p><h2 id="Elastic-Search"><a href="#Elastic-Search" class="headerlink" title="Elastic Search"></a>Elastic Search</h2><h3 id="An-Elasticsearch-Tutorial-Getting-Started"><a href="#An-Elasticsearch-Tutorial-Getting-Started" class="headerlink" title="An Elasticsearch Tutorial: Getting Started"></a><a href="https://logz.io/blog/elasticsearch-tutorial/" target="_blank" rel="noopener">An Elasticsearch Tutorial: Getting Started</a></h3><p>Elastic Search 是一個開源的分散式搜尋引擎，很擅長對資料做搜尋以及分析，而且還支援使用 RESTful API 進行 query，所以從 2010 年發佈到現在已經有非常大量的使用者。如果想入門的話這邊有一篇文章教你怎麼把 Elastic Search 跑起來，然後用 RESTful API 去進行 CRUD，很簡單的一篇文章～</p><h3 id="Install-Elasticsearch-with-Docker"><a href="#Install-Elasticsearch-with-Docker" class="headerlink" title="Install Elasticsearch with Docker"></a><a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html" target="_blank" rel="noopener">Install Elasticsearch with Docker</a></h3><p>如果看完上面那篇文章，覺得要把 Elastic Search 裝在自己電腦上太髒太麻煩的話，可以參考這份官方文件，文件中已經把 single node cluster 跟 multi-node cluster 所需的參數都設定好了，只要把 docker 裝好，然後跑他給的指令，就可以馬上開始使用 Elastic Search 了～</p><h3 id="我的-ElasticSearch-進化之旅"><a href="#我的-ElasticSearch-進化之旅" class="headerlink" title="我的 ElasticSearch 進化之旅"></a><a href="https://medium.com/starbugs/%E6%88%91%E7%9A%84-elasticsearch-log-%E6%94%B6%E9%9B%86%E4%B9%8B%E6%97%85-39016c3b9a29" target="_blank" rel="noopener">我的 ElasticSearch 進化之旅</a></h3><p>說到 Elastic Search 就不得不推一下小城哥的文章，對於 ES 使用者來說要怎麼把 ES 的狀態調整到最好，並且盡量降低花費是很重要的。所以這篇文章中小城哥分享了他架設 Elastic Search 的四個階段，用一句話來總結就是如何讓花費越來越低</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Scaling-Kubernetes-to-7-500-Nodes"><a href="#Scaling-Kubernetes-to-7-500-Nodes" class="headerlink" title="Scaling Kubernetes to 7,500 Nodes"></a><a href="https://openai.com/blog/scaling-kubernetes-to-7500-nodes/" target="_blank" rel="noopener">Scaling Kubernetes to 7,500 Nodes</a></h3><p>OpenAI 常會使用 Kubernetes 叢集來幫忙協助訓練機器學習模型，繼之前把單一 K8s 叢集擴展到 2500 個節點之後，這次變本加厲擴展到 7500 個節點，並把學習到的經驗以及為解決的問題透過這篇文章記錄下來回饋給社群</p><h3 id="How-to-setup-Kafka-cluster-for-15K-events-per-second-on-AWS-using-Docker"><a href="#How-to-setup-Kafka-cluster-for-15K-events-per-second-on-AWS-using-Docker" class="headerlink" title="How to setup Kafka cluster for 15K events per second on AWS using Docker"></a><a href="https://itnext.io/how-to-setup-kafka-cluster-for-15k-events-per-second-on-aws-using-docker-d34539873589" target="_blank" rel="noopener">How to setup Kafka cluster for 15K events per second on AWS using Docker</a></h3><p>在這篇文章中作者詳細的手把手紀錄在 AWS 中要如何使用 Docker 架設出可以承受與處理每秒<strong>一萬五千個訊息</strong> (每個訊息為 1KB 左右) 的 Kafka 和 Zookeeper 叢集，而且還有考量到 HA 和監控機制！</p><h3 id="iamlive-Generate-a-basic-IAM-policy-from-AWS-client-side-monitoring"><a href="#iamlive-Generate-a-basic-IAM-policy-from-AWS-client-side-monitoring" class="headerlink" title="iamlive: Generate a basic IAM policy from AWS client-side monitoring"></a><a href="https://github.com/iann0036/iamlive" target="_blank" rel="noopener">iamlive: Generate a basic IAM policy from AWS client-side monitoring</a></h3><p>這次要來介紹的工具專案叫做 iamlive，它還滿酷的，它利用 AWS client-side monitoring 的功能，<strong>讓使用者在操作 AWS 的時候，自動把對應到該操作行爲的 IAM Policy 給產生出來</strong>，如此一來維運人員不用再慢慢地去手動把 IAM Policy 給刻出來</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 67 期 - 歡天喜地，東隆東隆鏹</title>
      <link href="/2021/02/09/67-happy-chinses-new-year-2021/"/>
      <url>/2021/02/09/67-happy-chinses-new-year-2021/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="The-Great-Suspender-不能用了怎麼辦？來找尋替代方案！"><a href="#The-Great-Suspender-不能用了怎麼辦？來找尋替代方案！" class="headerlink" title="The Great Suspender 不能用了怎麼辦？來找尋替代方案！"></a><a href="https://medium.com/starbugs/38f1ee0142b7" target="_blank" rel="noopener">The Great Suspender 不能用了怎麼辦？來找尋替代方案！</a></h3><p>在 The Great Suspender 被 Google 下架後，有哪些使用方案，哪些方案是換湯不換藥。本篇文章帶大家探究各個替代方案的葫蘆裡是賣些甚麼藥，並且協助大家選擇最適合自己的方案。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="重新學習瀏覽器資源載入機制，這些年努力改善電商網站效能的旅程"><a href="#重新學習瀏覽器資源載入機制，這些年努力改善電商網站效能的旅程" class="headerlink" title="重新學習瀏覽器資源載入機制，這些年努力改善電商網站效能的旅程"></a><a href="https://jason-memo.dev/posts/relearn-browser-loading-resoure-improve-ec-site-performance-journey/" target="_blank" rel="noopener">重新學習瀏覽器資源載入機制，這些年努力改善電商網站效能的旅程</a></h3><p>當工程師聽到使用者反應網頁出現的速度很慢時，通常會從如何減少載入的 JavaScript 檔案下手（只下載該頁面必須的 JavaScript 檔案），但其實對使用者來說，他們感受速度最大的一部份是畫面呈現的速度，一起看看本篇文章的作者做了哪些事情，讓網頁載入的速度比以往更提高四倍之多吧！</p><h3 id="React-Vs-Vue-Vs-Angular-What-to-Choose-for-Web-Development"><a href="#React-Vs-Vue-Vs-Angular-What-to-Choose-for-Web-Development" class="headerlink" title="React Vs Vue Vs Angular: What to Choose for Web Development"></a><a href="https://northell.medium.com/react-vs-vue-vs-angular-what-to-choose-for-web-development-abc5565d3f11" target="_blank" rel="noopener">React Vs Vue Vs Angular: What to Choose for Web Development</a></h3><p>「該如何選擇 React、Vue 或是 Angular 呢？」這大概是從我第一次聽到，並開始學 React 開始就一直存在的問題，對許多初學者來說更不知道該從哪個下手投資報酬率比較高（其實可能都會選擇有中文文件的 Vue 開始 😂），但其實要學會框架的使用其實非常容易，也許只是一週就能夠建立一個簡單的網頁，重點在於能不能了解框架背後所實踐的原理及知識，應用各個框架自身的優缺點，而不是讓自己只停留在框架的應用層面上。</p><h3 id="How-the-Question-Mark-Operator-Works-in-JavaScript"><a href="#How-the-Question-Mark-Operator-Works-in-JavaScript" class="headerlink" title="How the Question Mark (?) Operator Works in JavaScript"></a><a href="https://www.freecodecamp.org/news/how-the-question-mark-works-in-javascript/" target="_blank" rel="noopener">How the Question Mark (?) Operator Works in JavaScript</a></h3><p>各位在寫 JavaScript 的時候，或多或少都會遇到需要去判斷 <code>undefined</code> 的情況，這時候最直覺的可能是用 <code>value || &#39;default value&#39;</code>，但在這麼寫的瞬間，通常就等於直接寫了一個 Bug，因為不只是 <code>undefined</code>，只要 <code>value</code> 還等於 <code>null</code> 或 <code>0</code> 等有意義的值都會被設置成 <code>default value</code>。面對這種情況，JavaScript 創造了一些用來處理 <code>undefined</code> 的 <code>?</code> 語法，看看文章中的範例，然後跟上吧！</p><h2 id="React"><a href="#React" class="headerlink" title="React"></a>React</h2><h3 id="React-Redux-and-Context-Behavior"><a href="#React-Redux-and-Context-Behavior" class="headerlink" title="React, Redux, and Context Behavior"></a><a href="https://blog.isquaredsoftware.com/2020/01/blogged-answers-react-redux-and-context-behavior/" target="_blank" rel="noopener">React, Redux, and Context Behavior</a></h3><p>上禮拜的推薦文章提到是否 Context API 可以搭配 custom hooks 取代 Redux，這禮拜推薦大家 Redux 作者寫的文章，接下來推薦的幾篇都會跟這些觀念環環相扣，首先要先了解 React、Redux、以及 Context 他們彼此的行為是什麼才能繼續往下深入研究。</p><h3 id="Why-React-Context-is-Not-a-“State-Management”-Tool-and-Why-It-Doesn’t-Replace-Redux"><a href="#Why-React-Context-is-Not-a-“State-Management”-Tool-and-Why-It-Doesn’t-Replace-Redux" class="headerlink" title="Why React Context is Not a “State Management” Tool (and Why It Doesn’t Replace Redux)"></a><a href="https://blog.isquaredsoftware.com/2021/01/context-redux-differences/?fbclid=IwAR3BWkOfnwWrNIg3dJNMi-I00P_TXmu2ycZo3_GK-umPl2Z1xsQomta9Wn4" target="_blank" rel="noopener">Why React Context is Not a “State Management” Tool (and Why It Doesn’t Replace Redux)</a></h3><p>首先 Context API 通常會寫成一個 Provider 元件把 value 往下 <strong>傳遞</strong> 給其他的元件使用，要特別注意粗體的 <strong>傳遞</strong> 二字，而 Redux 一開始使用也一樣要把 store 的物件藉由 Redux Provider <strong>傳遞</strong> 下去，既然兩者都是藉由 Provider 傳遞那想必 Redux 一定可以被 Context API 可以搭配 custom hook 來取代 Redux 吧！但要記住 Context API 並不是一個 <code>state machine</code>，所以如果專案對於 state 會進行非常頻繁的更新，且這個 state 是需要提供給非常多元件使用的話就建議用 Redux 來管理吧！</p><h3 id="Redux-Not-Dead-Yet"><a href="#Redux-Not-Dead-Yet" class="headerlink" title="Redux - Not Dead Yet!"></a><a href="https://blog.isquaredsoftware.com/2018/03/redux-not-dead-yet/" target="_blank" rel="noopener">Redux - Not Dead Yet!</a></h3><p>所以 Redux 會不會因為大 hook 時代就消失呢？作者表明了說不會！因為 Redux 能做的事情很多，但目前大多數的專案都是走 SPA，頂多用 <code>react-router-dom</code> 改變一下 router 讓網站看起來很像 MPA，而 SPA 通常的設計都會是只取得該頁面需要的內容，基本上會讓每一個頁面彼此間不會有過多的關聯，這也符合網頁是 stateless 的設計，以往要取資料並且渲染無疑問一定是在 <code>componentDidMount</code> 的時候才去取資料，但這種設計模式已經被官方說是非常不好的設計模式，會讓使用者在 I/O 端等待過久，最好的設計方式是一開始非同步併發出去後再批次渲染，現在也非常多 custom hook 做到監聽資料是否有成功回傳的功能，例如 <a href="https://swr.vercel.app/" target="_blank" rel="noopener">SWR</a>，所以講了這麼多專案是否有需要 Redux 呢？我覺得最好的解答就是 Redux 作者說的不要 <strong>overuse Redux</strong> 比較好。</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="Rust-lang-Tips-and-Tricks"><a href="#Rust-lang-Tips-and-Tricks" class="headerlink" title="Rust lang Tips and Tricks"></a><a href="https://mudit.blog/rust-tips-and-tricks/" target="_blank" rel="noopener">Rust lang Tips and Tricks</a></h3><p>每個語言都會有自己的 Tips and Tricks，當然 Rust 也不意外，如果寫 Rust 已經寫了一陣子不知道該往哪前進，那就來看看他的小技巧吧～</p><h3 id="Rust-不适合开发-Web-API"><a href="#Rust-不适合开发-Web-API" class="headerlink" title="Rust 不适合开发 Web API"></a><a href="https://www.infoq.cn/article/MDqSIGbH5JO2kIVG7Pel" target="_blank" rel="noopener">Rust 不适合开发 Web API</a></h3><p>前陣子在 FB 看到有人分享這篇「Rust 不適合開發 Web API」，以為大概又是來戰語言的，所以馬上點了進去看他要說什麼。但看了之後才發現文章並不是在說 Rust 不好，而是在說目前 Rust 的 Web API 生態系還不夠完整。譬如說 NodeJS 有 passport 來實作各種登入方式、如果需要連接 AWS 或 GCP 服務也有非常完整的官方 SDK，但 Rust 這邊就真的還不夠成熟，所以我看完也是部分同意這篇的觀點</p><h3 id="Rust-is-a-hard-way-to-make-a-web-API"><a href="#Rust-is-a-hard-way-to-make-a-web-API" class="headerlink" title="Rust is a hard way to make a web API"></a><a href="https://www.reddit.com/r/programming/comments/kzqcjz/rust_is_a_hard_way_to_make_a_web_api" target="_blank" rel="noopener">Rust is a hard way to make a web API</a></h3><p>如果看完上面那篇還覺得意猶未盡的話，Reddit 上針對上面文章的討論串有有將近三百則留言，而且因為是在 programming 而不是在 Rust 板，所以有各式各樣的觀點，如果對於 Rust 到底適不適合寫 Web 有興趣的話，可以來看看大家的想法</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Deep-Dive-into-WebSockets"><a href="#Deep-Dive-into-WebSockets" class="headerlink" title="Deep Dive into WebSockets"></a><a href="https://blog.bitsrc.io/deep-dive-into-websockets-e6c4c7622423" target="_blank" rel="noopener">Deep Dive into WebSockets</a></h3><p>在一開始的網路世界裡，網路應用服務是由使用者所觸發的單純 HTTP 請求所組成，隨著科技的進步，兩方互相溝通即時傳輸資料的需求開始出現，有一些應用服務有低延遲的需求，譬如多人上遊戲，聊天軟體，即時更新的社群動態，線上運動計分板…等，而且這些需求的解決方案便是…WebSockets！隨著他被普遍接受之後，越來越多函式庫的出現後，簡化了他的整合使用，因此大部分的人在不了解內部原理的情況下開始使用該技術，進而導致效能低落，所以這篇文章嘗試涵蓋 WebSockets 重要的基本屬性，讓大家可以很清楚的知道該如何去使用它</p><h3 id="Cloud-Native-Computing-Foundation-Announces-Open-Policy-Agent-Graduation"><a href="#Cloud-Native-Computing-Foundation-Announces-Open-Policy-Agent-Graduation" class="headerlink" title="Cloud Native Computing Foundation Announces Open Policy Agent Graduation"></a><a href="https://www.cncf.io/announcements/2021/02/04/cloud-native-computing-foundation-announces-open-policy-agent-graduation/" target="_blank" rel="noopener">Cloud Native Computing Foundation Announces Open Policy Agent Graduation</a></h3><p>上週又有專案從 CNCF 畢業了，這次畢業的是自己一直有在關注的 Policy as Code 工具 Open Policy Agent (OPA)，因為隨著越來越多人的採用，透明的管理流程，功能面的成熟度提升，對社群貢獻，專案維護，包容性都有高度的實體輸入，所以就順理成章的畢業啦～這邊不免俗的提一下 OPA 是什麼，它是一個開源的通用型 Policy Engine，整個架構每個層面的 Policy 都可以透過使用它來全部搞定，該專案於 2018 四月進到 CNCF Sandbox, 一年後晉升到 Incubation，有超過來自 30 個組織貢獻過 OPA，而主要四個維護者則來自於 Google, Microsoft, VMware 和 Styra，對於 Policy as Code 還沒有研究的人，推薦可以看看 OPA 這個工具</p><h3 id="cert-checker"><a href="#cert-checker" class="headerlink" title="cert-checker"></a><a href="https://github.com/mogensen/cert-checker" target="_blank" rel="noopener">cert-checker</a></h3><p>最後一樣來介紹一個小專案叫做 cert-checker，從名字就可以看出來，他是用來監控 Cerfiticate 的工具，而且把取得的資訊透過 Metric 輸出給 Prometheus，方便繪製成 Dashboard 觀看或是提前發出告警通知，畢竟在這個講究安全的資訊時代，SRE 所要管理的 Certificate 越來越多，而且有效期限還越來越短 T_T</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 66 期 - 我的心已經在年假上了</title>
      <link href="/2021/02/02/66-my-heart-is-already-living-the-new-year-vacation/"/>
      <url>/2021/02/02/66-my-heart-is-already-living-the-new-year-vacation/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="開源專案讀起來-從-SWR-來看看實務上的-Observer-Pattern（觀察者模式）"><a href="#開源專案讀起來-從-SWR-來看看實務上的-Observer-Pattern（觀察者模式）" class="headerlink" title="開源專案讀起來 | 從 SWR 來看看實務上的 Observer Pattern（觀察者模式）"></a><a href="https://medium.com/starbugs/%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%E8%AE%80%E8%B5%B7%E4%BE%86-%E5%BE%9E-swr-%E4%BE%86%E7%9C%8B%E7%9C%8B%E5%AF%A6%E5%8B%99%E4%B8%8A%E7%9A%84-observer-pattern-%E8%A7%80%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F-46c16c6fd724" target="_blank" rel="noopener">開源專案讀起來 | 從 SWR 來看看實務上的 Observer Pattern（觀察者模式）</a></h3><p>本週專欄主要討論的 Observer Pattern（觀察者模式）算是非常常見的模式之一，尤其是在同一資料在多個地方被使用到，且當資料改變時，需要更新所有使用該資料的地方的情境特別有用。Umm…上方像教科書裡會寫的定義可能不太親民，換個方式說：</p><p>當多個 component 共用同一個 state（不論 state 是保管在 react-redux 或 SWR），那當 state 更新時，所有使用到該 state 的 component 都要根據新資料重新 render 頁面！</p><p>如果還是不太清楚，待會文中也是會先用簡單的範例呈現，再來從程式碼中看看 Observer Pattern 是怎麼實現的！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="導入-TypeScript-應考慮之效益與成本"><a href="#導入-TypeScript-應考慮之效益與成本" class="headerlink" title="導入 TypeScript 應考慮之效益與成本"></a><a href="https://engineering.linecorp.com/zh-hant/blog/benefits-and-costs-to-consider-when-installing-typescript/" target="_blank" rel="noopener">導入 TypeScript 應考慮之效益與成本</a></h3><p>近幾年 TypeScript 越來越熱門，甚至登上 2020 最受開發者喜愛的語言第二名（對，來源又是 <a href="https://insights.stackoverflow.com/survey/2020#technology-most-loved-dreaded-and-wanted-languages-loved" target="_blank" rel="noopener">Stack Overflow 統計</a> 😂），但是當你在導入的時候是真的了解 TypeScript 的好，並覺得有需要呢？還是僅僅因為大家都在使用？其實 TypeScript 本身並不可怕，可怕的是將它導入到專案中的成本可能超乎你的想像。</p><h3 id="What-I-Wish-Every-Developer-Knew-About-let-In-Javascript"><a href="#What-I-Wish-Every-Developer-Knew-About-let-In-Javascript" class="headerlink" title="What I Wish Every Developer Knew About let In Javascript."></a><a href="https://hackernoon.com/what-i-wish-every-developer-knew-about-let-in-javascript-831q3138" target="_blank" rel="noopener">What I Wish Every Developer Knew About let In Javascript.</a></h3><p>在看這篇文章之前可以試著想想，在 JavaScript 裡，<code>var</code> 和 <code>let</code> 的差異在哪裡？在面對這個問題的時候你能夠回答多少答案呢？本文的作者對 <code>var</code> 和 <code>let</code> 的差異做了一些簡單的整理，且文章中也有提到關於 TDZ - temporal dead zone 的概念，值得抽空簡單瞭解一下！</p><h3 id="How-Hex-Code-Colors-Work-–-and-How-to-Choose-Colors-Without-A-Color-Picker"><a href="#How-Hex-Code-Colors-Work-–-and-How-to-Choose-Colors-Without-A-Color-Picker" class="headerlink" title="How Hex Code Colors Work – and How to Choose Colors Without A Color Picker"></a><a href="https://www.freecodecamp.org/news/how-hex-code-colors-work-how-to-choose-colors-without-a-color-picker/" target="_blank" rel="noopener">How Hex Code Colors Work – and How to Choose Colors Without A Color Picker</a></h3><p>本篇文章簡單解釋了 hex color（16 進位的顏色表示法）的組成以及使用 hex 表示顏色的好處。記得之前工作的時候，常常看到某個顏色就會找同事一起玩猜 hex 的遊戲，然後比誰猜得比較接近 😂，推薦大家看完這篇文章又剛好很無聊的話，之後也可以找同事一起玩，哈哈哈。</p><h3 id="Finally-a-CSS-only-solution-to-hover-on-touchscreens"><a href="#Finally-a-CSS-only-solution-to-hover-on-touchscreens" class="headerlink" title="Finally, a CSS only solution to :hover on touchscreens"></a><a href="https://medium.com/@mezoistvan/finally-a-css-only-solution-to-hover-on-touchscreens-c498af39c31c" target="_blank" rel="noopener">Finally, a CSS only solution to :hover on touchscreens</a></h3><p>這是一個非常有趣的前端議題，最近有個專案裡面有一個按鈕本身有 <code>:hover</code> 以及 <code>:active</code> 兩種樣式，但以前的我認為行動裝置並沒有 <code>:hover</code> 的樣式(嚴格說起來應該是沒辦法 trigger 出 <code>:hover</code> 的樣式)，但很奇怪的是每次點擊這個按鈕後都會跑出 <code>:hover</code> 的樣式出來，後來研究了一下才發現原來行動裝置在點擊完後會觸發 <code>:hover</code> ，要取消這個樣式必須要使用者自己點擊其他的區塊來移除樣式，不過要動到使用者的操作就絕對不是好解法，直到看了這篇<a href="https://medium.com/@mezoistvan/finally-a-css-only-solution-to-hover-on-touchscreens-c498af39c31c" target="_blank" rel="noopener">文章</a>才知道原來已經有 css 解法了，如果有讀者遇到類似的問題不妨也可以用這個方法試試看，說不定就解出來了～</p><h3 id="使用-React-Hooks-搭配-Context-API-取代-Redux"><a href="#使用-React-Hooks-搭配-Context-API-取代-Redux" class="headerlink" title="使用 React Hooks 搭配 Context API 取代 Redux"></a><a href="https://andyyou.github.io/2019/08/11/use-react-hooks-and-context-replace-redux/" target="_blank" rel="noopener">使用 React Hooks 搭配 Context API 取代 Redux</a></h3><p>這個算是我心中一個很難解的議題，以前 React 還在 class component 時期時無庸置疑 <a href="https://redux.js.org/" target="_blank" rel="noopener">Redux</a> 是一個非常好用的 state machine，但由於 Redux 有個非常大的缺陷就是無法處理非同步的 action 也因此有了 redux-saga 、 redux-thunk 、 redux-promise 、 redux-observable 等等 middleware 來處理非同步的狀態處理，這也造就了讓前端工程師需要學習更多的工具才能解決問題，但是現在 React 進入大 hook 時代，一堆 custom hook 以及 dependencies 的監聽讓你的 component 可以不用再處理那麼多的 state 管理，再加上 React 也同時更新了 <a href="https://zh-hant.reactjs.org/docs/context.html" target="_blank" rel="noopener">context</a> 的運用，所以到底 hook 有沒有需要 Redux 呢？這個問題一直在我心中沒有一個正確的解答XD</p><h3 id="svelte"><a href="#svelte" class="headerlink" title="svelte"></a><a href="https://blog.kalan.dev/2020-04-19-svelte-%E2%80%94-%E6%98%AF%E4%BB%80%E9%BA%BC%E8%AE%93%E6%88%91%E9%81%87%E8%A6%8B%E9%80%99%E6%A8%A3%E7%9A%84%E4%BD%A0/" target="_blank" rel="noopener">svelte</a></h3><p><a href="https://svelte.dev/" target="_blank" rel="noopener">svelte</a> 算是 2020 年最大的 JavaScript Framework 黑馬了吧，但為什麼拖到 2021 年才來講呢？是因為在 2020 年的 JavaScript Framework 排行榜中，svelte 竟然名列前茅，這讓前端工程師又更頭痛了，React 還沒學得淋漓盡致，Vue 也還沒摸透，更不要說還有一個換了一版本就要重寫的 Angular，現在還要多學一個 svelte 是不是在搞工程師XD 但 svelte 為什麼會突然受到那麼多人喜歡也不是沒有道理，svelte 只有 <code>document.createElement</code> 跟 <code>element.textContent</code> 的包裝而已，沒有 Virtual DOM 的概念，加上容量更小的 bundle file，和不用再額外學一些 framework 自己創出來的 API(對我就是在說 React XD)，只要會 JavaScript 最基本的語法就可以利用 svelte 把網頁寫的好效能也不差，非常適合初學網頁的人使用，看了這篇文章後也想開始學習 svelte 這個框架了XD</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><p>Go 在即將到來的 <a href="https://tip.golang.org/doc/go1.16" target="_blank" rel="noopener">1.16</a> 版本中，有一些滿有趣的新 feature，而且內建的 library 也有一點變動，所以推薦這三篇介紹 Go 1.16 的文章給大家讀讀～</p><h3 id="Go-1-16-推出-Embedding-Files"><a href="#Go-1-16-推出-Embedding-Files" class="headerlink" title="Go 1.16 推出 Embedding Files"></a><a href="https://blog.wu-boy.com/2020/12/embedding-files-in-go-1-16/" target="_blank" rel="noopener">Go 1.16 推出 Embedding Files</a></h3><p>首先是第一個新 feature - embedded files，以往如果專案裡面有一些執行過程中會用到的檔案、圖片，那就沒辦法把整份程式碼編譯成單一執行檔，但有了內建的 embedded files 之後，就可以把所有檔案及程式碼編譯成一個執行檔，雖然那個執行檔會比較肥（因為塞了檔案在裡面），但在 deploy 跟 release 時都會方便許多</p><h3 id="從一知半解到略懂-Go-modules"><a href="#從一知半解到略懂-Go-modules" class="headerlink" title="從一知半解到略懂 Go modules"></a><a href="https://myapollo.com.tw/zh-tw/golang-go-module-tutorial/" target="_blank" rel="noopener">從一知半解到略懂 Go modules</a></h3><p>Go 在 1.11 時就推出自己的 package management 工具 Go modules，但最初只是實驗性質所以預設是關閉的，而且那時還有 dep 跟 vendor 等等競爭對手。但在經過幾個版本的推動之後，Go 1.16 終於要預設開啟 Go modules 功能，也代表以後的依賴管理就是以 Go modules 為主了，所以還不熟悉他的朋友們得快點跟上囉</p><h3 id="A-Tour-of-Go-1-16’s-io-fs-package"><a href="#A-Tour-of-Go-1-16’s-io-fs-package" class="headerlink" title="A Tour of Go 1.16’s io/fs package"></a><a href="https://benjamincongdon.me/blog/2021/01/21/A-Tour-of-Go-116s-iofs-package/" target="_blank" rel="noopener">A Tour of Go 1.16’s io/fs package</a></h3><p>寫過一陣子 Go 的人應該都知道 Go 內建有個 package 叫 ioutil，但這個 package 原本的定位就怪怪，有一種「這些功能很好用，但不知道要放哪裡，所以就弄個 util」的感覺，所以 Go 決定要在 1.16 把 ioutil deprecate 掉，並且把原有的功能放到新的 package io/fs 裡面，所以快來看看最新的 io/fs 怎麼使用吧～</p><blockquote><p>如果覺得學不動了，為了讓舊版本的程式碼可以跑，ioutil 還是會繼續留在那邊，所以短時間內還不用擔心，不過有時間的話還是去了解了解 io/fs 比較好～</p></blockquote><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="The-DevOps-Tools-Lifecycle-Mesh-for-2021"><a href="#The-DevOps-Tools-Lifecycle-Mesh-for-2021" class="headerlink" title="The DevOps Tools Lifecycle Mesh for 2021"></a><a href="https://harness.io/blog/devops/devops-tools-lifecycle-mesh/" target="_blank" rel="noopener">The DevOps Tools Lifecycle Mesh for 2021</a></h3><p>DevOps Tool Chain 就像是名模生死鬥一般，有些不用多久的時間就被淘汰掉，也會一直有新的冒出來，而 Harness 這邊幫大家整理好 2021 年的 DevOps Tool，按照不同的功能屬性分類好，趕緊來瞧瞧看自己鑽研的領域有沒有多出新的角色，並且順便從各大分類中看看自己的技能樹有沒有少了什麼XD</p><h3 id="Terraform-Mono-Repo-vs-Multi-Repo-The-Great-Debate"><a href="#Terraform-Mono-Repo-vs-Multi-Repo-The-Great-Debate" class="headerlink" title="Terraform Mono Repo vs. Multi Repo: The Great Debate"></a><a href="https://www.hashicorp.com/blog/terraform-mono-repo-vs-multi-repo-the-great-debate" target="_blank" rel="noopener">Terraform Mono Repo vs. Multi Repo: The Great Debate</a></h3><p>有用 Terraform 或是其他 IaC 工具的人一定都會想要問究竟該使用 Mono Repo 或是 Multi Repo 來管理 IaC 程式碼，答案就是…這取決與你的組織！Mono Repo (這邊是指連 Module 都在同一個 Repo 內) 的好處就是從一個地方就可以取得所有 Infrastructure 的資訊，但缺點是開發起來不方便，效率也不好，Repos 的權限控管也不好做；而 Multi Repo 的好處就是 Module 拆開管理的話開發比較方便，也可以讓不同的團隊一起使用，引用的時候可以做到版本控制，權限控管也可以輕易達成，但缺點就是必須花時間去下載，官方建議可以透過 Git Submodule 的方式來解省一些本端開發的時間</p><h3 id="K8s-mirror"><a href="#K8s-mirror" class="headerlink" title="K8s-mirror"></a><a href="https://github.com/darkbitio/k8s-mirror" target="_blank" rel="noopener">K8s-mirror</a></h3><p>K8s-mirror 是一個新的專案，可以使用 repo 內的 kube-exporter.sh 腳本把 K8s 內所有的資源給匯出儲存成一個 JSON 格式的檔案，透過另外一個 etcd 和 kube-apiserver 就可以查看這個檔案，感覺用來做測試很方便，不過作者有說此專案目前在 PoC 的 Pre-Alpha 階段而已，請大家使用要小心</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 65 期 - 每天都 git pull，conflict 遠離我</title>
      <link href="/2021/01/26/65-remember-to-git-pull-every-day/"/>
      <url>/2021/01/26/65-remember-to-git-pull-every-day/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="送-PR-前，使用-Git-rebase-來整理你的-commit-吧！"><a href="#送-PR-前，使用-Git-rebase-來整理你的-commit-吧！" class="headerlink" title="送 PR 前，使用 Git rebase 來整理你的 commit 吧！"></a><a href="https://medium.com/starbugs/use-git-interactive-rebase-to-organize-commits-85e692b46dd" target="_blank" rel="noopener">送 PR 前，使用 Git rebase 來整理你的 commit 吧！</a></h3><p>大家好我是 Larry，因為我身邊有滿多朋友都不太熟悉 git rebase，也不知道他可以用來做什麼。所以這週的專欄想跟大家分享怎麼用 git rebase 來整理 commit，希望大家在看完後都能在 push 前把 commit 都整理好，才不會讓同事 review 得很痛苦XD</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="The-anatomy-of-a-Git-commit"><a href="#The-anatomy-of-a-Git-commit" class="headerlink" title="The anatomy of a Git commit"></a><a href="https://blog.thoughtram.io/git/2014/11/18/the-anatomy-of-a-git-commit.html" target="_blank" rel="noopener">The anatomy of a Git commit</a></h3><p>這週的專欄中有提到，commit ID 是由 commit message 還有其他很多屬性經過 hash 而來的，那一個 Git commit 內部到底究竟長什麼樣子？每個 Git commit 的 ID 又是根據哪些屬性產生出來？雖然不知道好像也沒關係，但當作冷知識增廣見聞一下也是不錯～</p><h3 id="另一種合併方式（使用-rebase）"><a href="#另一種合併方式（使用-rebase）" class="headerlink" title="另一種合併方式（使用 rebase）"></a><a href="https://gitbook.tw/chapters/branch/merge-with-rebase.html" target="_blank" rel="noopener">另一種合併方式（使用 rebase）</a></h3><p>想要把兩個 branch 合併，除了可以使用 merge 之外，其實 rebase 也可以用來合併 branch，而且如果用得好的話，歷史紀錄也會比 merge 漂亮很多哦～</p><h3 id="合併發生衝突了，怎麼辦？"><a href="#合併發生衝突了，怎麼辦？" class="headerlink" title="合併發生衝突了，怎麼辦？"></a><a href="https://gitbook.tw/chapters/branch/fix-conflict.html" target="_blank" rel="noopener">合併發生衝突了，怎麼辦？</a></h3><p>因為 rebase 的結果會跟 branch 當下的狀態以及 commit 的順序有關，所以當然也有可能發生 conflict，那 rebase 到一半因為 conflict 而卡住究竟要怎麼辦呢？快來看看龍哥的解法吧！</p><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><h3 id="lodash-get-vs-result"><a href="#lodash-get-vs-result" class="headerlink" title="lodash get vs result"></a><a href="https://appi2393.medium.com/lodash-get-or-result-f409e73e018b" target="_blank" rel="noopener">lodash get vs result</a></h3><p>lodash 是個非常好用的 JS Library 裡面提供了非常多的 method 讓開發者可以讓程式碼寫起來更好閱讀而且也有一定的效能在，裡面有兩個非常像的 method：<code>get</code> 以及 <code>result</code> 到底這兩個 method 要用哪呢？其實這兩個 method 有效能上的差距，這篇文章講述了兩個 method 的效能差別（懶人包以後用 <code>get</code> 取得物件的值就對了🤣）</p><h3 id="firebase-remote-config-fetcher"><a href="#firebase-remote-config-fetcher" class="headerlink" title="firebase remote config fetcher"></a><a href="https://firebase.google.com/docs/remote-config/loading" target="_blank" rel="noopener">firebase remote config fetcher</a></h3><p>不知道大家有沒有用過 firebase，firebase 有個非常好用的功能叫 remote config，透過這個 remote config 可以讓一些 constant 不用在程式碼中寫死會非常彈性，裡面有一個 method 是 <code>fetchAndActivate</code> 可以讓 remote config 在 fetch 的時候順便 activate，但這個的使用時機是什麼時候呢？官方給出了一些使用時機不妨可以看看～</p><h3 id="JS-get-last-element-of-an-array"><a href="#JS-get-last-element-of-an-array" class="headerlink" title="JS get last element of an array"></a><a href="https://www.codeblocq.com/2016/05/Get-the-last-element-of-an-Array-in-JavaScript/" target="_blank" rel="noopener">JS get last element of an array</a></h3><p>最近在找一些 JS 比較 tricky 的技巧來取得 JS 陣列中的最後一個元素，比較直觀的作法就是取得 <code>陣列長度 -1</code> 的元素就是最後一個元素了，但其實還有另一個作法就是 <code>slice(-1)</code>，透過 <code>slice(-1)</code> 就並且做陣列解構後可以取得陣列的最後一個元素，但兩者到底有什麼區別呢？這篇文章完整的告訴這兩個方法的效能差異。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-To-Implement-a-Queue-in-JavaScript-–-and-Beat-Arrays-at-Their-Own-Game"><a href="#How-To-Implement-a-Queue-in-JavaScript-–-and-Beat-Arrays-at-Their-Own-Game" class="headerlink" title="How To Implement a Queue in JavaScript – and Beat Arrays at Their Own Game"></a><a href="https://popovich.io/2020/2020-04-07-queue-javascript/" target="_blank" rel="noopener">How To Implement a Queue in JavaScript – and Beat Arrays at Their Own Game</a></h3><p>相信各位前端的大家在用 JavaScript 解 Leetcode 演算法的時候，常常會遇到沒有現成的資料結構可以使用，像是 Queue 或是 Stack 等等，但其實他們的原理非常簡單！非常容易就可以依照概念實作出來，但實作出來後又會發現好像用 JavaScript 原生的 Array 搭配 Array Method 也能達到相同的效果。那這兩這之間到底有什麼不同，到底需不需要自己實作一個？一起看看這篇文章！（延伸閱讀：<a href="https://blog.techbridge.cc/2016/06/24/javascript-data-structure-algorithm-stack/" target="_blank" rel="noopener">用 JavaScript 學習資料結構和演算法：堆疊（Stack）篇</a>）</p><h3 id="ES2021-ES12-New-Features"><a href="#ES2021-ES12-New-Features" class="headerlink" title="ES2021 / ES12 New Features"></a><a href="https://backbencher.dev/javascript/es2021-new-features" target="_blank" rel="noopener">ES2021 / ES12 New Features</a></h3><p>在你的印象中，現在的 JavaScript 是 ES 多少呢？已經進入到 ES12 啦！JavaScript 作為最常被使用的程式語言語言（根據 <a href="https://insights.stackoverflow.com/survey/2020" target="_blank" rel="noopener">2020 StackOverflow</a> 調查），更新速度真的越來越快，自從 2016 年的 ES6 就開始一年一更（可參考 <a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">ECMAScript 維基百科</a>），依照慣例相信今年年中就能開始使用新的語法了，快點進去確認有哪些功能是你期待許久的 🙌！</p><h3 id="10-Colour-Resources-You-Will-Love"><a href="#10-Colour-Resources-You-Will-Love" class="headerlink" title="10 Colour Resources You Will Love"></a><a href="https://dev.to/marcelcruz/10-colour-resources-you-will-love-26lp" target="_blank" rel="noopener">10 Colour Resources You Will Love</a></h3><p>在做 Side Project 的時候總覺得自己的網頁少了一點點…美感？特別是在最一開始無法決定網頁的主題色，或是很快的找到主題色卻不曉得可以和哪些色彩搭配產生更棒或更舒服的的視覺效果嗎？別緊張！讓專業的來！個人先私心推薦一個 <a href="https://colorhunt.co/" target="_blank" rel="noopener">Color Hunt</a>，常常讓我在 RGB 的世界中迷路時給我正確的方向（雖然也常常讓我產生選擇性障礙，每個都太好看了 😂）。如果你不喜歡，沒關係！上方的推薦文章還介紹了另外九個相當棒的色彩搭配網頁！其中一定會有你的 Mr.Right!</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="This-Week-in-Programming-Elasticsearch-Turns-AWS-into-an-Open-Source-Champion"><a href="#This-Week-in-Programming-Elasticsearch-Turns-AWS-into-an-Open-Source-Champion" class="headerlink" title="This Week in Programming: Elasticsearch Turns AWS into an Open Source Champion"></a><a href="https://thenewstack.io/this-week-in-programming-elasticsearch-turns-aws-into-the-open-source-champion/" target="_blank" rel="noopener">This Week in Programming: Elasticsearch Turns AWS into an Open Source Champion</a></h3><p>這週 Elastic 和 AWS 隔空交戰的炮火越演越烈，首先是 Elastic <a href="https://www.elastic.co/blog/licensing-change" target="_blank" rel="noopener">宣布要更改其授權政策</a>，再引起社群的廣泛討論之後，又發了<a href="https://www.elastic.co/blog/license-change-clarification" target="_blank" rel="noopener">一篇文章來澄清為什麼要這樣做</a>，並且<a href="https://www.elastic.co/blog/why-license-change-AWS" target="_blank" rel="noopener">再發一篇文章挑明跟大家講就是為了防堵 AWS</a>；而 AWS 也不能再裝死，<a href="https://aws.amazon.com/tw/blogs/opensource/stepping-up-for-a-truly-open-source-elasticsearch/" target="_blank" rel="noopener">宣布要自己來建立和維護以 Apache 2.0 授權的開源Elasticsearch 與 Kibana</a>，同時也抨擊 Elastic 接下來採用 SSPL 根本就不算是開源，而這場火從 2019 便開始燒了起來，並且越演越烈，以後兩邊各自維護自己的分支，不知道干戈會不會暫時平息，而大家會使用哪一邊維護的版本呢？！</p><h3 id="K3s-Private-Cluster"><a href="#K3s-Private-Cluster" class="headerlink" title="K3s Private Cluster"></a><a href="https://github.com/sagittaros/terraform-k3s-private-cloud" target="_blank" rel="noopener">K3s Private Cluster</a></h3><p>發現一個有趣的小專案，讓使用者可以使用 Terraform 將 K3s Cluster 架設於 AWS 中，提供給覺得 EKS 太貴太複雜，而且只想要運行一兩個小應用服務的人，也很適合拿來當作開發和測試環境</p><h3 id="Keeping-Git-Commit-Messages-Consistent-with-a-Custom-Template"><a href="#Keeping-Git-Commit-Messages-Consistent-with-a-Custom-Template" class="headerlink" title="Keeping Git Commit Messages Consistent with a Custom Template"></a><a href="https://dev.to/timmybytes/keeping-git-commit-messages-consistent-with-a-custom-template-1jkm" target="_blank" rel="noopener">Keeping Git Commit Messages Consistent with a Custom Template</a></h3><p>讓 Git Commit 訊息保持一致化，將會讓自己與與合作的團隊間擁有長期良好的合作關係；如果自己希望 Commit 的訊息可以擁有像樣一點的格式，或是完全看不懂自己過去提交的 Commit 訊息在寫什麼的話，這篇文章介紹如何透過 Git 的全域組態來設定 Commit 訊息的範本，讓你可以輕鬆地決定如何格式化 Commit 訊息，讓有所有的 Commit 井然有序</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 64 期 - 利用 Flux2 為 Kubernetes 達成 Configuration Management</title>
      <link href="/2021/01/19/64-flux2/"/>
      <url>/2021/01/19/64-flux2/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="利用-Flux2-為-Kubernetes-達成Configuration-Management"><a href="#利用-Flux2-為-Kubernetes-達成Configuration-Management" class="headerlink" title="利用 Flux2 為 Kubernetes 達成Configuration Management"></a><a href="https://medium.com/starbugs/%E5%88%A9%E7%94%A8-flux2-%E7%82%BA-kubernetes-%E9%81%94%E6%88%90configuration-management-e0cd7a19615e" target="_blank" rel="noopener">利用 Flux2 為 Kubernetes 達成Configuration Management</a></h3><p>自己管理的 K8s Cluster 已經十幾座了，而且還越來越多，究竟該怎麼自動化的管理他們呢？讓我們來看看 Flux version 2 如何解決這個問題</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="Rethinking-Design-Practices-ReactConf-AU-2020-筆記-—-Part-3"><a href="#Rethinking-Design-Practices-ReactConf-AU-2020-筆記-—-Part-3" class="headerlink" title="Rethinking Design Practices | ReactConf AU 2020 筆記 — Part 3"></a><a href="https://medium.com/starbugs/rethinking-design-practices-reactconf-au-2020-5507988f95e4" target="_blank" rel="noopener">Rethinking Design Practices | ReactConf AU 2020 筆記 — Part 3</a></h3><p>「建構一套 design system」一直是前端開發者們想做的事情，剛好 ReactConf AU 有一場演講是由 Seek 工作的 Mark Dalgleish 分享他的心得歷程，訴說他是如何建立一套 design system。讓我們透過這篇文章來看看該怎麼做比較好</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="State-of-JS-2020"><a href="#State-of-JS-2020" class="headerlink" title="State of JS 2020"></a><a href="https://2020.stateofjs.com/zh-Hant/" target="_blank" rel="noopener">State of JS 2020</a></h3><p>由 State of JS 對於 JS 生態系做的調查出來啦，整體而言 JS 還是一直在推出新 feature，像下面的文章介紹的 Optional Chaining 和 Nullish Coalescing 就是。而前端方面雖然還是三大框架為主，但最近用編譯器技術實作的前端框架 Svelte、跟以 ES Module 為主的 build tool Snowpack 都以很快的速度在成長。JS 未來會怎麼樣沒人知道，所以這邊分享這個 State of JS 給想要追上 JS 趨勢的人～</p><h3 id="來談-JavaScript-的-Optional-Chaining-和-Nullish-Coalescing"><a href="#來談-JavaScript-的-Optional-Chaining-和-Nullish-Coalescing" class="headerlink" title="來談 JavaScript 的 Optional Chaining 和 Nullish Coalescing"></a><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/%E4%BE%86%E8%AB%87-javascript-%E7%9A%84-optional-chaining-%E5%92%8C-nullish-coalescing-part-i-992625a1861d" target="_blank" rel="noopener">來談 JavaScript 的 Optional Chaining 和 Nullish Coalescing</a></h3><p>Optional Chaining 大概是近期 JS 的新 feature 中我最喜歡的一個，有了他之後終於可以不用再寫一堆落落長的 &amp;&amp;，不只程式碼變短了，可讀性也是大幅上升。而且這篇文章除了介紹之外還有分析在各平台的支援度，還沒用過的話趕快來讀讀這篇吧</p><h3 id="Node-Modules-at-War-Why-CommonJS-and-ES-Modules-Can’t-Get-Along"><a href="#Node-Modules-at-War-Why-CommonJS-and-ES-Modules-Can’t-Get-Along" class="headerlink" title="Node Modules at War: Why CommonJS and ES Modules Can’t Get Along"></a><a href="https://redfin.engineering/node-modules-at-war-why-commonjs-and-es-modules-cant-get-along-9617135eeca1" target="_blank" rel="noopener">Node Modules at War: Why CommonJS and ES Modules Can’t Get Along</a></h3><p>為什麼 JS 生態系中的 CommonJS 跟 ES Modules 兩個模組系統一直沒辦法合併起來呢？因為他們兩個不僅僅只有語法不同，就連底層的很多行為都不一樣</p><p>像 ESM 在 import 時會強制使用 strict mode 但 CommonJS 不會，導致用 ESM import 不符合 strict mode 的舊模組會一些奇怪的錯誤，而且這只是其中一個例子，他們兩個還有很多其他地方也都不一樣，想知道更多的話可以看看這篇～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="What-is-Variable-Naming-You-Ask-Here’s-How-it-Could-Save-Your-Life"><a href="#What-is-Variable-Naming-You-Ask-Here’s-How-it-Could-Save-Your-Life" class="headerlink" title="What is Variable Naming, You Ask? Here’s How it Could Save Your Life"></a><a href="https://hackernoon.com/what-is-variable-naming-you-ask-heres-how-it-could-save-your-life-5y4k31r8" target="_blank" rel="noopener">What is Variable Naming, You Ask? Here’s How it Could Save Your Life</a></h3><p>「你說變數命名是什麼？是一個可以拯救你生命的方法！」這是作者在進入另一個 Team 後的故事，其中像標題這麼深刻的體悟究竟是從哪裡來的，讓我們一起看看苦主怎麼說。</p><h3 id="10-ways-to-use-the-spread-operator-in-JavaScript"><a href="#10-ways-to-use-the-spread-operator-in-JavaScript" class="headerlink" title="10 ways to use the spread operator in JavaScript"></a><a href="https://dev.to/dailydevtips1/10-ways-to-use-the-spread-operator-in-javascript-1imb" target="_blank" rel="noopener">10 ways to use the spread operator in JavaScript</a></h3><p>在 JavaScript 中的 <code>...</code>（Operator，擴展運算子）絕對是學前看不懂是在幹嘛，了解後愛不釋手的一個語法 😂。文章中用各種範例介紹 10 個 Operator 大顯身手的情境！</p><h3 id="值得設計師好好收藏的插圖素材網站（圖片-PNG-向量-SVG）"><a href="#值得設計師好好收藏的插圖素材網站（圖片-PNG-向量-SVG）" class="headerlink" title="值得設計師好好收藏的插圖素材網站（圖片.PNG/向量.SVG）"></a><a href="https://riven.medium.com/%E5%80%BC%E5%BE%97%E8%A8%AD%E8%A8%88%E5%B8%AB%E5%A5%BD%E5%A5%BD%E6%94%B6%E8%97%8F%E7%9A%84%E6%8F%92%E5%9C%96%E7%B4%A0%E6%9D%90%E7%B6%B2%E7%AB%99-%E5%9C%96%E7%89%87-png-%E5%90%91%E9%87%8F-svg-456f58bd0a06" target="_blank" rel="noopener">值得設計師好好收藏的插圖素材網站（圖片.PNG/向量.SVG）</a></h3><p>不只設計師，就連前端工程師都很值得收藏的幾個網頁！如果常常在做 Side Project 的時候找來找去找不到一個自己喜歡的插圖，或是好不容易找到了卻有版權問題，不如趁現在來看看文章裡推薦的圖庫網站吧！</p><h3 id="5-top-React-Hook-Libraries"><a href="#5-top-React-Hook-Libraries" class="headerlink" title="5 top React Hook Libraries"></a><a href="https://blog.logrocket.com/5-top-react-hooks-libraries-compared/" target="_blank" rel="noopener">5 top React Hook Libraries</a></h3><p>現在 React 已經進入了大 Hook 時代，所謂的 React Hook 簡單來說就是利用 Function Component 的撰寫方式寫出元件，既然是 function 就會有很多好用的 method 陸續的被大神寫出來，這篇文章整理了 5 個好用的 Hook，非常適合給剛學習 React Hook 的使用者使用。</p><h3 id="html-input-type"><a href="#html-input-type" class="headerlink" title="html input type"></a><a href="https://twitter.com/addyosmani/status/1348902534363152385/photo/1" target="_blank" rel="noopener">html input type</a></h3><p>現在的前端工程師必須要越來越能為了使用者去優化一些操作體驗，尤其現在的產品很多都是強調 mobile first，在 input 的預設鍵盤顯示就更顯得重要了，透過一些 input type 的設定就可以讓使用者在輸入文字框的時候更加便利。</p><h3 id="網站安全🔒-伺服器端請求偽造-SSRF-攻擊"><a href="#網站安全🔒-伺服器端請求偽造-SSRF-攻擊" class="headerlink" title="網站安全🔒 伺服器端請求偽造 SSRF 攻擊"></a><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/%E7%B6%B2%E7%AB%99%E5%AE%89%E5%85%A8-%E4%BC%BA%E6%9C%8D%E5%99%A8%E8%AB%8B%E6%B1%82%E5%81%BD%E9%80%A0-ssrf-%E6%94%BB%E6%93%8A-%E9%A0%85%E8%8E%8A%E8%88%9E%E5%8A%8D-%E6%84%8F%E5%9C%A8%E6%B2%9B%E5%85%AC-7a5524926362" target="_blank" rel="noopener">網站安全🔒 伺服器端請求偽造 SSRF 攻擊</a></h3><p>現在的網站越來越複雜，以前的前端工程師頂多只要注意畫面有沒有跑版整體流程有沒有錯誤，現在的前端工程師不但要會基礎的切版外還要懂一些資訊安全，像是 <code>CSRF</code>、<code>XSS</code> 等等網路攻擊，這邊要介紹的是 <code>SSRF</code>，由於 <code>SSRF</code> 跟 <code>CSRF</code> 以及 <code>XSS</code> 等等不太一樣，通常的資訊安全都是利用使用者對於資安不了解才被攻擊，而 <code>SSRF</code> 則是直接利用伺服器的漏洞來攻擊網站的內部系統，這篇文章除了教大家 <code>SSRF</code>的原理外還寫了一些範例來模仿 <code>SSRF</code> 攻擊非常適合閱讀。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="10-best-practices-to-containerize-Node-js-web-applications-with-Docker"><a href="#10-best-practices-to-containerize-Node-js-web-applications-with-Docker" class="headerlink" title="10 best practices to containerize Node.js web applications with Docker"></a><a href="https://snyk.io/blog/10-best-practices-to-containerize-nodejs-web-applications-with-docker/" target="_blank" rel="noopener">10 best practices to containerize Node.js web applications with Docker</a></h3><p>在實踐 DevSecOps 上滿不錯的公司 Snyk，最近發表了一篇文章分享 10 個容器化 Node.js 應用服務的最佳實踐方式，其中有些算是比較常見的，例如要使用特定的 Container Image Tag，不要使用 latest，不要安裝不需要的函示庫…等，有使用 Node.js 的人不要錯過了～</p><h3 id="Building-On-Call-Culture-at-GitHub"><a href="#Building-On-Call-Culture-at-GitHub" class="headerlink" title="Building On-Call Culture at GitHub"></a><a href="https://github.blog/2021-01-06-building-on-call-culture-at-github/" target="_blank" rel="noopener">Building On-Call Culture at GitHub</a></h3><p>隨著 GitHub 服務的規模越來越大，產品的數量和複雜性持續的增加之下，所以需要不斷改進 on-call 的策略，讓 GitHub 繼續成為開發者最信賴的家，最一開始在 Monolithic 的架構下其實 On-Call 遇到很多問題，例如多數的工程師其實不會熟悉全部的程式碼和功能，而且大量的工程師輪替起來沒有效率，輪到的人也沒有信心解決問題，所以他們決定推行新的 On-Call 文化，讓工程師只需要為自己負責的程式碼 On-Call, 詳細做法可以參閱內文</p><h3 id="Announcing-CDK-for-Terraform-0-1"><a href="#Announcing-CDK-for-Terraform-0-1" class="headerlink" title="Announcing CDK for Terraform 0.1"></a><a href="https://www.hashicorp.com/blog/announcing-cdk-for-terraform-0-1" target="_blank" rel="noopener">Announcing CDK for Terraform 0.1</a></h3><p>去年八月 CDK for Terraform 剛推出的時候，自己還有寫<a href="https://medium.com/starbugs/cdk-for-terraform-%E5%88%9D%E8%A9%A6%E5%95%BC%E8%81%B2-86a80f1315db" target="_blank" rel="noopener">文章</a>介紹，過了將近半年正式推出 0.1 版，跟當初相比起來，現在多支援 Support C#，Java，並且加強與 Terraform Cloud 的整合度，而且當初這個開源專案的維護者Sebastian Korfmann 也加入了 HashiCorp，跟當初 Atlantis 的情況有一點點像，期待可以發展的越來越成熟</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 63 期 - 寒流來襲，程式碼可以先冰起來，等到夏天再拿出來寫嗎？</title>
      <link href="/2021/01/12/63-the-winter-is-coming-may-i-freeze-code/"/>
      <url>/2021/01/12/63-the-winter-is-coming-may-i-freeze-code/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="打造舒適的-Windows-開發體驗-我想開發-JS-該怎麼做"><a href="#打造舒適的-Windows-開發體驗-我想開發-JS-該怎麼做" class="headerlink" title="打造舒適的 Windows 開發體驗 我想開發 JS 該怎麼做?"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0%E8%88%92%E9%81%A9%E7%9A%84-windows-%E9%96%8B%E7%99%BC%E9%AB%94%E9%A9%97-%E6%88%91%E6%83%B3%E9%96%8B%E7%99%BC-js-%E8%A9%B2%E6%80%8E%E9%BA%BC%E5%81%9A-85917ecbe324" target="_blank" rel="noopener">打造舒適的 Windows 開發體驗 我想開發 JS 該怎麼做?</a></h3><p>如何在 Windows 舒適的 JS 環境呢？這篇文章從前端、後端與 Linux / Mac 使用者角度切入，提供一些比較容易上手的解決方案。</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="微服務很夯，那你有聽過微前端嗎？初探-Micro-Frontends-程式架構"><a href="#微服務很夯，那你有聽過微前端嗎？初探-Micro-Frontends-程式架構" class="headerlink" title="微服務很夯，那你有聽過微前端嗎？初探 Micro Frontends 程式架構"></a><a href="https://medium.com/starbugs/%E5%BE%AE%E6%9C%8D%E5%8B%99%E5%BE%88%E5%A4%AF-%E9%82%A3%E4%BD%A0%E6%9C%89%E8%81%BD%E9%81%8E%E5%BE%AE%E5%89%8D%E7%AB%AF%E5%97%8E-%E5%88%9D%E6%8E%A2-micro-frontends-%E6%9E%B6%E6%A7%8B-e0a8469be601" target="_blank" rel="noopener">微服務很夯，那你有聽過微前端嗎？初探 Micro Frontends 程式架構</a></h3><p>微服務 (Microservices) 是近年來隨著容器化技術成熟而變得非常流行的一種軟體系統架構。雖然本篇文章的主角並不是它，不過它背後的理念與實踐方式與今天的主角「Micro frontends 微前端」是高度相關的，因此我們還是有必要來好好理解一下它的基本概念。<br>要了解微服務，最簡單的方式就是與過往熟悉的開發架構，也就是單體式 (Monolithic) 的架構來做個比較</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Golang-for-JavaScript-developers"><a href="#Golang-for-JavaScript-developers" class="headerlink" title="Golang for JavaScript developers"></a><a href="https://deepu.tech/golang-for-javascript-developers-part-1/" target="_blank" rel="noopener">Golang for JavaScript developers</a></h3><p>想學 Go 但不知從何下手嗎？這邊有兩篇寫給 JS 開發者的 Go 入門指南，原本就熟悉 JS 的話，看完這篇差不多就可以開始寫 Go 了～</p><h3 id="Go-Advice"><a href="#Go-Advice" class="headerlink" title="Go Advice"></a><a href="https://github.com/cristaloleg/go-advice" target="_blank" rel="noopener">Go Advice</a></h3><p>如果你寫 Go 已經一陣子了，但不知道該怎麼精進，這邊有一些非常實用的 tips，有講到怎麼善用 Go 的語法及內建 library，寫出更好的 Go 程式碼</p><h3 id="Golang-的-string-interning-技巧"><a href="#Golang-的-string-interning-技巧" class="headerlink" title="Golang 的 string interning 技巧"></a><a href="https://kkc.github.io/2020/12/14/golang-string-interning/" target="_blank" rel="noopener">Golang 的 string interning 技巧</a></h3><p>String interning 是個用來減少 memory 使用量的小技巧，原理是讓相同內容的字串變數，指向同一組記憶體。但因為 Go 不太會自己做 interning，所以作者卡卡西示範了怎麼自己用 map 來做 interning，滿有趣的用實作來了解原理的例子～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="15-Reasons-Developers-Need-To-Learn-UX-Design"><a href="#15-Reasons-Developers-Need-To-Learn-UX-Design" class="headerlink" title="15 Reasons Developers Need To Learn UX Design"></a><a href="https://dev.to/veebuv/15-reasons-developers-need-to-learn-ux-design-16jl" target="_blank" rel="noopener">15 Reasons Developers Need To Learn UX Design</a></h3><p>文章中主要在闡述為什麼前端工程師也需要了解或學習 UX 設計，其中最讓我感到印象深刻的一點是，UX 設計的技能無法被自動化，想要做好 UX 就必須好好理解客戶的需求及具備與人的溝通能力，這些都是在你身上或是未來無法被學走的技能！</p><h3 id="Coolest-25-Web-Design-Trends-In-2021-that’ll-rock-the-world😎"><a href="#Coolest-25-Web-Design-Trends-In-2021-that’ll-rock-the-world😎" class="headerlink" title="Coolest 25+ Web Design Trends In 2021, that’ll rock the world😎"></a><a href="https://medium.com/quick-code/coolest-25-web-design-trends-in-2021-thatll-rock-the-world-388eb1144b7e" target="_blank" rel="noopener">Coolest 25+ Web Design Trends In 2021, that’ll rock the world😎</a></h3><p>前端工程師常常會擔心自己在沒有 UI 設計師的幫忙下，切出來的版看起來會很沒有質感，雖然 UI 設計師的專業技能我們學不走，但還是可以參考看看 2021 年最酷的幾種設計風格都長什麼樣子！</p><h3 id="The-React-Cheatsheet-for-2021‬-Real-World-Examples"><a href="#The-React-Cheatsheet-for-2021‬-Real-World-Examples" class="headerlink" title="The React Cheatsheet for 2021‬ (+ Real-World Examples)"></a><a href="https://www.freecodecamp.org/news/react-cheatsheet-with-real-world-examples/" target="_blank" rel="noopener">The React Cheatsheet for 2021‬ (+ Real-World Examples)</a></h3><p>這篇文章很適合給要學習 React 的前端工程師閱讀，裡面有超多 React 的基本用法以及爆炸多的例子，幾乎所有提到的觀念都有附上程式碼對應，非常清楚且容易閱讀！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="SRE-amp-DevOps-Interview-Question"><a href="#SRE-amp-DevOps-Interview-Question" class="headerlink" title="SRE &amp; DevOps Interview Question"></a><a href="https://www.learnsteps.com/tag/interviewquestions/" target="_blank" rel="noopener">SRE &amp; DevOps Interview Question</a></h3><p>這位作者寫了幾篇有關於 SRE &amp; DevOps 相關領域的面試問題，或許答案不是每個人都認同，但是自己覺得題目可以拿來一用，讓面試官跟面試者一起藉著討論的過程中了解彼此的想法</p><ul><li>What you need to learn in Linux?</li><li>How will you approach a network issue?</li><li>How will you design your cloud VPC and subnets?</li><li>How will you scale your current CI-CD pipeline?</li></ul><h3 id="Terraform-Cheat-Sheet"><a href="#Terraform-Cheat-Sheet" class="headerlink" title="Terraform Cheat Sheet"></a><a href="https://jayendrapatil.com/terraform-cheat-sheet/" target="_blank" rel="noopener">Terraform Cheat Sheet</a></h3><p>這篇文章把 Terraform 所有該懂的東西都條列式的整理出來，從架構，工作流程，模組，如何讀懂與撰寫，Backend，State 管理，State 的安全性，Logging，最後再提到 Terraform Cloud 和 Enterprise，推薦給想要迅速知道如何使用 Terraform 的人</p><h3 id="whaler"><a href="#whaler" class="headerlink" title="whaler"></a><a href="https://github.com/treebeardtech/whaler" target="_blank" rel="noopener">whaler</a></h3><p>最後要來推薦一個有趣的小工具叫做 whaler，他是一個用來視覺化 Docker Image 所使用硬碟空間的 CLI 工具，畢竟太大的 Image 會耗費硬碟空間，網路頻寬資源，因此使用這個工具可以讓開發者迅速發現哪些 Image 太大，再進一步檢查看看是不是包含了不需要的東西在裡面</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 62 期 - 星巴哥不只繼續陪你度過 2021，還要繼續一直到 20210</title>
      <link href="/2021/01/05/62-starBugs-accompant-you-all-until-20210/"/>
      <url>/2021/01/05/62-starBugs-accompant-you-all-until-20210/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="開源專案讀起來-聽說可以幫你保管資料再決定要不要更新的-SWR"><a href="#開源專案讀起來-聽說可以幫你保管資料再決定要不要更新的-SWR" class="headerlink" title="開源專案讀起來 | 聽說可以幫你保管資料再決定要不要更新的 SWR"></a><a href="https://medium.com/starbugs/%E9%96%8B%E6%BA%90%E5%B0%88%E6%A1%88%E8%AE%80%E8%B5%B7%E4%BE%86-%E8%81%BD%E8%AA%AA%E5%8F%AF%E4%BB%A5%E5%B9%AB%E4%BD%A0%E4%BF%9D%E7%AE%A1%E8%B3%87%E6%96%99%E5%86%8D%E6%B1%BA%E5%AE%9A%E8%A6%81%E4%B8%8D%E8%A6%81%E6%9B%B4%E6%96%B0%E7%9A%84-swr-d02dadc1116b?source=friends_link&sk=71db4d146f488ea0f715646342065aea" target="_blank" rel="noopener">開源專案讀起來 | 聽說可以幫你保管資料再決定要不要更新的 SWR</a></h3><p>對初學者來說，開源專案並沒有那麼好讀，開源專案裡的程式碼和一般在 MDN 上看到那些範例程式根本無法比較，不過在前幾個禮拜我有看到一篇文章，裡面作者說了一句話：「带着目的去看源码，我们只有带着问题出发的时候，才会具有更高的效率。」聽到後讓我一整個震驚，對啊！根本就沒有讀懂整個專案的必要，換個角度來說：</p><p>閱讀開源專案的目的是，找到我想知道的某個功能是如何實現的！</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="我不知道的-HTML-Semantic"><a href="#我不知道的-HTML-Semantic" class="headerlink" title="我不知道的 HTML Semantic"></a><a href="https://medium.com/starbugs/%E6%88%91%E4%B8%8D%E7%9F%A5%E9%81%93%E7%9A%84-html-semantic-cdad7f429c66" target="_blank" rel="noopener">我不知道的 HTML Semantic</a></h3><p>一直沒有做測驗直到最近在投履歷時 xx 公司請我去做 HTML、JavaScript、CSS 的測驗。其中 JS 跟 CSS 都過了。但… 果真又敗在最輕敵的 HTML 啊 !!!</p><p>題目幾乎都考 HTML Semantic。你可能覺得那有什麼難，新手時就該會使用 <code>&lt;header&gt;</code>、<code>&lt;footer&gt;</code>、<code>&lt;nav&gt;</code>、<code>&lt;section&gt;</code>、<code>&lt;article&gt;</code> 等等有意義的標籤給瀏搜尋引擎看，但是！測驗題目我真的幾乎完全不會，所以這篇會以印象中有出現的考題當副標 (真正考題會是單選題)，然後大概帶過概念．並不會很詳細的解說，有興趣的可以自己在上網查囉!</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="GitHub-CLI-is-Now-Available-Here’s-Why-You-Should-Be-Excited"><a href="#GitHub-CLI-is-Now-Available-Here’s-Why-You-Should-Be-Excited" class="headerlink" title="GitHub CLI is Now Available: Here’s Why You Should Be Excited"></a><a href="https://link.medium.com/SJ3j6yqAbbb" target="_blank" rel="noopener">GitHub CLI is Now Available: Here’s Why You Should Be Excited</a></h3><p>Github 官方出的 CLI 已經發佈好一陣子了，除了原本 git 就有的功能之外，還提供了管理 PR 跟 issue 的功能，還沒試過的朋友們快去看看吧～</p><h3 id="Git-驚魂記-斷電毁損修復"><a href="#Git-驚魂記-斷電毁損修復" class="headerlink" title="Git 驚魂記 - 斷電毁損修復"></a><a href="https://blog.darkthread.net/blog/git-corrupt-fix/" target="_blank" rel="noopener">Git 驚魂記 - 斷電毁損修復</a></h3><p>黑暗執行緒的作者黑大分享了他最近在做 git rebase 時突然遇到電腦斷電的情況，重開機後就發現整個 Git 資料夾竟然毀損了，還好最後有驚無險，成功把資料救了回來。</p><h3 id="Git-私服第一品牌-Gitea"><a href="#Git-私服第一品牌-Gitea" class="headerlink" title="Git 私服第一品牌 - Gitea"></a><a href="https://blog.darkthread.net/blog/gitea/" target="_blank" rel="noopener">Git 私服第一品牌 - Gitea</a></h3><p>有時開發團隊為了方便管理，或是不想另外花錢，會需要自架 Git server。但因為開源 Git server 的選擇太多了，如果還在猶豫要哪一個的話，可以參考看看黑大對於 Gitea 的介紹～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="網站安全🔒-目錄遍歷-Path-Traversal-攻擊手法"><a href="#網站安全🔒-目錄遍歷-Path-Traversal-攻擊手法" class="headerlink" title="網站安全🔒 目錄遍歷 Path Traversal 攻擊手法"></a><a href="https://medium.com/%E7%A8%8B%E5%BC%8F%E7%8C%BF%E5%90%83%E9%A6%99%E8%95%89/%E7%9B%AE%E9%8C%84%E9%81%8D%E6%AD%B7-path-traversal-%E6%94%BB%E6%93%8A%E6%89%8B%E6%B3%95-238218d5115d" target="_blank" rel="noopener">網站安全🔒 目錄遍歷 Path Traversal 攻擊手法</a></h3><p>如果對上禮拜 Larry 所寫的網站攻擊意猶未盡，這篇文章介紹了名為目錄遍歷 (Path Traversal) 的經典網站攻擊手法，不只告訴你原理，還教你如何防禦！</p><h3 id="Try-Catch-in-JavaScript-–-How-to-Handle-Errors-in-JS"><a href="#Try-Catch-in-JavaScript-–-How-to-Handle-Errors-in-JS" class="headerlink" title="Try/Catch in JavaScript – How to Handle Errors in JS"></a><a href="https://www.freecodecamp.org/news/try-catch-in-javascript/" target="_blank" rel="noopener">Try/Catch in JavaScript – How to Handle Errors in JS</a></h3><p>為了不讓程式碼的執行不會因為一個小錯誤就終止，適當的錯誤處理是非常重要的，作者在文章介紹了在 JavaScript 內常見的六種基本錯誤，以及他如何使用 <code>try...catch</code> 來處理它們，和使用時該注意的事項。</p><h3 id="5-GitHub-Repos-for-creating-Resumes"><a href="#5-GitHub-Repos-for-creating-Resumes" class="headerlink" title="5 GitHub Repos for creating Resumes"></a><a href="https://dev.to/ns23/5-github-repos-for-creating-resumes-e3k" target="_blank" rel="noopener">5 GitHub Repos for creating Resumes</a></h3><p>相信到了 2021 年已經有不少人準備要領一波年終轉職了，但在準備履歷表的過程又不想要和其他人的樣式長的大同小異嗎？沒關係！這裡介紹了 5 個開源專案能夠讓你建立看起來很專業的履歷！</p><h3 id="前端技能樹"><a href="#前端技能樹" class="headerlink" title="前端技能樹"></a><a href="https://roadmap.sh/frontend" target="_blank" rel="noopener">前端技能樹</a></h3><p>網路上很多人都會說：想要轉職成為工程師先成為前端工程師就對了，前端的入門門檻很低但真的是這樣嗎？這個網站整理了前端工程師必須要會的幾個技能並繪製成技能樹，連本身就是前端工程師的我都不知道原來要會這麼多技能XD</p><h3 id="React-技能樹"><a href="#React-技能樹" class="headerlink" title="React 技能樹"></a><a href="https://roadmap.sh/react" target="_blank" rel="noopener">React 技能樹</a></h3><p>學會了基本的前端後就要開始學習前端框架了，現今最流行的不外乎就是 React 但大家都知道 React 的學習門檻非常高尤其 JSX 的寫法顛覆了整個前端的世界，究竟要學好 React 需要先學會多少東西，這個網站也整理的非常好。</p><h3 id="braft-editor"><a href="#braft-editor" class="headerlink" title="braft-editor"></a><a href="https://www.yuque.com/braft-editor/be/lzwpnr" target="_blank" rel="noopener">braft-editor</a></h3><p>最近小弟的公司在使用 <code>Draft.js</code> 但熟悉 React 的人都知道 <code>Draft.js</code> 的學習門檻真的超高，尤其是要利用他非常彈性的設計去產生美觀的編輯區塊更是要花費不少功夫，基於工程師不想重複造輪子的個性(其實是自己懶得花時間設計介面XD 進而發現了這個基於 <code>Draft.js</code> 而產生的套件，而且使用方法也非常簡單很推薦想要練習 <code>Draft.js</code> 的開發者。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="HashiCorp-2020-Year-in-Review"><a href="#HashiCorp-2020-Year-in-Review" class="headerlink" title="HashiCorp 2020 Year in Review"></a><a href="https://www.hashicorp.com/blog/hashicorp-2020-year-in-review" target="_blank" rel="noopener">HashiCorp 2020 Year in Review</a></h3><p>首先讓我們回顧一下 HashiCorp 在 2020 完成了哪些事情，推出 Boundary 和 Waypoint 這兩個針對 Security 和 CI/CD 的產品，宣布了 HashiCorp Cloud Platform 把自己產品變成託管服務，既有的產品也都推出主要的功能更新，如 Nomad 來到了 1.0.0，Terraform 發佈了 0.13 與 0.14，Consul 與每一版的更新都加上不少強勁的功能，Packer 也開始支援 HCL2…期待在 2021 可以看到 HashiCorp 成長得更加茁壯</p><h3 id="ec2-spot-converter"><a href="#ec2-spot-converter" class="headerlink" title="ec2-spot-converter"></a><a href="https://github.com/jcjorel/ec2-spot-converter" target="_blank" rel="noopener">ec2-spot-converter</a></h3><p>自己本身用了滿多 AWS EC2 Spot Instance的，而在最近發現了一個滿有趣的專案，可以讓 AWS Insatnce 在 On Demand 和 Spot Instance 之間任意轉換，瞬間就可以讓花費少掉一半 = =+</p><h3 id="Hexops-Dockerfile-Best-Practices"><a href="#Hexops-Dockerfile-Best-Practices" class="headerlink" title="Hexops Dockerfile Best Practices"></a><a href="https://github.com/hexops/dockerfile" target="_blank" rel="noopener">Hexops Dockerfile Best Practices</a></h3><p>Hexops 撰寫了一份 Dockerfile 的最佳撰寫守則，例如：不能使用 Root 帳號，不要使用在 10,000 以下的 UID，使用靜態的 UID 和 GID，不要使用 latest Container Image Tag，使用 tini 當成 ENTRYPOINT，只把參數存在 CMD 中…等，有在寫 Dockerfile 的人可以在複習一次</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 61 期 - 天氣冷，每天睡到傻呼呼</title>
      <link href="/2020/12/29/61-so-cold-every-day/"/>
      <url>/2020/12/29/61-so-cold-every-day/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="跨出成為駭客的第一步，來打打看-CTF-Web-吧！"><a href="#跨出成為駭客的第一步，來打打看-CTF-Web-吧！" class="headerlink" title="跨出成為駭客的第一步，來打打看 CTF Web 吧！"></a><a href="https://medium.com/starbugs/ctf-the-first-step-to-becoming-a-hacker-a56eb8820fac" target="_blank" rel="noopener">跨出成為駭客的第一步，來打打看 CTF Web 吧！</a></h3><p>如果要說天底下最帥氣的職業是什麼？在電腦、網路如此發達的今日，我覺得莫過於當一個駭客。但要成為一名真正的駭客，就跟當工程師一樣，除了扎實的理論基礎之外，還需要大量的練習</p><p>但練習也不可能隨便亂打別人的網站，所以這週的專欄要來跟大家介紹駭客的練功場 — CTF，也順便講幾個 Web 領域的題目，讓大家知道打 CTF 大概是什麼感覺～</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="初探-Server-Side-Rendering-與-Next-js"><a href="#初探-Server-Side-Rendering-與-Next-js" class="headerlink" title="初探 Server-Side-Rendering 與 Next.js"></a><a href="https://medium.com/starbugs/%E5%88%9D%E6%8E%A2-server-side-rendering-%E8%88%87-next-js-%E6%8E%A8%E5%9D%91%E8%A8%88%E7%95%AB-d7a9fb48a964" target="_blank" rel="noopener">初探 Server-Side-Rendering 與 Next.js</a></h3><p>為了 SEO 跟使用者體驗著想，很多網站都開始使用 SSR(Server Side Rendering) ，但有嘗試過自己維護 React SSR 專案的人，就都知道整個架構會變得超級複雜，而且如果程式碼寫錯地方，三不五時就會找不到 window 或是 document 等瀏覽器才有的 API，還好現在有了 Next.js，終於不用再自己維護 SSR 部分的程式碼，可說是 React 開發者的一大福音</p><h2 id="CTF-Capture-The-Flag"><a href="#CTF-Capture-The-Flag" class="headerlink" title="CTF(Capture The Flag)"></a>CTF(Capture The Flag)</h2><h3 id="CTF-的三十道陰影"><a href="#CTF-的三十道陰影" class="headerlink" title="CTF 的三十道陰影"></a><a href="https://ithelp.ithome.com.tw/users/20121059/ironman/2810" target="_blank" rel="noopener">CTF 的三十道陰影</a></h3><p>這一系列是由 HITCON CTF 戰隊的成員 0xddaa 寫的，講了很多 CTF 的故事跟傳奇人物，在鐵人賽的活動期間甚至還被比喻為駭客列傳 XD，想了解 CTF 文化以及 Hitcon 的故事的話一定要看看</p><h3 id="身為-Web-工程師，你一定要知道的幾個-Web-資訊安全議題"><a href="#身為-Web-工程師，你一定要知道的幾個-Web-資訊安全議題" class="headerlink" title="身為 Web 工程師，你一定要知道的幾個 Web 資訊安全議題"></a><a href="https://medium.com/starbugs/%E8%BA%AB%E7%82%BA-web-%E5%B7%A5%E7%A8%8B%E5%B8%AB-%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%B9%BE%E5%80%8B-web-%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8%E8%AD%B0%E9%A1%8C-29b8a4af6e13" target="_blank" rel="noopener">身為 Web 工程師，你一定要知道的幾個 Web 資訊安全議題</a></h3><p>這週的專欄雖然有實際玩玩看 CTF，但對於攻擊的手法沒有很完整的解說，如果不太了解 SQL injection、XSS 等等攻擊原理的話，老莫這篇整理得非常詳細</p><h3 id="Top-Tools-for-Web-Application-CTF"><a href="#Top-Tools-for-Web-Application-CTF" class="headerlink" title="Top Tools for Web Application CTF"></a><a href="https://www.securitynewspaper.com/2019/10/21/top-tools-for-web-application-ctf-capture-the-flag/" target="_blank" rel="noopener">Top Tools for Web Application CTF</a></h3><p>想成為一名駭客，除了要掌握基本的攻擊原理之外，該要會的工具也要熟悉熟悉才行。這篇文章介紹了一系列可以對網站進行掃描、攻擊的工具，包括最常聽到的 SQLMap 跟 Burpsuite 等等，不管是想要打 CTF 或是想掃描自家的網站，都很推薦試試這些</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="CSS-Z-Index-Not-Working-How-to-Fix-It-Using-Stack-Order"><a href="#CSS-Z-Index-Not-Working-How-to-Fix-It-Using-Stack-Order" class="headerlink" title="CSS Z-Index Not Working? How to Fix It Using Stack Order"></a><a href="https://www.freecodecamp.org/news/css-z-index-not-working/" target="_blank" rel="noopener">CSS Z-Index Not Working? How to Fix It Using Stack Order</a></h3><p>在 CSS 中我們可以利用 <code>z-index</code> 來被設置 <code>position</code> 的 element，而在沒有使用 <code>z-index</code> 的情況下，瀏覽器則會使用預設的 stacking order 在頁面中堆疊 element。延伸閱讀 <a href="https://andyyou.github.io/2016/03/03/z-index/" target="_blank" rel="noopener">深入 css z-index 屬性</a>。</p><h3 id="你的-onscroll-不是你的-onscroll"><a href="#你的-onscroll-不是你的-onscroll" class="headerlink" title="你的 onscroll 不是你的 onscroll"></a><a href="https://medium.com/@mingjunlu/window-onscroll-vs-document-body-onscroll-9c331bb8d298" target="_blank" rel="noopener">你的 onscroll 不是你的 onscroll</a></h3><p>在 <a href="https://html.spec.whatwg.org/multipage/" target="_blank" rel="noopener">HTML Specification</a> 中有提到可以在 <code>document.body</code> 中透過某些 Event handler 來存取 <code>window</code> 中對應的 Event handler，而文章標題所提到的 <code>onscroll</code> 就是其中一個。</p><h3 id="Developer-Portfolios-as-Inspiration-✨"><a href="#Developer-Portfolios-as-Inspiration-✨" class="headerlink" title="Developer Portfolios as Inspiration ✨"></a><a href="https://dev.to/firangizg/developer-portfolios-as-inspiration-4p29" target="_blank" rel="noopener">Developer Portfolios as Inspiration ✨</a></h3><p>前端工程師要如何透過專業技能展現自己的能力是很重要的事情，但通常都找不到什麼好的靈感，此篇文章的作者整理了幾個很漂亮又有創意的個人網站，來看看他們是如何介紹自己的吧！🙌</p><h3 id="淺談JS運算子-amp-amp-和-及其優先順序"><a href="#淺談JS運算子-amp-amp-和-及其優先順序" class="headerlink" title="淺談JS運算子 &amp;&amp; 和 || 及其優先順序"></a><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/262019/" target="_blank" rel="noopener">淺談JS運算子 &amp;&amp; 和 || 及其優先順序</a></h3><p>JS 總有一些奇奇怪怪可以取得值的方法，有時候運用一些邏輯運算子不但可以縮短自身的程式碼也可以讓整體看起來更乾淨一些，不過有些 lint 不太建議用這種方式撰寫就是了XD</p><h3 id="使用HTTP-204狀態碼來節省API的頻寬用量"><a href="#使用HTTP-204狀態碼來節省API的頻寬用量" class="headerlink" title="使用HTTP 204狀態碼來節省API的頻寬用量"></a><a href="http://blog.clyang.net/2017/08/18/use-http-204-reduce-bandwidth/?fbclid=IwAR0Vs9HEszL2wJezQQt_lq-2ElXp42VxNy8ygwhJaStgG9XXw9pkE7ht-24" target="_blank" rel="noopener">使用HTTP 204狀態碼來節省API的頻寬用量</a></h3><p>小弟上班的公司有些 API 真的很常回傳 204 狀態碼，起初覺得疑惑不曉得為啥不回傳 200 就好一定要回傳 204，後來才知道有這個願故不過也不知道是不是為了減省頻寬就是了XD</p><h3 id="Refresh-Token的使用場景以及如何與JWT互動"><a href="#Refresh-Token的使用場景以及如何與JWT互動" class="headerlink" title="Refresh Token的使用場景以及如何與JWT互動"></a><a href="https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/2049/" target="_blank" rel="noopener">Refresh Token的使用場景以及如何與JWT互動</a></h3><p>最近小弟在設計 <code>refreshLogin</code> 的流程，目的是為了讓使用者可以不用太頻繁的重複登入只要重整頁面就可以取得最新的 token 藉以延長使用者的登入時間，不過這段流程到底要怎麼設計才會漂亮，這篇文章完整的闡述 refresh token 的更新流程。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Kubernetes-CRDs-Huge-Pain-In-Multi-Tenant-Clusters"><a href="#Kubernetes-CRDs-Huge-Pain-In-Multi-Tenant-Clusters" class="headerlink" title="Kubernetes CRDs = Huge Pain In Multi-Tenant Clusters"></a><a href="https://loft.sh/blog/kubernetes-crds-huge-pain-in-multi-tenant-clusters/" target="_blank" rel="noopener">Kubernetes CRDs = Huge Pain In Multi-Tenant Clusters</a></h3><p>與 Single-Tenant K8s Cluster 比較起來，Ｍulti-Ｔenancy 提供了許多的 Business 和技術上的優勢，但是 Ｍulti-Ｔenancy 也帶來了一些挑戰和痛點，其中之一便是要如何處理 K8s CRD (Custom Resource Definitions)，作者透過本文來解釋在 Ｍulti-Ｔenancy K8s 環境中處理 CRD 遇過的痛點，以及如何將這些問題最小化的方式</p><h3 id="Shifting-Cloud-Security-Left-—-Scanning-Infrastructure-as-Code-for-Security-Issues"><a href="#Shifting-Cloud-Security-Left-—-Scanning-Infrastructure-as-Code-for-Security-Issues" class="headerlink" title="Shifting Cloud Security Left — Scanning Infrastructure as Code for Security Issues"></a><a href="https://blog.christophetd.fr/shifting-cloud-security-left-scanning-infrastructure-as-code-for-security-issues/" target="_blank" rel="noopener">Shifting Cloud Security Left — Scanning Infrastructure as Code for Security Issues</a></h3><p>在傳統製造業中，提早在生產線發現問題就可以確保有問題的產品不會跑到消費者的手中，在軟體產業也是一樣的道理，假如可以在 Release Pipeline 的早期階段就將安全檢查給整合進去的話，就可以大幅度地降低解決安全問題所需要耗費的成本，並確保不會讓問題出現在生產環境中，在管理雲端環境時，大家常常會使用 Terraform 或是 CloudFormation 之類的工具來達成 Infrastructure as Code，作者在本文將會介紹並比較目前市面上可以對 Terraform 程式碼進行靜態分析的工具，讓大家可以在各種雲端安全問題和錯誤組態配置升級成危害公司的問題前就先將其找出來</p><h3 id="Practical-Canary-Releases-in-Kubernetes-with-Argo-Rollouts"><a href="#Practical-Canary-Releases-in-Kubernetes-with-Argo-Rollouts" class="headerlink" title="Practical Canary Releases in Kubernetes with Argo Rollouts"></a><a href="https://medium.com/soluto-engineering/practical-canary-releases-in-kubernetes-with-argo-rollouts-933884133aea" target="_blank" rel="noopener">Practical Canary Releases in Kubernetes with Argo Rollouts</a></h3><p>作者所在的公司 Soluto 透過微服務架構與眾多 CI/CD 工具相結合，使他們每天能夠快速地發佈多個版本，把最新的功能和修復帶給客戶，在此種快速迭代的過程中，有時候會在生產環境中發現問題，而在發生此種狀況時，站在公司的立場當然會希望客戶可以免於遭受到任何的困擾，同時開發者也可以儘早了解問題的成因，而這就是 Argo Rollouts 功能利用 Canary Release 方式所想要解決的問題；而此篇文章並不是要教導 “如何” 設定 Argo Rollouts，而是假設在大家已經知道它的工作原理下，想要跟大家探討如何解決可能面臨的問題，以及如何優化遭遇到的效能瓶頸問題</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 60 期 - Kubernetes Distribution 元年 - EKS Distro 想要說的事</title>
      <link href="/2020/12/22/60-kubernetes-distribution/"/>
      <url>/2020/12/22/60-kubernetes-distribution/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-Distribution-元年-EKS-Distro-想要說的事"><a href="#Kubernetes-Distribution-元年-EKS-Distro-想要說的事" class="headerlink" title="Kubernetes Distribution 元年 - EKS Distro 想要說的事"></a><a href="https://medium.com/starbugs/kubernetes-distribution-%E5%85%83%E5%B9%B4-eks-distro-%E6%83%B3%E8%A6%81%E8%AA%AA%E7%9A%84%E4%BA%8B-b3fb732b5afe" target="_blank" rel="noopener">Kubernetes Distribution 元年 - EKS Distro 想要說的事</a></h3><p>自己本身就是 K8s Distribution 的開發者，最近 AWS re:Invent 2020 宣佈推出 AWS EKS Distro，自己嘗試了一下之後，有一點想把這些年自己對於 K8s Distribution 的所見所聞分享出來，因此撰寫了此篇文章</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="身為-Web-工程師，你一定要知道的幾個-Web-資訊安全議題"><a href="#身為-Web-工程師，你一定要知道的幾個-Web-資訊安全議題" class="headerlink" title="身為 Web 工程師，你一定要知道的幾個 Web 資訊安全議題"></a><a href="https://medium.com/starbugs/%E8%BA%AB%E7%82%BA-web-%E5%B7%A5%E7%A8%8B%E5%B8%AB-%E4%BD%A0%E4%B8%80%E5%AE%9A%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E5%B9%BE%E5%80%8B-web-%E8%B3%87%E8%A8%8A%E5%AE%89%E5%85%A8%E8%AD%B0%E9%A1%8C-29b8a4af6e13" target="_blank" rel="noopener">身為 Web 工程師，你一定要知道的幾個 Web 資訊安全議題</a></h3><p>身為一個 Web 工程師，我們也許非常注重使用者體驗與網頁效能，希望使用者可以在使用產品的時候感到愉悅，也希望網頁無論是資源的載入速度或是頁面的渲染，甚至是後端 server 的效能，都可以盡量追求最佳化，然而如果忽略了網站的安全性，以至於服務上產生許多漏洞，讓不法之人可以趁機攻擊，那麼使用者體驗再好，效能再快的網站，都是脆弱 (Vulnerable) 且不及格的 。而這篇文將會以 Web 工程師的角度出發，說明一些我認為 Web 開發者應該要知道的資安議題，內容會包括：</p><ul><li>XSS (Cross-site scripting)</li><li>SQL Injection</li><li>CSRF</li><li>ClickJacking</li><li>Open Redirect</li><li>DOS</li><li>Insecure Direct Object Reference Vulnerability</li></ul><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Understanding-Memory-Management-in-JavaScript"><a href="#Understanding-Memory-Management-in-JavaScript" class="headerlink" title="Understanding Memory Management in JavaScript"></a><a href="https://hackernoon.com/understanding-memory-management-in-javascript-wx2f31wx" target="_blank" rel="noopener">Understanding Memory Management in JavaScript</a></h3><p>大家都知道在 JavaScript 中為變數指定值的時候會分配到內存，但是在 JavaScript 裡面並沒有如 C 那樣可以手動管理內存的 <a href="https://pubs.opengroup.org/onlinepubs/009695399/functions/malloc.html?ref=hackernoon.com" target="_blank" rel="noopener">malloc()</a> 與 <a href="https://en.wikipedia.org/wiki/C_dynamic_memory_allocation?ref=hackernoon.com#Overview_of_functions" target="_blank" rel="noopener">free()</a>，那麼 JavaScript 到底是如何判斷什麼時候該釋放那些不再用到的內存呢？一起來看看吧！</p><h3 id="this-vs-that"><a href="#this-vs-that" class="headerlink" title="this-vs-that"></a><a href="https://github.com/phuoc-ng/this-vs-that" target="_blank" rel="noopener">this-vs-that</a></h3><p>咦？這兩個屬性看起來都一樣啊？在剛學前端的時候總是會看到一堆語法都在處理類似的事情，但是它們到底有什麼不一樣啊？對！相信不會只有你感到疑惑，本週推薦的這個 repo 就來一一揭開那些長得很像的東西到底哪裡不同！</p><h3 id="CSS-Frosted-glass-credit-card"><a href="#CSS-Frosted-glass-credit-card" class="headerlink" title="CSS Frosted glass credit card"></a><a href="https://dev.to/dailydevtips1/css-frosted-glass-credit-card-3lak" target="_blank" rel="noopener">CSS Frosted glass credit card</a></h3><p>最近毛玻璃的設計風格好像很紅，那就來分享用原生 CSS 一步步來完成的小作品（雖然除了毛玻璃效果外還多了許多動畫 😂）！除了文章中的介紹外，下方的留言區也有提供一個超強的毛玻璃效果產生器 <a href="https://glassmorphism.com/" target="_blank" rel="noopener">Glassmorphism</a>。</p><h2 id="Golang"><a href="#Golang" class="headerlink" title="Golang"></a>Golang</h2><h3 id="Golang-lt-time-After-is-not-garbage-collected-before-expiry"><a href="#Golang-lt-time-After-is-not-garbage-collected-before-expiry" class="headerlink" title="Golang &lt;-time.After() is not garbage collected before expiry"></a><a href="https://medium.com/@oboturov/golang-time-after-is-not-garbage-collected-4cbc94740082" target="_blank" rel="noopener">Golang &lt;-time.After() is not garbage collected before expiry</a></h3><p>這篇文章很短，大概三分鐘就可以看完，內容是在說 Go 的 <code>time.After()</code> 在時間到之前不會被 GC 清掉，所以如果在短時間內大量使用 timer，可能會讓記憶體使用量突然暴增，進而導致 OOM(Out Of Memory)</p><h3 id="Testing-in-Go-—-Some-tools-you-can-use"><a href="#Testing-in-Go-—-Some-tools-you-can-use" class="headerlink" title="Testing in Go — Some tools you can use"></a><a href="https://medium.com/@andrewdavisescalona/testing-in-go-some-tools-you-can-use-f3e79b398d8d" target="_blank" rel="noopener">Testing in Go — Some tools you can use</a></h3><p>雖然 Go 有內建的測試工具可以使用，但因為有些功能仍然做不到，所以這篇文章分享了一些工具可以幫你輕易做到比較複雜的 Assertion、Mocking 還有自動產生 Mock，如果專案比較大、覺得內建的測試功能不夠用了可以試試</p><h3 id="Rust-vs-Go"><a href="#Rust-vs-Go" class="headerlink" title="Rust vs Go"></a><a href="https://bitfieldconsulting.com/golang/rust-vs-go" target="_blank" rel="noopener">Rust vs Go</a></h3><p>關於 Rust vs Go 的文章之前已經看過很多，不過這篇是我看過少數算是比較公正的，除了比較他們的語言特性之外，也有提到他們各自的設計理念。所以如果是有寫過 Rust 想學 Go、或是反過來想學 Rust，那可以先看看這篇，說不定之後會比較好上手</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="gitlab-ci-cd"><a href="#gitlab-ci-cd" class="headerlink" title="gitlab ci/cd"></a><a href="https://medium.com/nick-%E5%B7%A5%E7%A8%8B%E5%B8%AB%E5%AD%B8%E7%BF%92%E8%A8%98/%E6%95%99%E5%AD%B8-gitlab-ci-%E5%85%A5%E9%96%80%E5%AF%A6%E4%BD%9C-%E8%87%AA%E5%8B%95%E5%8C%96%E9%83%A8%E7%BD%B2%E7%AF%87-ci-cd-%E7%B3%BB%E5%88%97%E5%88%86%E4%BA%AB%E6%96%87-cbb5100a73d4" target="_blank" rel="noopener">gitlab ci/cd</a></h3><p>由於公司使用 gitlab 作為版本控制的網站，以前只有用過 github 以及 bitbucket 的我瞬間覺得 gitlab 能做到的事情真的有夠多，從 ci/cd 開始 gitlab 可以自動化執行非常多的功能，只要先設定好 <code>.gitlab-ci.yml</code> 就可以很輕鬆地達到 ci/cd 的效果，當然這邊只是自動化去觸發 ci/cd 而已，真正執行這些流程的還是需要依賴其他的工具來使用。</p><h3 id="gitlab-runner"><a href="#gitlab-runner" class="headerlink" title="gitlab runner"></a><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">gitlab runner</a></h3><p>想要順利執行 gitlab ci/cd 的流程必須要利用 gitlab runner 才可以執行，runner 簡單來說就是去跑這些自動化流程的 worker，必須要有 runner 才有資源去執行這些自動化流程，gitlab 的自動化流程也非常簡單，官網都有懶人做法非常適合我這種剛碰 DevOps 的人XD</p><h3 id="cloud-build"><a href="#cloud-build" class="headerlink" title="cloud build"></a><a href="https://cloud.google.com/cloud-build/docs/build-config" target="_blank" rel="noopener">cloud build</a></h3><p>前面提到 gitlab 只是執行自動化流程而已，真正的去跑 ci/cd 還是要依賴其他的工具，這邊推薦 google 的 cloud build 而且 google 相當佛心每天都有 120 分鐘免費 build 的時間，很適合我這種擁有客家精神的工程師XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 59 期 - 阿姨，我不想寫程式了！</title>
      <link href="/2020/12/15/59-hey-madam-I-dont-wanna-code-anymore/"/>
      <url>/2020/12/15/59-hey-madam-I-dont-wanna-code-anymore/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="打造舒適的-Windows-開發環境-—-WSL-終端機組合技"><a href="#打造舒適的-Windows-開發環境-—-WSL-終端機組合技" class="headerlink" title="打造舒適的 Windows 開發環境 — WSL + 終端機組合技"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0%E8%88%92%E9%81%A9%E7%9A%84-windows-%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83-terminal-%E7%B5%82%E7%AB%AF%E6%A9%9F%E8%88%87-wsl-76d9abdd7fae" target="_blank" rel="noopener">打造舒適的 Windows 開發環境 — WSL + 終端機組合技</a></h3><p>筆者是個 Mac / Linux 重度使用者，學生時期使用 Windows 開發實在雷，光是搞環境平均就要花一個禮拜以上。再換成一台二手的 Macbook 之後就一路大順暢，從此只用 Mac / Linux 環境開發。直到最近看到強者我朋友用 Windows 用得滿順的，不僅 Web 這些比較通用的東西跑得順，連 Linux 套件和 Docker 甚至 K8S 都可以順利執行。於是我就買了一台 Windows 電腦，那就來打造出能夠媲美 Linux 開發環境的舒適 Windows 開發體驗吧！</p><h2 id="星巴哥專欄作者，原創文章"><a href="#星巴哥專欄作者，原創文章" class="headerlink" title="星巴哥專欄作者，原創文章"></a>星巴哥專欄作者，原創文章</h2><h3 id="ReactConf-AU-2020-筆記-Part-2"><a href="#ReactConf-AU-2020-筆記-Part-2" class="headerlink" title="ReactConf AU 2020 | 筆記 - Part 2"></a><a href="https://medium.com/starbugs/reactconf-au-2020-note-part2-99ce51a00a08" target="_blank" rel="noopener">ReactConf AU 2020 | 筆記 - Part 2</a></h3><p>之前看了 4 場 ReactConf AU 2020 的演講後，最近又陸續看了幾場，每一場真的都收益良多。但是礙於 medium 寫文章的長度，只能先整理 2 場跟大家分享。在整理了 2 場的演講筆記後，當我在整理第 3 場時，突然跳出通知說 medium 無法儲存太長的文章 😅。</p><p>這篇筆記包括兩場演講，分別是 react-final-form 作者 Erik Rasmussen 所演講的 Modern Forms in React，以及 emotion 的維護者 Mitchell Hamilton 帶來的 Building with Monorepos。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Import-On-Interaction-Pattern"><a href="#The-Import-On-Interaction-Pattern" class="headerlink" title="The Import On Interaction Pattern"></a><a href="https://addyosmani.com/blog/import-on-interaction/?fbclid=IwAR28mdETvIvr4SXokURbpSCECddB4CjbVZItVFjGIu0cRyGjAv-x1SbcDcU" target="_blank" rel="noopener">The Import On Interaction Pattern</a></h3><p>有時候我們在開發網頁的時候，可能會載入一些使用者不會馬上使用或看見的 JavaScript 或是資料，而那些東西往往會造成網頁在第一次載入的時候花費太長的時間。此篇文章會介紹一些載入資源的方式，圖文並茂講得非常清楚！</p><h3 id="What-is-the-HTML-tag-and-why-do-I-need-it"><a href="#What-is-the-HTML-tag-and-why-do-I-need-it" class="headerlink" title="What is the HTML tag and why do I need it?"></a><a href="https://dev.to/dailydevtips1/what-is-the-wbr-html-tag-and-why-do-i-need-it-2fok" target="_blank" rel="noopener">What is the HTML tag and why do I need it?</a></h3><p>在英文單字超級長的時候，我們會希望控制他們在頁面上的斷行方式，此文章的作者就介紹了 HTML 的 <code>&lt;wbr&gt;</code> 標籤，讓我們可以控制英文單字的換行位置，然後亮眼的不只有 <code>&lt;wbr&gt;</code>，還有下方第一則留言所使用的 <code>&amp;shy;</code>！私心認為 <code>&amp;shy;</code> 看起來比較好 😂，至於他們有什麼不一樣，快點進去文章看看吧！</p><h3 id="Vue-Router4-0"><a href="#Vue-Router4-0" class="headerlink" title="Vue Router4.0"></a><a href="https://github.com/vuejs/vue-router-next/releases/tag/v4.0.0" target="_blank" rel="noopener">Vue Router4.0</a></h3><p>Vue Router4.0 的穩定版也隨著 Vue3 之後，終於在 12/8 發佈啦！現在的 Vue Router 被分成三個 Modules，分別為處理 address 的 History implementation、還有解析 routes 的 Router Matcher 和負責將每個 routes 聯繫起來的 Router！除了程式碼的組織架構改變之外，還改善了前代的哪些功能呢？快快快快看吧 🙌！</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="Mutability-and-Immutability-in-Python"><a href="#Mutability-and-Immutability-in-Python" class="headerlink" title="Mutability and Immutability in Python"></a><a href="https://medium.com/datadriveninvestor/mutable-and-immutable-python-2093deeac8d9" target="_blank" rel="noopener">Mutability and Immutability in Python</a></h3><p>這篇文章在解釋 Python 中的 mutable 跟 Immutable objects，而且也講解了 alias 跟 clone 的差異，很適合剛入門 Python 的人看看</p><h3 id="Pythonic-實踐：實用的-python-慣用法整理"><a href="#Pythonic-實踐：實用的-python-慣用法整理" class="headerlink" title="Pythonic 實踐：實用的 python 慣用法整理"></a><a href="https://mropengate.blogspot.com/2020/07/pythonic-python.html" target="_blank" rel="noopener">Pythonic 實踐：實用的 python 慣用法整理</a></h3><p>Python 的語法跟其他語言比起來非常簡單而且有彈性，因此也誕生了許多專屬的寫法，而這篇文章就是要教你怎麼把程式碼寫得 pythonic，把 Python 的語法糖跟特性完全發揮出來</p><h3 id="Profiling-CPython-at-Instagram"><a href="#Profiling-CPython-at-Instagram" class="headerlink" title="Profiling CPython at Instagram"></a><a href="https://link.medium.com/O6D3RMIpHab" target="_blank" rel="noopener">Profiling CPython at Instagram</a></h3><p>Instagram 後端的商業邏輯是用 Python 寫成的，而這篇就是他們在分享要怎麼蒐集需要的資訊，並且找出是什麼原因導致效能不好，很不錯的實務經驗分享</p><h2 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h2><p>這週來推薦幾個在 GitHub 上面看到的有趣 repository，不得不說 GitHub 果然是全世界最大的工程師交流網站，上面總是會有一些奇奇怪怪的 repo XD</p><h3 id="screeps"><a href="#screeps" class="headerlink" title="screeps"></a><a href="https://github.com/screeps/screeps" target="_blank" rel="noopener">screeps</a></h3><p>以前有在 minecraft 裡面玩 minecraft，現在也有套件可以在讓你邊玩遊戲邊練習 JavaScript 了！而且最後還會為了 CPU 以及 Memory 資源而需要優化自己的演算法，網路上也有很多人會分享自己的演算法，看到一堆大大都會分享 O(n) 之類的寫法就覺得自嘆不如，大家不妨也可以下載下來玩玩看XD</p><h3 id="xash3d"><a href="#xash3d" class="headerlink" title="xash3d"></a><a href="https://github.com/FWGS/xash3d" target="_blank" rel="noopener">xash3d</a></h3><p>不曉得大家之前有沒有看過一篇報導是：<a href="https://today.line.me/tw/v2/article/Counter+Strike+1+6+%E7%B6%B2%E9%A0%81%E7%89%88%EF%BC%8COK+Let%E2%80%99s+Go+%E5%85%8D%E5%AE%89%E8%A3%9D%E9%96%8B%E7%80%8F%E8%A6%BD%E5%99%A8%E5%B0%B1%E8%83%BD%E7%B7%9A%E4%B8%8A%E7%8E%A9-GmDoNy" target="_blank" rel="noopener">CS 1.6 網頁版</a>，那時候的我看到之後就職業病發作跑去看一下到底是如何做出網頁版的 CS，看了一下作者介紹後才知道原來是用了這款 3D 建模工具，如果大家想要開發網頁小遊戲來練功的話，就可以使用這個套件了。</p><h3 id="Turnip-Calculator"><a href="#Turnip-Calculator" class="headerlink" title="Turnip-Calculator"></a><a href="https://github.com/elxris/Turnip-Calculator" target="_blank" rel="noopener">Turnip-Calculator</a></h3><p>前陣子非常流行的動物森友會不曉得大家有沒有玩過呢(謎之音：那遊戲早就過氣了好了，現在大家都在搶 PS5 了XD)<br>總之那時候我為了判斷每天的大頭菜是否要出售，尤其我又是一個賭性堅強的人所以有時候我就會不小心錯過應該要賣出的機會，沒想到就有大大直接寫了一個大頭菜計算機的網頁而且還有發佈在 GitHub 上，所以就可以知道動物森友會背後用來計算大頭菜的演算法了(其實這個才是目的XDD</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Goodbye-CentOS-T-T-Hello-Rocky-Linux"><a href="#Goodbye-CentOS-T-T-Hello-Rocky-Linux" class="headerlink" title="Goodbye CentOS T_T Hello Rocky Linux ^_^"></a><a href="https://www.zdnet.com/article/goodbye-centos-hello-rocky-linux/" target="_blank" rel="noopener">Goodbye CentOS T_T Hello Rocky Linux ^_^</a></h3><p>這週對於維運圈最大的新聞莫過於 CentOS 被 RedHat 拋棄，將把資源從 CentOS Linux 轉移到 CentOS Stream (更新比 RHEL 快且不穩定的版本)，而且預計 2020/12/31 終止對CentOS Linux 8 的支援，只能說有錢就是任性，先把開源專案納入麾下，接著做出重大變更殺得原來的使用者措手不及，這不知道是第幾次了</p><p>在 CentOS 使用者於社群媒體上一片哀嚎遍野的抱怨下，CentOS 的 Co-Founder, Gregory Kurtzer 宣佈將另外發布 RHEL 的重製版 Rocky Linux 來取代目前的 CentOS Linux, 讓我想起之前的 CoreOS 被 RedHat 改成 Fedora CoreOS 之後，也有了 FlatCar 的誕生</p><h3 id="School-of-SRE"><a href="#School-of-SRE" class="headerlink" title="School of SRE"></a><a href="https://linkedin.github.io/school-of-sre/" target="_blank" rel="noopener">School of SRE</a></h3><p>Linkedin 於 2019 年初開始於印度各地的校園招募，以確保使用複雜技術所推疊而成的服務可以一直維持高品質，而關鍵點就在於 SRE 團隊的召募上，在過程中不少相似的問題一再被提出，例如 SRE 的角色到底需要承擔什麼樣的問題，而想要朝此領域發展的話，需要哪一些技能跟知識？關於 SRE 的角色和職責，例如：監控，生產環境事件處理，定義 SLO/SLI…等，網路上散佈著大量的資源，但卻很少有資源可以指導一個人掌握這些基本技能，設定好一個初學者必須具備的條件，由於這些資源的匱乏導致很難招募到人進入該行業的職位，為此 Linkedin 創立了 SRE 學院，在本課程中專注於建立強大的基礎技能，涵蓋底下主題：</p><ul><li>Fundamentals Series<ul><li>Linux Basics</li><li>Git</li><li>Linux Networking</li></ul></li><li>Python and Web</li><li>Data<ul><li>Relational databases(MySQL)</li><li>NoSQL concepts</li><li>Big Data</li></ul></li><li>Systems Design</li><li>Security</li></ul><h3 id="Netflix-ConsoleMe"><a href="#Netflix-ConsoleMe" class="headerlink" title="Netflix ConsoleMe"></a><a href="https://github.com/Netflix/consoleme" target="_blank" rel="noopener">Netflix ConsoleMe</a></h3><p>這幾天發現 Netflix 有一個開源專案叫做 ConsoleMe，它可以將多個 AWS 帳號整合到同一個介面中一起管理，允許一般開發者與系統維運人員取得不同帳號的 Credential，而且可以讓不同角色的使用者請求和管理雲端資源權限，這算是看到目前為止 Netflix 開源的專案中最平易近人得了吧XD 畢竟多重帳號算是在中大型組織使用 AWS 必備的基本要件了！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 58 期 - 我會披星戴月的 Debug</title>
      <link href="/2020/12/08/58-debug-day-and-night/"/>
      <url>/2020/12/08/58-debug-day-and-night/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-JavaScript-玩轉設計模式-各司其職的-Chain-of-Responsibility-Pattern（責任鏈模式）"><a href="#用-JavaScript-玩轉設計模式-各司其職的-Chain-of-Responsibility-Pattern（責任鏈模式）" class="headerlink" title="用 JavaScript 玩轉設計模式 | 各司其職的 Chain of Responsibility Pattern（責任鏈模式）"></a><a href="https://medium.com/starbugs/%E7%94%A8-javascript-%E7%8E%A9%E8%BD%89%E8%A8%AD%E8%A8%88%E6%A8%A1%E5%BC%8F-%E5%90%84%E5%8F%B8%E5%85%B6%E8%81%B7%E7%9A%84-chain-of-responsibility-pattern-%E8%B2%AC%E4%BB%BB%E9%8F%88%E6%A8%A1%E5%BC%8F-864f394cce13" target="_blank" rel="noopener">用 JavaScript 玩轉設計模式 | 各司其職的 Chain of Responsibility Pattern（責任鏈模式）</a></h3><p>有時候我們在學習設計模式常常會被複雜的 UML 圖給綑綁，尤其是在沒有 Interface 的 JavaScript 上開發更是如此讓人覺得不太容易學習。本週專欄就以聽起來好像很難的 chain of responsibility pattern（責任鏈模式）為例子，帶大家如何用 JavaScript 來實現設計模式的意圖吧！</p><h2 id="好文募集"><a href="#好文募集" class="headerlink" title="好文募集"></a>好文募集</h2><h3 id="今晚，我想來點-Web-前端效能優化大補帖！"><a href="#今晚，我想來點-Web-前端效能優化大補帖！" class="headerlink" title="今晚，我想來點 Web 前端效能優化大補帖！"></a><a href="https://medium.com/starbugs/%E4%BB%8A%E6%99%9A-%E6%88%91%E6%83%B3%E4%BE%86%E9%BB%9E-web-%E5%89%8D%E7%AB%AF%E6%95%88%E8%83%BD%E5%84%AA%E5%8C%96%E5%A4%A7%E8%A3%9C%E5%B8%96-e1a5805c1ca2" target="_blank" rel="noopener">今晚，我想來點 Web 前端效能優化大補帖！</a></h3><p>效能是工程師在維護專案時非常重視的要點，不論是 Web 還是 App，甚至是需要大量運算資源的機器學習，都會想追求極致的效能，用高效率換取高價值。不過首先在文章的最開頭想給讀者灌輸一個 mindset：「就 Web Client Side 而言（其他領域我還不夠了解因此先不討論），並不是所有的應用都需要追求效能，有時候獲取效能的背後也許需要花上昂貴的成本，比較起來是得不償失的！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Celebrating-25-Years-of-JavaScript"><a href="#Celebrating-25-Years-of-JavaScript" class="headerlink" title="Celebrating 25 Years of JavaScript"></a><a href="https://blog.heroku.com/celebrating-25-years-of-javascript" target="_blank" rel="noopener">Celebrating 25 Years of JavaScript</a></h3><p>JavaScript 在 12/4 號的時候邁入 25 歲啦！除了眾所皆知的 JavaScript 只花 10 天就誕生之外，一起看看這 20 個年頭的 JavaScript 一路走來的歷史吧！</p><h3 id="The-Anatomy-of-package-json"><a href="#The-Anatomy-of-package-json" class="headerlink" title="The Anatomy of package.json"></a><a href="https://dev.to/laurieontech/the-anatomy-of-package-json-pi4" target="_blank" rel="noopener">The Anatomy of package.json</a></h3><p>在開發 Node 專案的時候，大家都一定會看過 package.json，也許你知道它在幫你管理專案裡用到的依賴套件，但除此之外其實還有很多資訊藏在裡面哦！</p><h3 id="我是如何阅读源码的"><a href="#我是如何阅读源码的" class="headerlink" title="我是如何阅读源码的"></a><a href="https://juejin.cn/post/6903335881227108366" target="_blank" rel="noopener">我是如何阅读源码的</a></h3><p>作者簡單的講解它是如何開始閱讀 GitHub 上那些像山一樣的原始碼，但其實更重要的是閱讀原始碼的心態，那就是帶著目的去閱讀，只有當你懷抱著問題出發，才會具有更高的學習效率！</p><h3 id="json-server"><a href="#json-server" class="headerlink" title="json server"></a><a href="https://github.com/typicode/json-server" target="_blank" rel="noopener">json server</a></h3><p>json server 是一套很常用來幫助前端在還沒有後端 API 時可以先用來在本機端起一個 CRUD server 來進行假的 API 串接，而且還支援各種 querystring 的串接，所以只要跟後端工程師討論好 API 介面再利用 json server 就可以很快速的開發網頁了。</p><h3 id="mockapi-io"><a href="#mockapi-io" class="headerlink" title="mockapi.io"></a><a href="https://www.mockapi.io/docs" target="_blank" rel="noopener">mockapi.io</a></h3><p>相信有些人一定會覺得還要在本機端起一個 server 是一件成本非常高的事情，畢竟能少寫一個檔案是一個XD 所以這邊要推薦一個懶人作法就是利用 mockapi.io 這個網站達到想要的需求，直接智慧化的建立 CRUD 資料，不過當然有好也有壞，這麼方便的結果就是不能太客製化需求，不過如果開發上是習慣建一個 model 來做資料的預處理，相信資料格式應該也不會是太大的問題才對X</p><h3 id="wtfjs"><a href="#wtfjs" class="headerlink" title="wtfjs"></a><a href="https://github.com/denysdovhan/wtfjs" target="_blank" rel="noopener">wtfjs</a></h3><p>這個主要是讓大家搏君一笑，小弟寫 js 也不過兩年其實就遇到很多 js 的坑，沒想到竟然有人把這些坑整理起來變成一個 github repo 而且還有 2 萬多顆星星真的是太神奇了XD 如果大家想多了解 js 的坑可以到這個 repo 上看一看，看完之後就可以開始放棄學習 js 了(誤</p><h2 id="Web-Performance"><a href="#Web-Performance" class="headerlink" title="Web Performance"></a>Web Performance</h2><h3 id="I-made-my-website-28ms-faster-with-content-visibility-🤓"><a href="#I-made-my-website-28ms-faster-with-content-visibility-🤓" class="headerlink" title="I made my website 28ms faster with content-visibility 🤓"></a><a href="https://dev.to/dailydevtips1/i-made-my-website-28ms-faster-with-content-visibility-466e" target="_blank" rel="noopener">I made my website 28ms faster with content-visibility 🤓</a></h3><p>雖然 28ms 真的很少XD，但如果一些常見的優化方法你都已經做了，還想讓網站更快，那可以研究看看 <code>content-visibility</code> 這個 CSS 屬性</p><h3 id="Things-You-Must-Know-Before-Using-a-CDN"><a href="#Things-You-Must-Know-Before-Using-a-CDN" class="headerlink" title="Things You Must Know Before Using a CDN"></a><a href="https://link.medium.com/b7zAUPkYqbb" target="_blank" rel="noopener">Things You Must Know Before Using a CDN</a></h3><p>為了讓網站以更快的速度載入所需要的資源，現在很多靜態檔案都會直接丟上 CDN，但 CDN 不是全部東西都丟上去就沒事了，有一些注意事項還是得花時間看看，不然弄得不好說不定會有反效果</p><h3 id="The-Ultimate-Guide-to-Web-Performance-🚀"><a href="#The-Ultimate-Guide-to-Web-Performance-🚀" class="headerlink" title="The Ultimate Guide to Web Performance 🚀"></a><a href="https://dev.to/ender_minyard/the-ultimate-guide-to-web-performance-ci4" target="_blank" rel="noopener">The Ultimate Guide to Web Performance 🚀</a></h3><p>如果上面兩篇還看不夠的話，這篇是 Web performance 的總整理，內容包括 HTML、CSS、圖片、字體的優化，很適合收藏起來，需要的時候再拿出來看</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="What’s-new-in-Kubernetes-1-20"><a href="#What’s-new-in-Kubernetes-1-20" class="headerlink" title="What’s new in Kubernetes 1.20?"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-20/" target="_blank" rel="noopener">What’s new in Kubernetes 1.20?</a></h3><p>這次新版的改動主要以功能改善居多，總共有 43 項，其中有 11 個功能進入到了 Stable ，15 個是全新的改善，17 個則是既有功能的持續改良中，由於都不是新的功能，所以改動的幅度比較小，例如升級完後的 kube-apiserver 在 HA 模式中可以運行的更好，重開的效率更佳，節點可以 Gracefully Shutdown…等，更多詳細內容請參閱連結內文</p><h3 id="AWS-re-Invent-2020-–-Announcements-From-the-News-Blog"><a href="#AWS-re-Invent-2020-–-Announcements-From-the-News-Blog" class="headerlink" title="AWS re:Invent 2020 – Announcements From the News Blog"></a><a href="https://aws.amazon.com/blogs/aws/aws-reinvent-announcements-2020" target="_blank" rel="noopener">AWS re:Invent 2020 – Announcements From the News Blog</a></h3><p>這次由於 COVID-19 的關係，所以 AWS re:Invent 並沒有在拉斯維加斯舉辦，取而代之的當然是變成線上版，不過精彩度一樣沒變，新功能大爆發，而這篇官方文章把在 re:Invent 期間發布的新聞都條列起來，有在使用 AWS 的人千萬不要錯過了！</p><h3 id="What-developers-need-to-know-about-Docker-Docker-Engine-and-Kubernetes-v1-20"><a href="#What-developers-need-to-know-about-Docker-Docker-Engine-and-Kubernetes-v1-20" class="headerlink" title="What developers need to know about Docker, Docker Engine, and Kubernetes v1.20"></a><a href="https://www.docker.com/blog/what-developers-need-to-know-about-docker-docker-engine-and-kubernetes-v1-20/" target="_blank" rel="noopener">What developers need to know about Docker, Docker Engine, and Kubernetes v1.20</a></h3><p>事主 <strong>Docker</strong> 也跳出來請大家不用擔心有關於 Kubernetes 之後要把 dockershim 移除的事情XD 其實這件事情真的已經醞釀好幾年了，當年 2016 大家都在想是不是因為 Docker 太過壯大，所以 Google 和 IBM 這些大公司跳出來一起催生 Containerd  的誕生，講好聽的就是要一起制定標準，難聽的就是我也要分一杯羹<br>；不過現在有在維運 K8s 的人應該是少數了，所以其實八成以上的人對於這個變更不會有什麼感覺，而 Docker 其實也滿成功的，大家不會講 Container 而是講 Docker，就像有些人以為 GitHub 就是 Git，不知道 Git 算是一種協定，其實還有 GitLab, BitBucket …等的存在</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 57 期 - 世上只有兩種程式語言：被罵得一無是處的，以及沒人在用的</title>
      <link href="/2020/12/01/57-there-are-only-two-languages-in-the-world/"/>
      <url>/2020/12/01/57-there-are-only-two-languages-in-the-world/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="以-Go-為例，圖解-Data-Alignment-如何影響記憶體使用量"><a href="#以-Go-為例，圖解-Data-Alignment-如何影響記憶體使用量" class="headerlink" title="以 Go 為例，圖解 Data Alignment 如何影響記憶體使用量"></a><a href="https://medium.com/starbugs/illustrate-how-data-alignment-affects-memory-usage-d29bf9d5bf08" target="_blank" rel="noopener">以 Go 為例，圖解 Data Alignment 如何影響記憶體使用量</a></h3><p>不知道大家在寫 Go 時有沒有注意過，一個 struct 所佔的空間不見得等於各個 field 加起來的空間，甚至有時把 field 宣告的順序調換一下，又會得到不同的結果（其他語言也會有類似的情況）。而今天的文章就是要從 CPU 抓資料的原理開始介紹，然後再講到 Data Structure Alignment（資料結構對齊），希望大家在看完之後能對 CPU 跟記憶體有更多認識～</p><h2 id="好文募集"><a href="#好文募集" class="headerlink" title="好文募集"></a>好文募集</h2><h3 id="找工作必須面對的煎熬與成長-—-國外篇"><a href="#找工作必須面對的煎熬與成長-—-國外篇" class="headerlink" title="找工作必須面對的煎熬與成長 — 國外篇"></a><a href="https://medium.com/starbugs/%E6%89%BE%E5%B7%A5%E4%BD%9C%E5%BF%85%E9%A0%88%E9%9D%A2%E5%B0%8D%E7%9A%84%E7%85%8E%E7%86%AC%E8%88%87%E6%88%90%E9%95%B7-%E5%9C%8B%E5%A4%96%E7%AF%87-5bbbd3c81380" target="_blank" rel="noopener">找工作必須面對的煎熬與成長 — 國外篇</a></h3><p>雖然在 FB 跟 PTT 上三不五時就可以看到有人在分享如何進入 FLAG，但不可否認的是這些人都是強者中的強者，且很多都是名校本科系的。那如果不是這樣的人，想在美國找工作可能會遇到怎麼樣的困難？準備的方向又有什麼不同？一起來看看 Hannah 的分享吧～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Creating-React-Application-For-Solving-Every-Sudoku-Puzzle"><a href="#Creating-React-Application-For-Solving-Every-Sudoku-Puzzle" class="headerlink" title="Creating React Application For Solving Every Sudoku Puzzle"></a><a href="https://hackernoon.com/creating-react-application-for-solving-every-sudoku-puzzle-26h316j" target="_blank" rel="noopener">Creating React Application For Solving Every Sudoku Puzzle</a></h3><p>該文章的作者用 React 製作了一個友善的前端介面來接其他開發者寫來解數獨的開源專案，作者沒有解釋如何刻出介面，而是分享他在打造畫面的時候思考了什麼。</p><h3 id="Why-Is-gt"><a href="#Why-Is-gt" class="headerlink" title="Why Is {} &gt; [] ?"></a><a href="https://dev.to/amyshackles/why-is-2hkk" target="_blank" rel="noopener">Why Is {} &gt; [] ?</a></h3><p>你知道為什麼在 JavaScript 裡空物件會大於空陣列嗎？我真希望自己可以不需要了解這個，可惜我是個前端工程師。😭</p><h3 id="Stop-Using-“data”-as-a-Variable-Name"><a href="#Stop-Using-“data”-as-a-Variable-Name" class="headerlink" title="Stop Using “data” as a Variable Name"></a><a href="https://dev.to/dcwither/stop-using-data-as-a-variable-name-3954" target="_blank" rel="noopener">Stop Using “data” as a Variable Name</a></h3><p>命名絕對是最困難的事情，但即使困難也不代表可以亂取。文章講解了幾個不是很好的命名例子（也許大家都看到爛了），也提出一些比較有意義的命名前綴讓各位參考。</p><h2 id="Computer-Architecture"><a href="#Computer-Architecture" class="headerlink" title="Computer Architecture"></a>Computer Architecture</h2><h3 id="What-is-the-difference-between-a-32-bit-and-64-bit-system"><a href="#What-is-the-difference-between-a-32-bit-and-64-bit-system" class="headerlink" title="What is the difference between a 32-bit and 64-bit system?"></a><a href="https://techterms.com/help/difference_between_32-bit_and_64-bit_systems" target="_blank" rel="noopener">What is the difference between a 32-bit and 64-bit system?</a></h3><p>如果有自己重灌過系統應該就會看過 32 bit、64 bit、x86、x64 這些關鍵字，但 32 bit 跟 64 bit 究竟是指什麼呢？為什麼 32 bit 系統只能使用 4GB 的記憶體？不太確定答案的話可以趕快看看這篇文章～</p><h3 id="Why-doesn’t-C-make-the-structure-tighter-Stack-Overflow"><a href="#Why-doesn’t-C-make-the-structure-tighter-Stack-Overflow" class="headerlink" title="Why doesn’t C++ make the structure tighter? - Stack Overflow"></a><a href="https://stackoverflow.com/questions/6730664/why-doesnt-c-make-the-structure-tighter" target="_blank" rel="noopener">Why doesn’t C++ make the structure tighter? - Stack Overflow</a></h3><p>在這週的專欄中有提到，Rust 編譯器在三年前就已經實作 struct field reordering，那為什麼歷史更悠久的 C/C++ 卻沒有這麼做呢？其實並不是沒有，而是因為 C/C++ 的標準規定了不可以隨便更換順序，所以預設情況下不會啟用這種最佳化，真的需要的話也可以自己套用</p><h3 id="Optimizing-Rust-Struct-Size-A-6-month-Compiler-Development-Project"><a href="#Optimizing-Rust-Struct-Size-A-6-month-Compiler-Development-Project" class="headerlink" title="Optimizing Rust Struct Size: A 6-month Compiler Development Project"></a><a href="https://camlorn.net/posts/April%202017/rust-struct-field-reordering/" target="_blank" rel="noopener">Optimizing Rust Struct Size: A 6-month Compiler Development Project</a></h3><p>這篇是講 Rust 編譯器在實作 struct field reordering 的過程還有遇到的問題，內容很硬，對編譯器沒興趣的話可能會看到頭痛XD，但有興趣的話可以學到滿多東西</p><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><h3 id="meta-tag"><a href="#meta-tag" class="headerlink" title="meta tag"></a><a href="https://ysnweb.net/2020/01/seo-guide/html-meta-tag-seo/" target="_blank" rel="noopener">meta tag</a></h3><p>HTML 中的 meta tag 一直是大家會忽略的地方，畢竟這些 tag 跟網頁整體的運作比較沒有太大的關連，但 meta tag 對於 SEO 來說就是一種識別符的概念，meta tag 下的好自然而然 SEO 的分數也會高，這篇文章介紹了幾個最常用的 meta tag 甚至還介紹了 <strong>open graph</strong> 這個用來讓社群媒體像是 Facebook、twitter、line 等等用來顯示文章連結標題、圖片、敘述等重要資訊的 tag，假如你的網站會多次分享在社群媒體上 og tag 不妨也一併加入吧！</p><h3 id="Google-SEO-algorithm"><a href="#Google-SEO-algorithm" class="headerlink" title="Google SEO algorithm"></a><a href="https://ranking.works/SEO%E7%AD%96%E7%95%A5/google%E6%BC%94%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">Google SEO algorithm</a></h3><p>俗話說的好：知己知彼方能百戰百勝，想要把 SEO 做好必須先了解 Google 背後是怎麼幫你評分，這篇文章介紹了 Google 用來進行 SEO 評分的重要演算法，而且都是用白話文來介紹，了解這些演算法的內容後日後在開發網頁也比較不會踩到會讓自己網站分數降低的地雷了。</p><h3 id="trust-rank"><a href="#trust-rank" class="headerlink" title="trust rank"></a><a href="https://backlinko.com/google-trustrank" target="_blank" rel="noopener">trust rank</a></h3><p>Google trust rank 簡單來說就是讓你的網站或者是網域信任度提升，只要你的網站越可靠、越被大家信任自然而然 SEO 分數也會高，提升網站信任度最簡單的幾個方法不外乎就是加入聯絡我們頁面、隱私權條款頁面、取用 cookie 按鈕等等，甚至還要有 SSL 憑證以及易讀的網址，這些都是 Google 會拿來評分的條件，這篇文章整理了幾個最簡單而且必做的信任度設定，讓你的網域信任度分數可以越來越高。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Technologies-amp-Tools-to-Watch-in-2021"><a href="#Technologies-amp-Tools-to-Watch-in-2021" class="headerlink" title="Technologies &amp; Tools to Watch in 2021"></a><a href="https://medium.com/dev-genius/technologies-tools-to-watch-in-2021-a216dfc30f25" target="_blank" rel="noopener">Technologies &amp; Tools to Watch in 2021</a></h3><p>一轉眼 2020 年就要過完了，來瞧瞧看 2021 年 DevOps Engineer 和 SRE 們應該要特別留意的技術有哪一些吧？！</p><ul><li><p>透過 Kubernetes CRD 來管理公有雲上的資源：目前三朵雲都已經有提供對應的解決方案 AWS: <a href="https://github.com/aws/aws-controllers-k8s" target="_blank" rel="noopener">ACK (AWS Controllers for Kubernetes)</a>, Azure: <a href="https://github.com/Azure/azure-service-operator" target="_blank" rel="noopener">Azure Service Operator</a>，GCP: <a href="https://cloud.google.com/config-connector/docs/overview" target="_blank" rel="noopener">Config Connector</a>，這些工具跟既有的 IaC 解決方案好像有點牴觸，例如 Terrform, Pulumi，不過優點在於開發者使用同樣的工具除了可以管理 K8s 資源之外，也可以一起管理公有雲的雲端資源</p></li><li><p>Pulumi: 今年獲得 $37.5 million Series B 的融資來挑戰 Terraform 的霸主地位，跟其他 IaC 工具比較不同的地方在於他可以使用一般的程式語言來做開發撰寫 (例如 Go, Python, Javascript)，所以程式語言本來的既有工具也都可以直接拿來做使用，不過有一點要注意的是目前他的社群比 Terraform 還要小得多</p></li><li><p>Terragrunt &amp; TFSEC: <a href="https://terragrunt.gruntwork.io/" target="_blank" rel="noopener">Terragrunt</a> 是 Terraform 的 wrapper，很多 Terraform 的最佳使用守則都是從中而來，而且他最近也宣布的商業支援方案，讓大企業可以用起來更簡單，而 <a href="https://github.com/tfsec/tfsec" target="_blank" rel="noopener">TFSEC</a> 則是針對 Terraform 的 Policy as Code 開源工具，利用靜態分析 IaC 程式碼來找出潛藏的資安威脅，在越來越多人接納 DevSecOps 觀念的當下，類似工具在未來的重要性會越來越高</p></li><li><p>Tekton: CI/CD 市場上有比較老牌成熟的 Jenkins 和 Spinnaker 當然還有最近比較火熱的 Cloud Native 工具例如 ArgoCD, 而 Tekton 算是剛進入這個領域的新玩家，主要聚焦於 K8s，並且使用 K8s CRD 來定義 Pipeline，這讓 Pipeline 擁有 K8s 的原生功能 (例如 rollback) 之外，也可以跟既有的 K8s 工具整合在一起例如 Jenkins X 或是 ArgoCD，這樣一來就可以達成 E2E 的 CI/CD Pipeline</p></li><li><p>Trivy: 容器的 Vulnerability 掃描功能在 CI/CD Pipeline 中的重要性越來越高，在這個市場也有其他的開源工具，例如 <a href="https://github.com/docker/docker-bench-security" target="_blank" rel="noopener">Docker Bench for Security</a>, <a href="https://github.com/quay/clair" target="_blank" rel="noopener">Clair</a> 和 <a href="https://github.com/anchore/anchore-engine" target="_blank" rel="noopener">Anchore Engine</a> (文章中有些不屬於這個領域的被我移除掉了)，而 Trivy 除了掃描 Container 以外，在程式碼中使用的 Package 也會一併檢查，結合屬於同一家公司  Aqua Security 的 <a href="https://github.com/aquasecurity/kube-bench" target="_blank" rel="noopener">kube-bench</a>，就可以讓組織將 Security 更方便地融合在應用程式的開發之中</p></li><li><p>ShellCheck: 雖然有大量用來改善架構的工具，不過 Shell Script 在各種 Workflow 中依然很適合解決簡單的問題，而 ShellCheck 是 Shell Script 的靜態分析工具，可以像程式語言的 Lint 工具，找出語法有問題或是常犯的錯誤，而 ShellCheck 可以運行在 Web, Terminal 或是 CI，當然還可以整合在你最喜愛的文字編輯器中，例如 Vim, Sublime, Atom, VS Code</p></li><li><p>Pitest/Stryker: Pitest (Java) 和 Stryker (Javascript, C#, Scala) 兩個都是用來對特定語言做  Mutation Testing 的工具，Mutation Testing 透過在測試中注入錯誤來看看測試是否還是可以通過的方式來衡量測試的品質，當 Mutation 發生時，一個好的 Unit Testing 應該要失敗才對， 透過 Mutation Testing 來檢查沒有測試到或是測試不足的程式碼，藉以提高 Test Coverage</p></li><li><p>Litmus: Netflix 在 2011 年提出伴隨著 Chaos Monkey 提出 Chaos Engineering 的概念，而在 K8s 的生態系中也有很多 Chaos Engineering 的工具，例如  <a href="https://github.com/linki/chaoskube" target="_blank" rel="noopener">chaoskube</a>, <a href="https://github.com/asobti/kube-monkey" target="_blank" rel="noopener">kube-monkey</a>, <a href="https://github.com/powerfulseal/powerfulseal" target="_blank" rel="noopener">PowerfulSeal</a> 還有商用服務 <a href="https://www.gremlin.com/kubernetes/" target="_blank" rel="noopener">Gremlin</a>，而在這邊想要特別強調 <a href="https://github.com/litmuschaos/litmus" target="_blank" rel="noopener">Litmus</a>，因為他是一個成熟且易於使用的 Chaos Engineering 解決方案，Litmus 是一個輕量級的 Kubernetes Operator，裡面有 ChaosEngine, ChaosExperiment 和 ChaosResult 三個主要元件所組成，Litmus 支援細緻的測試，不只是隨機地把 Namespace 中的 Pod 給砍掉而已，而是透過 ChaosResult CRD 將結果給呈現出來，不會直接要使用者花時間去觀察測試結果</p></li></ul><h3 id="Karpenter"><a href="#Karpenter" class="headerlink" title="Karpenter"></a><a href="https://github.com/awslabs/karpenter" target="_blank" rel="noopener">Karpenter</a></h3><p>Karpenter 是以 Metric 驅動來打造的 Kubernetes Autoscaler，可以運行在任何的 K8s 叢集中，它具有高性能與擴展性，目標為自動縮放運行於 K8s 中的任何使用 <a href="https://github.com/kubernetes/community/blob/master/contributors/design-proposals/autoscaling/horizontal-pod-autoscaler.md#scale-subresource" target="_blank" rel="noopener">Scale Subresource</a> 定義的資源，例如 ReplicationController 和 Deployment，Karpenter 定義了三種客製化的資源來控制 Autoscale 的行為</p><ul><li><p>HorizontalAutoscalers: 用來定義 Autoscaling 的政策，或許大家會想到 HorizontalPodAutoscaler, 不過他應該是發生在 HorizontalPodAutoscaler 被觸發之後，才去幫忙加 K8s 叢集節點的角色，除此之外 Karpenter 可以透過多種不同的資源來做 Scale，因為他深度整合 Prometheus，直接使用 promql 來計算出自己想要的閥值</p></li><li><p>MetricsProducers: 用來建立 autoscaling 所需要 Prometheus Metric，不過假如已經有既有存在的 Metric 可以用的話，就不需要再使用 MetricsProducers 另外定義</p></li><li><p>ScalableNodeGroups: 用來定義控制 K8s Node Group 的 API，因為原生的 K8s 並沒有這種抽象的概念，而 Cloud Provider 提供的 Node Group API 又跟 K8s 其實不一樣，所以使用 ScalableNodeGroups 來當作中間的溝通橋樑，不過假如有用 <a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">Kops</a> or <a href="https://github.com/kubernetes-sigs/cluster-api" target="_blank" rel="noopener">Cluster API</a> 就可以不用使用 ScalableNodeGroups</p></li></ul><h3 id="Cloud-Native-Nov-2020-Security-Whitepaper"><a href="#Cloud-Native-Nov-2020-Security-Whitepaper" class="headerlink" title="Cloud Native Nov 2020 Security Whitepaper"></a><a href="https://github.com/cncf/sig-security/blob/master/security-whitepaper/CNCF_cloud-native-security-whitepaper-Nov2020.pdf" target="_blank" rel="noopener">Cloud Native Nov 2020 Security Whitepaper</a></h3><p>一個不小心就撿到了 Cloud Native Nov 2020 的 Security Whitepaper，內容從 Cloud Native 本身的開發流程，以及部署，執行環境內的各種細節 (Compute, Storage, Access)，還有大企業比較在意的 Security Assurance 跟 Compliance 都包含在其中，有興趣的人可以下載來看看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 56 期 - 史蒂夫和戴夫也想學的程式交易框架 — BBGO</title>
      <link href="/2020/11/24/56-program-trading/"/>
      <url>/2020/11/24/56-program-trading/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="史蒂夫和戴夫也想學的程式交易框架-—-BBGO"><a href="#史蒂夫和戴夫也想學的程式交易框架-—-BBGO" class="headerlink" title="史蒂夫和戴夫也想學的程式交易框架 — BBGO"></a><a href="https://medium.com/starbugs/%E5%8F%B2%E8%92%82%E5%A4%AB%E5%92%8C%E6%88%B4%E5%A4%AB%E4%B9%9F%E6%83%B3%E5%AD%B8%E7%9A%84%E7%A8%8B%E5%BC%8F%E4%BA%A4%E6%98%93%E6%A1%86%E6%9E%B6-bbgo-a2de02438fa7" target="_blank" rel="noopener">史蒂夫和戴夫也想學的程式交易框架 — BBGO</a></h3><p>BBGO 是一套用 Golang 開發的開源程式交易框架，它讓不會寫程式的一般使用者可以無腦地使用它來進行程式交易，而有撰寫交易程式相關經驗的人則可以使用它來運行自己喜歡的交易策略，對於程式交易有興趣的人千萬不要錯過！讀完就距離財富自由更進一步了XD</p><h2 id="星巴哥作者群開箱！"><a href="#星巴哥作者群開箱！" class="headerlink" title="星巴哥作者群開箱！"></a>星巴哥作者群開箱！</h2><p>Starbugs 星巴哥技術週刊邁入一週年的里程碑，感謝大家的支持。未來的一年星巴哥想要讓大家看到更多元的內容，提供大家更多優質的原創文章，因此最近我們邀請了幾位優質的寫作者加入 星巴哥的行列，以後在週刊上也會看到作者群撰寫的優質原創文章。</p><p>本週來介紹第四位寫作者 <strong>Jenny</strong> ！！</p><p>Jenny 畢業於台大外文系，目前任職於 PicCollage，其所發佈的 <a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">技術文章</a> 以英文為主，，而且不管是很硬的網路底層觀念技術，抑或是應用服務端的測試開發，她都有所涉略，並用平易近人的文字來說明複雜的觀念技術；很開心可以邀請她加入 Starbugs 技術專欄，讓 Starbugs 更進一步邁向國際化！</p><blockquote><p>「外文系畢業的後端工程師，認為寫扣該像寫文章一樣優雅，refactoring 是淨化心靈的過程。目前靠 Ruby 吃飯，也用新歡 Elixir 寫過專案幾許。文章主題看心情決定，TDD，concurrency，cache 是最近研究的題目。座右銘有幾許，其一是：我不寫 CSS。」 - by Jenny</p></blockquote><h3 id="Security-SSL-—-HTTPS-背後的功臣"><a href="#Security-SSL-—-HTTPS-背後的功臣" class="headerlink" title="[Security] SSL — HTTPS 背後的功臣"></a><a href="https://medium.com/starbugs/security-ssl-https-%E8%83%8C%E5%BE%8C%E7%9A%84%E5%8A%9F%E8%87%A3-df714e4df77b" target="_blank" rel="noopener">[Security] SSL — HTTPS 背後的功臣</a></h3><p>本篇文章會從 SSL 基礎概念談起，介紹 SSL 背後原理、相關名詞介紹（包含 TLS, CA, chain of trust, OpenSSL）、 OpenSSL 實際操作、與 SSL 憑證種類。開始吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="10-Inspiring-Ideas-for-Your-Next-Front-End-Project"><a href="#10-Inspiring-Ideas-for-Your-Next-Front-End-Project" class="headerlink" title="10 Inspiring Ideas for Your Next Front-End Project"></a><a href="https://dev.to/simonholdorf/10-inspiring-ideas-for-your-next-front-end-project-11bh" target="_blank" rel="noopener">10 Inspiring Ideas for Your Next Front-End Project</a></h3><p>登愣~~好像很久沒有分享 Idea 類的文章了，作者列出了十個非常非常有趣（而且很神）的幾個畫面，其中最讓我驚豔的就是會把你滑鼠偷走的小人和用 CSS 刻成那唯妙唯俏的照片了 😂</p><h3 id="Avoiding-impossible-state-with-TypeScript"><a href="#Avoiding-impossible-state-with-TypeScript" class="headerlink" title="Avoiding impossible state with TypeScript"></a><a href="https://dorshinar.me/avoid-impossible-state-with-typescript?ref=hackernoon.com" target="_blank" rel="noopener">Avoiding impossible state with TypeScript</a></h3><p>在 JavaScript 中，因為沒有明確的類型以及介面的定義，常常會有傳入的值不符合函式需求的狀況產生，即使你曉得，你也沒辦法讓你團隊的所有人在看到該函式的時候都馬上知道如何使用，而本篇文章使用 React 組件的範例，介紹該如何利用 TypeScript 來解決此一問題。</p><h3 id="CSS-GUIDE-The-Art-of-Naming-Save-hrs-for-debugging"><a href="#CSS-GUIDE-The-Art-of-Naming-Save-hrs-for-debugging" class="headerlink" title="CSS GUIDE: The Art of Naming (Save hrs for debugging)"></a><a href="https://blog.rahulism.co/css-guide-the-art-of-naming?ref=hackernoon.com" target="_blank" rel="noopener">CSS GUIDE: The Art of Naming (Save hrs for debugging)</a></h3><p>是一篇滿有趣的命名議題，在使用 JavaScript 命名時習慣會使用駝峰式，但如果是 CSS 就會是在各個單字中間用 <code>-</code> 或 <code>__</code> 連結，所以有些人員看見 class 名稱為 <code>siteNavigation</code> 時，就會想把它改為 <code>site-navigation</code>，但是這麼一來就有可能會導致有些操作 DOM 的 JavaScript 出現問題，面對這個狀況，本篇的作者如何解決呢？</p><h2 id="React-JS"><a href="#React-JS" class="headerlink" title="React.JS"></a>React.JS</h2><h3 id="6-Reasons-to-Use-React-Hooks-Instead-of-Classes"><a href="#6-Reasons-to-Use-React-Hooks-Instead-of-Classes" class="headerlink" title="6 Reasons to Use React Hooks Instead of Classes"></a><a href="https://link.medium.com/SuBHauTy9ab" target="_blank" rel="noopener">6 Reasons to Use React Hooks Instead of Classes</a></h3><p>React Hook 已經出來好一段時間了，如果還不知道 Hook 好用在哪裡的話，可以參考參考這篇，跟以往 Class based 的寫法比起來真的簡潔很多</p><h3 id="Having-Fun-With-React’s-Renderer"><a href="#Having-Fun-With-React’s-Renderer" class="headerlink" title="Having Fun With React’s Renderer"></a><a href="https://link.medium.com/W2IpI25wDbb" target="_blank" rel="noopener">Having Fun With React’s Renderer</a></h3><p>這篇文章分析了 React 的 parent 跟 children 之間在 render、useEffect 還有 cleanUp 時的執行順序，而且他的圖很可愛XD，如果對 React Hook 已經有基本的熟悉度，想更進階一點可以看看這篇</p><h3 id="Creating-CLI-with-React"><a href="#Creating-CLI-with-React" class="headerlink" title="Creating CLI with React"></a><a href="https://link.medium.com/6K0VccmxDbb" target="_blank" rel="noopener">Creating CLI with React</a></h3><p><code>ink</code> 是一個基於 React renderer 的 library，他讓你可以用幾乎跟 React 一樣的語法來寫 CLI 工具，而且因為 Component 可以是 Stateful 的，所以可以做的變化也多了很多</p><h2 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h2><p>做好 SEO 的方法百百種，最簡單的方法就是砸錢進去，透過 <a href="https://ads.google.com/intl/zh-TW_tw/home/" target="_blank" rel="noopener">Google Ads</a> 就可以瞬間讓自己的網站排名到最前面，但這真的是個好的做法嗎？可能短期的企劃案很適合畢竟要達到短期高曝光的效果，但畢竟不是每個人都這麼有錢，所以接下來就來推薦幾篇可以幫助網站的 SEO 方法吧！</p><h3 id="Progressive-Web-App"><a href="#Progressive-Web-App" class="headerlink" title="Progressive Web App"></a><a href="https://blog.techbridge.cc/2018/10/13/pwa-in-action/" target="_blank" rel="noopener">Progressive Web App</a></h3><p>如果說 Google Ads 是有錢人在玩的，那 PWA 肯定就是給市井小民在玩的，由於我們脫離不了 Google 的掌心，因此最快能達到 SEO 的效益不外乎就是利用 Google 自家的服務，PWA 就是個很好的方法，現在很多新聞網都是利用這個技術達到讓自家的新聞可以排在搜尋排行榜的前三名，到底 PWA 要怎麼設計呢？相信大家看完這篇文章就知道了。</p><h3 id="Semantic-Elements"><a href="#Semantic-Elements" class="headerlink" title="Semantic Elements"></a><a href="https://www.w3schools.com/html/html5_semantic_elements.asp" target="_blank" rel="noopener">Semantic Elements</a></h3><p>語意化標籤是個非常重要的觀念，由於現在前端切版越來越方便，透過 <code>flexbox</code> 或 <code>grid</code> 就可以產生各式各樣的樣板出來，也因為這樣的便利性讓越來越多的前端工程師只專注於 <code>&lt;div&gt;</code> 這個標籤而忽略了其他的標籤，比較新手的前端工程師可能只會覺得這些語意化標籤只是多帶幾個預設樣式進去而已，但其實不只這樣，這些語意化標籤可以大大的讓你的網站 SEO 加分，未來開發網站時不妨可以多加些語意化標籤進去，除了方便開發者閱讀之外同時也增加了 SEO 真是一舉兩得阿XD</p><h3 id="Breadcrumbs麵包屑"><a href="#Breadcrumbs麵包屑" class="headerlink" title="Breadcrumbs麵包屑"></a><a href="https://www.awoo.com.tw/blog/thankyou_breadcrumb_seo/" target="_blank" rel="noopener">Breadcrumbs麵包屑</a></h3><p>麵包屑的設計可以讓 SEO 大大的加分，自所以可以加分的原因就是因為當 Google 在爬蟲的時候，如果有麵包屑的設計就可以更快的知道上一頁是哪裡，至少知道網站整體的操作以及進入流程，這會讓 Google 在進行爬蟲的時候可以更快的知道要如何製作索引讓頁面可以更快速的被抓取出來，尤其是電商很常出現這樣的設計就是為了讓 SEO 更好。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="k0s-—-Yet-Another-Kubernetes-Distro"><a href="#k0s-—-Yet-Another-Kubernetes-Distro" class="headerlink" title="k0s — Yet Another Kubernetes Distro !!"></a><a href="https://saiyampathak.medium.com/k0s-yet-another-kubernetes-distro-7201ea425165" target="_blank" rel="noopener">k0s — Yet Another Kubernetes Distro !!</a></h3><p>k0s 是上週剛發佈的 K8s Distribution, 就像 Ubuntu, CentOS 是 Linux Distribution 的概念一樣，K8s 果然正在往越來越成熟穩定的方向前進中；而此 Distribution 最大的特色在於他只有一個 164 MB 的 Binray 檔案，並且跟作業系統沒有任何的相依性，不管在 Master 或是 Worker 節點都只要運行他即可，聽起來要部署他真的好方便！</p><h3 id="Kyverno-a-New-CNCF-Sandbox-Project-Offers-Kubernetes-Native-Policy-Management"><a href="#Kyverno-a-New-CNCF-Sandbox-Project-Offers-Kubernetes-Native-Policy-Management" class="headerlink" title="Kyverno, a New CNCF Sandbox Project, Offers Kubernetes-Native Policy Management"></a><a href="https://thenewstack.io/kyverno-a-new-cncf-sandbox-project-offers-kubernetes-native-policy-management/" target="_blank" rel="noopener">Kyverno, a New CNCF Sandbox Project, Offers Kubernetes-Native Policy Management</a></h3><p>Policy as Code 又多了新的生力軍 Kyverno 加入 CNCF Sandbox，跟最近開始比較多人提到的 OPA (Open Policy Agent) 最大的不同在於它使用 YAML 或是 JSON 格式的檔案來定義 Policy，而 OPA 需要使用一個叫做 OPA 的語言來達成，感覺應該會有各自的優缺點，不過有競爭就是好事，期待越來越多社群資源投入這個領域</p><h3 id="Introducing-another-free-CA-as-an-alternative-to-Let’s-Encrypt"><a href="#Introducing-another-free-CA-as-an-alternative-to-Let’s-Encrypt" class="headerlink" title="Introducing another free CA as an alternative to Let’s Encrypt"></a><a href="https://scotthelme.co.uk/introducing-another-free-ca-as-an-alternative-to-lets-encrypt/" target="_blank" rel="noopener">Introducing another free CA as an alternative to Let’s Encrypt</a></h3><p>以往提到免費的 TLS Certificate 解決方案，大家腦海中馬上浮現的名稱應該都是 Let’s Enctypt，這幾天看到另外一個叫做 ZeroSSL 也想要做一樣的事情，一樣可以提供 90 天的免費 Certificate，提供給大家另外一個選擇性</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩。</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞。</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師。</li><li><a href="https://medium.com/@jinghua.shih" target="_blank" rel="noopener">@Jenny</a> - 我不寫 CSS。</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術。</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 55 期 - 當我踏出了第一步，就前進了一步</title>
      <link href="/2020/11/17/55-when-you-start-working-you-will-move/"/>
      <url>/2020/11/17/55-when-you-start-working-you-will-move/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="打造舒適的雙系統開發環境-Windows-Mac-雙刀流"><a href="#打造舒適的雙系統開發環境-Windows-Mac-雙刀流" class="headerlink" title="打造舒適的雙系統開發環境 Windows + Mac 雙刀流"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0%E8%88%92%E9%81%A9%E7%9A%84%E9%9B%99%E7%B3%BB%E7%B5%B1%E9%96%8B%E7%99%BC%E7%92%B0%E5%A2%83-windows-mac-%E9%9B%99%E5%88%80%E6%B5%81-6127ce8583a" target="_blank" rel="noopener">打造舒適的雙系統開發環境 Windows + Mac 雙刀流</a></h3><p>以前我剛學程式的時候，很多人建議我直接用 Mac 或是 Linux，而我最後也選擇了 Mac。直到近幾年，大家紛紛說 Windows 已經跟以前有很大的不同，許多人也開始推薦起 Windows 做為開發環境。我想要來試試看，Windows 是否還是像以前那麼雷。我們就一起開始探險吧！</p><h2 id="星巴哥作者群開箱！"><a href="#星巴哥作者群開箱！" class="headerlink" title="星巴哥作者群開箱！"></a>星巴哥作者群開箱！</h2><p>Starbugs 星巴哥技術週刊邁入一週年的里程碑，感謝大家的支持。未來的一年星巴哥想要讓大家看到更多元的內容，提供大家更多優質的原創文章，因此最近我們邀請了幾位優質的寫作者加入 星巴哥的行列，以後在週刊上也會看到作者群撰寫的優質原創文章。</p><p>本週來介紹第三位寫作者 <strong>Airwaves</strong> ！！</p><p>Airwaves 你可能沒有聽過，其實他就是是著名的前端部落格 <a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98" target="_blank" rel="noopener">手寫筆記</a> 的作者。著有許多知名的 React.js 的文章。Airwaves 對於程式的研究總是會去看如何原始碼了解如何實作，並且自己做一個，跟他交流覺得獲益良多，很高興能邀請他參加 Starbugs 技術專欄。</p><blockquote><p>「半前年因為開始研究如何造輪子，誤打誤撞進入了前端這個世界，成為了一名現役的前端工程師。平時熱愛鑽研前端技術與分享技術文章，期許自己未來也能夠為開源貢獻一份心力。」- by Airwaves </p></blockquote><h3 id="Styled-System-從-Primer-看-GitHub-如何建構-design-system"><a href="#Styled-System-從-Primer-看-GitHub-如何建構-design-system" class="headerlink" title="Styled System | 從 Primer 看 GitHub 如何建構 design system"></a><a href="https://medium.com/starbugs/styled-system-is-the-path-to-primer-99b8d7cdecce" target="_blank" rel="noopener">Styled System | 從 Primer 看 GitHub 如何建構 design system</a></h3><p>為什麼會知道 Styled System 這個套件，是因為 GitHub 的 designer director — Diana Mounter 在 React Conf AU 2020 演講的題目「Themeability is the path to dark mode」認識了這個工具。Diana 在演講中提到 GitHub 建構了一套 design system 名為 Primer，Primer 主要是由 Styled Components 與 Styled System 所構成。聽到這邊，你應該有點興趣，GitHub 是怎麼用這兩個套件建構 Primer 的。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Build-an-E2E-Testing-Framework-Using-Design-Patterns"><a href="#How-to-Build-an-E2E-Testing-Framework-Using-Design-Patterns" class="headerlink" title="How to Build an E2E Testing Framework Using Design Patterns"></a><a href="https://www.freecodecamp.org/news/build-an-e2e-test-framework-with-design-patterns/" target="_blank" rel="noopener">How to Build an E2E Testing Framework Using Design Patterns</a></h3><p>E2E 需要與畫面上的各種 DOM 做互動，並觀察 DOM 呈現的結果是否正確，這是一件非常不簡單的事情，更別說是還得考慮如何維護這些測試案例的時候，一起來看看作者是如何將設計模式導入到 E2E 的測試案例中，讓測試案例看起來更簡單吧！</p><h3 id="Vue-3-0-Ref-sugar-提案真的是自寻死路吗？"><a href="#Vue-3-0-Ref-sugar-提案真的是自寻死路吗？" class="headerlink" title="Vue 3.0 Ref-sugar 提案真的是自寻死路吗？"></a><a href="https://juejin.im/post/6894175515515551752" target="_blank" rel="noopener">Vue 3.0 Ref-sugar 提案真的是自寻死路吗？</a></h3><p>Vue 在進入 3.0 之後有兩個提案引起了許多開發者的注意，這兩個分別是 script-setup 和 ref-sugar，一起到文章裡看看它們寫起來到底有什麼不一樣，以及為什麼 ref-sugar 那麼不討喜吧！</p><h3 id="7-code-smells-in-your-React-components"><a href="#7-code-smells-in-your-React-components" class="headerlink" title="7 code smells in your React components"></a><a href="https://dev.to/awnton/7-code-smells-in-react-components-5f66" target="_blank" rel="noopener">7 code smells in your React components</a></h3><p>雖然 React 的官方文件中有講解了幾個設計 Component 的原則，但是在實務上開發的時候總是很難知道如何才是更好的實踐方法，如果各位也還搞不清楚如何寫出健康的 Component，不如先看看有沒有讓人越想越不對勁的設計吧！</p><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><h3 id="Vue-3-is-coming-—-what-to-expect-and-how-to-prepare"><a href="#Vue-3-is-coming-—-what-to-expect-and-how-to-prepare" class="headerlink" title="Vue 3 is coming — what to expect and how to prepare"></a><a href="https://link.medium.com/bSLFKayGdbb" target="_blank" rel="noopener">Vue 3 is coming — what to expect and how to prepare</a></h3><p>Vue 3 已經發佈將近兩個月了，但我也是到看了這篇文章才知道 Vue 3 有哪些 feature，不然平常太忙了根本沒時間關心（真是慚愧XD）。所以如果你也是大忙人但又想認識認識 Vue 3 的話，就直接看這篇吧！</p><h3 id="Migration-Plan-to-the-All-New-Vue-JS-3"><a href="#Migration-Plan-to-the-All-New-Vue-JS-3" class="headerlink" title="Migration Plan to the All New Vue JS 3"></a><a href="https://link.medium.com/Tq7JkdqYqbb" target="_blank" rel="noopener">Migration Plan to the All New Vue JS 3</a></h3><p>雖然我現在沒在寫 Vue，但根據之前用其他語言、框架的經驗，要 migrate 到新版本都需要好一段時間才能適應，更不用說有時還會有 breaking change 要修，所以這邊推薦一篇從 Vue 2 migrate 到 Vue 3 的總整理，有在寫 Vue 的各位快快收藏起來～</p><h3 id="Vue-js-Performance-Archives-Vue-js-Tutorials"><a href="#Vue-js-Performance-Archives-Vue-js-Tutorials" class="headerlink" title="Vue.js Performance Archives - Vue.js Tutorials"></a><a href="https://vueschool.io/articles/series/vue-js-performance/" target="_blank" rel="noopener">Vue.js Performance Archives - Vue.js Tutorials</a></h3><p>這一系列是 Vue School 網站上在講 Vue 效能調校的文章，內容包括 Lazy Loading、Prefetching、Browser Cache 等等提升效能的方法，想讓自己的 Vue 實力更進階就靠這一系列了</p><h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><h3 id="Chakra-UI"><a href="#Chakra-UI" class="headerlink" title="Chakra-UI"></a><a href="https://chakra-ui.com/docs/getting-started" target="_blank" rel="noopener">Chakra-UI</a></h3><p>最近公司正在嘗試使用新的 React UI Library，就物色到這個 UI Library 了，只要善用 Chakra UI Layout 中的 <code>Box</code> 以及 <code>Flex</code> 就可以拼出各式各樣的區塊了，而且以前 React 最讓人困惑到底 <strong>style</strong> 的部分要自己另外寫一個 <code>scss</code> 或 <code>less</code> 還是要用 <code>styled-components</code> 呢？在 Chakra 的世界中這些都不用考慮直接用 <code>props</code> 解決了，我想這應該是我目前看過最彈性的 UI Library 了吧 XD</p><h3 id="react-use"><a href="#react-use" class="headerlink" title="react-use"></a><a href="https://github.com/streamich/react-use" target="_blank" rel="noopener">react-use</a></h3><p>現在進入了大 hook 時代，身為一個懶到極致的工程師，能用別人造好的輪子就盡量用，真的不能用就跟主管說做不到（誤，這邊就要來好好推薦這個非常好用的套件，裡面包含了各式各樣的 <code>hook function</code> 讓你在開發上一定可以更加迅速且便利！</p><h3 id="react-infinite-scroll"><a href="#react-infinite-scroll" class="headerlink" title="react-infinite-scroll"></a><a href="https://github.com/ankeetmaini/react-infinite-scroll-component#readme" target="_blank" rel="noopener">react-infinite-scroll</a></h3><p>相信大家應該很常用電商 APP，在使用的過程中應該都會發現滑動到底部的時候會自動去取得下一頁的資料，這部分的做法有兩種：一種是土法煉鋼監聽 <code>scrollListener</code> 事件並且利用 <code>getboundingclientrect()</code> 來取得 <code>bottom</code> 的值，然後再利用 <code>bottom</code> 是否小於 <code>window.innerHeight()</code> 的方式來判斷是否到底部了，但這段過程真的太麻煩了，這時候如果有別人造好的輪子當然要好好的利用一番，所以就來推薦 <strong>react-infinite-scroll</strong> 這個套件了，而且還可以設定 <code>threshold</code> 來決定要在哪個位置開始 fetch 資料，不一定要在底部才開始 fetch 是不是相當便利且彈性呢～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Terraform-on-AWS-Multi-Account-Setup-and-Other-Advanced-Tips"><a href="#Terraform-on-AWS-Multi-Account-Setup-and-Other-Advanced-Tips" class="headerlink" title="Terraform on AWS: Multi-Account Setup and Other Advanced Tips"></a><a href="https://thenewstack.io/terraform-on-aws-multi-account-setup-and-other-advanced-tips/" target="_blank" rel="noopener">Terraform on AWS: Multi-Account Setup and Other Advanced Tips</a></h3><p>AWS 多重帳號是官方所推薦的管理方式，官方本身也釋出一些服務來幫助使用者達成此目標 (AWS Organization, AWS Control Tower)，而這篇文章嘗試介紹如何使用 Terraform 來管理多重 AWS 帳號，從設定 Provider 來 Assume Role 要怎麼做比較好開始談起，然後在提到 Module 和 Environment 的好處…</p><h3 id="InfluxDB-2-0-Open-Source-is-Generally-Available"><a href="#InfluxDB-2-0-Open-Source-is-Generally-Available" class="headerlink" title="InfluxDB 2.0 Open Source is Generally Available"></a><a href="https://www.influxdata.com/blog/influxdb-2-0-open-source-is-generally-available/" target="_blank" rel="noopener">InfluxDB 2.0 Open Source is Generally Available</a></h3><p> InfluxDB Open Source 2.0 總算在最近 GA 了！假如沒有社群的協助應該無法走到這一步，不過這不是結束，而是一個新的開始！</p><ul><li>新版本讓使用者可以簡易部署並確保安全性</li><li>資料的探索和分析也將邁向下一個世代</li><li>多了專門用來處理資料的 Flux 語言</li><li>來自各方的資料可以更完善的整合再一起</li><li>地理融合時間的資料可以使用 Flux 做搜尋</li><li>可以在背景處理需要計算的 Metric, 取樣…等</li><li>即時的告警和通知</li><li>提供共用的 API 給開發者使用</li><li>利用 InfluxDB Stacks 和 Templates 來達成 GitOps 的部署管理 Workflow</li></ul><h3 id="Red-Team-KubeCTL-Cheat-Sheet"><a href="#Red-Team-KubeCTL-Cheat-Sheet" class="headerlink" title="Red Team KubeCTL Cheat Sheet"></a><a href="https://github.com/lightspin-tech/red-kube" target="_blank" rel="noopener">Red Team KubeCTL Cheat Sheet</a></h3><p>red-kube 是各種攻擊 Kubernetes 方式的 GitHub Repository，作者有警告別拿不屬於自己的 K8S Cluster 來嘗試XD 內容包含提權，Credential 存取…等</p><h3 id="Devops-Environment-in-Docker"><a href="#Devops-Environment-in-Docker" class="headerlink" title="Devops Environment in Docker"></a><a href="https://github.com/nmarus/docker-devops-box" target="_blank" rel="noopener">Devops Environment in Docker</a></h3><p>這個 Repository 將各種 DevOps 常用工具打包成一個 Docker Image，例如：ansible, consul, packer, terraform…等，讓 DevOps Engineer 不用安裝一堆東西，只要運行這個 Docker Container 就可以開始上工了！雖然每個團隊需要的東西都不盡相同，但可以利用這個方式去建立屬於自己的！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞</li><li><a href="https://medium.com/@airwaves" target="_blank" rel="noopener">@Airwaves</a> - Hi~我是 Airwaves，熱愛研究如何造輪子的前端工程師</li></ul><p>Curators:</p><ul><li><a href="https://medium.com/@w5151381guy" target="_blank" rel="noopener">@Andy</a> - 目標成為用嘴巴工作的工程師，專長為網頁開發以及 K8s。</li></ul><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 54 期 - 我絕不會讓在場的任何一個工程師加班！</title>
      <link href="/2020/11/10/54-I-am-never-let-any-engineer-work-overtime/"/>
      <url>/2020/11/10/54-I-am-never-let-any-engineer-work-overtime/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Vue-用-testing-library-vue-把-Vue-的單元測試一網打盡-feat-React"><a href="#Vue-用-testing-library-vue-把-Vue-的單元測試一網打盡-feat-React" class="headerlink" title="Vue | 用 @testing-library/vue 把 Vue 的單元測試一網打盡 feat. React"></a><a href="https://medium.com/starbugs/vue-%E7%94%A8-testing-library-vue-%E6%8A%8A-vue-%E7%9A%84%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E4%B8%80%E7%B6%B2%E6%89%93%E7%9B%A1-feat-react-875457aa24a0" target="_blank" rel="noopener">Vue | 用 @testing-library/vue 把 Vue 的單元測試一網打盡 feat. React</a></h3><p>這禮拜專欄要分享的是一套可能是在 Vue 裡非主流（？的單元測試框架 testing-library！雖然它不是官方所維護的套件，但 Vue 官網還是將它默默地擺上去，而且除了 Vue 之外，它還為其他 React、Angular 等 8 個左右的框架統一測試的介面，還不趕快來一起跳坑嗎？</p><h2 id="星巴哥作者群開箱！"><a href="#星巴哥作者群開箱！" class="headerlink" title="星巴哥作者群開箱！"></a>星巴哥作者群開箱！</h2><p>Starbugs 星巴哥技術週刊邁入一週年的里程碑，感謝大家的支持。未來的一年星巴哥想要讓大家看到更多元的內容，提供大家更多優質的原創文章，因此最近我們邀請了幾位優質的寫作者加入 星巴哥的行列，以後在週刊上也會看到作者群撰寫的優質原創文章。</p><p>本週來介紹第二位寫作者 <strong>莫力全 Kyle Mo</strong> ！！</p><p>「剛畢業的社會菜雞，web 技術狂熱者，對自己的要求很簡單，希望每個月回去看自己的 code 都會覺得是糞 code，代表自己又更進步了。目標是成為一個技術分享者，或是能對技術圈有所貢獻，用技術來改變我們的生活。」</p><p>本週來介紹一下 Kyle Mo 的「讓任務排隊吧」系列，從 message queue 的基本概念到 RabbutMQ 的介紹，最後一篇再用 RabbutMQ 打造一個應用架構！那麼 u 質的內容不讀一下嗎？</p><h3 id="基礎觀念系列-讓任務排隊吧：Message-Queue-—-1"><a href="#基礎觀念系列-讓任務排隊吧：Message-Queue-—-1" class="headerlink" title="[基礎觀念系列] 讓任務排隊吧：Message Queue — (1)"></a><a href="https://medium.com/starbugs/%E8%AE%93%E4%BB%BB%E5%8B%99%E6%8E%92%E9%9A%8A%E5%90%A7-message-queue-1-de949e274c43" target="_blank" rel="noopener">[基礎觀念系列] 讓任務排隊吧：Message Queue — (1)</a></h3><p>透過一個簡單的小範例示範 message queue 在現實中可能的應用，不過要再三強調的是這個範例在現實中不太可能會這樣寫，現實中還需要注意很多錯誤處理、效能，甚至要注意 queue 會不會爆掉等問題，這個範例純粹是希望跟我ㄧ樣的初學者可以了解 message queue 可能的應用方向。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-to-Add-Localization-to-Vue-js-App-with-vue-i18n-and-Localazy"><a href="#How-to-Add-Localization-to-Vue-js-App-with-vue-i18n-and-Localazy" class="headerlink" title="How to Add Localization to Vue.js App with vue-i18n and Localazy"></a><a href="https://hackernoon.com/how-to-add-localization-to-vuejs-app-with-vue-i18n-and-localazy-71t3whc" target="_blank" rel="noopener">How to Add Localization to Vue.js App with vue-i18n and Localazy</a></h3><p>為網站設置多國語系一直是一項很煩瑣的工作，尤其是語言越多越麻煩，而本篇文章用 Vue 介紹了 Localazy，讓它自動為你輸出各個語言的語系檔！</p><h3 id="JavaScript-讓你的瀏覽器公威囉"><a href="#JavaScript-讓你的瀏覽器公威囉" class="headerlink" title="JavaScript - 讓你的瀏覽器公威囉!"></a><a href="https://ithelp.ithome.com.tw/articles/10254162" target="_blank" rel="noopener">JavaScript - 讓你的瀏覽器公威囉!</a></h3><p>當初在做類似的需求的時候也才發現原來讓瀏覽器說話那麼簡單 😂，本篇文章仔細的介紹了一些常見的原生 API，非常簡潔易懂。</p><h3 id="Your-website-sucks-And-I’ll-tell-you-why-ROUND-2-⚡️⚡️"><a href="#Your-website-sucks-And-I’ll-tell-you-why-ROUND-2-⚡️⚡️" class="headerlink" title="Your website sucks! And I’ll tell you why (ROUND 2) ⚡️⚡️"></a><a href="https://dev.to/toktoktwan/your-website-sucks-and-i-ll-tell-you-why-round-2-518o" target="_blank" rel="noopener">Your website sucks! And I’ll tell you why (ROUND 2) ⚡️⚡️</a></h3><p>這篇貼文非常有趣，作者讓各位在留言底下貼上自己的網站網址，然後會一一點出這些網站有哪些問題以及優點，並且會解釋得非常詳細！有人想要挑戰看看嗎？😂</p><h2 id="軟體開發"><a href="#軟體開發" class="headerlink" title="軟體開發"></a>軟體開發</h2><h3 id="矽谷資深軟體工程師後疫情時代面試心得-Facebook-Robinhood-Coinbase-DoorDash"><a href="#矽谷資深軟體工程師後疫情時代面試心得-Facebook-Robinhood-Coinbase-DoorDash" class="headerlink" title="矽谷資深軟體工程師後疫情時代面試心得 Facebook/Robinhood/Coinbase/DoorDash"></a><a href="https://pttweb.tw/s/1hevjX" target="_blank" rel="noopener">矽谷資深軟體工程師後疫情時代面試心得 Facebook/Robinhood/Coinbase/DoorDash</a></h3><p>2020 年是個動蕩不安的一年，因為疫情的關係，很多公司都在年中進行了規模不小的裁員，包含大家耳熟能詳的 Airbnb、Uber、Lyft、Yelp、LinkedIn、Mozilla、Intuit、Salesforce 以及 WeWork 等等族繁不及備載。這對於在這段期間要找工作的絕對不是件好事，因為很多人被裁員，意味著同樣的職缺會有更多競爭者。- 引用自原文</p><h3 id="TELNET封包實戰-什麼是TELNET"><a href="#TELNET封包實戰-什麼是TELNET" class="headerlink" title="TELNET封包實戰. 什麼是TELNET?"></a><a href="https://medium.com/@gordonfang_85054/telnet%E5%B0%81%E5%8C%85%E5%AF%A6%E6%88%B0-e9306216fba0" target="_blank" rel="noopener">TELNET封包實戰. 什麼是TELNET?</a></h3><p>Telnet 封包實戰，用一篇文章，搞懂 Telnet 是什麼。</p><h3 id="MySQL-使用-update-all-amp-subquery-可能會鎖住全表"><a href="#MySQL-使用-update-all-amp-subquery-可能會鎖住全表" class="headerlink" title="MySQL 使用 update_all &amp; subquery 可能會鎖住全表"></a><a href="https://medium.com/4ing-%E7%9A%84%E8%88%AA%E6%B5%B7%E6%97%A5%E8%AA%8C/441b3a8e92b6" target="_blank" rel="noopener">MySQL 使用 update_all &amp; subquery 可能會鎖住全表</a></h3><p>Mysql 5.6 鎖表的除錯過程，我覺得滿精采的，5.6 真的滿雷的，至少請升到 5.7。</p><h2 id="系統設計"><a href="#系統設計" class="headerlink" title="系統設計"></a>系統設計</h2><h3 id="系統設計-101—大型系統的演進（上）"><a href="#系統設計-101—大型系統的演進（上）" class="headerlink" title="系統設計 101—大型系統的演進（上）"></a><a href="https://link.medium.com/5X9y3x3Debb" target="_blank" rel="noopener">系統設計 101—大型系統的演進（上）</a></h3><p>為什麼要學習系統設計、系統設計又是在設計些什麼？這篇文章從擴展性以及可用性的觀點切入，講解一個大型系統中的每個部分分別在做什麼，很適合新手讀的一篇文章～</p><h3 id="Campaign-Management-System-Design"><a href="#Campaign-Management-System-Design" class="headerlink" title="Campaign Management System Design"></a><a href="https://link.medium.com/SupiUe4Xdbb" target="_blank" rel="noopener">Campaign Management System Design</a></h3><p>事情是這樣的，有一家公司專門在舉辦各種不同的票選活動，他們打算打造一個票選管理系統，透過 Email 通知使用者（可能有兩千萬人）接下來有什麼票選活動，如果是你，你會想怎麼設計呢？</p><h3 id="You-Are-Not-Google"><a href="#You-Are-Not-Google" class="headerlink" title="You Are Not Google"></a><a href="https://link.medium.com/oiqvweZXdbb" target="_blank" rel="noopener">You Are Not Google</a></h3><p>在做系統設計或是技術選型時，如果沒有足夠的經驗，很容易就會掉進「XXX 公司也是這樣做的」的誤區。譬如說「Google 都是用 Hadoop 在分析資料耶，我們公司說不定有天資料也會大到那個程度，所以我們應該也用 Hadoop」或是「聽說 Discord 換到 Rust 之後省了很多伺服器耶，那我們一開始就要用 Rust 開發」這類的想法</p><p>但實際上你公司的資料量可能一輩子都無法達到 Google 的百分之一，伺服器數量也遠遠低於 Discord，省個 30% 可能每年只省三千塊，所以千萬不能盲目跟風，仔細評估需求之後再進行選擇才是最適合自己的</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Managing-my-personal-server-in-2020"><a href="#Managing-my-personal-server-in-2020" class="headerlink" title="Managing my personal server in 2020"></a><a href="https://github.com/erebe/personal-server" target="_blank" rel="noopener">Managing my personal server in 2020</a></h3><p>在 2020 當今要如何管理一台架設於自己居家的個人伺服器呢？作者將所有需要做的事情給鉅細彌遺地整理在這個 GitHub Repository 中，從 Secrets 加密方式，自動化管理 DNS，Kubernetes k3s 的設定方式，如何申請 Let’s Encrypt TLS Certificate，部署郵件服務的步驟，如何安裝 Nextcloud 來充當個人的 Cloud，備份管理方式，使用 Wireguard 來建立 Private Network，WsTunnel 來通過防火牆，並且註冊 Raspberry Pi 到 K3s Cluster 中！而且遵守幾個原則 1) 簡單管理，部署和更新 2) 全部的步驟都需要 Git Repository 中 3) 盡可能自動化且使用免費的服務 4) 以相同的方式打包和部署系統應用程式跟自己的相關專案</p><h3 id="Top-Four-Ways-to-Visualize-Traffic-Between-Microservices-in-Kubernetes"><a href="#Top-Four-Ways-to-Visualize-Traffic-Between-Microservices-in-Kubernetes" class="headerlink" title="Top Four Ways to Visualize Traffic Between Microservices in Kubernetes"></a><a href="https://blog.alcide.io/top-four-ways-to-visualize-traffic-between-microservices-in-kubernetes" target="_blank" rel="noopener">Top Four Ways to Visualize Traffic Between Microservices in Kubernetes</a></h3><p>微服務亂糟糟的網路該如何方便查找問題呢？這篇文章推薦了幾種可以把位於 K8S 內微服務間網路給視覺化的幾種工具，讓人類可以用更快更有效率的方式來了解微服務間的網路封包是如何傳送的</p><ul><li>Istio and Kiali</li><li>Cilium and Hubble</li><li>Weave Scope</li><li>Alcide</li></ul><h3 id="Making-Terraform-Provider-Development-More-Accessible"><a href="#Making-Terraform-Provider-Development-More-Accessible" class="headerlink" title="Making Terraform Provider Development More Accessible"></a><a href="https://www.hashicorp.com/blog/making-terraform-provider-development-more-accessible" target="_blank" rel="noopener">Making Terraform Provider Development More Accessible</a></h3><p>大家應該都還記得 HashiCorp 從 0.11 升級到 0.12 給整個生態圈帶來的影響，很多的 Provider 都需要更新，Terraform 的寫法也或多或少都需要更改，所以當初升級的時候其實整個社群滿動盪的，而這次是 Prodiver 本身的 Framework 準備要大改版了… 大家都知道 Terraform Provider 的生態系越來越大，從 2014 第一個 Provider 發佈至今，已經有超過 1900 個 Provider 被撰寫過，Terraform Provider 讓許多事情成為可能，例如從定義重要的服務架構到訂購 Pizza 都可以透過它來達成，而這些都是透過六年前所定義的 Framework 所開發出來的，而生態系越龐大要改動其實也就越難，因此開發團隊做了很多的努力，從過去的經驗中學習，盡力讓這次更新的影響可以降到最低，首先是為 Terraform Plugin Protocol 佈新的 Go Libraries，並且發布 terraform-plugin-mux 讓 Provider 開發者可以不用一次升級所有的資源，只要搭配使用最新版的 Terraform Plugin SDK 就可以達成這個目標</p><h3 id="7-1-1版以前的Android-裝置2021年9月起將不支援Let’s-Encrypt憑證"><a href="#7-1-1版以前的Android-裝置2021年9月起將不支援Let’s-Encrypt憑證" class="headerlink" title="7.1.1版以前的Android 裝置2021年9月起將不支援Let’s Encrypt憑證"></a><a href="https://www.ithome.com.tw/news/140991" target="_blank" rel="noopener">7.1.1版以前的Android 裝置2021年9月起將不支援Let’s Encrypt憑證</a></h3><p>Let’s Encrypt 警告手機跑Android 7.1.1版的用戶，明年9月1日起有約三成 Android裝置會出現憑證錯誤問題，詳細原因可以參考文章內容，不過假如自已的對外公開服務有使用 Let’s Encrypt TLS 憑證的話，就要記得提早因應</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://larry850806.medium.com" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩</li><li><a href="https://oldmo860617.medium.com/" target="_blank" rel="noopener">@Kyle老莫</a> - 無法忍受自己一天不進步的熱血社會菜雞</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 53 期 - Starbugs 技術週刊一歲囉！</title>
      <link href="/2020/11/03/53-happy-birthday-to-starbugs/"/>
      <url>/2020/11/03/53-happy-birthday-to-starbugs/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從-LLVM-IR-來看編譯器最佳化都在做些什麼"><a href="#從-LLVM-IR-來看編譯器最佳化都在做些什麼" class="headerlink" title="從 LLVM IR 來看編譯器最佳化都在做些什麼"></a><a href="https://medium.com/starbugs/see-what-compiler-optimization-do-from-llvm-ir-dfd3774292cb" target="_blank" rel="noopener">從 LLVM IR 來看編譯器最佳化都在做些什麼</a></h3><p>在 Starbugs 一週年的專欄，我想跟大家分享什麼是編譯器最佳化，雖然「編譯器」跟「LLVM IR」聽起來很難很恐怖，但這篇文只會帶大家看些簡單的程式碼，並且舉一些例子來講 <strong>編譯器最佳化</strong> 在做些什麼，所以真的不用太擔心看不懂 XD</p><h2 id="慶祝一週年，新增作者群！"><a href="#慶祝一週年，新增作者群！" class="headerlink" title="慶祝一週年，新增作者群！"></a>慶祝一週年，新增作者群！</h2><p>Starbugs 星巴哥技術週刊邁入一週年的里程碑，感謝大家的支持。未來的一年星巴哥想要讓大家看到更多元的內容，提供大家更多優質的原創文章，因此最近我們邀請了幾位優質的寫作者加入 星巴哥的行列，以後在週刊上也會看到作者群撰寫的優質原創文章。</p><p>本週來介紹第一位寫作者 <strong>Hannah Lin</strong> ！！</p><p>Hannah 是一位非本科系的前端工程師，因為熱愛前端，不斷努力，終於在近兩年解鎖了在矽谷工作的成就。「能把興趣當工作是很幸福的一件事，也期許每天的自己都能比昨天更強一些」- 從這句話中可以透漏出 Hannah 對技術的熱愛與不斷前進的衝勁！</p><p>本週來介紹一下 Hannah 在面試 Facebook 時被考的問題，透過這篇文章了解世界頂級的大公司，到底在考些什麼？</p><h3 id="Facebook-面試考什麼-—-DOM-Tree-篇"><a href="#Facebook-面試考什麼-—-DOM-Tree-篇" class="headerlink" title="Facebook 面試考什麼 — DOM Tree 篇"></a><a href="https://medium.com/starbugs/facebook-%E9%9D%A2%E8%A9%A6%E8%80%83%E4%BB%80%E9%BA%BC-dom-tree-%E7%AF%87-ce4c3c14e77d" target="_blank" rel="noopener">Facebook 面試考什麼 — DOM Tree 篇</a></h3><p>雖然自知能力還不足，但能有機會跟 Facebook 電話面試 (美國面試 6–8 關，電話面試只是第 2 關而已 )，也可以算是人生成就了吧! 覺得大家應該會好奇國外面試除了演算法/資料結構還會考些什麼有趣題目。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="認識-parseInt、parseFloat-與-Number-轉換成數字的三種方法"><a href="#認識-parseInt、parseFloat-與-Number-轉換成數字的三種方法" class="headerlink" title="認識 parseInt、parseFloat 與 Number 轉換成數字的三種方法"></a><a href="https://medium.com/unalai/%E8%AA%8D%E8%AD%98-parseint-parsefloat-%E8%88%87-number-%E8%BD%89%E6%8F%9B%E6%88%90%E6%95%B8%E5%AD%97%E7%9A%84%E4%B8%89%E7%A8%AE%E6%96%B9%E6%B3%95-276640aedb4e" target="_blank" rel="noopener">認識 parseInt、parseFloat 與 Number 轉換成數字的三種方法</a></h3><p>在原生的 JavaScritp 中提供了 <code>parseInt</code>、<code>parseFloat</code> 和 <code>Number</code> 來把值的型態轉成數值，那你有思考過這三種方法除了名稱外還有什麼不同嗎？</p><h3 id="JavaScript-Void-0-–-What-Does-javascript-void-0-Mean"><a href="#JavaScript-Void-0-–-What-Does-javascript-void-0-Mean" class="headerlink" title="JavaScript Void 0 – What Does javascript:void(0); Mean?"></a><a href="https://www.freecodecamp.org/news/javascript-void-keyword-explained/" target="_blank" rel="noopener">JavaScript Void 0 – What Does javascript:void(0); Mean?</a></h3><p>各位前端工程師應該有留意過在 <code>a</code> 的 <code>href</code> 中出現的 <code>javascript:void(0)</code> 對吧？通常都會使用在不想要連結到其他網址而讓 <code>href</code> 失效的方式，但你知道 <code>void</code> 到底是什麼神奇的空東西嗎？</p><h3 id="使用-Vue3-封装一些有用的组合-API"><a href="#使用-Vue3-封装一些有用的组合-API" class="headerlink" title="使用 Vue3 封装一些有用的组合 API"></a><a href="https://juejin.im/post/6888925879243079687" target="_blank" rel="noopener">使用 Vue3 封装一些有用的组合 API</a></h3><p>在這篇文章當中，作者認為 Vue3 的 Composition API 和 React 的 Hooks 非常相似，因此就試著用了 Vue3 實現 React 在 Hook 所提供的功能！</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="详解-Python-中的协程，为什么说它的底层是生成器？"><a href="#详解-Python-中的协程，为什么说它的底层是生成器？" class="headerlink" title="详解 Python 中的协程，为什么说它的底层是生成器？"></a><a href="https://juejin.im/post/6883291943787298829" target="_blank" rel="noopener">详解 Python 中的协程，为什么说它的底层是生成器？</a></h3><p>協程 Coroutine 與線程 Thread 的不同在於，Thread 由作業系統調度，而 Coroutine 由程式語言實作。本篇文章來探討，在 Python 3.4 以後，官方也收入協程的功能，讓我們來看看協程究竟是怎麼回事吧！</p><h3 id="说说我对-WSGI-的理解"><a href="#说说我对-WSGI-的理解" class="headerlink" title="说说我对 WSGI 的理解"></a><a href="https://juejin.im/post/6844903719306428430" target="_blank" rel="noopener">说说我对 WSGI 的理解</a></h3><p>WSGI 解決了怎麼樣的問題？舉個例子：服務器應該如何把請求信息傳給應用，應用處理完畢後又怎麼告訴服務器開始返迴響應，如果都是各搞各的，服務器需要定制應用，應用也要定制服務器，這要一個應用能跑起來也太麻煩了點吧。所以，WSGI 的出現就是為了解決上面的問題，它規定了服務器如何把請求信息告訴給應用，應用怎麼把執行情況回傳給服務器，這樣的話，服務器與應用都按一個標準辦事，只要實現了這個標準，服務器與應用隨意搭配就可以，靈活度大大提高。- 引用自原文</p><h3 id="A-Bite-of-Python"><a href="#A-Bite-of-Python" class="headerlink" title="A Bite of Python"></a><a href="https://juejin.im/entry/6844903576708317192" target="_blank" rel="noopener">A Bite of Python</a></h3><p>一口 Python，也可以叫作「咬一口 Python」，寓意著 Python 的冰山一角，包含著作者這幾年學 Python 時積累的一些知識和經驗，文章中包含了很多快速簡潔的例子，方便讓讀者了解到 Python 中存在的一些概念，然後去自行拓展。</p><h2 id="Compiler"><a href="#Compiler" class="headerlink" title="Compiler"></a>Compiler</h2><h3 id="編譯器-LLVM-淺淺玩，以動手實作來認識-LLVM-Compiler-Infrastructure"><a href="#編譯器-LLVM-淺淺玩，以動手實作來認識-LLVM-Compiler-Infrastructure" class="headerlink" title="編譯器 LLVM 淺淺玩，以動手實作來認識 LLVM Compiler Infrastructure"></a><a href="https://medium.com/@zetavg/%E7%B7%A8%E8%AD%AF%E5%99%A8-llvm-%E6%B7%BA%E6%B7%BA%E7%8E%A9-42a58c7a7309" target="_blank" rel="noopener">編譯器 LLVM 淺淺玩，以動手實作來認識 LLVM Compiler Infrastructure</a></h3><p>這週的專欄大部分的篇幅都花在講有哪些最佳化的方法，對 LLVM 並沒有太多介紹。所以如果想知道為什麼要有 LLVM IR，還有 LLVM 是在什麼背景下出現的，可以看看這篇文章～</p><h3 id="The-JIT-in-JavaScript-Just-In-Time-Compiler"><a href="#The-JIT-in-JavaScript-Just-In-Time-Compiler" class="headerlink" title="The JIT in JavaScript: Just In Time Compiler"></a><a href="https://blog.bitsrc.io/the-jit-in-javascript-just-in-time-compiler-798b66e44143" target="_blank" rel="noopener">The JIT in JavaScript: Just In Time Compiler</a></h3><p>看完本週的專欄後，如果想繼續了解 NodeJS 的 JIT Compiler，可以看看這篇文，他從 JIT 是什麼開始講起，而且也講了一些關於 JS 該怎麼寫才能被 JIT 最佳化的小 tips</p><h3 id="Why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array"><a href="#Why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" class="headerlink" title="Why is processing a sorted array faster than processing an unsorted array?"></a><a href="https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" target="_blank" rel="noopener">Why is processing a sorted array faster than processing an unsorted array?</a></h3><p>這週的專欄中有提到 Loop Unrolling 可以降低 CPU 做 Branch Prediction 的錯誤率，但如果你還不知道什麼是 Branch Prediction，這篇 StackOverflow 上的問答我覺得解釋得很清楚！</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Flux2"><a href="#Flux2" class="headerlink" title="Flux2"></a><a href="https://github.com/fluxcd/flux2" target="_blank" rel="noopener">Flux2</a></h3><p>在 GitOps 時代，有三個工具一直被提出來比較，分別是 Flux, ArgoCD 跟 Jenkins X，複雜度是 Flux &lt; ArgoCD &lt; Jenkins X，而功能多樣性則是 Flux &lt; ArgoCD &lt; Jenkins X；而在上週 Flux 推出了 Flux2，當然新增了不少新功能，可以整合更多 Kubernets 生態圈的工具之外，也可以同步任意數量的 Git Repostiroy，當然還有其他大家已經要求以及期待很久的功能</p><h3 id="Kubecolor"><a href="#Kubecolor" class="headerlink" title="Kubecolor"></a><a href="https://github.com/dty1er/kubecolor" target="_blank" rel="noopener">Kubecolor</a></h3><p>身為 SRE 每天都會使用到 kubectl, 面對一成不變的輸出內容感到厭倦了嗎？快來使用 kubecolor，讓你的 kubectl 輸出跟人生充滿色彩！</p><h3 id="Salto-raises-27M-to-let-you-configure-your-SaaS-platforms-with-code"><a href="#Salto-raises-27M-to-let-you-configure-your-SaaS-platforms-with-code" class="headerlink" title="Salto raises $27M to let you configure your SaaS platforms with code"></a><a href="https://techcrunch.com/2020/10/27/salto-raises-27m-to-let-you-configure-saas-platform-with-code/" target="_blank" rel="noopener">Salto raises $27M to let you configure your SaaS platforms with code</a></h3><p>Salto 是一間新創公司，他們推出的開源產品讓開發者可以使用程式碼定義 SaaS 平台的組態設定，例如：Salesforce, NetSuite 和 HubSpot…等，在上週他們宣布獲得 2700 萬美金的 A 輪投資，看來在各家 SaaS 平台提供的 API 功能越來越齊全之下，此面向的 Configuration as Code 產品會越來越蓬勃發展！最後附上 <a href="https://github.com/salto-io/salto" target="_blank" rel="noopener">GitHub 連結</a>讓有興趣的人可以試試看</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Maintainers:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><p>Writers:</p><ul><li><a href="https://medium.com/@hannahlin" target="_blank" rel="noopener">@HannahLin</a> - 從台灣到矽谷，熱愛前端的工程師女孩</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 52 期 - 有人沒去 mopcon 的嗎？</title>
      <link href="/2020/10/27/52-devops-where-is-my-podpod-resource-management/"/>
      <url>/2020/10/27/52-devops-where-is-my-podpod-resource-management/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="DevOps-Where-is-My-PodPod-Pod-Arrangement"><a href="#DevOps-Where-is-My-PodPod-Pod-Arrangement" class="headerlink" title="DevOps: Where is My PodPod - Pod Arrangement"></a><a href="https://medium.com/starbugs/devops-where-is-my-podpod-pod-arrangement-2a5e772a579d" target="_blank" rel="noopener">DevOps: Where is My PodPod - Pod Arrangement</a></h3><p>使用 K8S 的人其實跟在管理牧場並沒有什麼兩樣，從前用來戲謔工程師的詞彙 (碼農)，如今好像想賴也賴不掉了XD 此篇文章的重點為 如何管理牧地 (K8S Node) 讓每隻牛 (K8S Pod) 都可以開開心心地吃到草 (CPU, Memory)</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="I-Wish-I-Never-Learned-to-Code"><a href="#I-Wish-I-Never-Learned-to-Code" class="headerlink" title="I Wish I Never Learned to Code"></a><a href="https://hackernoon.com/i-wish-i-never-learned-to-code-7a1m3wwx" target="_blank" rel="noopener">I Wish I Never Learned to Code</a></h3><p>不曉得大家是否會在某些時候浮現「真希望我從來沒學過程式。」的念頭，打程式不只有很多職業病（例如到一個新網站就開始拖拉網頁的長寬，看看 RWD 做得如何），還有你另外一個工程師之間的話題總是只能狂聊程式（像是你寫測試嗎？還是有導入 CI/CD？），或者你必須常常在下班後用你自己的時間學習程式，但是以上的所有令人討厭的事情全都來自於一個原因，那就是「因為熱愛程式」。</p><h3 id="超详-2020年你不应该错过的CSS新特性"><a href="#超详-2020年你不应该错过的CSS新特性" class="headerlink" title="超详|2020年你不应该错过的CSS新特性"></a><a href="https://juejin.im/post/6886258269137043464#heading-7" target="_blank" rel="noopener">超详|2020年你不应该错过的CSS新特性</a></h3><p><a href="https://www.londoncss.dev/" target="_blank" rel="noopener">LondonCSS 2020</a> 是一個在倫敦的 CSS 社群，而筆者在 2020/09/10 的 LondonCSS 2020 活動裡整理了將近 24 個有趣的 CSS 新特性，因為文章中真的提到滿多東西的，建議各位從右方的目錄中選擇有興趣的閱讀。</p><h3 id="10-useful-HTML-file-upload-tips-for-web-developers"><a href="#10-useful-HTML-file-upload-tips-for-web-developers" class="headerlink" title="10 useful HTML file upload tips for web developers"></a><a href="https://dev.to/atapas/10-useful-html-file-upload-tips-for-web-developers-2d1d" target="_blank" rel="noopener">10 useful HTML file upload tips for web developers</a></h3><p>在 HTML 中，想要做一個檔案上傳器也許只需要把 <code>input</code> 的 <code>type</code> 屬性設置為 <code>file</code> 就行了，但你知道單用 HTML 和簡單的幾行原生 JavaScript 還能輕鬆做到進度條和拖拉上傳嗎？</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="【译】用-Python-编写的-Python-解释器"><a href="#【译】用-Python-编写的-Python-解释器" class="headerlink" title="【译】用 Python 编写的 Python 解释器"></a><a href="https://juejin.im/entry/6844903592210644999" target="_blank" rel="noopener">【译】用 Python 编写的 Python 解释器</a></h3><p>Allison 是 Dropbox 的工程師。她撰寫了這篇文章。她用 Python 實現了一款 Python 的直譯器叫做 Byterun。Byterun 包含了 VirtualMachine、Frame、Function、Block 四種 class。滿酷的，讓我想起 Ruby 的 VM 實作。</p><h3 id="只需十四步：从零开始掌握-Python-机器学习（附资源）"><a href="#只需十四步：从零开始掌握-Python-机器学习（附资源）" class="headerlink" title="只需十四步：从零开始掌握 Python 机器学习（附资源）"></a><a href="https://juejin.im/entry/6844903469833256973" target="_blank" rel="noopener">只需十四步：从零开始掌握 Python 机器学习（附资源）</a></h3><p>本教程或許能幫你成功上手，從0到1掌握Python機器學習，至於後面再從1到100變成機器學習專家，就要看你自己的努力了。短評：其實機器學習難的是後面，但是稍微了解一下似乎也是不錯的選擇。</p><h3 id="教你阅读-Python-开源项目代码"><a href="#教你阅读-Python-开源项目代码" class="headerlink" title="教你阅读 Python 开源项目代码"></a><a href="https://juejin.im/entry/6844903455451004935" target="_blank" rel="noopener">教你阅读 Python 开源项目代码</a></h3><p>閱讀Python開源項目代碼主要有如下三個原因：</p><p>1.在工作過程中遇到一些問題，Google和StackOverFlow等網站找到解決方法，只能去翻原始碼。<br>2.對某些項目或方向非常感興趣，希望深入。<br>3.學習遇到難題需要汲取開源項目的經驗和適當來做提高。</p><p>没有目的的阅读开源项目就是耍流氓。浪费了时间，但是能学到的东西也很少。怎么样根据自身情况去阅读呢？ … (閱讀更多)</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="How-Docker-Can-Help-You-Become-A-More-Effective-Data-Scientist"><a href="#How-Docker-Can-Help-You-Become-A-More-Effective-Data-Scientist" class="headerlink" title="How Docker Can Help You Become A More Effective Data Scientist"></a><a href="https://link.medium.com/lbrZmOtZRab" target="_blank" rel="noopener">How Docker Can Help You Become A More Effective Data Scientist</a></h3><p>因為 Docker 方便部署的特性，很多後端工程師都會使用 Docker 來進行部署，網路上大部分介紹 Docker 的文章也大多是以 Web 後端為例。但除了後端之外，Docker 也可以幫助到資料科學家，尤其在用 GPU train model 時常常會需要裝一堆有的沒的套件，而且又必須是固定版本，這時就很適合使用 Docker，反正環境壞了就刪掉重建一個就好了 XD</p><h3 id="3-steps-to-drastically-improve-your-docker-build-performances"><a href="#3-steps-to-drastically-improve-your-docker-build-performances" class="headerlink" title="3 steps to drastically improve your docker build performances"></a><a href="https://dev.to/gasparev/3-steps-to-drastically-improve-your-docker-build-performances-17jg" target="_blank" rel="noopener">3 steps to drastically improve your docker build performances</a></h3><p>三個方法，教你怎麼讓 docker build 的過程更快，並且 build 出一個儘可能小的 image，有常在用 Docker 的話這篇文章非常實用</p><h3 id="It’s-Time-to-Say-Goodbye-to-Docker"><a href="#It’s-Time-to-Say-Goodbye-to-Docker" class="headerlink" title="It’s Time to Say Goodbye to Docker"></a><a href="https://dev.to/martinheinz/it-s-time-to-say-goodbye-to-docker-386h" target="_blank" rel="noopener">It’s Time to Say Goodbye to Docker</a></h3><p>只要提到容器（container），大部分人都是第一時間就想到 Docker，但 Docker 並不等於容器，他只是一種容器化的技術而已。而這篇文章就要跟大家介紹另一個容器化的工具 Podman，用起來跟 Docker 非常類似，但解決了一些 Docker 的缺點，等以後成熟了之後說不定會慢慢取代 Docker</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Public-Preview-–-AWS-Distro-for-OpenTelemetry"><a href="#Public-Preview-–-AWS-Distro-for-OpenTelemetry" class="headerlink" title="Public Preview – AWS Distro for OpenTelemetry"></a><a href="https://aws.amazon.com/blogs/aws/public-preview-aws-distro-open-telemetry/" target="_blank" rel="noopener">Public Preview – AWS Distro for OpenTelemetry</a></h3><p>AWS 於上週宣布了 AWS Distro for OpenTelemetry，讓開發以及維運人員可以觀察系統的運行狀況，目前開發預覽版支援的程式語言僅有 Java，不過未來當然會加入更多的語言；收集到的資料除了可以往自家的服務 (CloudWatch, X-Ray, ElasticSearch) 存放之外，也可以往其他整合的第三方工具傳送過去，而且還不少家一起加入這個行列：<a href="https://www.appdynamics.com/blog/product/what-is-opentelemetry/" target="_blank" rel="noopener">AppDynamics</a>, <a href="https://www.datadoghq.com/blog/aws-opentelemetry/" target="_blank" rel="noopener">Datadog</a>, <a href="https://grafana.com/blog/2020/10/21/grafana-modernizing-observability-with-aws-opentelemetry-openmetrics-and-beyond/" target="_blank" rel="noopener">Grafana</a>, <a href="https://blog.newrelic.com/product-news/aws-distro-for-opentelemetry/" target="_blank" rel="noopener">New Relic</a>, <a href="https://www.splunk.com/en_us/blog/devops/splunk-and-aws-partnering-to-accelerate-production-ready-opentelemetry.html" target="_blank" rel="noopener">Splunk</a>，感覺後市看漲</p><h3 id="Failing-over-without-falling-over"><a href="#Failing-over-without-falling-over" class="headerlink" title="Failing over without falling over"></a><a href="https://stackoverflow.blog/2020/10/23/adrian-cockcroft-aws-failover-chaos-engineering-fault-tolerance-distaster-recovery/" target="_blank" rel="noopener">Failing over without falling over</a></h3><p>Adrian Cockcroft (目前是 AWS 的 VP of Cloud Architecture Strategy ) 歷任過 Sun Microsystems, Netflix，而在 Netflix 期間則是幫忙建置和討論 Chaos Engineering，多重 Zone 和區域的雲端架構，而在設計一個強大可靠的系統時，需要注意的事情當然不會少，文章從可能遇到的問題還有建議的做法一一談到</p><h3 id="APIs-101-Everything-you-need-to-know-about-API-design"><a href="#APIs-101-Everything-you-need-to-know-about-API-design" class="headerlink" title="APIs 101: Everything you need to know about API design"></a><a href="https://cloud.google.com/blog/products/api-management/google-cloud-api-design-tips" target="_blank" rel="noopener">APIs 101: Everything you need to know about API design</a></h3><p>API 是當前應用服務間最廣泛採用的對話方式，文章中提到不同協定的差異 (REST, RPC 和 GraphQL)，並且提到如何設計一個整體性的 API 可能遇到的挑戰和最佳做法</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 51 期 - 聽說貓亢要舉辦了，是不是要貓一下</title>
      <link href="/2020/10/20/51-mopcon-is-coming-cats-are-also-coming/"/>
      <url>/2020/10/20/51-mopcon-is-coming-cats-are-also-coming/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="IT邦幫忙鐵人賽懶人包-2020-原來鄰居的-wifi-密碼那麼容易取得"><a href="#IT邦幫忙鐵人賽懶人包-2020-原來鄰居的-wifi-密碼那麼容易取得" class="headerlink" title="IT邦幫忙鐵人賽懶人包 2020 原來鄰居的 wifi 密碼那麼容易取得"></a><a href="https://medium.com/starbugs/7e17edc0ea27" target="_blank" rel="noopener">IT邦幫忙鐵人賽懶人包 2020 原來鄰居的 wifi 密碼那麼容易取得</a></h3><p>這篇文章蒐集了 IT 邦幫忙第 12 屆鐵人賽 的好文。習慣性的整理一下今年新的鐵人賽資訊，方便以後查找。今年我覺得資安系列非常精采，許多令人眼睛為之一亮的系列。<br>今年除了官方網站的排行榜外，也再次感謝熱心的 qrtt1 大大幫大家製作了排行榜，大家可以藉由這個排行榜來得知哪些系列是目前最多人觀看與訂閱的。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="10年網頁設計流行風格回顧與趨勢分析（2010-2020）"><a href="#10年網頁設計流行風格回顧與趨勢分析（2010-2020）" class="headerlink" title="10年網頁設計流行風格回顧與趨勢分析（2010~2020）"></a><a href="https://medium.com/as-a-product-designer/10%E5%B9%B4%E7%B6%B2%E9%A0%81%E8%A8%AD%E8%A8%88%E6%B5%81%E8%A1%8C%E9%A2%A8%E6%A0%BC%E5%9B%9E%E9%A1%A7%E8%88%87%E8%B6%A8%E5%8B%A2%E5%88%86%E6%9E%90-2010-2020-60319fdfd2d6" target="_blank" rel="noopener">10年網頁設計流行風格回顧與趨勢分析（2010~2020）</a></h3><p>你知道響應式網站的概念從被發表開始，已經過了十年了嗎？文章用許多網頁一一介紹了近十年的網頁設計發展史，並且用心說明在該年代背景中，那些風格會成為主流的原因。</p><h3 id="What-is-Front-End-Development-Necessary-Web-Development-Job-Skills-Explained"><a href="#What-is-Front-End-Development-Necessary-Web-Development-Job-Skills-Explained" class="headerlink" title="What is Front-End Development? Necessary Web Development Job Skills Explained."></a><a href="https://www.freecodecamp.org/news/what-is-front-end-development/" target="_blank" rel="noopener">What is Front-End Development? Necessary Web Development Job Skills Explained.</a></h3><p>你知道前端工程師最需要的技能是什麼嗎？作者從前端工程師的角色出發，從工作範圍帶出什麼樣的角色才是前端工程師該有的樣子，文章內容非常有趣，沒有技術成分，適合全家大小一起觀賞 🙌。</p><h3 id="Typing-effect-without-Javascript"><a href="#Typing-effect-without-Javascript" class="headerlink" title="Typing effect without Javascript"></a><a href="https://dev.to/stokry/typing-effect-without-javascript-54ol" target="_blank" rel="noopener">Typing effect without Javascript</a></h3><p>這篇文章的作者在沒有使用 JavaScript 的情況下就做出了打字機的效果，文章範例僅僅只使用不到 30 行的 CSS 設置，就展現了 CSS 的強大之處，而且一樓的留言讓整個文章內容更完美了！</p><h2 id="Vue-js"><a href="#Vue-js" class="headerlink" title="Vue.js"></a>Vue.js</h2><h3 id="Vue-3-0-正式版-輕前端視角"><a href="#Vue-3-0-正式版-輕前端視角" class="headerlink" title="Vue 3.0 正式版 - 輕前端視角"></a><a href="https://blog.darkthread.net/blog/vue-3-release/" target="_blank" rel="noopener">Vue 3.0 正式版 - 輕前端視角</a></h3><p>這週來了解 vue 3 改了些什麼東西。1. Composition API。2. 效能提昇：與 Vue 2 相比，初始 Render 速度加快 55%，更新速度加快 133%，記憶體使用減少 54%。Vue 3 全面改用 TypeScript 開發，跟 TypeScript/VSCode 的整合性大增。不過開發者仍可以使用 javascript 開發。官方文件有篇升級指南，<a href="https://v3.vuejs.org/guide/migration/introduction.html#breaking-changes" target="_blank" rel="noopener">Breaking Changes</a> 章節是最權威的參考來源。- 部分內容來自原文</p><h3 id="Vue-3-0-升級紀錄"><a href="#Vue-3-0-升級紀錄" class="headerlink" title="Vue 3.0 升級紀錄"></a><a href="https://kuro.tw/posts/2020/07/06/Vue-3-0-%E5%8D%87%E7%B4%9A%E7%B4%80%E9%8C%84/" target="_blank" rel="noopener">Vue 3.0 升級紀錄</a></h3><p>Kuro 大大升級 vue 3.0 的實戰升級過程。Event bus 的寫法需要修改，所以如果之後要使用 event bus 的話乾脆直接使用 vuex 吧。過去我們透過 prop 與 .sync 來同步上下層 component 狀態 (俗稱雙向綁定) 的方式， 現在可以改由多組 v-model 來做到了。目前升級 Vue 3.0 的開發體驗相當好，像是大家都很熟悉的 composition api、直接在 component 使用 v-model， 以及新增的 async-component 與 <code>&lt;Suspense&gt;</code> 等等，都是非常實用的功能。- 部分內容來自原文</p><h3 id="Vue-3-0-来了，我们该做些什么？"><a href="#Vue-3-0-来了，我们该做些什么？" class="headerlink" title="Vue 3.0 来了，我们该做些什么？"></a><a href="https://juejin.im/post/6874604408030789640" target="_blank" rel="noopener">Vue 3.0 来了，我们该做些什么？</a></h3><p>Composition API解決了什麼問題？使用傳統的 Vue2.x 配置方法寫組件的時候問題，隨著業務複雜度越來越高，代碼量會不斷的加大。由於相關業務的代碼需要遵循option 的配置寫到特定的區域，導致後續維護非常的複雜，同時代碼可複用性不高，你常常會發現一個頁面組件，寫著寫著就寫到了三四百行去了。而 Composition API 解決了這個令人頭疼的問題。它為我們提供了幾個函數，如下所示：reactive, watchEffect, computed, ref, toRefs, hooks。- 部分內容來自原文</p><h2 id="React-js"><a href="#React-js" class="headerlink" title="React.js"></a>React.js</h2><h3 id="React-Hooks-新手筆記：關於這些時日與-React-Hooks-為伍的簡易記錄"><a href="#React-Hooks-新手筆記：關於這些時日與-React-Hooks-為伍的簡易記錄" class="headerlink" title="React Hooks 新手筆記：關於這些時日與 React Hooks 為伍的簡易記錄"></a><a href="https://medium.com/@z3388638/react-hooks-%E6%96%B0%E6%89%8B%E7%AD%86%E8%A8%98-8c9f1cccd142" target="_blank" rel="noopener">React Hooks 新手筆記：關於這些時日與 React Hooks 為伍的簡易記錄</a></h3><p>React Hook 已經出來好一陣子了，但想必還是有人跟我一樣對他們不太熟悉。而這篇 React Hooks 新手筆記除了講解 Hook 的語法之外，還給了非常多的範例，真的是給新手看的 XD</p><h3 id="了解這些，更快掌握-TypeScript-在-React-中的使用"><a href="#了解這些，更快掌握-TypeScript-在-React-中的使用" class="headerlink" title="了解這些，更快掌握 TypeScript 在 React 中的使用"></a><a href="https://pjchender.blogspot.com/2020/07/typescript-react-using-typescript-in.html" target="_blank" rel="noopener">了解這些，更快掌握 TypeScript 在 React 中的使用</a></h3><p>這篇文章主要是給想在 React 專案裡面導入 TypeScript 的人看的，隨著專案越來越龐大，太過自由的 JS 語法可能會使得程式碼越來越難維護，這時候也許就可以導入 TypeScript，透過型別以及 interface 的限制，讓彼此的合作更順暢</p><h3 id="初探-Server-Side-Rendering-與-Next-js"><a href="#初探-Server-Side-Rendering-與-Next-js" class="headerlink" title="初探 Server-Side-Rendering 與 Next.js"></a><a href="https://oldmo860617.medium.com/%E5%88%9D%E6%8E%A2-server-side-rendering-%E8%88%87-next-js-%E6%8E%A8%E5%9D%91%E8%A8%88%E7%95%AB-d7a9fb48a964" target="_blank" rel="noopener">初探 Server-Side-Rendering 與 Next.js</a></h3><p>身為人氣最高的 React SSR Framework，Next.js 大幅降低了 SSR 的技術門檻。以前開發者要自己維護超複雜的 webpack 設定，而且設定好之後就不太敢更新，怕一動就會把整個編譯的過程弄壞（就是我 XD）。但有了 Next.js 之後終於又可以專心寫扣，不用自己搞那些有的沒的效能調校，就可以生出一個高效能而且支援 SSR 的網站，真的很推</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-HashiCorp-Boundary"><a href="#Announcing-HashiCorp-Boundary" class="headerlink" title="Announcing HashiCorp Boundary"></a><a href="https://www.hashicorp.com/blog/hashicorp-boundary" target="_blank" rel="noopener">Announcing HashiCorp Boundary</a></h3><p>Hashicorp <strong>Boundary</strong> 是一套讓使用者可以透過 Role Base 方式來安全地存取位於公司內部重要系統的工具，之前有介紹過一套以 Zero Trust 為精神開發的類似工具 Teleport，傳統系統管理人員會透過 VPN, Gateway, Bastion 再加上防火牆的設定來管控使用者可以存取到哪些網段的機器；而 Boundary 這類工具則是以使用者認證出發，透過使用者角色來允許可以存取的系統有哪些，不再需要透過設定一堆防火牆規則 (不過自己還是覺得有些還是要設定比較好XD)，很開心這個領域又有新的競爭者加入，不過目前的版本 (0.1) 還不算可以用，或是說主要企業 TA 需要的重要功能我在文件區都沒有看到，例如整合第三方 Identity Provider, Auditing, Recording, Blocking Command…等功能，只有看到他儲存 Key 和 Role Base 的設定方式</p><h3 id="Announcing-HashiCorp-Waypoint"><a href="#Announcing-HashiCorp-Waypoint" class="headerlink" title="Announcing HashiCorp Waypoint"></a><a href="https://www.hashicorp.com/blog/announcing-waypoint" target="_blank" rel="noopener">Announcing HashiCorp Waypoint</a></h3><p>HashiCorp 推出專門用來部署應用服務的 <strong>Waypoint</strong> ！繼推出跟資安比較相關的 <strong>Boundary</strong> 之後，今天又推出可以用 HCL 定義 Build, Deploy 跟 Release 流程的 Waypoint！因為 HashiCorp 發現目前要部署個應用程式所需要學會的東西太多太複雜了，而且要使用很多的工具整合達成，所以推出 Waypoint ，讓開發者下個 <code>~$ waypoint up</code> 就完成所有的事情，主要功能有…</p><ul><li>讓開發者使用 HCL 定義好 Build, Deploy 跟 Release 流程，而且可以一鍵發佈</li><li>為每一個應用服務的每一個部署產生一個 URL，用來快速驗證部署上去的東西有沒有問題</li><li>透過 waypoint exec 可以對應用程式執行特定指令，用來除錯，或是執行資料庫 Migration…等需求</li><li>直接使用 waypoint logs 或從 Web UI 查詢應用服務的即時 Log，讓開發者快速處理緊急狀況使用</li><li>雖然 CLI 可以自動化很多的事情，但 Waypoint 目前還是提供唯讀的 Web UI 讓使用者可以快速看到應用服務的部署情況</li><li>而怎麼讓 Build, Deploy 跟 Release 的這些步驟可以各自支援各種不同的工具或是服務呢？答案是使用 Plugin 來擴展支援不同開發者所需要的不同需求，例如透過 Kubernets Plugin 部署應用服務到 K8S 中</li></ul><h3 id="Announcing-HashiCorp-Terraform-0-14-Beta"><a href="#Announcing-HashiCorp-Terraform-0-14-Beta" class="headerlink" title="Announcing HashiCorp Terraform 0.14 Beta"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-0-14-beta" target="_blank" rel="noopener">Announcing HashiCorp Terraform 0.14 Beta</a></h3><p>感覺當年 Terraform 官方從 0.11 升級到 0.12 費時最久，後續版本的推出相對快很多，例如支援 Module Dependency 的 0.13，以及今天又宣布的準備要朝向 1.0 邁進的 0.14！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 50 期 - 像這樣的程式，讓我苦惱</title>
      <link href="/2020/10/13/50-the-code-make-me-distressed/"/>
      <url>/2020/10/13/50-the-code-make-me-distressed/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Heroku-將靜態網站部署到-Heroku-上吧！feat-Vue、Node-js"><a href="#Heroku-將靜態網站部署到-Heroku-上吧！feat-Vue、Node-js" class="headerlink" title="Heroku | 將靜態網站部署到 Heroku 上吧！feat. Vue、Node.js"></a><a href="https://medium.com/starbugs/heroku-%E5%B0%87%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99%E9%83%A8%E7%BD%B2%E5%88%B0-heroku-%E4%B8%8A%E5%90%A7-feat-vue-node-js-2dfe8b912fbe" target="_blank" rel="noopener">Heroku | 將靜態網站部署到 Heroku 上吧！feat. Vue、Node.js</a></h3><p>本週文章要分享的是關於 Heroku 這個非常好用的平台，雖然 Heroku 沒辦法讓只部署靜態網站，但我們還是可以寫一些簡單的 Node.js 來達到相同的目標（其實只要寫了 Node.js 就不再是靜態網站了 😂），一起來看看怎麼做吧！</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Webpack-5-release-2020-10-10"><a href="#Webpack-5-release-2020-10-10" class="headerlink" title="Webpack 5 release (2020-10-10)"></a><a href="https://webpack.js.org/blog/2020-10-10-webpack-5-release/" target="_blank" rel="noopener">Webpack 5 release (2020-10-10)</a></h3><p>在各位放雙十連假的時候，Webpack 5 已經發布囉！雖然官方自己也提到 Webpack 這種東西一年可能只會用個兩次，然後就不斷重複使用 😂，但它還是默默地做了許多更新，特別要注意的是如果想要玩玩看 Webpack 5，記得要把 Node 升到 10.13.0 以上的版本哦，再低就不支援了！</p><h3 id="Imperative-vs-Declarative-Programming-–-the-Difference-Explained-in-Plain-English"><a href="#Imperative-vs-Declarative-Programming-–-the-Difference-Explained-in-Plain-English" class="headerlink" title="Imperative vs Declarative Programming – the Difference Explained in Plain English"></a><a href="https://www.freecodecamp.org/news/imperative-vs-declarative-programming-difference/" target="_blank" rel="noopener">Imperative vs Declarative Programming – the Difference Explained in Plain English</a></h3><p>從英文閱讀的角度來看待用「命令式」與「聲明式」來打程式的區別，因為良好的變數命名加上語意化的關係，使得在閱讀程式碼更容易知道變數裡應該是什麼，這會讓查找錯誤以及閱讀程式碼變得更簡單。</p><h3 id="The-Code-Review-Guide"><a href="#The-Code-Review-Guide" class="headerlink" title="The Code Review Guide"></a><a href="https://medium.com/an-idea/the-code-review-guide-9e793edcd683" target="_blank" rel="noopener">The Code Review Guide</a></h3><p>在做 Code Review 的時候畢竟不是寫程式的人，而當你開始需要 Review 其他人的程式碼時，應該要從何種角度思考？很喜歡作者她說「code reviews are not just for looking at what’s wrong, but for learning from others」</p><h2 id="軟體開發-in-鐵人賽"><a href="#軟體開發-in-鐵人賽" class="headerlink" title="軟體開發 in 鐵人賽"></a>軟體開發 in 鐵人賽</h2><h3 id="Functional-Programming-in-JS"><a href="#Functional-Programming-in-JS" class="headerlink" title="Functional Programming in JS"></a><a href="https://ithelp.ithome.com.tw/users/20106426/ironman/3024" target="_blank" rel="noopener">Functional Programming in JS</a></h3><p>Hannah 本屆鐵人賽帶來 functional programming 的系列文，平常就有在關注她的 blog，這次鐵人賽更是一個完整的系列文。繼上一屆鐵人賽講演算法之後又一經典。真是太有心了。</p><h3 id="Why-Flutter-why-從表層到底層，從如何到為何。"><a href="#Why-Flutter-why-從表層到底層，從如何到為何。" class="headerlink" title="Why Flutter why? 從表層到底層，從如何到為何。"></a><a href="https://ithelp.ithome.com.tw/users/20129053/ironman/3029" target="_blank" rel="noopener">Why Flutter why? 從表層到底層，從如何到為何。</a></h3><p>Flutter 是最新一個新的跨平台框架，Flutter 有著完整的 Google 提供的官方文件，如果你學過 React Vue 等等的 UI 框架，</p><h3 id="看對話學-Python-資料分析，用情境故事帶你入門"><a href="#看對話學-Python-資料分析，用情境故事帶你入門" class="headerlink" title="看對話學 Python 資料分析，用情境故事帶你入門"></a><a href="https://ithelp.ithome.com.tw/articles/10235397" target="_blank" rel="noopener">看對話學 Python 資料分析，用情境故事帶你入門</a></h3><p>大寶寶將會把資料分析的技能，融入在文章之中，透過輕鬆有趣的對話，把 Python 程式中 AI &amp; Data 的基礎知識走過一次，希望能夠幫助大家建立基礎的資料分析概念及技能。 - 引用自內文</p><h2 id="Rust"><a href="#Rust" class="headerlink" title="Rust"></a>Rust</h2><h3 id="Rust-Inside-Other-Languages"><a href="#Rust-Inside-Other-Languages" class="headerlink" title="Rust Inside Other Languages"></a><a href="https://doc.rust-lang.org/1.2.0/book/rust-inside-other-languages.html" target="_blank" rel="noopener">Rust Inside Other Languages</a></h3><p>Rust 身為一個高效能而且記憶體安全的語言，很適合用來執行一些高效能的任務，但因為 Rust 寫起來要注意的細節比較多，所以開發效率可能不如 Python、Node.JS、Ruby 等動態語言。這時如果想同時保有高開發效率跟關鍵之處的高效能，就可以使用 FFI(Foreign Function Interface) 的方式把 Rust 程式碼編譯成 share library，再讓其他動態語言拿去用。</p><h3 id="Rust-程式設計語言"><a href="#Rust-程式設計語言" class="headerlink" title="Rust 程式設計語言"></a><a href="https://rust-lang.tw/book-tw/title-page.html" target="_blank" rel="noopener">Rust 程式設計語言</a></h3><p>這本《Rust 程式設計語言》電子書是由台灣的 Rust 社群翻譯將《The Rust Programming Language》翻譯過來的，內容與原版一致而且全部都是繁體中文，除此之外也有提供 PlayGround 的功能讓你能即時看到程式執行的結果，想要有系統的學 Rust 就從這裡開始吧！</p><h3 id="Why-Not-Rust"><a href="#Why-Not-Rust" class="headerlink" title="Why Not Rust?"></a><a href="https://matklad.github.io/2020/09/20/why-not-rust.html" target="_blank" rel="noopener">Why Not Rust?</a></h3><p>Rust 近兩年來越來越紅，網路上也不乏叫人去學 Rust 的文章，但我覺得 Rust 並沒有如很多文章所講的全部都是優點，尤其是他真的不好入門。所以雖然我也覺得 Rust 不錯，但我還是想推薦這篇講 Rust 缺點的文章，提醒大家任何程式語言都有他的局限性，正所謂沒有所謂最好的語言，只有最適合的語言。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Simple-Anomaly-Detection-Using-Plain-SQL"><a href="#Simple-Anomaly-Detection-Using-Plain-SQL" class="headerlink" title="Simple Anomaly Detection Using Plain SQL"></a><a href="https://hakibenita.com/sql-anomaly-detection" target="_blank" rel="noopener">Simple Anomaly Detection Using Plain SQL</a></h3><p>需多開發者覺得在程式碼中有嚴重的 Bug 是很糟糕的一件事情，但其實當 Bug 沒有被發現才是最恐怖的，所以此篇文章的作者嘗試使用簡單的 SQL 語法來分析 Nginx, Apache 或是 IIS Log，當有不正常的行為 Log 模式發生時，可以很快地就被發現到</p><h3 id="Enter-the-Vault-Authentication-Issues-in-HashiCorp-Vault"><a href="#Enter-the-Vault-Authentication-Issues-in-HashiCorp-Vault" class="headerlink" title="Enter the Vault: Authentication Issues in HashiCorp Vault"></a><a href="https://googleprojectzero.blogspot.com/2020/10/enter-the-vault-auth-issues-hashicorp-vault.html" target="_blank" rel="noopener">Enter the Vault: Authentication Issues in HashiCorp Vault</a></h3><p>在此篇文章中，作者詳細的演示 HashiCorp Vault 的兩個漏洞 (CVE-2020-16250 / 16251)，這些漏洞可能會導致整合 AWS 和 GCP Auth Method 時會被繞開 ，而 HashiCorp 官方已在8月發布的Vault版本1.2.5、1.3.8、1.4.4和1.5.1中修復，因此有使用 Vault 的人不要忘記升級啦！</p><h3 id="Promscale-An-analytical-platform-and-long-term-store-for-Prometheus-with-the-combined-power-of-SQL-and-PromQL"><a href="#Promscale-An-analytical-platform-and-long-term-store-for-Prometheus-with-the-combined-power-of-SQL-and-PromQL" class="headerlink" title="Promscale: An analytical platform and long-term store for Prometheus, with the combined power of SQL and PromQL"></a><a href="https://blog.timescale.com/blog/promscale-analytical-platform-long-term-store-for-prometheus-combined-sql-promql-postgresql/" target="_blank" rel="noopener">Promscale: An analytical platform and long-term store for Prometheus, with the combined power of SQL and PromQL</a></h3><p>Promscale 是一個新的開源專案，他能夠讓 Prometheus 擁有橫向擴展的能力 (建立在 TimescaleDB 上)，而且提供  PromQL 和 SQL 的組合功能，讓開發人員可以查詢到任何想知道的資料，進而創建出具有更高可見度的儀表板！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 49 期 - 最近假好多，才剛收假又準備要出去玩囉！</title>
      <link href="/2020/10/06/49-so-many-holidays/"/>
      <url>/2020/10/06/49-so-many-holidays/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="裝上這十個-CLI-工具，一起成為終端機大師吧！"><a href="#裝上這十個-CLI-工具，一起成為終端機大師吧！" class="headerlink" title="裝上這十個 CLI 工具，一起成為終端機大師吧！"></a><a href="https://medium.com/starbugs/become-a-command-line-master-together-47a0ad5dd41d" target="_blank" rel="noopener">裝上這十個 CLI 工具，一起成為終端機大師吧！</a></h3><p>一代武術宗師李小龍曾經說過：「天下武功，唯快不破」。武術是這樣，工程師的工作也是這樣，想要成為頂尖的工程師，就不得不注重自己的開發效率。所以這禮拜的專欄要跟大家分享我自己的 <strong>終端機環境</strong> 還有 <strong>十個增進效率的 CLI 工具</strong>，希望大家在看完這篇後都能更善用終端機，工作效率提高了，才有更多時間可以偷懶～</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Getting-Started-with-Svelte-JS"><a href="#Getting-Started-with-Svelte-JS" class="headerlink" title="Getting Started with Svelte JS"></a><a href="https://dev.to/soorajsnblaze333/getting-started-with-svelte-js-nkp" target="_blank" rel="noopener">Getting Started with Svelte JS</a></h3><p>身為前端工程師，總是把目光放在前端御三家身上，一直到今天才發現這個默默耕耘的第四個框架 Svelte JS，Svelte JS 拋棄了與 React 或 Vue 相同的 virtual DOM，而是採用真實的 DOM，因此渲染速度會較快一些，而且沒有相對複雜的 API，取而代之的是更接近原生 JS 的寫法，雖然不曉得用在大型專案上會是如何，但實在是很令人期待這個前端框架將來的發展！看著看著都想要試試看了 😂（如果想要看更多關於 Svelte JS，也可以看「<a href="https://blog.kalan.dev/2020-04-19-svelte-%E2%80%94-%E6%98%AF%E4%BB%80%E9%BA%BC%E8%AE%93%E6%88%91%E9%81%87%E8%A6%8B%E9%80%99%E6%A8%A3%E7%9A%84%E4%BD%A0/" target="_blank" rel="noopener">Svelte — 是什麼讓我遇見這樣的你</a>」哦）</p><h3 id="CSS-實作小品-30-天-Demo-總整理"><a href="#CSS-實作小品-30-天-Demo-總整理" class="headerlink" title="CSS 實作小品 30 天 Demo 總整理"></a><a href="https://medium.com/@snh90100/css-%E5%AF%A6%E4%BD%9C%E5%B0%8F%E5%93%8130%E5%A4%A9-demo-%E7%B8%BD%E6%95%B4%E7%90%86-4f1dc5766c8f" target="_blank" rel="noopener">CSS 實作小品 30 天 Demo 總整理</a></h3><p>很喜歡看這種簡單的小作品，在看程式碼的時候也不會閱讀到多餘的部分，又很清楚的表達該作品小要展現什麼技巧！而且作者還把 30 天的作品整合起來成一篇文章閱讀，完全是佛心來的 😭!</p><h3 id="I-can’t-write-a-JavaScript-for-loop-and-it-does-not-matter"><a href="#I-can’t-write-a-JavaScript-for-loop-and-it-does-not-matter" class="headerlink" title="I can’t write a JavaScript for loop, and it does not matter"></a><a href="https://dev.to/sebastienlorber/i-can-t-write-a-javascript-for-loop-and-it-does-not-matter-11jb" target="_blank" rel="noopener">I can’t write a JavaScript for loop, and it does not matter</a></h3><p>有些時候，當我在解釋關於 JavaScript 提供的陣列 API（例如 <code>filter</code>、<code>forEach</code> 或是最常讓人感到疑惑的 <code>map</code>），總是會聽到「啊 <code>for</code> 迴圈不是也可以做到嗎？」之類的反應，我不否認這一點，但是如果你能夠用更簡單而且語意化的方式達到目的，為何還要選擇 <code>for</code> 呢？</p><h2 id="資訊安全-in-鐵人賽"><a href="#資訊安全-in-鐵人賽" class="headerlink" title="資訊安全 in 鐵人賽"></a>資訊安全 in 鐵人賽</h2><h3 id="從-0-開始的-Web-Security-連結層攻擊實作-ARP-Spoofing"><a href="#從-0-開始的-Web-Security-連結層攻擊實作-ARP-Spoofing" class="headerlink" title="從 0 開始的 Web Security 連結層攻擊實作 - ARP Spoofing"></a><a href="https://ithelp.ithome.com.tw/articles/10246385?sc=hot" target="_blank" rel="noopener">從 0 開始的 Web Security 連結層攻擊實作 - ARP Spoofing</a></h3><p>ARP Spoofing 是一個很經典的攻擊方式。原來 NetCut 利用的就是 ARP Spoofing，長知識了。</p><h3 id="那些年還給老師的-TCP-IP-五層結構"><a href="#那些年還給老師的-TCP-IP-五層結構" class="headerlink" title="那些年還給老師的 TCP/IP 五層結構"></a><a href="https://ithelp.ithome.com.tw/articles/10235733" target="_blank" rel="noopener">那些年還給老師的 TCP/IP 五層結構</a></h3><p>這系列文不是歸類資訊安全中，因為資安是基於網路之上，所以可以趁機複習一下網路的協議。用 Python 自幹一系列的網路協議，讚讚的！</p><h3 id="資安這條路-─-以自建漏洞環境學習資訊安全"><a href="#資安這條路-─-以自建漏洞環境學習資訊安全" class="headerlink" title="資安這條路 ─ 以自建漏洞環境學習資訊安全"></a><a href="https://ithelp.ithome.com.tw/articles/10237904" target="_blank" rel="noopener">資安這條路 ─ 以自建漏洞環境學習資訊安全</a></h3><p>這系列滿棒的，用 docker-compose 自建環境，透過攻擊自建環境學習資訊安全，配合<a href="https://ithelp.ithome.com.tw/articles/10200876" target="_blank" rel="noopener">資安大補帖</a> 系列效果更佳。</p><h2 id="開發效率"><a href="#開發效率" class="headerlink" title="開發效率"></a>開發效率</h2><h3 id="Rewritten-in-Rust-Modern-Alternatives-of-Command-Line-Tools"><a href="#Rewritten-in-Rust-Modern-Alternatives-of-Command-Line-Tools" class="headerlink" title="Rewritten in Rust: Modern Alternatives of Command-Line Tools"></a><a href="https://zaiste.net/posts/shell-commands-rust/" target="_blank" rel="noopener">Rewritten in Rust: Modern Alternatives of Command-Line Tools</a></h3><p>Rust 作為一個高效能、高安全性的語言，還滿適合拿來寫接近系統底層的 CLI 工具。如果平常工作會需要監控網路、CPU 使用率、做一些 benchmarking，或是常常要看看 Linux Kernel 的 log，那可以看看這一系列由 Rust 寫成的 CLI 工具</p><h3 id="VSCode-如何提高我的寫扣效率"><a href="#VSCode-如何提高我的寫扣效率" class="headerlink" title="VSCode 如何提高我的寫扣效率"></a><a href="https://larrylu.blog/vscode-tips-fe3320f9032a" target="_blank" rel="noopener">VSCode 如何提高我的寫扣效率</a></h3><p>身為一個工程師，除了要注重終端機的使用效率之外，編輯器用得順不順手也是很重要的事情。所以在這邊推薦這篇我自己寫的 VSCode tips 給大家參考（真不要臉 XD），希望大家都能調校出自己用得習慣的開發環境</p><h3 id="打造-10X-Engineer-Shell-工作環境"><a href="#打造-10X-Engineer-Shell-工作環境" class="headerlink" title="打造 10X Engineer Shell 工作環境"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0-10x-engineer-zsh-shell-97e40db76391" target="_blank" rel="noopener">打造 10X Engineer Shell 工作環境</a></h3><p>雖然這篇跟本週的專欄一樣都是在講 Shell 的工作環境還有 CLI 工具，不過因為小城哥對於 DevOps 領域研究特別深入， 所以也推薦了一些常人如我不知道的工具，很適合有在研究 K8s、Vault、Terraform 的朋友們來看看</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-11-Verified-Providers-for-Terraform"><a href="#Announcing-11-Verified-Providers-for-Terraform" class="headerlink" title="Announcing 11 Verified Providers for Terraform"></a><a href="https://www.hashicorp.com/blog/announcing-11-verified-providers-for-terraform" target="_blank" rel="noopener">Announcing 11 Verified Providers for Terraform</a></h3><p>HashiCorp 這邊一次宣布多了 11 個 Terraform Provider，有一種讓其他 IaC 工具望塵莫及的味道存在 XD</p><ul><li>Splunk</li><li>JFrog</li><li>Sematext</li><li>Cloudsmith</li><li>OneLogin</li><li>Amixr</li><li>NetApp</li><li>phoenixNAP</li><li>Rancher</li><li>StrongDM</li><li>Transloadit</li></ul><h3 id="Announcing-support-for-gRPC"><a href="#Announcing-support-for-gRPC" class="headerlink" title="Announcing support for gRPC"></a><a href="https://blog.cloudflare.com/announcing-grpc/" target="_blank" rel="noopener">Announcing support for gRPC</a></h3><p>沒有想到 Cloudflare 也開始支援 gRPC Protocol 了，假如想要直接對外提供 gRPC 服務的人可以試用看看 (目前為 Beta 階段)，不知道其他家 CDN 廠商有沒有要跟進？！</p><h3 id="Racist-term-in-kubectl-command-941"><a href="#Racist-term-in-kubectl-command-941" class="headerlink" title="Racist term in kubectl command #941"></a><a href="https://github.com/kubernetes/kubectl/issues/941" target="_blank" rel="noopener">Racist term in kubectl command #941</a></h3><p>kubectl 有一個 subcommand 叫做 cordon，功能為讓 Kubernetes Scheduler 不再把 Pod 安排到某個節點上運行，有人表示這個字眼有警察防止有色人種進入某個警戒區域的意思，所以發了 GitHub Issue 要求改掉，不知道後續會如何…</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 48 期 - 我身為一個牧場主人，擁有 K8S 相關使用經驗也很合邏輯</title>
      <link href="/2020/09/29/48-devops-where-is-my-podpod-pod-arrangement/"/>
      <url>/2020/09/29/48-devops-where-is-my-podpod-pod-arrangement/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="DevOps-Where-is-My-PodPod-Pod-Arrangement"><a href="#DevOps-Where-is-My-PodPod-Pod-Arrangement" class="headerlink" title="DevOps: Where is My PodPod - Pod Arrangement"></a><a href="https://medium.com/starbugs/devops-where-is-my-podpod-pod-arrangement-2a5e772a579d" target="_blank" rel="noopener">DevOps: Where is My PodPod - Pod Arrangement</a></h3><p>Kubernetes 將 DevOps 領域重要概念 <strong>Pets vs Cattle</strong> 發揮地淋漓盡致，Pod 可以在 Cluster 任意 Node 運行，遇到問題也會被自動修復，甚至有人利用此特性來解決 Memory Leak，所以應用程式直接無腦地丟進 K8S 中就可以了？但是現實往往是殘酷的，在 1）公私雲底層架構；2）應用程式特性；3）日常維運需求的互相作用之下，Pod 必須要在<strong>適當的</strong> Node 運行才能確保服務品質，所以此篇文章透過淺顯易懂的例子來說明 <del>如何讓牛隻走到他該去的草地上吃草！</del> 如何讓 Pod 在 Cluster 不斷地變動之下，依然持續在運行在<strong>適當的</strong>節點中，確保服務不中斷。</p><h2 id="前端開發（Without-鐵人賽-😂）"><a href="#前端開發（Without-鐵人賽-😂）" class="headerlink" title="前端開發（Without 鐵人賽 😂）"></a>前端開發（Without 鐵人賽 😂）</h2><h3 id="Recreating-The-Instagram-Double-Tap-with-JavaScript-❤️"><a href="#Recreating-The-Instagram-Double-Tap-with-JavaScript-❤️" class="headerlink" title="Recreating The Instagram Double-Tap with JavaScript ❤️"></a><a href="https://daily-dev-tips.com/posts/double-click-to-like-instagram-effect-in-javascript-%E2%9D%A4%EF%B8%8F/?ref=hackernoon.com" target="_blank" rel="noopener">Recreating The Instagram Double-Tap with JavaScript ❤️</a></h3><p>此篇文章的內容就是說他用 JavaScript 實現了 IG 上點兩下按愛心的操作！從實作中熟悉程式碼一直是很讚的方法，但是在沒有工作的情況下，大部分的人都不曉得可以做什麼來練習，但是其實不需要一開始就給自己多大的目標，就算只是個小小的練習也可以哦！</p><h3 id="JavaScript-Runtime-and-Its-Components-For-Web-Developers-ECMAScript-DOM-and-the-BOM"><a href="#JavaScript-Runtime-and-Its-Components-For-Web-Developers-ECMAScript-DOM-and-the-BOM" class="headerlink" title="JavaScript Runtime and Its Components For Web Developers - ECMAScript, DOM, and the BOM"></a><a href="https://cloudaffle.com/javascript-runtime-components-ecmascript-dom-bom/?ref=hackernoon.com" target="_blank" rel="noopener">JavaScript Runtime and Its Components For Web Developers - ECMAScript, DOM, and the BOM</a></h3><p>雖然文章不常，但是仍然很清楚的說明了 JavaScript 在瀏覽器中執行的三個部分，很適合利用一點時間補足基本的觀念，等到有時間後再來針對這三個部分深入研究（但絕對研究不完的 😂）</p><h3 id="Top-10-Pieces-of-Advice-for-Becoming-the-Worst-Developer-Possible"><a href="#Top-10-Pieces-of-Advice-for-Becoming-the-Worst-Developer-Possible" class="headerlink" title="Top 10 Pieces of Advice for Becoming the Worst Developer Possible"></a><a href="https://dev.to/dabit3/top-10-pieces-of-advice-for-becoming-the-worst-developer-possible-3kke" target="_blank" rel="noopener">Top 10 Pieces of Advice for Becoming the Worst Developer Possible</a></h3><p><strong>這是今年看過最反指標的文章沒有之一，新手閱讀可能會有相當大的風險被誤導</strong>，所以在看著文章笑笑的同時，千萬不要錯誤理解作者的意思了哦！</p><h2 id="前端-in-鐵人賽"><a href="#前端-in-鐵人賽" class="headerlink" title="前端 in 鐵人賽"></a>前端 in 鐵人賽</h2><h3 id="『-Vue-2-1-Day1-』Hello-Vue-2-1"><a href="#『-Vue-2-1-Day1-』Hello-Vue-2-1" class="headerlink" title="『 Vue 2+1 Day1 』Hello Vue 2+1"></a><a href="https://ithelp.ithome.com.tw/articles/10237485" target="_blank" rel="noopener">『 Vue 2+1 Day1 』Hello Vue 2+1</a></h3><p>隨著 2020/07/18 Vue3 RC (Release Candidate) 的發佈 Vue 3 is now in RC 代表著我們已經快要迎接 Vue 的下一個世代了~<br>也意味著在這每天醒來都有新玩意的前端世界，應該要好好的加緊腳步跟上了！ Vue3 多了什麼好用的功能，以及有哪些變動？一起來看看。- 引用自原文</p><h3 id="JavaScript基本功修練：Day2-瀏覽器與JavaScript引擎"><a href="#JavaScript基本功修練：Day2-瀏覽器與JavaScript引擎" class="headerlink" title="JavaScript基本功修練：Day2 - 瀏覽器與JavaScript引擎"></a><a href="https://ithelp.ithome.com.tw/articles/10238495" target="_blank" rel="noopener">JavaScript基本功修練：Day2 - 瀏覽器與JavaScript引擎</a></h3><p>JS 基本功修煉是每年我最喜歡的系列，基本功就是要不斷複習呀！V8 引擎, AST tree 的生成，各種原理是需要知道的。</p><h3 id="你所不知道的各種前端-Debug-技巧"><a href="#你所不知道的各種前端-Debug-技巧" class="headerlink" title="你所不知道的各種前端 Debug 技巧"></a><a href="https://ithelp.ithome.com.tw/users/20129636/ironman/3382" target="_blank" rel="noopener">你所不知道的各種前端 Debug 技巧</a></h3><p>相信 Debug 是開發者每天必經的過程，能否順利 Debug 決定了開發者一整天的心情，即使如此卻較少看到開發者著墨在 Debug 技巧上，因此接下來的 30 天中，我將會介紹各種前端 Debug 技巧，還有我常用的小撇步，解救那些時常陷於 Debug 之苦卻難以脫身的網頁開發者們。- 引用自原文</p><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><h3 id="Understanding-Memory-Leaks-in-Nodejs"><a href="#Understanding-Memory-Leaks-in-Nodejs" class="headerlink" title="Understanding Memory Leaks in Nodejs"></a><a href="https://link.medium.com/cpIEnhGz89" target="_blank" rel="noopener">Understanding Memory Leaks in Nodejs</a></h3><p>Memory Leak 是指因為程式沒寫好，導致程式在執行過程中沒辦法釋放那些不會再用到的記憶體，嚴重時可能會把系統的所有的記憶體都吃完造成 OOM(Out Of Memory)。雖然 Node.js 已經有 GC 會把用不到的記憶體釋放掉，但某些特殊情況下還是有可能發生 Memory Leak，一起來看看怎麼預防吧！</p><h3 id="We’re-under-attack-23-Node-js-security-best-practices"><a href="#We’re-under-attack-23-Node-js-security-best-practices" class="headerlink" title="We’re under attack! 23+ Node.js security best practices"></a><a href="https://link.medium.com/pwree6Mz89" target="_blank" rel="noopener">We’re under attack! 23+ Node.js security best practices</a></h3><p>雖然 server 被駭客入侵、資料被竊取聽起來很像是電影裡面才會有的情節，平常根本不會遇到，但現實生活中只要發生了可能就會造成非常嚴重的後果，像是網站被癱瘓、使用者資料外洩等等，所以在服務正式上線之前，記得要看看資安方面的 best practice</p><h3 id="非同步程式碼之霧：Node-js-的事件迴圈與-EventEmitter"><a href="#非同步程式碼之霧：Node-js-的事件迴圈與-EventEmitter" class="headerlink" title="非同步程式碼之霧：Node.js 的事件迴圈與 EventEmitter"></a><a href="https://www.eebreakdown.com/2016/09/nodejs-eventemitter.html" target="_blank" rel="noopener">非同步程式碼之霧：Node.js 的事件迴圈與 EventEmitter</a></h3><p>事件迴圈（Event Loop）是 Node.js 最核心的 feature 之一，他讓 Node.js 可以用很快的速度在各個非同步 function 間進行切換，而且使用者也不用自己對各個 Thread 進行管理。雖然如此，如果沒有真正搞懂 Event Loop 的運作機制，可能會讓你程式跑起來跟預期的不一樣，所以快來看看這篇關於 Event Loop 與 EventEmitter 的分析吧～</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="SAM-Seamless-Network：FortiGate-VPN裝置含有中間人攻擊風險-amp-駭客開始利用Windows-Server的Zerologon漏洞發動攻擊"><a href="#SAM-Seamless-Network：FortiGate-VPN裝置含有中間人攻擊風險-amp-駭客開始利用Windows-Server的Zerologon漏洞發動攻擊" class="headerlink" title="SAM Seamless Network：FortiGate VPN裝置含有中間人攻擊風險 &amp; 駭客開始利用Windows Server的Zerologon漏洞發動攻擊"></a><a href="https://www.ithome.com.tw/news/140233" target="_blank" rel="noopener">SAM Seamless Network：FortiGate VPN裝置含有中間人攻擊風險</a> &amp; <a href="https://www.ithome.com.tw/news/140190" target="_blank" rel="noopener">駭客開始利用Windows Server的Zerologon漏洞發動攻擊</a></h3><p>雖然已經有很多的 IT 新聞跟消息都在講這兩個漏洞，但是因為這兩個的風險都滿高的，所以在此特別再提一次，提醒還沒有更新的人趕快排時程更新，不然等到被駭客利用這兩個漏洞鑽進來就不好了 T_T</p><h3 id="TOC-Approves-KubeEdge-as-Incubating-Project"><a href="#TOC-Approves-KubeEdge-as-Incubating-Project" class="headerlink" title="TOC Approves KubeEdge as Incubating Project"></a><a href="https://www.cncf.io/blog/2020/09/16/toc-approves-kubeedge-as-incubating-project/" target="_blank" rel="noopener">TOC Approves KubeEdge as Incubating Project</a></h3><p>KubeEdge 是一個讓原生容器化應用篇排系統可以架設於 Edge 的開源專案，而他其實是站在巨人 (Kubernetes) 的肩膀上開發而成，於九月中被加入到 CNCF 的 Incubating Project，看來後市看漲，自己對於 Edge Computing 這塊是還沒有什麼涉略，不過看起來是個很有趣的專案</p><h3 id="Offensive-Terraform-Modules"><a href="#Offensive-Terraform-Modules" class="headerlink" title="Offensive Terraform Modules"></a><a href="https://offensive-terraform.github.io/" target="_blank" rel="noopener">Offensive Terraform Modules</a></h3><p>好酷的網頁，裡面提供了幾種攻擊者會使用的模式，而且附上了使用 Terraform 的實作方式XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 47 期 - 鐵人賽開賽了，那就來新增一個鐵人賽的分類推薦好文給大家</title>
      <link href="/2020/09/22/47-iron-man-game-is-starting/"/>
      <url>/2020/09/22/47-iron-man-game-is-starting/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="GitOps-—-透過-Argo-CD-認識-GitOps"><a href="#GitOps-—-透過-Argo-CD-認識-GitOps" class="headerlink" title="GitOps — 透過 Argo CD 認識 GitOps"></a><a href="https://medium.com/starbugs/gitops-%E9%80%8F%E9%81%8E-argo-cd-%E8%AA%8D%E8%AD%98-gitops-f0a596764fdd" target="_blank" rel="noopener">GitOps — 透過 Argo CD 認識 GitOps</a></h3><p>兩年前初次聽到 GitOps 的時候，我想說是不是只要 Git tag 觸發一些部屬相關的事情，像是下了某個 tag，就會觸發某 Ansible 的工作，部屬某一台伺服器。很遺憾，完全不是我想的那樣。在最近實際將 GitOps 整合進開發流程的過程中，深入研究了一下 GitOps。對 GitOps 有了多一點的了解，趁這個機會來跟大家分享一下。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="5-SOLID-principles-with-JavaScript-How-to-make-your-code-SOLID"><a href="#5-SOLID-principles-with-JavaScript-How-to-make-your-code-SOLID" class="headerlink" title="5 SOLID principles with JavaScript. How to make your code SOLID"></a><a href="https://dev.to/denisveleaev/5-solid-principles-with-javascript-how-to-make-your-code-solid-1kl5" target="_blank" rel="noopener">5 SOLID principles with JavaScript. How to make your code SOLID</a></h3><p>SOLID 是物件導向的基本原則，但是主要都是為了讓程式好維護且易於擴充的程式碼而已，一起來看看如何運用 JavaScript 玩轉 SOLID 的特性吧！</p><h3 id="How-to-Build-and-Validate-Beautiful-Forms-with-Vanilla-HTML-CSS-amp-JS"><a href="#How-to-Build-and-Validate-Beautiful-Forms-with-Vanilla-HTML-CSS-amp-JS" class="headerlink" title="How to Build and Validate Beautiful Forms with Vanilla HTML, CSS, &amp; JS"></a><a href="https://www.freecodecamp.org/news/build-and-validate-beautiful-forms-with-vanilla-html-css-js/" target="_blank" rel="noopener">How to Build and Validate Beautiful Forms with Vanilla HTML, CSS, &amp; JS</a></h3><p>如果你使用 React、Vue 或 Angular，那你一定可以用它們製作許多厲害的表單，但如果你還不熟網頁開發的話，建議還是可以先用原生的方式撰寫一些簡單的頁面，來加強自己的基本知識哦！</p><h3 id="Vue3-0-不畏惧祖传代码的-Composition-API"><a href="#Vue3-0-不畏惧祖传代码的-Composition-API" class="headerlink" title="Vue3.0 不畏惧祖传代码的 Composition API"></a><a href="https://juejin.im/post/6874748339246776327" target="_blank" rel="noopener">Vue3.0 不畏惧祖传代码的 Composition API</a></h3><p>前陣子才知道原來 Vue 在 GitHub 上的 star 數已經比 React 還要高了，而前陣子我也才剛學習 Vue 框架，Vue3 就接著出來，從文中的計時器例子來看 Vue3 真的改善了 Vue 需要定義許多區塊的問題（但別看一開始的那幾張圖，我完全看不懂，哈哈哈哈哈）！</p><h2 id="電腦科學"><a href="#電腦科學" class="headerlink" title="電腦科學"></a>電腦科學</h2><h3 id="進程、線程、協程，傻傻分得清楚！"><a href="#進程、線程、協程，傻傻分得清楚！" class="headerlink" title="進程、線程、協程，傻傻分得清楚！"></a><a href="https://medium.com/@oldmo860617/%E9%80%B2%E7%A8%8B-%E7%B7%9A%E7%A8%8B-%E5%8D%94%E7%A8%8B-%E5%82%BB%E5%82%BB%E5%88%86%E5%BE%97%E6%B8%85%E6%A5%9A-a09b95bd68dd" target="_blank" rel="noopener">進程、線程、協程，傻傻分得清楚！</a></h3><p>要成為一個優秀的軟體工程師，一定要掌握作業系統中進程（Process）跟線程（Thread）的概念，雖然不了解也可以寫出跑得動的程式，但效能方面可能就不會太好</p><h3 id="前端工程師用-javaScript-學演算法"><a href="#前端工程師用-javaScript-學演算法" class="headerlink" title="前端工程師用 javaScript 學演算法"></a><a href="https://ithelp.ithome.com.tw/articles/10213184" target="_blank" rel="noopener">前端工程師用 javaScript 學演算法</a></h3><p>要成為一個優秀的軟體工程師（怎麼又是這個開場 XD），資料結構跟演算法也是不可或缺的。這一系列介紹了各種資料結構如 Stack、Queue、Linked List 還有很多種演算法，重點是他還是用 JS 寫的！不太熟悉 C/C++ 又想練演算法的話看這個就對了</p><h3 id="顛覆世界的「電腦」是怎麼誕生的呢？"><a href="#顛覆世界的「電腦」是怎麼誕生的呢？" class="headerlink" title="顛覆世界的「電腦」是怎麼誕生的呢？"></a><a href="https://pansci.asia/archives/119338" target="_blank" rel="noopener">顛覆世界的「電腦」是怎麼誕生的呢？</a></h3><p>身為一個軟體工程師，就算不懂作業系統跟演算法，也一定要知道電腦是怎麼怎麼發明出來的。這篇文章會跟大家介紹到 <strong>馮．紐曼</strong> 跟 <strong>圖靈</strong> 這兩個電腦科學界的名人，沒有他們兩個，很可能就沒有今天的電腦（後面太偏數學看不懂沒關係，只要知道這兩個人就可以了 XD）</p><h2 id="鐵人賽"><a href="#鐵人賽" class="headerlink" title="鐵人賽"></a>鐵人賽</h2><h3 id="歐洲碼農的新手村任務“專欄介紹"><a href="#歐洲碼農的新手村任務“專欄介紹" class="headerlink" title="歐洲碼農的新手村任務“專欄介紹"></a><a href="https://ithelp.ithome.com.tw/articles/10237516" target="_blank" rel="noopener">歐洲碼農的新手村任務“專欄介紹</a></h3><p>由在柏林工作的資料科學家 bymiachang 帶來歐洲的求職經驗分享。內容包含個面相的求職思考，好期待這個系列文阿。</p><h3 id="I-Want-To-Know-React-Component-內部原理-amp-使用技巧"><a href="#I-Want-To-Know-React-Component-內部原理-amp-使用技巧" class="headerlink" title="I Want To Know React - Component 內部原理 &amp; 使用技巧"></a><a href="https://ithelp.ithome.com.tw/articles/10241673" target="_blank" rel="noopener">I Want To Know React - Component 內部原理 &amp; 使用技巧</a></h3><p>我想知道 React 多一點，這個系列文介紹了 React.js 的運用方式，與內部原理。這篇介紹的是 prop，下一篇則是介紹 state。</p><h3 id="拯救資工系學生的基本素養—使用-GDB-除錯基本教學"><a href="#拯救資工系學生的基本素養—使用-GDB-除錯基本教學" class="headerlink" title="拯救資工系學生的基本素養—使用 GDB 除錯基本教學"></a><a href="https://ithelp.ithome.com.tw/articles/10241563" target="_blank" rel="noopener">拯救資工系學生的基本素養—使用 GDB 除錯基本教學</a></h3><p>由知名技術人微中子帶來的，GDB Debug Rust 的影片教學。也有<a href="https://tigercosmos.xyz/post/2020/09/system/debug-gdb/" target="_blank" rel="noopener">文章</a>可以看。我 ok，你先看。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Docker-Desktop-把-Snyk-直接整合在一起了！"><a href="#Docker-Desktop-把-Snyk-直接整合在一起了！" class="headerlink" title="Docker Desktop 把 Snyk 直接整合在一起了！"></a><a href="https://www.docker.com/blog/secure-from-the-start-shift-vulnerability-scanning-left-in-docker-desktop/" target="_blank" rel="noopener">Docker Desktop 把 Snyk 直接整合在一起了！</a></h3><p>今年五月就有發佈 Docker 跟 Snyk 要一起合作的消息，而今天一起推出直接在 Docker Desktop CLI 中可以透過 Snyk Sacn Container Image 的功能，沒錯！以後只要在 Docker Image 已經在本機端，再多下一個 <code>~$ docker scan #{IMAGE_NAME}</code> 就可以幫開發者立即完成掃描，立即更新 Docker Desktop 到最新版，馬上離 DevSecOps 又更近了一步XD</p><h3 id="GitHub-CLI-GA-啦～"><a href="#GitHub-CLI-GA-啦～" class="headerlink" title="GitHub CLI GA 啦～"></a><a href="https://github.blog/2020-09-17-github-cli-1-0-is-now-available/" target="_blank" rel="noopener">GitHub CLI GA 啦～</a></h3><p>再經過 Beta 公測之後，GitHub CLI 於今天正式宣布 GA，以後滿多 GitHub 平台的操作都可以透過 CLI 來完成，讓熱愛使用 Terminal 的開發者更方便了XD 例如可以列出有什麼 Issue，簡易的管理 PR；而且他有個 subcommand <code>~$ gh api</code> 允許使用者可以無受限地直接存取 GitHub API，底下附上 Repository，有興趣的人可以趕快裝來玩玩看嘍！</p><h3 id="gitlab-com-搬遷到-K8S-運行一年的酸甜苦辣"><a href="#gitlab-com-搬遷到-K8S-運行一年的酸甜苦辣" class="headerlink" title="gitlab.com 搬遷到 K8S 運行一年的酸甜苦辣"></a><a href="https://about.gitlab.com/blog/2020/09/16/year-of-kubernetes/" target="_blank" rel="noopener">gitlab.com 搬遷到 K8S 運行一年的酸甜苦辣</a></h3><p>差不多在一年前 GitLab 的 Infra 部門決定要將運行在 gitlab.com 上的所有服務搬遷到 K8S 上，一路上遇到許多的挑戰，因為不只是要搬而已，還必須要管理搬遷過渡時期的混和部署，在過程中學習到了不少值得分享的課題，因此有了這篇文章；在舊環境是使用 VM 搭配上 Chef 來做 Provision 或是既有環境的管理，而新的環境則是則是使用 Terraform 跟 Helm 來完成所有的事情，也把這些設定的相關組態開源成三個專案 k8s-workloads/gitlab-com, k8s-workloads/gitlab-helmfiles, gitlab-com-infrastructure (Terraform + Heml 真的是在 Cloud Native 時代很棒的管理組合，自己也都是這樣弄)，而搬遷過程中學習到了幾件事情包含了…</p><ol><li><p>跨 Availability Zone 網路流量所造成的 GCP 帳單金額上升，所以他們正在考慮將使用到大量頻寬服務拆分到其他獨立的單一 AZ K8S Cluster，將 Redundancy 實作在 Cluster 層級</p></li><li><p>在 K8S Pod 資源的管理上，本來是使用較低的 Request 搭配上較高 Limit，不過這樣會造成 Pod 一直在 Node 之間被趕來趕去的；所以後來對於 Memory 需求量比較大的應用服務會使用 較高的 Request 搭上上較低的 Limit</p></li><li><p>在這一年間也順便改進了監控跟管理 SLO 的方式，而且在搬遷的過程中除了要一直持續的監看 Metric 變化之外，也要搭配 Log 一起看，因為有一些問題發生了也無法立即從 Metric 觀察出來，而且 User Ruqest 會同時被送到舊的 VM 跟新的 K8S 環境上，必須要有辦法兩個同時一起監控</p></li><li><p>利用 Canary 的方式，再將流量逐漸導流到新的 K8S Cluster 時，持續的監控是否有達到訂定的 SLO，舊的 VM 環境還是會留著，因為要是遇到問題的話就要 Rollback 回舊的環境</p></li><li><p>Pod 啟動時間太長在準備搬遷的一開始就有被發現，例如 Sidekiq 花了兩分鐘才啟動完畢，而原因是因為 HPA 雖然可以很好的應付增長的流量，但是遇到突然的 Spike 時，節點會來不及生出來；所以後來使用比較大的 Pod Budget，並且讓 Scale Down 發生的時間點往後，在持續透過監控 SLO 的調教過程後，目前已經將時間縮短到 40 秒</p></li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 46 期 - 我叫姍姍，然後就遲到了</title>
      <link href="/2020/09/15/46-writing-drive-learn/"/>
      <url>/2020/09/15/46-writing-drive-learn/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="你應該要嘗試的-WDL（Writing-Drive-Learn，寫作驅動學習）"><a href="#你應該要嘗試的-WDL（Writing-Drive-Learn，寫作驅動學習）" class="headerlink" title="你應該要嘗試的 WDL（Writing-Drive Learn，寫作驅動學習）"></a><a href="https://medium.com/starbugs/%E4%BD%A0%E6%87%89%E8%A9%B2%E8%A6%81%E5%98%97%E8%A9%A6%E7%9A%84-wdl-writing-drive-learn-%E5%AF%AB%E4%BD%9C%E9%A9%85%E5%8B%95%E5%AD%B8%E7%BF%92-3f157c0ab30c" target="_blank" rel="noopener">你應該要嘗試的 WDL（Writing-Drive Learn，寫作驅動學習）</a></h3><p>Hi！大家好，我是神 Q 超人！這篇文章一樣先不談技術，想要和大家說說我已經持續快三年的習慣（其實我滿訝異自己能夠維持一個習慣那麼長的時間），那就是打技術文章這件事情。</p><p>先說結論，我認為編寫技術文章加速了我學習的速度和深度，也開拓了我與許多人的連結，包含各位正在看的 StarBugs 😃。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="7-JavaScript-blogs-to-follow-going-into-2021"><a href="#7-JavaScript-blogs-to-follow-going-into-2021" class="headerlink" title="7 JavaScript blogs to follow going into 2021"></a><a href="https://dev.to/mildrenben/javascript-blogs-to-follow-going-into-2021-29df" target="_blank" rel="noopener">7 JavaScript blogs to follow going into 2021</a></h3><p>你喜歡閱讀其他人寫的部落文章嗎？在本篇文章中列出了七個擁有豐富內容的 Blog 網站，如果你常常無聊就想要看國外的開發者都在幹嘛，那一定要全部發漏起來。</p><h3 id="10-UI-Elements-Web-Developers-Should-Know-About"><a href="#10-UI-Elements-Web-Developers-Should-Know-About" class="headerlink" title="10 UI Elements Web Developers Should Know About"></a><a href="https://hackernoon.com/10-ui-elements-web-developers-should-know-about-n1q3t3z" target="_blank" rel="noopener">10 UI Elements Web Developers Should Know About</a></h3><p>在我們選擇使用輸入框或是下拉選單的時候，各位有想過為什麼要使用嗎？文章中以 UX 的角度解析去分析各個 UI 對 UX 的價值在哪裡。</p><h3 id="React-TypeScript-❤️-The-good-parts-⚡"><a href="#React-TypeScript-❤️-The-good-parts-⚡" class="headerlink" title="React + TypeScript ❤️: The good parts ⚡"></a><a href="https://dev.to/diemax/react-typescript-the-good-parts-428f" target="_blank" rel="noopener">React + TypeScript ❤️: The good parts ⚡</a></h3><p>React 是國外最多人用的前端框架，而為了彌補 JavaScript 的缺點（或特色？）TypeScript 又慢慢在興起，雖然要導入 TypeScript 有點麻煩，但也還是能先來看看 TypeScript 幫了 React 什麼！</p><h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><h3 id="透過-Multi-Stage-Builds-改善持續交付流程"><a href="#透過-Multi-Stage-Builds-改善持續交付流程" class="headerlink" title="透過 Multi-Stage Builds 改善持續交付流程"></a><a href="https://tachingchen.com/tw/blog/docker-multi-stage-builds/" target="_blank" rel="noopener">透過 Multi-Stage Builds 改善持續交付流程</a></h3><p>在寫 Dockerfile 時 Multi-Stage Build 是個很好用的小技巧，透過在不同 stage 使用不同的 base image 可以讓你打包出來的 image 更輕量，不會東包西包把一堆用不到的東西都放在裡面</p><h3 id="使用-Docker-BuildKit-加速編譯-Image"><a href="#使用-Docker-BuildKit-加速編譯-Image" class="headerlink" title="使用 Docker BuildKit 加速編譯 Image"></a><a href="https://blog.wu-boy.com/2020/04/speed-up-docker-build-using-docker-buildkit/" target="_blank" rel="noopener">使用 Docker BuildKit 加速編譯 Image</a></h3><p>有時候 Dockerfile 一長，<code>docker build</code> 就要跑好久才能打包出 image，但透過 Docker 推出的 BuildKit 功能可以大幅加速打包的時間，而且啟用的方式也超簡單，還沒聽過 BuildKit 的朋友們趕快來看看吧</p><h3 id="10-Docker-Security-Best-Practices"><a href="#10-Docker-Security-Best-Practices" class="headerlink" title="10 Docker Security Best Practices"></a><a href="https://snyk.io/blog/10-docker-image-security-best-practices/" target="_blank" rel="noopener">10 Docker Security Best Practices</a></h3><p>雖然 Docker container 在執行時會跟 host 的環境隔離開來，但若一些地方沒注意的話還是有一些安全上的疑慮，所以快來看看這篇關於 Docker 的 security best practice 吧！</p><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="A-Guide-for-Contributing-to-Any-Open-Source-JavaScript-Project-Ever"><a href="#A-Guide-for-Contributing-to-Any-Open-Source-JavaScript-Project-Ever" class="headerlink" title="A Guide for Contributing to Any Open Source JavaScript Project Ever "></a><a href="https://dev.to/saurabhdaware/a-guide-for-contributing-to-any-open-source-javascript-project-ever-hi" target="_blank" rel="noopener">A Guide for Contributing to Any Open Source JavaScript Project Ever </a></h3><p>一個可以貢獻任何 JS 開源專案的指南。作者總結了一些貢獻 Open Source 的思維，例如：選擇一個正確的 Repository，選擇一個正確的 Issue 去貢獻。跟之前文章不同的是，這是屬於作者的經驗談。如何觀看巨型的程式碼。</p><h3 id="LocalStorage-vs-Cookies-All-You-Need-To-Know-About-Storing-JWT-Tokens-Securely-in-The-Front-End"><a href="#LocalStorage-vs-Cookies-All-You-Need-To-Know-About-Storing-JWT-Tokens-Securely-in-The-Front-End" class="headerlink" title="LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End"></a><a href="https://dev.to/cotter/localstorage-vs-cookies-all-you-need-to-know-about-storing-jwt-tokens-securely-in-the-front-end-15id" target="_blank" rel="noopener">LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End</a></h3><p>Local Strorage vs Cookies，所有你需要知道的運用 JWT 的前端安全知識。前端一定會用到 JS，加上 hash tag 有下 #javascript 就分類到 JS 囉。我覺得 JWT 的出現帶給前端無限可能，如果可以掌握 JWT 的安全知識，對整體實力會有很大的提升。</p><h3 id="Learn-Data-Structure-and-Algorithm-in-JavaScript-Part-17"><a href="#Learn-Data-Structure-and-Algorithm-in-JavaScript-Part-17" class="headerlink" title="Learn Data Structure and Algorithm in JavaScript | Part 17"></a><a href="https://dev.to/edisonpebojots/learn-data-structure-and-algorithm-in-javascript-part-17-2ej0" target="_blank" rel="noopener">Learn Data Structure and Algorithm in JavaScript | Part 17</a></h3><p>從 JS 中學資料結構與演算法第 17 集，這系列滿有誠意的，好好打基礎。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Chef-以-US-220-Million-賣給-Progress！"><a href="#Chef-以-US-220-Million-賣給-Progress！" class="headerlink" title="Chef 以 US$ 220 Million 賣給 Progress！"></a><a href="https://investors.progress.com/news-releases/news-release-details/progress-announces-acquisition-chef" target="_blank" rel="noopener">Chef 以 US$ 220 Million 賣給 Progress！</a></h3><p>Chef 這幾年來也算是 <strong>DevSecOps</strong> 的領頭羊，因為 Configuration Manager 的角色其實在幾年前大家就已經做得差不多了，也開始進入比較不需要 CM 的 <strong>Container</strong> 時代，所以他開始投注很多的心血在 <strong>Security</strong> 跟 <strong>Compliance</strong> 領域上，當年一起打拼的 CM 工具就比較沒有花時間在此著墨，而 Progress 本身提供的產品和解決方案就是以大企業客戶為主，所以這樁交易其實不算意外；突然想起當年 Ansible 以 US$ 150 Million 賣給 Redhat，看來 Chef 比較值錢XD</p><h3 id="KubeSecOps-Pipeline-Container-security-in-a-cloudnative-ecosystem"><a href="#KubeSecOps-Pipeline-Container-security-in-a-cloudnative-ecosystem" class="headerlink" title="KubeSecOps Pipeline(Container security) in a cloudnative ecosystem"></a><a href="https://medium.com/@vaib16dec/kubesecops-pipeline-container-security-in-a-cloudnative-ecosystem-e59bf19a713d" target="_blank" rel="noopener">KubeSecOps Pipeline(Container security) in a cloudnative ecosystem</a></h3><p>Cloud Native 的 Security 這幾年越來越受到重視，尤其是在 Container Security 上面，每個相關的領域：Image Scanning, Container Compliance, Runtime Security, Network Security, Forensics, Kubernetes Audit 都已經有相對應的解決方案在蓬勃發展中，因此這篇文章想要分享如何透過這些解決方案來設計 Security Pipeline，對於 Cloud Native Security 有興趣的人可以參考看看此篇文章</p><h3 id="Letsencrypt-the-Good-The-bad-and-the-Ugly"><a href="#Letsencrypt-the-Good-The-bad-and-the-Ugly" class="headerlink" title="Letsencrypt, the Good, The bad and the Ugly"></a><a href="https://jacquesmattheij.com/letsencrypt-good-bad-ugly/" target="_blank" rel="noopener">Letsencrypt, the Good, The bad and the Ugly</a></h3><p>Letsencrypt 核心思想是希望為網路應用服務提供免費的 SSL Certificate, 用以提高 HTTPS 在整個網路世界中的普及程度，從 2016年4月至今同已頒發了超過 10 億張 Certificate，不過他同時也有一些缺點，就讓這篇文章的作者來述說他遇到的諸多問題！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 45 期 - 別猶豫了，今天就上 Github 參與開源專案吧！</title>
      <link href="/2020/09/08/45-start-contributing-to-open-source-today/"/>
      <url>/2020/09/08/45-start-contributing-to-open-source-today/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="別猶豫了，今天就上-Github-參與開源專案吧！"><a href="#別猶豫了，今天就上-Github-參與開源專案吧！" class="headerlink" title="別猶豫了，今天就上 Github 參與開源專案吧！"></a><a href="https://medium.com/starbugs/start-contributing-to-open-source-projects-today-5daa4dda2b3e" target="_blank" rel="noopener">別猶豫了，今天就上 Github 參與開源專案吧！</a></h3><p>想讓自己的 Github profile 更精彩，但卻不知道怎麼開始參與開源專案嗎？<br>這週的專欄會跟大家分享 <strong>我自己都是怎麼找到適合的開源專案</strong> 以及 <strong>我可以為專案貢獻什麼</strong>，希望大家在看完之後都能夠鼓起勇氣送出 PR，不只為了自己的技術成長，也為開源的世界貢獻一份心力</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="【前端体系】从一道面试题谈谈对-EventLoop-的理解"><a href="#【前端体系】从一道面试题谈谈对-EventLoop-的理解" class="headerlink" title="【前端体系】从一道面试题谈谈对 EventLoop 的理解"></a><a href="https://juejin.im/post/6868849475008331783" target="_blank" rel="noopener">【前端体系】从一道面试题谈谈对 EventLoop 的理解</a></h3><p>JavaScript 的 Event Loop 一直是相當重要的觀念，在 JavaScript 有許多同步與非同步的事件，當它們被寫在一起的時候，你會知道誰先執行了嗎？</p><h3 id="10-lesser-known-Web-APIs-you-may-want-to-use"><a href="#10-lesser-known-Web-APIs-you-may-want-to-use" class="headerlink" title="10 lesser-known Web APIs you may want to use"></a><a href="https://dev.to/atapas/10-lesser-known-web-apis-you-may-want-to-use-5g0g" target="_blank" rel="noopener">10 lesser-known Web APIs you may want to use</a></h3><p>作者介紹了幾個沒什麼人知道的 API，但看了一下後發現其實有些功能的實用度滿高的啊！</p><h3 id="Semantic-HTML-And-Why-Does-it-Matter"><a href="#Semantic-HTML-And-Why-Does-it-Matter" class="headerlink" title="Semantic HTML And Why Does it Matter"></a><a href="https://dev.to/dailydotdev/semantic-html-and-why-does-it-matter-4kjh" target="_blank" rel="noopener">Semantic HTML And Why Does it Matter</a></h3><p>哈哈哈，不得不說這篇文章的第一張圖片非常加分，看到第一眼直接噗嗤笑出來。之前曾經看到有人在討論說，前端切版只用一堆 <code>div</code> 加 CSS 是非常不專業的做法，因為在 HTML 裡其實還提供了許多語意性更強的標籤讓你在各種不同的情況下做使用。</p><h2 id="Open-Source"><a href="#Open-Source" class="headerlink" title="Open Source"></a>Open Source</h2><h3 id="用-Git-這麼久了，你知道-commit-是可以偽造的嗎"><a href="#用-Git-這麼久了，你知道-commit-是可以偽造的嗎" class="headerlink" title="用 Git 這麼久了，你知道 commit 是可以偽造的嗎"></a><a href="https://medium.com/starbugs/how-to-fake-the-author-of-git-commit-f44453b70afc" target="_blank" rel="noopener">用 Git 這麼久了，你知道 commit 是可以偽造的嗎</a></h3><p>雖然推薦自己的文章有點不好意思 XD，不過很多比較大的開源專案會希望你在參與時，最好可以用 gpg 簽署自己的 commit，這樣才不會有身份被冒用的情況</p><h3 id="我在-GitHub-參與開源貢獻專案的日子"><a href="#我在-GitHub-參與開源貢獻專案的日子" class="headerlink" title="我在 GitHub 參與開源貢獻專案的日子"></a><a href="https://coscup.org/2018/programs/github/" target="_blank" rel="noopener">我在 GitHub 參與開源貢獻專案的日子</a></h3><p>這是 2018 年 COSCUP（開源人年會）的其中一場議程，講者 Peter 在演講中分享了他是如何誤打誤撞加入了貢獻開源專案的行列，而且也分享了參與開源專案好幾年以來的心得，滿有趣的</p><h3 id="8-Productivity-Tips-for-GitHub"><a href="#8-Productivity-Tips-for-GitHub" class="headerlink" title="8 Productivity Tips for GitHub"></a><a href="https://dev.to/_darrenburns/8-productivity-tips-for-github-44kn" target="_blank" rel="noopener">8 Productivity Tips for GitHub</a></h3><p>如果沒有常用 Github 可能會不知道某些很好用的功能，像是 Github 現在可以像 IDE 一樣直接跳到某個函式，在搜尋檔案時也支援模糊搜尋，還有按個快捷鍵就可以看到專案的 git blame，如果懶得 clone 到本機的話完全可以在 Github 上進行 code review XD</p><h2 id="Ruby"><a href="#Ruby" class="headerlink" title="Ruby"></a>Ruby</h2><h3 id="The-Top-Ruby-Weekly-links-of-2018"><a href="#The-Top-Ruby-Weekly-links-of-2018" class="headerlink" title="The Top Ruby Weekly links of 2018"></a><a href="https://medium.com/rubyinside/the-top-ruby-weekly-links-of-2018-4b1dc99bd171" target="_blank" rel="noopener">The Top Ruby Weekly links of 2018</a></h3><p>追一下未追的 Ruby Weekly 推薦文章。Ruby Weekly 是 Ruby 知名的週刊，來看看 2018 年哪些推薦連結是最熱門的，第一個是由 DHH 宣布的 Action Text for Rails 6。第二個是 Serverless 的未來。第三個是各種使用一行 Ruby 的方式。非常有趣且具指標性的一篇文章。</p><h3 id="Soft-Delete-with-Discard"><a href="#Soft-Delete-with-Discard" class="headerlink" title="Soft Delete with Discard"></a><a href="https://www.driftingruby.com/episodes/soft-delete-with-discard" target="_blank" rel="noopener">Soft Delete with Discard</a></h3><p>用 Discard 來實作軟刪除，軟刪除自幹的比較不美麗，Discard 提供了一致的介面來實作軟刪除。繞了一圈回頭看 Gem 的設計有不一樣的風景。</p><h3 id="Rails-adds-a-minimal-flag-to-generate-a-new-application"><a href="#Rails-adds-a-minimal-flag-to-generate-a-new-application" class="headerlink" title="Rails adds a minimal flag to generate a new application"></a><a href="https://blog.saeloun.com/2020/09/02/rails-adds-scaffolding-new-app-with-minimal-flag.html" target="_blank" rel="noopener">Rails adds a minimal flag to generate a new application</a></h3><p>Rails 新增了一個很方便的指令，來新增一個新的專案，叫做 <code>rails --minimal</code>，以往需要手動的手續少了一點，黑魔法多了一點。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Announcing-the-General-Availability-of-Bottlerocket-a-new-open-source-Linux-based-operating-system-purpose-built-to-run-containers"><a href="#Announcing-the-General-Availability-of-Bottlerocket-a-new-open-source-Linux-based-operating-system-purpose-built-to-run-containers" class="headerlink" title="Announcing the General Availability of Bottlerocket, a new open source Linux-based operating system purpose-built to run containers"></a><a href="https://aws.amazon.com/about-aws/whats-new/2020/08/announcing-general-availability-of-bottlerocket/" target="_blank" rel="noopener">Announcing the General Availability of Bottlerocket, a new open source Linux-based operating system purpose-built to run containers</a></h3><p><strong>CoreOS</strong> 在五月 EoS 之後，想要使用 Container Linux 有兩條去路，比較無痛的方式為轉換到 <a href="https://www.flatcar-linux.org/" target="_blank" rel="noopener"><strong>FlatCar</strong></a>，小小痛的方式為轉換到 <a href="https://getfedora.org/en/coreos?stream=stable" target="_blank" rel="noopener"><strong>Fedora CoreOS</strong></a>，而在今天有了一個新的選擇 AWS Bottlerocket！把文件大概看了一下之後，發現真的要從 CoreOS 體系轉換過來應該跟砍掉重練沒有兩樣 XD 因為…</p><ol><li><p>他並不支援 Ignition 的 Provision 方式，而是使用相近於 Cloud-Init 的做法，使用一個 TOML 格式的 userdata 來達成一些簡單的初始設定方式</p></li><li><p>在 K8S Control Plane 已經存在的前提下，要使用他應該會滿簡單的 (不存在的話，我目前看文件還沒有找到怎麼比較簡單把 K8S Control Plane 在裡面跑起來)</p></li><li><p>他比較獨特的地方在於他是有提供 API 的 OS，可以讓維運人員透過 API 來做一些日常工作，例如更新東西，重開機之類的，我覺得這個功能好棒 XD</p></li><li><p>他還有提供 Admin Container (預設是關閉的)，需要的時候他會使用獨立的 containerd 來啟動，其中含有 SSH Server，讓使用者可以登入進去救火或是 Trouble Shooting，而這個 Container 也可以替換成自己客製化過的版本</p></li><li><p>在維運上最重要的版本更新還有安全問題也都有特別設計過，有興趣的人可以進去文件裡面看一下<br>自己覺得比當年 CoreOS 做到的又更完整且更多，很多創新的東西加在裡面，目前缺乏的就是更多人使用的經驗，還有週邊工具生態系的建立，處於既期待又怕受傷害的階段 XD</p></li></ol><h3 id="Introducing-GitHub-Container-Registry"><a href="#Introducing-GitHub-Container-Registry" class="headerlink" title="Introducing GitHub Container Registry"></a><a href="https://github.blog/2020-09-01-introducing-github-container-registry/" target="_blank" rel="noopener">Introducing GitHub Container Registry</a></h3><p>GitHub 最近好多消息，包含把 <a href="https://github.blog/2020-08-25-upgrading-github-to-ruby-2-7/" target="_blank" rel="noopener"><strong>Ruby 升級到 2.7</strong></a>，<a href="https://github.blog/2020-08-27-secure-at-every-step-putting-devsecops-into-practice-with-code-scanning/" target="_blank" rel="noopener"><strong>推出 Code Scanning 來達成 Shift Left 的 DevSecOps 目標</strong></a>，而在今天推出了 Container Registry (很剛好 #Dockerhub 最近也有一些動作)，每兩三天就有一個新功能 PR 宣布；GitHub 目前身為 VCS 的領頭羊，這一年來站在這個位置上所推出的新功能除了有示範作用之外，也對於整體軟體生態圈有正面的幫助，帶領著開發者一起往更好的方面邁進，看來被微軟收購完沒有走下坡？！</p><h3 id="5-hottest-startups-in-the-cloud-and-Kubernetes-monitoring-space"><a href="#5-hottest-startups-in-the-cloud-and-Kubernetes-monitoring-space" class="headerlink" title="5 hottest startups in the cloud and Kubernetes monitoring space"></a><a href="https://techgenix-com.cdn.ampproject.org/v/techgenix.com/cloud-and-kubernetes-monitoring/amp/?usqp=mq331AQFKAGwASA%3D&amp_js_v=0.1#referrer=https%3A%2F%2Fwww.google.com&amp_tf=From%20%251%24s&ampshare=http%3A%2F%2Ftechgenix.com%2Fcloud-and-kubernetes-monitoring%2F" target="_blank" rel="noopener">5 hottest startups in the cloud and Kubernetes monitoring space</a></h3><p>五間最火紅的雲端及 Kubernetes 監控新創公司，自己是都還沒有用過，先筆記下來等有需要的時候再來試試看了 = =+</p><ul><li>Glasnostic</li><li>OverOps</li><li>ChaosSearch</li><li>Lightstep</li><li>Humio</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 44 期 - 連起來很慢! 慢在哪? - 網路延遲的小知識</title>
      <link href="/2020/09/01/44-network-latency-knownledge/"/>
      <url>/2020/09/01/44-network-latency-knownledge/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="連起來很慢-慢在哪-網路延遲的小知識"><a href="#連起來很慢-慢在哪-網路延遲的小知識" class="headerlink" title="連起來很慢! 慢在哪? - 網路延遲的小知識"></a><a href="https://medium.com/starbugs/%E9%80%A3%E8%B5%B7%E4%BE%86%E5%BE%88%E6%85%A2-%E6%85%A2%E5%9C%A8%E5%93%AA-%E7%B6%B2%E8%B7%AF%E5%BB%B6%E9%81%B2%E7%9A%84%E5%B0%8F%E7%9F%A5%E8%AD%98-6395ddcc227" target="_blank" rel="noopener">連起來很慢! 慢在哪? - 網路延遲的小知識</a></h3><p>維護的雲端服務有沒有遇過一種狀況就是…看著綠油油的 Dashboard 想說一切都好好的啊！但真實使用者卻已經火冒三丈，客服電話也已經被打到滿線，因為一般的監控工具都是架設在內部網路 (Intranet) 從內部來進行監控，跟來自於世界各地的一般使用者是完全不同的出發點，所以會有監控上的盲點，這種情形就會需要外部的監控服務來模擬一般使用者行為，用以確保服務是否在正常運作中，而在外部網路的監控中，通常會有哪一些重點需要注意，遇到問題的時候又該如何找出癥結點？</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="What-is-ECMAScript-and-How-is-it-Different-From-JavaScript"><a href="#What-is-ECMAScript-and-How-is-it-Different-From-JavaScript" class="headerlink" title="What is ECMAScript and How is it Different From JavaScript?"></a><a href="hhttps://hackernoon.com/what-is-ecmascript-and-how-is-it-different-from-javascrip-m1263u76" target="_blank" rel="noopener">What is ECMAScript and How is it Different From JavaScript?</a></h3><p>大家知道 ECMAScript 和 JavaScript 有什麼不一樣嗎？有些時候你會看到這兩個名詞被擺在一起，甚至是從 ECMAScript 的規範中了解 JavaScript。但是即使如此，這 ECMAScrip 與 JavaScript 終究還是不同的東西，文章很清楚地說明了這件事，以及它們兩個的關係。</p><h3 id="How-to-Add-TypeScript-to-a-JavaScript-Project"><a href="#How-to-Add-TypeScript-to-a-JavaScript-Project" class="headerlink" title="How to Add TypeScript to a JavaScript Project"></a><a href="https://www.freecodecamp.org/news/how-to-add-typescript-to-a-javascript-project/" target="_blank" rel="noopener">How to Add TypeScript to a JavaScript Project</a></h3><p>如何把 TypeScript 加到 JavaScript 中，文章中不是只有告訴你如何導入而已，還介紹了 TypeScript 以及使用它的優勢，最後還會教你怎麼去洗腦團隊使用 TypeScript😂。</p><h3 id="Web开发应该知道的数据结构🍊"><a href="#Web开发应该知道的数据结构🍊" class="headerlink" title="Web开发应该知道的数据结构🍊"></a><a href="https://juejin.im/post/6866970001409064967" target="_blank" rel="noopener">Web开发应该知道的数据结构🍊</a></h3><p>隨著前端要處理的資料越來越多，但又不像後端有著強大的 Server 可以依靠，這時候如何選擇處理資料的方法就會變得很重要，本文不只介紹了資料結構的核心原理，還根據原理把資料結構用程式碼進行實作。</p><h2 id="CSS-樣式"><a href="#CSS-樣式" class="headerlink" title="CSS 樣式"></a>CSS 樣式</h2><h3 id="What-does-100-mean-in-CSS"><a href="#What-does-100-mean-in-CSS" class="headerlink" title="What does 100% mean in CSS?"></a><a href="https://wattenberger.com/blog/css-percents" target="_blank" rel="noopener">What does 100% mean in CSS?</a></h3><p>在寫 CSS 時我們很常會用到 <code>100%</code>，但 <code>100%</code> 放在不同屬性會有完全不同的效果，而這篇文分析了各種 <code>100%</code> 到底是怎麼計算出來的，而且還可以讓你用拖拉的方式調整樣式，讀完之後覺得學到很多新技巧 XD</p><h3 id="10-Ways-to-Center-a-Div-Horizontally-and-Vertically-in-CSS"><a href="#10-Ways-to-Center-a-Div-Horizontally-and-Vertically-in-CSS" class="headerlink" title="10 Ways to Center a Div Horizontally and Vertically in CSS"></a><a href="https://levelup.gitconnected.com/10-ways-to-center-a-div-horizontally-and-vertically-in-css-53ca5eb912db" target="_blank" rel="noopener">10 Ways to Center a Div Horizontally and Vertically in CSS</a></h3><p>不管是實際開發還是面試前端時都很常需要做到「水平垂直置中」，根據你想要置中的是 inline、block 還是 inline-block 元素又有不同的作法，所以這篇文直接幫你整理了十種方法，下次又忘記怎麼做時就看這篇吧！</p><h3 id="You-can-create-these-elements-without-JavaScript"><a href="#You-can-create-these-elements-without-JavaScript" class="headerlink" title="You can create these elements without JavaScript"></a><a href="https://dev.to/adrianbdesigns/you-can-create-these-elements-without-javascript-525a" target="_blank" rel="noopener">You can create these elements without JavaScript</a></h3><p>隨著 CSS 的語法越來越強大、瀏覽器的支援度也越來越高，現在很多效果像是 Modal 跟 Toggle 完全不用 JS 也能做出來，如果有時只是想做個簡單的靜態網站，又不想寫太多 JS，那就可以改成用 CSS 做～</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Guide-to-GitOps"><a href="#Guide-to-GitOps" class="headerlink" title="Guide to GitOps"></a><a href="https://www.weave.works/technologies/gitops/" target="_blank" rel="noopener">Guide to GitOps</a></h3><p>GitOps 指南，介紹 GitOps 的原則，GitOps 與 IAC 到底有什麼不同？GitOps 原則一：整個系統都是聲明式的。<br>原則二：在Git中規範化了所需的規範系統狀態。原則三：被允許的改變可以自動套用到系統。原則四：軟體代理可以確保正確性，並且在有分歧時發出警報。</p><h3 id="Prometheus-Book"><a href="#Prometheus-Book" class="headerlink" title="Prometheus Book"></a><a href="https://yunlzheng.gitbook.io/prometheus-book/" target="_blank" rel="noopener">Prometheus Book</a></h3><p>看起來好像不錯的 Prometheus 書籍，收藏起來。</p><h3 id="Stop-only-using-console-log-and-use-the-built-in-node-debugger"><a href="#Stop-only-using-console-log-and-use-the-built-in-node-debugger" class="headerlink" title="Stop only using console.log and use the built-in node debugger"></a><a href="https://dev.to/nyxtom/stop-using-console-log-and-use-the-node-debugger-4402" target="_blank" rel="noopener">Stop only using console.log and use the built-in node debugger</a></h3><p>停止使用 console.log 在 node.js 除錯，用內建的 node debugger 吧！內文介紹了兩種 Debug 工具，node.js 原生的 inspect 指令與 Chrome 的 inspector，加速你的開發效率。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Jenkins-Git-Plugin-Performance-Improvement"><a href="#Jenkins-Git-Plugin-Performance-Improvement" class="headerlink" title="Jenkins Git Plugin Performance Improvement"></a><a href="https://www.jenkins.io/blog/2020/08/29/git-performance-improvement-phase3/" target="_blank" rel="noopener">Jenkins Git Plugin Performance Improvement</a></h3><p>從七月初開始就有看到 Jenkins 老爺爺使用到的 Git Plugin 即將更新的<a href="https://www.jenkins.io/blog/2020/07/09/git-performance-improvement-phase1/" target="_blank" rel="noopener">消息</a>，七月底的時候又發了一篇<a href="https://www.jenkins.io/blog/2020/07/29/git-performance-improvement-phase2/" target="_blank" rel="noopener">文章</a>更新一下進度，就在無聲無息一個月之後，總算盼到這次主要針對效能改善的改版發佈啦！透過 GitToolChooser 功能的實作之後，讓 Git Plugin 可以在 CLI Git 和 JGit 中間作切換，來達成讓整體 Git Fetch 解省將近 50 % 的時間，因此有在使用的人，推薦一定要更新此 Plugin 並且搭配這篇文章一起服用！</p><h3 id="Terraform-Feature-Flags-amp-Environment-Toggle-Design-Patterns"><a href="#Terraform-Feature-Flags-amp-Environment-Toggle-Design-Patterns" class="headerlink" title="Terraform Feature Flags &amp; Environment Toggle Design Patterns"></a><a href="https://build5nines.com/terraform-feature-flags-environment-toggle-design-patterns/" target="_blank" rel="noopener">Terraform Feature Flags &amp; Environment Toggle Design Patterns</a></h3><p>Infrastructure as Code 領域中最多人使用的 Terraform 也可以達成 Feature Toggle? 此篇文章鉅細彌遺地講解在 Terraform 中如何做到 Feature Toggle，讓使用 Terraform 管理雲端環境的開發者在此 Design Pattern 下，就算是使用同一份 HCL 程式碼也可以讓不同環境所管理的資源有所不同</p><h3 id="Secure-at-every-step-Putting-DevSecOps-into-practice-with-code-scanning"><a href="#Secure-at-every-step-Putting-DevSecOps-into-practice-with-code-scanning" class="headerlink" title="Secure at every step: Putting DevSecOps into practice with code scanning"></a><a href="https://github.blog/2020-08-27-secure-at-every-step-putting-devsecops-into-practice-with-code-scanning/" target="_blank" rel="noopener">Secure at every step: Putting DevSecOps into practice with code scanning</a></h3><p>身為管理地球上最多程式碼的 GitHub 在這兩三年來也逐漸地往 DevSecOps 靠攏當中，之前可以透過掃描套件管理程式定義檔按來發現有沒有引用到具有 Vulnerability 的函式庫，最近又發表了靜態程式碼掃描 Beta 測試版本，讓大家可以透過 Shift Left 來達成 DevSecOps，在問題發生之前就先把它解決掉！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 43 期 - 把握夏天的尾巴，曬太陽曬到烤焦</title>
      <link href="/2020/08/25/43-bask-in-the-sun/"/>
      <url>/2020/08/25/43-bask-in-the-sun/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從-Github-開源指南｜學習如何貢獻開源專案"><a href="#從-Github-開源指南｜學習如何貢獻開源專案" class="headerlink" title="從 Github 開源指南｜學習如何貢獻開源專案"></a><a href="https://medium.com/starbugs/52807c598ed9" target="_blank" rel="noopener">從 Github 開源指南｜學習如何貢獻開源專案</a></h3><p>本週我們來讀一下「如何為開源做貢獻」。這份文件是 Github 的 Open Source Guide 開源指南，約莫兩年前剛出的時候全部是英文版的，已經三年了，拖到現在才讀（汗）。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="The-Boring-React-State-Management-Guide"><a href="#The-Boring-React-State-Management-Guide" class="headerlink" title="The Boring React State Management Guide"></a><a href="https://hackernoon.com/the-boring-react-state-management-guide-ee173ufl" target="_blank" rel="noopener">The Boring React State Management Guide</a></h3><p>標題雖然看起來很無聊，但內文一點也不！文章用許多實際的例子告訴你該如何正確的管理 React 的 State，值得一讀！</p><h3 id="被低估的CSS滤镜：drop-shadow"><a href="#被低估的CSS滤镜：drop-shadow" class="headerlink" title="被低估的CSS滤镜：drop-shadow"></a><a href="https://juejin.im/post/6863028044165038088" target="_blank" rel="noopener">被低估的CSS滤镜：drop-shadow</a></h3><p>相當有趣的 CSS 屬性，之前如果需要陰影就會馬上去找 <code>box-shadow</code> 來使用，但現在又多了一個很棒的選擇囉！</p><h3 id="21-Awesome-DEV-portfolios-for-your-inspiration"><a href="#21-Awesome-DEV-portfolios-for-your-inspiration" class="headerlink" title="21 Awesome DEV portfolios for your inspiration"></a><a href="https://dev.to/madza/21-awesome-dev-portfolios-for-your-inspiration-85n" target="_blank" rel="noopener">21 Awesome DEV portfolios for your inspiration</a></h3><p>每個前端工程師都會想要擁有一個屬於自己的網站，但是卻永遠都少了那麼一點靈感，告訴你這篇文一次就 21 個最讚的作品集通通送給你，讓靈感整個滿出來。</p><h2 id="Git-版本控制"><a href="#Git-版本控制" class="headerlink" title="Git 版本控制"></a>Git 版本控制</h2><h3 id="為你自己學-Git"><a href="#為你自己學-Git" class="headerlink" title="為你自己學 Git"></a><a href="https://gitbook.tw/#git--1" target="_blank" rel="noopener">為你自己學 Git</a></h3><p>雖然之前好像已經推薦過了，但說到 Git 還是得推一下龍哥的「為你自己學 Git」，雖然某一些章節需要付費才能解鎖，不過即便不付費也還是可以把 Git 的基本概念學好，很推薦對於 Git 的原理不太熟悉的新手讀</p><h3 id="9-useful-tricks-of-git-branch-you-might-not-know"><a href="#9-useful-tricks-of-git-branch-you-might-not-know" class="headerlink" title="9 useful tricks of git branch you might not know"></a><a href="https://link.medium.com/RnDtTUZzb9" target="_blank" rel="noopener">9 useful tricks of git branch you might not know</a></h3><p>如果你用 Git 已經好一陣子了，想學一些跟 git branch 有關的小技巧，譬如說快速切換到最近有新 commit 的 branch、列出已經被 merge 的 branch 等等，那可以看看這篇（不推薦入門 Git 的初學者看，可能會越看越亂）</p><h3 id="7-Amazing-Git-Extensions-for-VS-Code"><a href="#7-Amazing-Git-Extensions-for-VS-Code" class="headerlink" title="7 Amazing Git Extensions for VS Code"></a><a href="https://medium.com/better-programming/7-amazing-git-extensions-for-vs-code-4a8bd36c074b" target="_blank" rel="noopener">7 Amazing Git Extensions for VS Code</a></h3><p>如果你很常用 Git 而且剛好也有在用 VSCode，這邊有幾個超神的 extension 要推薦給你～文中推薦的 Git History、Git Blame 還有 GitLens 我都有在用，沒有他們真的不知道怎麼寫扣 XD</p><blockquote><p>這篇文是發佈在 Medium 付費牆上，看不到的人可以試試 <a href="https://github.com/manojVivek/medium-unlimited" target="_blank" rel="noopener">medium unlimited</a> 這個瀏覽器插件，Chome 跟 Firefox 都有哦</p></blockquote><h2 id="Ruby-語言"><a href="#Ruby-語言" class="headerlink" title="Ruby 語言"></a>Ruby 語言</h2><h3 id="What-Makes-Ruby-Beautiful-Metaprogramming"><a href="#What-Makes-Ruby-Beautiful-Metaprogramming" class="headerlink" title="What Makes Ruby Beautiful: Metaprogramming"></a><a href="https://dev.to/alexlion/what-makes-ruby-beautiful-metaprogramming-536a" target="_blank" rel="noopener">What Makes Ruby Beautiful: Metaprogramming</a></h3><p>是什麼讓 Ruby 變得那麼美：Metaprogramming。如果我要向一個五歲的小孩解釋 Meta Programming 是什麼？假設你想要畫一個陽光燦爛的城市，你用筆在紙上寫下「陽光燦爛的城市」，然後魔術就發生了。</p><h3 id="Rake-Task-enhance-Method-Explained"><a href="#Rake-Task-enhance-Method-Explained" class="headerlink" title="Rake::Task .enhance() Method Explained"></a><a href="https://dev.to/molly_struve/rake-task-enhance-method-explained-3bo0" target="_blank" rel="noopener">Rake::Task .enhance() Method Explained</a></h3><p>解釋 Rake::Task 中的 <code>.enhance()</code> 方法。Molly Struve 在貢獻 <a href="https://github.com/forem/forem" target="_blank" rel="noopener">forum software</a> 開源專案的時候，遇到了一個執行順序不固定的 bug，於是她去從 Rake::Task 中，發現了 <code>.enhance</code> 方法，成功了解決了這個 Bug，可喜可賀！</p><h3 id="Ruby-Literals"><a href="#Ruby-Literals" class="headerlink" title="Ruby Literals"></a><a href="https://www.w3resource.com/ruby/ruby-literals.php#:~:text=We%20have%20already%20seen%20literals,Booleans%20and%20nil" target="_blank" rel="noopener">Ruby Literals</a></h3><p>Ruby 的文字值，基本資料型態，例如：200 + 2_00 會等於 400，這是 Ruby 中的特殊寫法。% 在 Ruby 中的的使用。一些語言的基本，越熟悉閱讀的時候就不需要不斷查找。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="What’s-new-in-Kubernetes-1-19"><a href="#What’s-new-in-Kubernetes-1-19" class="headerlink" title="What’s new in Kubernetes 1.19?"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-19/" target="_blank" rel="noopener">What’s new in Kubernetes 1.19?</a></h3><p>這次 1.19 的 34 個更新中，有 10 個是全新推出的功能， 8 個從 Beta 變成 Stable，2 個 K8S 專案的管理變更，其他 14 個則是既有功能的持續改善，依照慣例，讓我們來看看這次的重點更新：</p><ul><li><p>支援的時間週期將從 9 個月延長到 12 個月：隨著 K8S 專案越發穩定，而且根據調查結果，很多使用者都無法在 9 個月內升級，有將近 1/3 的使用者都還在使用已經沒有支援的版本，因此 LTS 團隊決定將本來 9 個月支援時間延長到 12 個月，讓大家多 3 個月的時間可以喘息一下</p></li><li><p>Deprecated API 的警告機制：從現在起 API Server 將會包含一個 Deprecated 相關資訊的警告 Header，告知 Client 這個 API 什麼時候會進入 Deprecated，什麼時候會真的被移除掉，有興趣的人可以使用最新版的 kubectl 就可以看到相關警告訊息</p></li><li><p>Beta 功能的存亡生死戰：以前一個功能進到 Beta 階段之後，就會被預設開啟，讓使用者可以使用，但這也造成此功能朝向更穩定的開發動力逐漸地消失掉，導致他可能在 Beta 停留的時間太久，例如 Ingress，所以以後假如一個功能進到 Beta 之後在 9 個月內就會被 Deprecated，除非 1) 他達成 GA 的條件變成 Stable，或是 2) 有準備好新的 Beta 版本，並且將舊的 Beta 版本淘汰掉</p></li><li><p>通用的短暫型儲存空間：有數種方式可以讓開發者定義短暫型的儲存空間，但是對於 K8S 支援的短暫型儲存空間 (例如：EmptyDir, Secrets, ConfigMap)，其功能也被限縮在 K8S 內，假如要讓特定的 CSI 也支援的話，那就還要去更新此 CSI Driver 才可以；所以此新功能提供了一個簡單的 API 讓任何的 Storage Driver 都可以直接動態來使用</p></li><li><p>讓 kubeadm 使用客製化的 Patch：不同的環境 (Dev, Test, Prod) 會有不同的組態設定是一件再正常不過的事情了，所以現在 kubeadm 工具提供了一個 flag –experimental-patches (從 –experimental-kustomize 複製過來，以後會變成 –patches)，讓使用者可以根據不同的環境使用不同的組態設定檔案</p></li></ul><h3 id="Announcing-Snyk’s-developer-first-Infrastructure-as-Code-security-capabilities"><a href="#Announcing-Snyk’s-developer-first-Infrastructure-as-Code-security-capabilities" class="headerlink" title="Announcing Snyk’s developer-first Infrastructure as Code security capabilities"></a><a href="https://snyk.io/blog/infrastructure-as-code-security/" target="_blank" rel="noopener">Announcing Snyk’s developer-first Infrastructure as Code security capabilities</a></h3><p>現在開發者有越來越多的機會使用 Code/Configuration 去定義資源，例如 <strong>Docker</strong>, <strong>Kubernetes</strong> 和 <strong>Terraform</strong> …等，所以 Snyk 平台現在推出 Security 掃描功能，底下範例是從 GitHub 匯入的 Terraform Module，透過 Synk 掃描之後，馬上就發現他並沒有通過 CIS 要求，而且應該要修正的地方會很清楚的被標示出來，讓開發者方便把問題修復掉，目前先支援 Docker, Kubernets 和 Terraform 管理 AWS 的部分，看來 IaC 的 Security 市場有越來越多人開始進來搶攻了！</p><h3 id="Graceful-shutdown-and-zero-downtime-deployments-in-Kubernetes"><a href="#Graceful-shutdown-and-zero-downtime-deployments-in-Kubernetes" class="headerlink" title="Graceful shutdown and zero downtime deployments in Kubernetes"></a><a href="https://learnk8s.io/graceful-shutdown" target="_blank" rel="noopener">Graceful shutdown and zero downtime deployments in Kubernetes</a></h3><p>建立/刪除 Deployment，其實牽扯到的操作都是 Pod，在建立 Pod 的時候，其實是循序漸進地把許多步驟一個一個完成 (Scheduler 分配 Pod 要去哪一個 Node，Kubelet 透過 CRI, CNI, CSI 的幫忙把 Pod 建立完畢，最後 Control Plane 再將 Pod IP 更新到 Endpoint 內)，其實只要有把 Readiness Probe 設定得當應該就不會遇到什麼大問題，不過再將 Pod 刪除的時候，把 Pod 砍掉跟把 IP 從 Endpoint 移除掉是同時發生的，假如 Pod 先被砍掉了，但是 IP 還在 Endpoint 內的話，還在運作或是服務中的請求就會收到影響，所以這邊會分成兩種型態來說明要怎麼讓 Pod 優雅的死掉</p><ul><li><p>General Pod: 解法當然就是讓 Pod 等一下再死，等到 IP 不存在於 Endpoint 時再死，K8S 預設會等待 30 秒才把 Process 砍掉，除非特別修改 terminationGracePeriodSeconds 在 Pod 中的預設值，也可以透過 preStop Hook 來延長被砍掉的時間，透過這些設定等到 Pod IP 被從 Endpoint 被移除掉之後再開始進行被砍掉的步驟，如此一來既有的服務請求就可以安心完成不會被影響到</p></li><li><p>Long-Running Pod: 但假如 Pod 要處理幾小時的影片轉檔，或是像 Websocket 這種類型的 Workload，就會建議使用 Rainbow Deployment 的方式，每次的部屬是建立新的 K8S Deployment，舊的 Deployment 繼續服務/運行既有的請求，新的 Deployment 就負責新的請求/任務；舊的 Deployment 等到沒有人用的時候再手動砍掉，或是自動砍掉 (Osiris 這個開源專案就是想要達成這個需求)</p></li></ul><h3 id="Critical-Jenkins-Server-Vulnerability-Could-Leak-Sensitive-Information"><a href="#Critical-Jenkins-Server-Vulnerability-Could-Leak-Sensitive-Information" class="headerlink" title="Critical Jenkins Server Vulnerability Could Leak Sensitive Information"></a><a href="https://thehackernews.com/2020/08/jenkins-server-vulnerability.html" target="_blank" rel="noopener">Critical Jenkins Server Vulnerability Could Leak Sensitive Information</a></h3><p>有在使用 <strong>Jenkins</strong> 的組織最近記得更新，因為根據最近揭露的 CVE-2019-17638 (CVSS 標記為 9.4 分) 顯示，Jenkins 使用到的 Eclipse Jetty 從版本 9.4.27.v20200227 到 9.4.29.v20200521 都有受到影響，可以讓未經授權的駭客擅自從 HTTP 回應中取得其他使用者的機敏資訊；Jetty 本身已經在上個月釋出更新版本 9.4.30.v20200611，Jenkins 昨天也隨著發佈了 2.243 還有 LTS 版本 2.235.5，大家趕緊看看自己的版本有沒有更新到此版</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 42 期 - 跨出國界！一起把英文文章寫起來！</title>
      <link href="/2020/08/18/42-start-your-writing-of-english/"/>
      <url>/2020/08/18/42-start-your-writing-of-english/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="跨出國界-寫出照樣照句的英文文章-實用度極高的-7-個句型分享"><a href="#跨出國界-寫出照樣照句的英文文章-實用度極高的-7-個句型分享" class="headerlink" title="跨出國界-寫出照樣照句的英文文章-實用度極高的 7 個句型分享"></a><a href="https://medium.com/starbugs/%E8%B7%A8%E5%87%BA%E5%9C%8B%E7%95%8C-%E5%AF%AB%E5%87%BA%E7%85%A7%E6%A8%A3%E7%85%A7%E5%8F%A5%E7%9A%84%E8%8B%B1%E6%96%87%E6%96%87%E7%AB%A0-%E5%AF%A6%E7%94%A8%E5%BA%A6%E6%A5%B5%E9%AB%98%E7%9A%84-7-%E5%80%8B%E5%8F%A5%E5%9E%8B%E5%88%86%E4%BA%AB-4e5d5c1f88bc" target="_blank" rel="noopener">跨出國界-寫出照樣照句的英文文章-實用度極高的 7 個句型分享</a></h3><p>在文章裡分享的句型，都沒有很嚴格的告訴大家什麼時候要用名詞、副詞、形容詞等等的（因為我也不會），而是直接把實戰會用到的句型列出來，我們只要把相同的類型的單字替換進句型中就可以了。雖然一開始很難，但只要能試著打出一句話，慢慢的就會有第二句話，一直到整篇文章的產出。</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="Vue-3-is-coming-what-to-expect-and-how-to-prepare"><a href="#Vue-3-is-coming-what-to-expect-and-how-to-prepare" class="headerlink" title="Vue 3 is coming - what to expect and how to prepare"></a><a href="https://dev.to/dailydotdev/vue-3-is-coming-what-to-expect-and-how-to-prepare-2p1k" target="_blank" rel="noopener">Vue 3 is coming - what to expect and how to prepare</a></h3><p>Vue3 終於要來啦！第一次聽到 Vue3 已經是去年的事情了，而根據目前官方的計畫，發布日期會在從現在起到 2020/9/30 號之間的任一時間（說不定就是明天 XD）！在 Vue3 裡會出現哪些方便的功能？又該如何做什麼準備來迎接新版本呢？你想知道的文章裡通通有！</p><h3 id="開發必備，摸索不完的-Chrome-DevTools-小技巧之設置斷點篇"><a href="#開發必備，摸索不完的-Chrome-DevTools-小技巧之設置斷點篇" class="headerlink" title="開發必備，摸索不完的 Chrome DevTools 小技巧之設置斷點篇"></a><a href="https://medium.com/unalai/%E9%96%8B%E7%99%BC%E5%BF%85%E5%82%99-%E6%91%B8%E7%B4%A2%E4%B8%8D%E5%AE%8C%E7%9A%84-chrome-devtools-%E5%B0%8F%E6%8A%80%E5%B7%A7%E4%B9%8B%E8%A8%AD%E7%BD%AE%E6%96%B7%E9%BB%9E%E7%AF%87-4d72cb35fa39" target="_blank" rel="noopener">開發必備，摸索不完的 Chrome DevTools 小技巧之設置斷點篇</a></h3><p>雖然 <code>console.log</code> 在 debug 上是無敵的，但是如果能夠透過 chrome 提供的開發者工具更方便的看到程式執行的流程，以及每個變數的值呢？</p><h3 id="Flexbox-vs-Grid-How-to-Build-the-Most-Common-HTML-Layouts"><a href="#Flexbox-vs-Grid-How-to-Build-the-Most-Common-HTML-Layouts" class="headerlink" title="Flexbox vs Grid - How to Build the Most Common HTML Layouts"></a><a href="https://www.freecodecamp.org/news/flexbox-vs-grid-how-to-build-the-most-common-html-layouts/" target="_blank" rel="noopener">Flexbox vs Grid - How to Build the Most Common HTML Layouts</a></h3><p>大家都在搭配使用 Flex 和 Grid，但這篇文章用比較的方式，顯示了兩者在幾個普遍的排版上會出現什麼樣的差異。</p><h2 id="Linux-學習"><a href="#Linux-學習" class="headerlink" title="Linux 學習"></a>Linux 學習</h2><h3 id="Linux-I-O-輸入與輸出重新導向"><a href="#Linux-I-O-輸入與輸出重新導向" class="headerlink" title="Linux I/O 輸入與輸出重新導向"></a><a href="https://blog.gtwang.org/linux/linux-io-input-output-redirection-operators/" target="_blank" rel="noopener">Linux I/O 輸入與輸出重新導向</a></h3><p>Linux 有個很厲害的地方，就是任何指令的執行結果都可以透過 pipeline 重新導向到其他指令或是檔案，而這篇文章就是在介紹 Stdin、Stdout、Stderr 這三個資料流要怎麼進行重新導向，如果是剛入門 Linux 還在熟悉 command line 的朋友們很推薦讀讀這篇</p><h3 id="An-Introduction-to-Linux-File-Permissions"><a href="#An-Introduction-to-Linux-File-Permissions" class="headerlink" title="An Introduction to Linux File Permissions"></a><a href="https://www.booleanworld.com/introduction-linux-file-permissions/" target="_blank" rel="noopener">An Introduction to Linux File Permissions</a></h3><p>Linux 的設計是允許很多使用者同時在上面使用的，如果你有在跟別人共用 Linux 機器，但又不希望自己放在機器上的檔案被其他人偷看或是修改，那一定要來了解一下 Linux 的檔案權限機制</p><h3 id="CLI-improved"><a href="#CLI-improved" class="headerlink" title="CLI: improved"></a><a href="https://remysharp.com/2018/08/23/cli-improved" target="_blank" rel="noopener">CLI: improved</a></h3><p>Linux 上很多內建的 command line 工具都是很久之前就開發出來了，所以有些指令並不是那麼好用。因此 Github 上也有很多大神開發了各種加強版的內建工具，像 <code>bat</code> 就是有 syntax highlight 的 <code>cat</code>、<code>htop</code> 是用起來比較簡單的 <code>top</code> 等等，如果覺得內建工具太難用的話就趁這個機會 alias 一波吧</p><h2 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h2><h3 id="How-to-Write-Useful-Commit-Messages"><a href="#How-to-Write-Useful-Commit-Messages" class="headerlink" title="How to Write Useful Commit Messages"></a><a href="https://dev.to/jacobherrington/how-to-write-useful-commit-messages-my-commit-message-template-20n9" target="_blank" rel="noopener">How to Write Useful Commit Messages</a></h3><p>如何寫出有用的 Commit Message? 本文提供一個好用的模版，讓你的 commit message 更加清楚。</p><h3 id="How-to-write-a-good-commit-message"><a href="#How-to-write-a-good-commit-message" class="headerlink" title="How to write a good commit message"></a><a href="https://dev.to/chrissiemhrk/git-commit-message-5e21" target="_blank" rel="noopener">How to write a good commit message</a></h3><p>另一種 Commit 的寫法，跟上方比起來較為簡單，基於 Udacity Git Commit Message 指南所使用的一種 Git commit 方式。</p><h3 id="Learn-git-concepts-not-commands"><a href="#Learn-git-concepts-not-commands" class="headerlink" title="Learn git concepts, not commands"></a><a href="https://dev.to/unseenwizzard/learn-git-concepts-not-commands-4gjc" target="_blank" rel="noopener">Learn git concepts, not commands</a></h3><p>學習 git 的概念，而非指令。手繪畫出 Git 概念，將 Git 概念講解的很清楚。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Telltale-Netflix-Application-Monitoring-Simplified"><a href="#Telltale-Netflix-Application-Monitoring-Simplified" class="headerlink" title="Telltale: Netflix Application Monitoring Simplified"></a><a href="https://netflixtechblog.com/telltale-netflix-application-monitoring-simplified-5c08bfa780ba" target="_blank" rel="noopener">Telltale: Netflix Application Monitoring Simplified</a></h3><p>半夜被 On Call 電話叫了起床，心中雖然還在納悶到底是真的系統有問題，還是只需要調整一下監測的閥值，就在思考的過程中一邊查看訊息跟 Dashboard，時間也一分一秒正在消逝中，這應該是所有 On Call 工程師都有遇過的情況，太多的 Alert，太多的 Dashboard，太多要維護的服務；Netflix 內部的串流團隊需要一個可以快速分析和發現問題的監控系統，也就是說內部的 Node 團隊需要開發一個系統，讓一小群人可以透過它來駕馭一整個大系統，就在這樣的時空環境之下 Telltale 被開發了出來！</p><p>Telltale 想要解決上面提到的問題，所以著重在於使用鮮明的顏色來讓人可以一眼看出有沒有問題發生，而且只顯示出最相關的上下游資訊，利用之前已經提過的眾多開源工具來幫忙 Telltale 有效地發揮作用，例如 Atlas (Telemetry Platform)，Mantis, Nimble…等；利用通知工具時除了單純地發出訊息之外，也會把後續資訊提供在通知內，並且將處理狀況更新在其中，同時也會做到事件管理 (Incident Management) 跟 部署監控 (Deployment Monitoring)，看來 Telltale 什麼都做到了，只是其實這篇文章提到的架構其實相當的龐大，感覺不是單純把 Telltale 拿來用就可以了…</p><h3 id="HashiCorp-Terraform-生態系大更新！-Terraform-Cloud"><a href="#HashiCorp-Terraform-生態系大更新！-Terraform-Cloud" class="headerlink" title="HashiCorp Terraform 生態系大更新！ Terraform Cloud"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-0-13/" target="_blank" rel="noopener">HashiCorp Terraform 生態系大更新！</a> <a href="https://www.hashicorp.com/blog/announcing-hashicorp-terraform-cloud-business/" target="_blank" rel="noopener">Terraform Cloud</a></h3><p>上週 Terraform 本身跟 Cloud 服務都發布了滿多新的功能，眾所期待的 Terraform 0.13 已經 GA 可以開始下載來使用，這次最重要的功能在於 Module Resource 的強化上，因為開發者可以在 Module 開始使用 count, depends_on 和 for_each 的功能；除此之外，Terraform 強大的 Provider 生態系開始允許開發者可以使用自定義的安裝來源，不像以前會被綁死只能下載公開 Registry 內的那一些 Provider；而在 Cloud 這邊今天登入應該會發現變得不太一樣了，主要是因為多了 Business Tier 企業用戶需要的功能，例如在 SSO 開始支援 Okta，並且新增可以使用自己的架的機器來管理內部的私有資源，並且也開始可以使用 Splunk 透過 Audit Logging 來增加維運層面的能見度</p><h3 id="Announcing-New-Pulumi-Open-Source-Projects-for-Kubernetes"><a href="#Announcing-New-Pulumi-Open-Source-Projects-for-Kubernetes" class="headerlink" title="Announcing New Pulumi Open Source Projects for Kubernetes"></a><a href="https://www.pulumi.com/blog/new-kubernetes-superpowers/" target="_blank" rel="noopener">Announcing New Pulumi Open Source Projects for Kubernetes</a></h3><p>Pulumi 宣布的幾項新的開源專案，用以增加其對於 Kubernets 的支援程度，其中包含用來提供K8S GitOps 功能的 <strong>Pulumi Kubernetes Operator</strong>，用來把 YAML 轉換成 Pulumi Python, TypeScript, Go 或是 .NET 的 <strong>kube2pulumi</strong> 工具，讓 Pulumi 的 PaC 工具 CrossGuard 可以支援使用 Open Policy Agent 開發出來的 Policy…等，完整內容請參閱內文</p><h2 id="社群活動"><a href="#社群活動" class="headerlink" title="社群活動"></a>社群活動</h2><h3 id="HITCON-Training-2020-報名倒數-2-天"><a href="#HITCON-Training-2020-報名倒數-2-天" class="headerlink" title="HITCON Training 2020 報名倒數 2 天"></a><a href="https://www.facebook.com/HITCON/photos/pcb.3463154017049229/3463153793715918/?type=3&theater" target="_blank" rel="noopener">HITCON Training 2020 報名倒數 2 天</a></h3><p>好評延長招生中 ‼ 至 8/19 (三) 23：59 截止招生 📣</p><p>手把手小班教學，精彩攻防課程帶您剖析資安奧妙，業界講師帶您實機演練各式駭客攻擊情境、傳授實戰經驗與調查工具及分析心法～快來解鎖資安新技能！一同掌握資安新視野！</p><h3 id="Modern-Web-2020-徵稿中"><a href="#Modern-Web-2020-徵稿中" class="headerlink" title="Modern Web 2020 徵稿中"></a><a href="https://modernweb.tw/index.html?fbclid=IwAR0Z_m2UQk94XunVVa5g30Z806iEy4c_r7QtUCQuAQAUwEJ7jwdOxr9JTGA#cfp" target="_blank" rel="noopener">Modern Web 2020 徵稿中</a></h3><p>一年一度的 Modern Web 持續徵稿中，這次採用 Webinar 線上研討會的型式呈現，熱愛技術的你不能錯過。</p><h3 id="Pycon-2020-一般票熱賣中"><a href="#Pycon-2020-一般票熱賣中" class="headerlink" title="Pycon 2020 一般票熱賣中"></a><a href="https://www.facebook.com/pycontw/photos/a.161497130635804/3147110645407756/?type=3&theater" target="_blank" rel="noopener">Pycon 2020 一般票熱賣中</a></h3><p>Pycon 2020 早鳥票已結束售票，其餘票種於「 8 月 21 日」結束販售。但是要買票還是要動作快喔~!😇😇</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 41 期 - 偷天換日：用 Stub 寫出不依賴資料庫的單元測試</title>
      <link href="/2020/08/11/41-use-stub-to-break-dependency/"/>
      <url>/2020/08/11/41-use-stub-to-break-dependency/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="偷天換日-—-善用-Stub-寫出不依賴資料庫的單元測試"><a href="#偷天換日-—-善用-Stub-寫出不依賴資料庫的單元測試" class="headerlink" title="偷天換日 — 善用 Stub 寫出不依賴資料庫的單元測試"></a><a href="https://medium.com/@larry850806/using-stub-to-break-dependency-on-database-8cef505f9dfa" target="_blank" rel="noopener">偷天換日 — 善用 Stub 寫出不依賴資料庫的單元測試</a></h3><p>說到單元測試，大家馬上想到的應該都是像 <code>sum</code> 這類沒有副作用的 pure function，他們就只是把參數拿來做一些運算，所以測試寫起來也簡單。但真實世界的應用往往不是如此，總有一些 function 會需要發出網路請求、或是對資料庫進行讀寫。所以今天的主題就是講怎麼用 Sinon.JS 的測試替身打破依賴，讓原本需要資料庫的單元測試，在沒有資料庫的環境下跑起來</p><h2 id="前端開發"><a href="#前端開發" class="headerlink" title="前端開發"></a>前端開發</h2><h3 id="How-I-Cloned-VSCode-to-use-as-my-Portfolio"><a href="#How-I-Cloned-VSCode-to-use-as-my-Portfolio" class="headerlink" title="How I Cloned VSCode to use as my Portfolio"></a><a href="https://dev.to/greedybrain/i-used-vscode-itself-as-my-portfolio-1fg5" target="_blank" rel="noopener">How I Cloned VSCode to use as my Portfolio</a></h3><p>太厲害了各位，這個文章的作者用了 VSCode 的風格做了介紹自己的履歷！除此之外，他也在下方的留言區說了很棒的話我想分享給大家：「我們要盡可能的展現創造力，因為這些事與我們前端開發者有關！」他完全把自己的價值提高到思維方面，我覺得這非常重要。另外也附上我覺得很猛的作品，他是製造了一個<a href="https://peteroravec.com/" target="_blank" rel="noopener">遊戲</a>去呈現自己。</p><h3 id="Why-React-projects-still-use-Redux-in-2020"><a href="#Why-React-projects-still-use-Redux-in-2020" class="headerlink" title="Why React projects still use Redux in 2020?"></a><a href="https://dev.to/alexandrudanpop/why-react-projects-still-use-redux-in-2020-395p" target="_blank" rel="noopener">Why React projects still use Redux in 2020?</a></h3><p>記得之前也有分享過類似的文章，但是每隔一段期間就會有新人詢問相同的問題，那就是現在還需要學 Redux 嗎？</p><p>其實我不太理解為什麼一開始就要考慮他，因為當你學到 Hooks 或是先學到 Redux，這兩種寫法一定會給你不同的感受，你也會去思考或是意會到什麼情境會適合哪種解法，或是解決了什麼問題，而不是一開始就想說選一個學就好啦！而且我相信像文章說的：「當你進到一間公司，一定會有 50% 的機率會碰到 Redux。」</p><h3 id="Functional-Programming-Paradigm-in-JavaScript"><a href="#Functional-Programming-Paradigm-in-JavaScript" class="headerlink" title="Functional Programming Paradigm in JavaScript"></a><a href="https://hackernoon.com/functional-programming-paradigm-in-javascript-km173u4i" target="_blank" rel="noopener">Functional Programming Paradigm in JavaScript</a></h3><p>這篇文章把 JavaScript 函式編程講的真的很棒，他運用了簡單的範例以及清楚的解說，把每種概念都展示的很清楚，很適合剛學習 JavaScript 的初學者看，而如果已經相當熟練 JavaScript 的開發也能再看一次當做複習！</p><h2 id="單元測試"><a href="#單元測試" class="headerlink" title="單元測試"></a>單元測試</h2><h3 id="純粹的好，Pure-Function-知道"><a href="#純粹的好，Pure-Function-知道" class="headerlink" title="純粹的好，Pure Function 知道"></a><a href="https://link.medium.com/lgHNPrfXP8" target="_blank" rel="noopener">純粹的好，Pure Function 知道</a></h3><p>怎麼樣的 function 才算是 pure function？除了方便測試之外，pure function 在開發上還有什麼其他的益處？這些問題在這篇文章裡面都有講到。除此之外，作者也分享了對於 React、Redux 的想法，看完之後會覺得真的到處都有 pure function 的影子</p><h3 id="Test-Doubles-—-Fakes-Mocks-and-Stubs"><a href="#Test-Doubles-—-Fakes-Mocks-and-Stubs" class="headerlink" title="Test Doubles — Fakes, Mocks and Stubs"></a><a href="https://link.medium.com/dkCLR94TP8" target="_blank" rel="noopener">Test Doubles — Fakes, Mocks and Stubs</a></h3><p>看完專欄之後還覺得意猶未盡，想了解其他的測試替身嗎？這篇文介紹了 Fake、Mock 跟 Stub 兩種替身，並且分析了他們的使用時機</p><h3 id="Best-Practices-for-Spies-Stubs-and-Mocks-in-Sinon-js"><a href="#Best-Practices-for-Spies-Stubs-and-Mocks-in-Sinon-js" class="headerlink" title="Best Practices for Spies, Stubs and Mocks in Sinon.js"></a><a href="https://semaphoreci.com/community/tutorials/best-practices-for-spies-stubs-and-mocks-in-sinon-js" target="_blank" rel="noopener">Best Practices for Spies, Stubs and Mocks in Sinon.js</a></h3><p>Sinon.JS 是一個用來建立各種測試替身的 library，文中講了很多該如何在 Spy、Stub 跟 Mock 之間做選擇，也分享了很多 Sinon.JS 在使用時的 best practice</p><h2 id="後端開發"><a href="#後端開發" class="headerlink" title="後端開發"></a>後端開發</h2><h3 id="Python初学者的自我修养，找到自己的方向"><a href="#Python初学者的自我修养，找到自己的方向" class="headerlink" title="Python初学者的自我修养，找到自己的方向"></a><a href="https://juejin.im/post/6854573220054433805" target="_blank" rel="noopener">Python初学者的自我修养，找到自己的方向</a></h3><p>學習一門語言，不論是哪一個應用場景都不只一個方向，所以其中一個重要的東西，就是方向的選擇。而 Python 在各個領域中，跟其他語言的特性也有差異，以 Web 為例，Python 的優勢在於快而敏捷。機器學習對 Python 的要求只需要會基本的語法，但是背後的知識體系，卻是龐大的：例如：推薦、搜尋、廣告、NLP … 等等。</p><h3 id="1万-接口测试与管理的进阶之路"><a href="#1万-接口测试与管理的进阶之路" class="headerlink" title="1万+接口测试与管理的进阶之路"></a><a href="https://juejin.im/post/6857028286826315790" target="_blank" rel="noopener">1万+接口测试与管理的进阶之路</a></h3><p>接口是應用開發中必然存在的產物，無論你是開發，測試還是運維人員，你都會與接口產生千絲萬縷的聯繫。開發是接口的創造者，他們定義了接口，同時帶來了他們血肉之主軸。測試是接口的健康守護者，無論在哪個階段，都在默默的為他們發現傷害他們健康的“寄生蟲”（致BUG）。聽了我的YY，有沒有覺得接口是有生命的，如果沒有，那麼可以看下下圖</p><h3 id="一本《Redis-深度历险》，我能躺挣多少钱？"><a href="#一本《Redis-深度历险》，我能躺挣多少钱？" class="headerlink" title="一本《Redis 深度历险》，我能躺挣多少钱？"></a><a href="https://juejin.im/post/6844903735693426696" target="_blank" rel="noopener">一本《Redis 深度历险》，我能躺挣多少钱？</a></h3><p>有人問我，你之前的小冊才賣 19.9 元，而一本紙書居然要定價 79 元，你是不是膨脹了？我很想告訴他的是這一本紙書作者的抽成只佔 7％，如果是黑白印刷，能抽成 8％。但是為了保持好的閱讀體驗，還是堅持了全彩印刷。雖然我明白抽成的額度少了，同時因為彩印價格偏高會導致銷量相對較高，最終會導致總收入下降。</p><h2 id="DevOps"><a href="#DevOps" class="headerlink" title="DevOps"></a>DevOps</h2><h3 id="Jenkins-graduates-in-the-Continuous-Delivery-Foundation"><a href="#Jenkins-graduates-in-the-Continuous-Delivery-Foundation" class="headerlink" title="Jenkins graduates in the Continuous Delivery Foundation"></a><a href="https://www.jenkins.io/blog/2020/08/04/cdf-graduation/" target="_blank" rel="noopener">Jenkins graduates in the Continuous Delivery Foundation</a></h3><p>Jenkins 是一個已經在業界存在十年以上的老前輩了，加入 CI/CD 組織然後說他畢業了，感覺有點怪怪的，不知道算不算是在洗學歷XD 不過從畢業感言裡面找到了 <a href="https://www.jenkins.io/project/roadmap/" target="_blank" rel="noopener"><strong>Public Roadmap</strong></a>，以後可以從這邊知道老爺爺準備要帶給大家什麼新玩意兒 = =+</p><h3 id="Pysa-An-open-source-static-analysis-tool-to-detect-and-prevent-security-issues-in-Python-code"><a href="#Pysa-An-open-source-static-analysis-tool-to-detect-and-prevent-security-issues-in-Python-code" class="headerlink" title="Pysa: An open source static analysis tool to detect and prevent security issues in Python code"></a><a href="https://engineering.fb.com/security/pysa/" target="_blank" rel="noopener">Pysa: An open source static analysis tool to detect and prevent security issues in Python code</a></h3><p>Pysa (Python Static Analyzer) 是 Facebook 最近開源的靜態程式碼分析工具，FB 建造並且使用該工具來檢測和預防 Python 程式碼中的安全性和隱私相關問題。FB 中最大的 Python 程式碼 Repository 是用來運行 Instagram 服務，裡面有數百萬行程式碼，Pysa 可以根據開發人員提交的程式碼在一個小時內就提拱分析結果，而不用花費幾週甚至數個月來手動檢查數百萬行的程式碼，這些快速被找到的問題就可以被避免有問題的程式碼被 Merge 進入 Repository 的 Main Branch 中，而且也會根據問題去做分類，發送通知給開發人員或是安全工程師</p><h3 id="How-we-learned-to-improve-Kubernetes-CronJobs-at-Scale-Part-I-Part-II"><a href="#How-we-learned-to-improve-Kubernetes-CronJobs-at-Scale-Part-I-Part-II" class="headerlink" title="How we learned to improve Kubernetes CronJobs at Scale [Part I] [Part II]"></a><a href="https://eng.lyft.com/improving-kubernetes-cronjobs-at-scale-part-1-cf1479df98d4" target="_blank" rel="noopener">How we learned to improve Kubernetes CronJobs at Scale</a> <a href="https://eng.lyft.com/improving-kubernetes-cronjobs-at-scale-part-1-cf1479df98d4" target="_blank" rel="noopener">[Part I]</a> <a href="https://eng.lyft.com/how-we-learned-to-improve-kubernetes-cronjobs-at-scale-part-2-of-2-dad0c973ffca" target="_blank" rel="noopener">[Part II]</a></h3><p>Lyft 使用了兩篇的文章篇幅來述說公司內部使用 #Kubernetes 內建的 CronJob 遇到的痛點與解決的方式，目前 Lyft Production K8S 環境內有將近五百個 CronJob，每個小時會被執行 1500 多次，在使用 K8S 之前，這些 Job 本來是使用 Linux 內建的 Cron 機制，然後透過 CM 工具來做管理；像許多人一樣選擇 K8S 的原因一樣，因為其最大的好處之一是可以有效地利用資源，因此 Lyft 便開始將這些 Cron Job 容器化然後遷移到 K8S 中，畢竟傳統的 Linux Cron 機制當機器沒有在運行任務的時候，可能有 99% 的資源是閒置沒有被使用到的，但是使用 K8S CronJob 之後，所有的 CPU 和 Memory…等資源可以被所有的 Cron Job 有效的利用</p><p>不過紙上談兵總是比較簡單的，實際跑下去就遇到問題了，因為 K8S 的 CronJob 在 #啟動所花的時間 和 #故障處理 上跟 Liunux Cron 有一些關鍵性上的差異，所以 Lyft 詳細的分析為什麼會造成這樣的原因，然後透過 1) 增加 CronJob 的可觀察性，方便開發者查找問題，維運者監控，2) 建立工具讓 K8S CronJob 的臨時調用變得更容易，3) 把 K8S 一些內部本身長期存在的問題給修復掉，所以雖然 K8S CronJob 並非完美的解決方案，但如果願意花時間弄的話，他還是可以完成大規模的工作，詳細監控跟解決方式可以參閱內容，這邊只有大概提一下大綱</p><h2 id="社群活動"><a href="#社群活動" class="headerlink" title="社群活動"></a>社群活動</h2><h3 id="Modern-Web-2020-徵稿中"><a href="#Modern-Web-2020-徵稿中" class="headerlink" title="Modern Web 2020 徵稿中"></a><a href="https://modernweb.tw/index.html?fbclid=IwAR0Z_m2UQk94XunVVa5g30Z806iEy4c_r7QtUCQuAQAUwEJ7jwdOxr9JTGA#cfp" target="_blank" rel="noopener">Modern Web 2020 徵稿中</a></h3><p>一年一度的 Modern Web 持續徵稿中，這次採用 Webinar 線上研討會的型式呈現，熱愛技術的你不能錯過。</p><h3 id="Pycon-2020-一般票熱賣中"><a href="#Pycon-2020-一般票熱賣中" class="headerlink" title="Pycon 2020 一般票熱賣中"></a><a href="https://www.facebook.com/pycontw/photos/a.161497130635804/3147110645407756/?type=3&theater" target="_blank" rel="noopener">Pycon 2020 一般票熱賣中</a></h3><p>Pycon 2020 早鳥票已結束售票，其餘票種於「 8 月 21 日」結束販售。但是要買票還是要動作快喔~!😇😇</p><h3 id="Kubernetes-Summit-2020-議程公布中"><a href="#Kubernetes-Summit-2020-議程公布中" class="headerlink" title="Kubernetes Summit 2020 議程公布中"></a><a href="https://k8s.ithome.com.tw/" target="_blank" rel="noopener">Kubernetes Summit 2020 議程公布中</a></h3><p>沒想到今年還有 Kubernetes Summit 可以參加，看起來官方已經開始慢慢把議程放上去了～</p><h3 id="Taiwan-CDK-Meetup-2"><a href="#Taiwan-CDK-Meetup-2" class="headerlink" title="Taiwan CDK Meetup #2"></a><a href="https://cdkmeetup.kktix.cc/events/fristmeetup2" target="_blank" rel="noopener">Taiwan CDK Meetup #2</a></h3><p>Taiwan CDK Meetup 這週準備舉辦第二次啦～不過聽說票在一瞬間就被搶購一空了 T_T</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>本週呈現主題方式做了一些改變，希望讓讀者能夠更快速精準的找到自己要的資訊。也加入社群活動這個區塊，每週更新社群活動的資訊。如果有任何建議，歡迎私訊 <a href="https://www.facebook.com/StarBugsWeekly/" target="_blank" rel="noopener">星巴哥技術週刊 FB 粉絲專頁</a> 與我們聯繫。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 40 期 - CDK for Terraform 初試啼聲</title>
      <link href="/2020/08/04/40-cdk-for-terraform/"/>
      <url>/2020/08/04/40-cdk-for-terraform/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="CDK-for-Terraform-初試啼聲"><a href="#CDK-for-Terraform-初試啼聲" class="headerlink" title="CDK for Terraform 初試啼聲"></a><a href="https://medium.com/starbugs/cdk-for-terraform-%E5%88%9D%E8%A9%A6%E5%95%BC%E8%81%B2-86a80f1315db" target="_blank" rel="noopener">CDK for Terraform 初試啼聲</a></h3><p>2020 的七月底，突然冒出 HashiCorp 與 AWS 合作的消息，推出了 CDK for Terraform，讓開發者可以透過自己熟悉的語言來撰寫 Terraform，而不用再去撰寫 HCL，廢話不多說，首先讓我們來開箱試玩看看</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="「一劳永逸」送你21道高频JavaScript手写面试题"><a href="#「一劳永逸」送你21道高频JavaScript手写面试题" class="headerlink" title="「一劳永逸」送你21道高频JavaScript手写面试题"></a><a href="https://juejin.im/post/6855129007852093453" target="_blank" rel="noopener">「一劳永逸」送你21道高频JavaScript手写面试题</a></h3><p>文章中解析了許多 JavaScript 函式的實現原理，實作的程式碼非常乾淨且容易理解，而且每個例子也會標出需要注意的地方，但是建議要在思緒清晰的時候看，不然會越看越昏 😂</p><h3 id="How-to-Check-Internet-Connection-Status-Using-Async-JavaScript"><a href="#How-to-Check-Internet-Connection-Status-Using-Async-JavaScript" class="headerlink" title="How to Check Internet Connection Status Using Async JavaScript"></a><a href="https://www.freecodecamp.org/news/how-to-check-internet-connection-status-with-javascript/" target="_blank" rel="noopener">How to Check Internet Connection Status Using Async JavaScript</a></h3><p>用 JavaScript 判斷當前的電腦是否有連上網路，原理非常簡單，只要發送一個請求然後在沒有網路的時候 catch 住 <code>fetch</code> 回來的錯誤就可以了，寫起來也很有趣！可以把它應用在 PWA 上面！因為 PWA 沒有瀏覽器幫你處理無網路連線的狀況 😭</p><h3 id="8-amazing-HTML-button-hover-effects-that-will-make-your-website-memorable"><a href="#8-amazing-HTML-button-hover-effects-that-will-make-your-website-memorable" class="headerlink" title="8 amazing HTML button hover effects, that will make your website memorable"></a><a href="https://dev.to/duomly/8-amazing-html-button-hover-effects-that-will-make-your-website-memorable-386e" target="_blank" rel="noopener">8 amazing HTML button hover effects, that will make your website memorable</a></h3><p>8 個炫砲的按鈕 hover 效果，不得不說我真的很喜歡第二種開燈的那種效果，然後看著看著就會有不想要把它看完的感覺，因為每種效果都超棒的！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Introduction-to-modern-network-load-balancing-and-proxying"><a href="#Introduction-to-modern-network-load-balancing-and-proxying" class="headerlink" title="Introduction to modern network load balancing and proxying"></a><a href="https://link.medium.com/qf0eeKyCD8" target="_blank" rel="noopener">Introduction to modern network load balancing and proxying</a></h3><p>這篇文講各種 Load Balancer 講得超級詳細又深入，雖然這麼說有點浮誇，但看完真的覺得我以前根本就不瞭解 Load Balancer 吧 XD，只知道是拿來做負載平衡，根本不知道還有分哪幾種</p><h3 id="讓任務排隊吧：Message-Queue"><a href="#讓任務排隊吧：Message-Queue" class="headerlink" title="讓任務排隊吧：Message Queue"></a><a href="https://link.medium.com/ncbnrf0DD8" target="_blank" rel="noopener">讓任務排隊吧：Message Queue</a></h3><p>在一個比較大的系統中，通常都會有非常多支程式在運作，這時各個程式之間要怎麼溝通就很重要了。這篇文講了幾種應用之間溝通的方式，並且介紹了怎麼用 Message Queue 來幫忙做訊息傳輸</p><h3 id="Microservice-Architecture-at-Medium"><a href="#Microservice-Architecture-at-Medium" class="headerlink" title="Microservice Architecture at Medium"></a><a href="https://link.medium.com/PAhfLgfED8" target="_blank" rel="noopener">Microservice Architecture at Medium</a></h3><p>這篇是 Medium 分享了他們使用 Microservice 架構的經驗，隨著後端服務越來越龐大，這樣的架構確實帶來許多好處。雖然如此，但 Medium 團隊也建議開發初期還是以單體式（monolithic）架構會比較好維護，等到應用越來越複雜，團隊也足夠大時，再逐漸轉移到 Microservice 會比較好</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="🧰-50-Developer-tools-to-make-your-life-a-little-easie"><a href="#🧰-50-Developer-tools-to-make-your-life-a-little-easie" class="headerlink" title="🧰 50 Developer tools to make your life a little easie"></a><a href="https://dev.to/iainfreestone/50-developer-tools-to-make-your-life-a-little-easier-4oc5" target="_blank" rel="noopener">🧰 50 Developer tools to make your life a little easie</a></h3><p>50 個開發者工具，讓你的生活更簡單。舉幾個例子：RegEx 101 學正規表達式。Keycode，按下任何的按鍵，以取得對應的 JS code。Mocky，不用等待 backend 的 API，模仿一個，開始開發。Explain Shell，解釋 shell 是什麼意思。</p><h3 id="🚀10-Trending-projects-on-GitHub-for-web-developers-31st-July-2020"><a href="#🚀10-Trending-projects-on-GitHub-for-web-developers-31st-July-2020" class="headerlink" title="🚀10 Trending projects on GitHub for web developers - 31st July 2020"></a><a href="https://dev.to/iainfreestone/10-trending-projects-on-github-for-web-developers-31st-july-2020-4dd6" target="_blank" rel="noopener">🚀10 Trending projects on GitHub for web developers - 31st July 2020</a></h3><p>這篇滿有意思的，每週介紹 10 個熱門的 web 開源專案，形成一個系列文。這篇文章介紹了一個所見即所得編輯器 draft.js，採用的技術是 React.js。PeerJS - 使用 WebRTC 來傳輸檔案與廣播。</p><h3 id="A-Complete-Beginner-Guide-To-React-Js"><a href="#A-Complete-Beginner-Guide-To-React-Js" class="headerlink" title="A Complete Beginner Guide To React Js"></a><a href="https://dev.to/hemant/a-complete-beginner-s-guide-to-react-js-learning-path-and-resources-np7" target="_blank" rel="noopener">A Complete Beginner Guide To React Js</a></h3><p>給新手看的 React.js 教學，條例了一些重點，學 React.js 該學會哪些基礎，可以用哪些專案來實作？</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Logging-in-Kubernetes-EFK-vs-PLG-Stack"><a href="#Logging-in-Kubernetes-EFK-vs-PLG-Stack" class="headerlink" title="Logging in Kubernetes: EFK vs PLG Stack"></a><a href="https://www.cncf.io/blog/2020/07/27/logging-in-kubernetes-efk-vs-plg-stack/" target="_blank" rel="noopener">Logging in Kubernetes: EFK vs PLG Stack</a></h3><p>ELK/EFK/ELFK…在 Logging 管理領域經過差不多十年的稱霸之後，總算有新的挑戰者來了，叫做 PLG (Promtail + Loki + Grafana)，不過感覺 <strong>Elastic</strong> 近年來腹背受敵，前方有 <strong>Loki 正面迎擊</strong>，然後 <strong>Open Distro for ElasticSearch</strong> 從後面…補刀/捅一刀?! (不知道用什麼詞彙比較不會那麼負面XD) 不過真的是有競爭有進步就是了~<br>先把焦點拉回這篇文章，內文主要描述在 <strong>Kubernetes</strong> 中的 Log 分別要怎麼透過這兩個方案來做處理，我想大家對於 Elastic 的解決方案應該都很熟稔了，所以可以多看看裡面提到 PLG 的架構，了解他是怎麼把 Log 收進去做中心化的處理跟管理</p><h3 id="Announcing-the-GitHub-public-roadmap"><a href="#Announcing-the-GitHub-public-roadmap" class="headerlink" title="Announcing the GitHub public roadmap"></a><a href="https://github.blog/2020-07-28-announcing-the-github-public-roadmap/" target="_blank" rel="noopener">Announcing the GitHub public roadmap</a></h3><p>GitHub 也要開始使用自己的 Project 功能來弄公開的 Roadmap，滿多大型專案其實都有在使用這個功能，沒有想到過了這麼多年，GitHub 總算有了自己的公開版本XD 我覺得超棒的！不然根本就不知道接下來會有什麼新功能可以期待，或是明明 Community 版本已經有的功能，到底要過多久才會在 Enteraprise 版本釋出都沒有人可以給一個交代的說 ╮（╯＿╰）╭</p><h3 id="How-We-Cut-Our-Docker-Push-Time-by-90"><a href="#How-We-Cut-Our-Docker-Push-Time-by-90" class="headerlink" title="How We Cut Our Docker Push Time by 90%"></a><a href="https://kelda.io/blog/speed-up-docker-push-by-90/" target="_blank" rel="noopener">How We Cut Our Docker Push Time by 90%</a></h3><p>Kelda 提供了 Docker-Compose 線上版本 (Blimp)，其中一個功能是可以讓使用者把 Build 好的 Docker Image Push 到該服務上之後運行起來，但是從本機端 Push Docker Image 到遠端有時候是非常耗費時間跟頻寬的，所以這篇文章描述了 Kelda 剖析 Docker API 的行為，分析 Dockerfile 的 Base Image，利用 Docker Image Layer 可以共享的概念，來減少開發者使用他們家的服務 Push Docker Image 多達 90% 的時間！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 39 期 - 中了大樂透，你還會寫程式嘛？</title>
      <link href="/2020/07/28/39-do-you-still-coding-after-winning-the-Lotto/"/>
      <url>/2020/07/28/39-do-you-still-coding-after-winning-the-Lotto/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Linux-新手入門必裝-TLDR-命令列神兵"><a href="#Linux-新手入門必裝-TLDR-命令列神兵" class="headerlink" title="Linux 新手入門必裝 | TLDR 命令列神兵"></a><a href="https://medium.com/starbugs/9fbba0d4f028" target="_blank" rel="noopener">Linux 新手入門必裝 | TLDR 命令列神兵</a></h3><p>TLDR 能夠用最簡短的方式告訴你各種指令的用法。TL;DR 是 too long; didn’t read 的縮寫，初學 Linux 的時候一堆指令的縮寫有夠難懂，什麼 ls、pwd、mv … 諸如此類的指令。當你不懂的時候怎麼辦？用 TLDR 就對了！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Next-js-初探單元測試，使用-Jest-React-Testing-Library"><a href="#Next-js-初探單元測試，使用-Jest-React-Testing-Library" class="headerlink" title="Next.js | 初探單元測試，使用 Jest + React Testing Library"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/nextjs-testing-tutorial-1-ed4b27563761" target="_blank" rel="noopener">Next.js | 初探單元測試，使用 Jest + React Testing Library</a></h3><p>雖然是用 Next.js 的專案下去寫單元測試，但是文章裡更多的其實是描述該如何對 React 的 component 做測試，以及在測試的時候會踩到那些坑和該注意的事情。</p><h3 id="How-to-Create-and-Publish-a-Vue-Component-Library"><a href="#How-to-Create-and-Publish-a-Vue-Component-Library" class="headerlink" title="How to Create and Publish a Vue Component Library"></a><a href="https://www.freecodecamp.org/news/how-to-create-and-publish-a-vue-component-library/" target="_blank" rel="noopener">How to Create and Publish a Vue Component Library</a></h3><p>在各個框架崛起的現在，許多 Vue 或 React 的開發者都會將一些常用的 UI 包成 Component 讓人直接使用，但你知道該如何打包一個 Component 到 npm 上嗎？以 Vue 為例，一起來看看吧！</p><h3 id="YOU-DON’T-HARNESS-THE-FULL-POWER-OF-JS-CONSOLE-👎"><a href="#YOU-DON’T-HARNESS-THE-FULL-POWER-OF-JS-CONSOLE-👎" class="headerlink" title="YOU DON’T HARNESS THE FULL POWER OF JS CONSOLE 👎 :("></a><a href="https://dev.to/tilakmaddy/why-you-don-t-know-basic-console-log-must-read-now-46n1" target="_blank" rel="noopener">YOU DON’T HARNESS THE FULL POWER OF JS CONSOLE 👎 :(</a></h3><p>看過了那麼多關於 console 的各種奇招，本來想說不會再為關於 <code>console</code> 的應用內容感到驚訝，但我還是第一次知道 <code>console</code> 可以顯示圖片…</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="使用-WSL-2-打造優質的多重-Linux-開發環境"><a href="#使用-WSL-2-打造優質的多重-Linux-開發環境" class="headerlink" title="使用 WSL 2 打造優質的多重 Linux 開發環境"></a><a href="https://blog.miniasp.com/post/2020/07/26/Multiple-Linux-Dev-Environment-build-on-WSL-2" target="_blank" rel="noopener">使用 WSL 2 打造優質的多重 Linux 開發環境</a></h3><p>以前要在 Windows 電腦上使用 Linux 不是要 VM 就是要灌雙系統，但 VM 用起來很麻煩效能又很差，雙系統則是一不小心就會灌壞，一邊灌還要一邊祈禱就算壞了資料也不要不見。但自從 Windows 有了 WSL 之後一切都不一樣了，尤其現在 WSL2 用起來真的就是 Linux，如果有想要 Windows 上打造 Linux 開發環境，那絕對不能錯過保哥的經驗分享。</p><h3 id="JavaScript-Visualized-Event-Loop"><a href="#JavaScript-Visualized-Event-Loop" class="headerlink" title="JavaScript Visualized: Event Loop"></a><a href="https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif" target="_blank" rel="noopener">JavaScript Visualized: Event Loop</a></h3><p>昨天意外發現有一篇文用動畫的方式講解 Node.js 的 Event Loop，想當年我初學 JS 時也是被各種同步、非同步搞得頭昏腦脹，花了好大一番力氣才終於搞懂，如果當時也有這麼簡單的動畫說明就好了。</p><h3 id="Things-I-Wished-More-Developers-Knew-About-Databases"><a href="#Things-I-Wished-More-Developers-Knew-About-Databases" class="headerlink" title="Things I Wished More Developers Knew About Databases"></a><a href="https://medium.com/@rakyll/things-i-wished-more-developers-knew-about-databases-2d0178464f78" target="_blank" rel="noopener">Things I Wished More Developers Knew About Databases</a></h3><p>這篇文寫得超好但也超長，他列出身為開發者平常在使用、挑選資料庫時該注意的 17 個點，包括 Consistency 跟 Isolation 分為哪些級別、Latency 可能會從哪裡來、資料庫不見得會照你請求的順序執行等等。想了解資料庫，看這篇就對了！</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="LocalStorage-vs-Cookies-All-You-Need-To-Know-About-Storing-JWT-Tokens-Securely-in-The-Front-End"><a href="#LocalStorage-vs-Cookies-All-You-Need-To-Know-About-Storing-JWT-Tokens-Securely-in-The-Front-End" class="headerlink" title="LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End"></a><a href="https://dev.to/cotter/localstorage-vs-cookies-all-you-need-to-know-about-storing-jwt-tokens-securely-in-the-front-end-15id" target="_blank" rel="noopener">LocalStorage vs Cookies: All You Need To Know About Storing JWT Tokens Securely in The Front-End</a></h3><p>LocalStorage 與 Cookies 所有你需要知道的知識。從 Access token、Refresh Token 開始複習，接著分析 Local Storage 的優缺點，很方便但是有可能受到 XSS 的攻擊。Cookies，不能被 JS 存取，所以沒有 XSS 的風險，如果遇到跨 API Server 的情況，無法共用 Cookies。最後作者總結了 Cookies 在 Oauth 2.0 的使用經驗。</p><h3 id="🚀🚀10-sites-or-apps-that-can-make-your-frontend-development-to-pro-level"><a href="#🚀🚀10-sites-or-apps-that-can-make-your-frontend-development-to-pro-level" class="headerlink" title="🚀🚀10 sites or apps that can make your frontend development to pro* level"></a><a href="https://dev.to/karthick3018/10-sites-or-apps-that-can-make-your-frontend-development-to-pro-level-459p" target="_blank" rel="noopener">🚀🚀10 sites or apps that can make your frontend development to pro* level</a></h3><p>十個能讓你前端技巧變成專家級得網站。文中推薦了 10 個很實用的工具或網站，包含如何產生各種形狀，產生各種動畫，CSS 剪貼區域的技巧。形狀的 template … 等等。真的不錯耶，非常實用。</p><h3 id="Have-You-Mastered-These-9-Vue-Techniques"><a href="#Have-You-Mastered-These-9-Vue-Techniques" class="headerlink" title="Have You Mastered These 9 Vue Techniques?"></a><a href="https://pitayan.com/posts/vue-techniques/?ref=dev.to" target="_blank" rel="noopener">Have You Mastered These 9 Vue Techniques?</a></h3><p>你是否精通了 9 個 vue.js 技術？Functional Component、Deep Selectors、進階 watcher、事件引數 $event …，這篇棒棒的。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="12-Container-image-scanning-best-practices-to-adopt-in-production"><a href="#12-Container-image-scanning-best-practices-to-adopt-in-production" class="headerlink" title="12 Container image scanning best practices to adopt in production"></a><a href="https://sysdig.com/blog/image-scanning-best-practices/" target="_blank" rel="noopener">12 Container image scanning best practices to adopt in production</a></h3><p>sysdig 分享了 12 個掃描 container image 的最佳守則：</p><ol><li>把 Image 掃描的程序融合到 CI/CD Pipeline 中</li><li>使用 inline 掃描，避免機敏資料儲存於 Container Image 中</li><li>在 Image Registry 也要執行 Image 掃描</li><li>利用 Kubernetes admission controllers 限制使用的 Container Image 來源</li><li>確保 Image 使用的版本，不要使用 latest 或是 staging 這種 tag</li><li>OS 的 Vulnerability 也要記得掃描</li><li>使用乾淨的 Distroless Container Image，避免裝一堆有的沒的</li><li>掃描使用到第三方函式庫的 Vulnerability</li><li>最佳化 Image Layer 的順序</li><li>掃描 Dockerfile ，找出沒有寫好的地方</li><li>快速標記被 Kubernets 使用到含有 Vulnerability 的 Container Image</li><li>選擇 SaaS 為基底的掃描解決方案</li></ol><h3 id="Announcing-Clutch-the-Open-source-Platform-for-Infrastructure-Tooling"><a href="#Announcing-Clutch-the-Open-source-Platform-for-Infrastructure-Tooling" class="headerlink" title="Announcing Clutch, the Open-source Platform for Infrastructure Tooling"></a><a href="https://eng.lyft.com/announcing-clutch-the-open-source-platform-for-infrastructure-tooling-143d00de9713" target="_blank" rel="noopener">Announcing Clutch, the Open-source Platform for Infrastructure Tooling</a></h3><p>Lyft 宣布開源 Clutch 這個千秋萬載，一種江湖的 Infrastructure Workflow 工具XD 介紹文寫得讓我有點看不懂，不過實際去看他的組態設定，可以發現可以利用它來整合各種服務，然後再利用它來管理，例如：可以把 EC2 ASG 整合進來，就可以透過它來得知 ASG 的 Size 變化狀況 (透過 Slack)，或是把他跟 Kubernetes 整合在一起，透過它來砍掉 Pod 或是調整 HPA，也可以把他跟 GitHub 整合在一起，就可以控制 Repository，簡而言之就是要你命 3000 XD</p><h3 id="Introducing-Domain-Oriented-Microservice-Architecture"><a href="#Introducing-Domain-Oriented-Microservice-Architecture" class="headerlink" title="Introducing Domain-Oriented Microservice Architecture"></a><a href="https://eng.uber.com/microservice-architecture/" target="_blank" rel="noopener">Introducing Domain-Oriented Microservice Architecture</a></h3><p>幾年前大家推崇 Microservices 的好處，開始一窩蜂地開始使用它來構築組織內的服務，不過在最近幾年，大家開始撻伐 Micro Service 的缺點，覺得他會使得複雜性大大增加，而在 Uber 內大約有 2200 個重要的 Microservices，在過去的兩年中，Uber 嘗試降低 Microservices 的複雜性，同時仍保持 Microservices 架構的優勢。所以 Uber 希望通過這篇文章介紹Microservices 架構的通用方法，此方法被稱為 “Domain-Oriented Microservice Architecture” (DOMA)，前面也提到很多人開始在嫌棄 Microservices 架構，但是很少人會提議測底拒絕，因為它還是有它的優點，似乎目前也沒有比較好的替代品，所以 Uber 希望 DOMA 可以降低系統整體的複雜性，但又保持 Microservices 架構的靈活性</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 38 期 - 就是要做出最酷最炫砲的 GitHub Profile</title>
      <link href="/2020/07/21/38-how-to-create-a-amazing-profile-on-github/"/>
      <url>/2020/07/21/38-how-to-create-a-amazing-profile-on-github/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="如何建立獨一無二的-GitHub-Profile！與三個很酷的設計及應用-🚀"><a href="#如何建立獨一無二的-GitHub-Profile！與三個很酷的設計及應用-🚀" class="headerlink" title="如何建立獨一無二的 GitHub Profile！與三個很酷的設計及應用 🚀"></a><a href="https://medium.com/starbugs/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%8D%A8%E4%B8%80%E7%84%A1%E4%BA%8C%E7%9A%84-github-profile-%E8%88%87%E4%B8%89%E5%80%8B%E5%BE%88%E9%85%B7%E7%9A%84%E8%A8%AD%E8%A8%88%E5%8F%8A%E6%87%89%E7%94%A8-ef1cbb4b42c1" target="_blank" rel="noopener">如何建立獨一無二的 GitHub Profile！與三個很酷的設計及應用 🚀</a></h3><p>在 GitHub 的 Overview 上，每次點進個人頁，在 Overview 上映入眼簾的總是 Popular repositories，然後就是下方的 Contributions 熱力圖和活動紀錄，我就問你：「這樣子的頁面到底哪裡吸引人了？」</p><p>難道我沒有辦法讓人點進我的 Overview 就有像被海嘯打到的驚奇感嗎？在這篇文章裡面，我就要來介紹 GitHub 最近推出的新功能，它可以讓你在 GitHub 個人頁中的 Overview 上放上自己設計的 README.md</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="GitHub-Archive-Program-the-journey-of-the-world’s-open-source-code-to-the-Arctic"><a href="#GitHub-Archive-Program-the-journey-of-the-world’s-open-source-code-to-the-Arctic" class="headerlink" title="GitHub Archive Program: the journey of the world’s open source code to the Arctic"></a><a href="https://github.blog/2020-07-16-github-archive-program-the-journey-of-the-worlds-open-source-code-to-the-arctic/" target="_blank" rel="noopener">GitHub Archive Program: the journey of the world’s open source code to the Arctic</a></h3><p>哇！你各位快檢查一下自己的 GitHub 有沒有多了一個「Arctic Code Vault Contributor（北極圈的程式碼貢獻者）」的稱號啊？如果有的話恭喜你的程式碼被送到北極去封存啦！快來看看程式碼被送到北極的過程，然後也恭喜各位真的在歷史中留下足跡了！而如果沒有拿到稱號也不要難過，只要持續 Coding，下一個就是你！</p><h3 id="How-to-Build-Reusable-HTML-Components-Without-Component-Based-Frameworks"><a href="#How-to-Build-Reusable-HTML-Components-Without-Component-Based-Frameworks" class="headerlink" title="How to Build Reusable HTML Components Without Component-Based Frameworks"></a><a href="https://www.freecodecamp.org/news/how-to-build-reusable-html-components-without-component-based-frameworks/" target="_blank" rel="noopener">How to Build Reusable HTML Components Without Component-Based Frameworks</a></h3><p>當你在無法使用 React 與 Vue 之類 JavaScript 的框架環境作業時，該如何使用原生的 JavaScript 做一個可重用的 HTML Component 呢？</p><h3 id="心得-英文-如何命名「數量變數」"><a href="#心得-英文-如何命名「數量變數」" class="headerlink" title="[心得][英文] 如何命名「數量變數」"></a><a href="https://www.ptt.cc/bbs/Soft_Job/M.1594363672.A.7D0.html" target="_blank" rel="noopener">[心得][英文] 如何命名「數量變數」</a></h3><p>對工程師來說有時候取變數就很苦惱了，如果還要搭上英文的文法規則更是困難。像是數量就分了 count、number 和 quantity 等等，到底什麼時候要用什麼以及怎麼用，文章整理了幾個非常實用的例子！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Channel-Use-Cases-Go-101"><a href="#Channel-Use-Cases-Go-101" class="headerlink" title="Channel Use Cases - Go 101"></a><a href="https://go101.org/article/channel-use-cases.html" target="_blank" rel="noopener">Channel Use Cases - Go 101</a></h3><p>很多人剛學 Go 的時候會覺得 channel 的概念比較難，或是學完語法後還是不知道哪些情境可以使用 channel。而這篇文章就是要告訴你 channel 有哪些 use case，包括可以當成 promise 跟 lock 用，或是拿來做 rate limit 等等</p><h3 id="How-Operating-Systems-Work"><a href="#How-Operating-Systems-Work" class="headerlink" title="How Operating Systems Work"></a><a href="https://link.medium.com/TMShYyyxf8" target="_blank" rel="noopener">How Operating Systems Work</a></h3><p>想把程式寫好，不能不懂作業系統。這篇文簡單介紹了作業系統到底在做什麼，像是 Thread Model 有分成哪幾種，或是 memory management 是在幹嘛，雖然整篇文章爆炸長，但對於不熟悉作業系統的人來說真的是一篇好文</p><h3 id="系統設計-設計縮網址服務"><a href="#系統設計-設計縮網址服務" class="headerlink" title="系統設計 - 設計縮網址服務"></a><a href="https://www.jyt0532.com/2019/12/05/design-tiny-url/" target="_blank" rel="noopener">系統設計 - 設計縮網址服務</a></h3><p>如果要你設計一個短網址服務，你會想怎麼設計呢？短網址要用什麼演算法生成、過期數據要怎麼處理、database 要怎麼選都是需要經過考慮的。不管你對於系統設計有沒有興趣，我個人是覺得這篇的內容滿有趣的，所以推薦大家都看看</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="写给女友的秘籍-浏览器工作原理（上）篇"><a href="#写给女友的秘籍-浏览器工作原理（上）篇" class="headerlink" title="写给女友的秘籍-浏览器工作原理（上）篇"></a><a href="https://juejin.im/post/5f007d32f265da22b64936bf" target="_blank" rel="noopener">写给女友的秘籍-浏览器工作原理（上）篇</a></h3><p>1.2 萬字的一篇文章，讀完這篇你會學到前端優化的底層邏輯、瀏覽器渲染的過程、javascript 運行機制解析。不過還是想對作者說：醒醒吧你沒有女友！</p><h3 id="程序员成长指北-全栈开发"><a href="#程序员成长指北-全栈开发" class="headerlink" title="程序员成长指北 - 全栈开发"></a><a href="https://github.com/koala-coding/goodBlog" target="_blank" rel="noopener">程序员成长指北 - 全栈开发</a></h3><p>Node.js 為底的成長指北，從 Node.js 比較進階的議題到 Vue.js 比較常見的面試題都有帶到。</p><h3 id="我向面试官讲解了单例模式，他对我竖起了大拇指"><a href="#我向面试官讲解了单例模式，他对我竖起了大拇指" class="headerlink" title="我向面试官讲解了单例模式，他对我竖起了大拇指"></a><a href="https://juejin.im/post/5f13ad426fb9a07e8849d260" target="_blank" rel="noopener">我向面试官讲解了单例模式，他对我竖起了大拇指</a></h3><p>因為標題很好笑，就收錄進來了。Singleton 是許多人學 Design Pattern 的第一個或是前幾個 Pattern。這篇文章有提到一些比較進階的觀點，例如：鎖的競爭。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="CDK-for-Terraform-Enabling-Python-amp-TypeScript-Support"><a href="#CDK-for-Terraform-Enabling-Python-amp-TypeScript-Support" class="headerlink" title="CDK for Terraform: Enabling Python &amp; TypeScript Support"></a><a href="https://www.hashicorp.com/blog/cdk-for-terraform-enabling-python-and-typescript-support/" target="_blank" rel="noopener">CDK for Terraform: Enabling Python &amp; TypeScript Support</a></h3><p>很多人當初不想當 <strong>YAML</strong> / <strong>JSON</strong> 工程師，而從 <strong>AWS Cloudformation</strong> 跳槽到 <strong>Terraform</strong>，後來 <strong>AWS CDK</strong> 的推出，讓開發者可以使用自己喜歡的語言來達成 IaC 而且減少碰到 YAML / JSON 檔案的機會；今天 HashiCorp 跟 AWS 合作推出了 CDK for Terraform!! 讓開發者可以使用 <strong>TypeScript</strong> 跟 <strong>Python</strong> 透過 Terraform 來達成 IaC，除了再也不用看到 YAML / JSON 檔案之外，Terraform 強大的特性也一併存在！</p><h3 id="🔑-OAuth-2-0-flows-explained-in-GIFs"><a href="#🔑-OAuth-2-0-flows-explained-in-GIFs" class="headerlink" title="🔑 OAuth 2.0 flows explained in GIFs"></a><a href="https://dev.to/hem/oauth-2-0-flows-explained-in-gifs-2o7a" target="_blank" rel="noopener">🔑 OAuth 2.0 flows explained in GIFs</a></h3><p>OAuth 每天都在用，聽過很多次，但是怎麼達成的呢？此篇文章用生動的 GIF 圖檔詳述 OAuth 2.0 的完整 Flow，，讓大家可以用更輕鬆的方式來了解這個比較複雜但卻相當重要的 Authorization 方式</p><h3 id="10-YAML-tips-for-people-who-hate-YAML"><a href="#10-YAML-tips-for-people-who-hate-YAML" class="headerlink" title="10 YAML tips for people who hate YAML"></a><a href="https://www.redhat.com/sysadmin/yaml-tips" target="_blank" rel="noopener">10 YAML tips for people who hate YAML</a></h3><p>身為 <strong>YAML 工程師</strong> 必須要知道的十件事情:</p><ol><li>讓文字編輯器可以閱讀 YAML 檔案格式</li><li>使用 Linter</li><li>真的很討厭 YAML 的話，可以試試看 pyyaml</li><li>嘗試把 YAML 轉換成別種格式來查找問題</li><li>很久沒用忘光了，可以拜訪一下 yaml.org</li><li>真的開始寫 YAML 之前，可以先來個 Pseudo-config</li><li>到底該用 Space 還是 Tab ?!</li><li>縮排的適當使用時機</li><li>把常用的 YAML 內容存下來，方便重複使用</li><li>YAML 不是萬能的！</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 37 期 - 不想離開沙發，只好自己寫一個電腦遙控器了</title>
      <link href="/2020/07/14/37-how-to-be-a-couch-potato/"/>
      <url>/2020/07/14/37-how-to-be-a-couch-potato/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="不想離開沙發，只好自己寫一個電腦遙控器了"><a href="#不想離開沙發，只好自己寫一個電腦遙控器了" class="headerlink" title="不想離開沙發，只好自己寫一個電腦遙控器了"></a><a href="https://link.medium.com/2moWegDw57" target="_blank" rel="noopener">不想離開沙發，只好自己寫一個電腦遙控器了</a></h3><p>這週的專欄沒有太高深的技術，只是想跟大家分享我最近在做的 Side Project：電腦遙控器。</p><p>因為我在家時很喜歡把電腦螢幕投影到電視上，不管是追劇還是上 Youtube 通通是躺在沙發上用電視看。因此我做了一個網頁版的電腦遙控器，用來命令我的電腦做暫停、快轉、調音量等等動作，讓我可以徹底當一個沙發馬鈴薯～</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Learn-to-Code-Challenge"><a href="#Learn-to-Code-Challenge" class="headerlink" title="Learn-to-Code Challenge"></a><a href="https://lawsonblake.com/learn-to-code-challenge/?ref=hackernoon.com" target="_blank" rel="noopener">Learn-to-Code Challenge</a></h3><p>很喜歡作者在文中點出在學習程式或時其他新技能時，要試著去克服自我懷疑，嘗試跳脫那些先入為主的概念，並且以一個小孩子的心態重新看待事物。簡單來說就是別為自己找藉口啦！什麼「程式好像很難」、「我沒有時間學習」、「這個我做不到」或是「我就爛！」，在這些藉口之前更重要的是自身到底為了學習做了什麼？</p><h3 id="How-To-Create-A-GitHub-Profile-README"><a href="#How-To-Create-A-GitHub-Profile-README" class="headerlink" title="How To Create A GitHub Profile README"></a><a href="https://dev.to/m0nica/how-to-create-a-github-profile-readme-1paj" target="_blank" rel="noopener">How To Create A GitHub Profile README</a></h3><p>你已經厭倦每次點到自己的 GitHub 首頁就是那些平淡無奇的專案列表嗎？你是不是想要讓別人進到你的 GitHub 就有耳目一心又怦然心動的初戀感覺？快來看看 GitHub 釋出的新功能！文章中有簡單的說明一下如何使用，也有貼出幾個非常 fancy 頁面讓各位參考！什麼？你說還不夠沒辦法激發靈感嗎？快往下滑到 Smalltown，小城哥也貼了一篇開源的 Repository，讓大家放上自己的個人頁面。有了開源 support 還不快設計（clone）一波嗎？</p><h3 id="Why-IDs-Can-be-Problematic-in-CSS"><a href="#Why-IDs-Can-be-Problematic-in-CSS" class="headerlink" title="Why IDs Can be Problematic in CSS"></a><a href="https://hackernoon.com/why-ids-can-be-problematic-in-css-gt103uh6" target="_blank" rel="noopener">Why IDs Can be Problematic in CSS</a></h3><p>為什麼我們不能在 CSS 裡面用 ID 選擇器？除了我們已經知道 ID 是唯一，而 Class 可重複之外，使用 ID 的問題在哪？在文章裡作者沒有直接告訴你「你不能用！」，而是說所有的工具像是 <code>!important</code>、ID、Class 都是 CSS 工具的一部分，它的好壞取決於怎麼去使用，因此為了避免錯誤的使用它們，好好的了解適當的使用時機是很重要的事情！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="30-天精通-RxJS"><a href="#30-天精通-RxJS" class="headerlink" title="30 天精通 RxJS"></a><a href="https://blog.jerry-hong.com/series/rxjs/thirty-days-RxJS-00" target="_blank" rel="noopener">30 天精通 RxJS</a></h3><p>近年來的前端應用越來越複雜，很多時候為了要處理一些複雜的事件流，常常會把扣寫得亂七八糟，而 RxJS 就是專門用來這類事件流的。這一系列由 Jerry 寫的 RxJS 30 天是我看過講 reactive 的概念講得最清楚的文章，想學 RxJS 就從這裡開始吧～</p><h3 id="A-Few-More-Reasons-Rust-Compiles-Slowly"><a href="#A-Few-More-Reasons-Rust-Compiles-Slowly" class="headerlink" title="A Few More Reasons Rust Compiles Slowly"></a><a href="https://pingcap.com/blog/reasons-rust-compiles-slowly" target="_blank" rel="noopener">A Few More Reasons Rust Compiles Slowly</a></h3><p>究竟為什麼 Rust 編譯起來這麼慢呢？這篇文章從 LLVM 及 compiler 架構的角度切入，告訴你究竟是哪些原因，導致 Rust 編譯所需的時間比其他語言多上好幾倍</p><h3 id="Choosing-a-Rust-web-framework-2020-edition"><a href="#Choosing-a-Rust-web-framework-2020-edition" class="headerlink" title="Choosing a Rust web framework, 2020 edition"></a><a href="https://www.lpalmieri.com/posts/2020-07-04-choosing-a-rust-web-framework-2020-edition/" target="_blank" rel="noopener">Choosing a Rust web framework, 2020 edition</a></h3><p>想要用 Rust 寫一個 Web 服務但不知道 Web 框架該怎麼選嗎？這篇文章從各個面向幫你比較了 <code>actix-web</code>、<code>rocket</code>、<code>tide</code> 跟 <code>warp</code> 這四個比較熱門的框架，不管你是想要好入門的、語法精簡的還是最多人用的，都可以在這邊找到</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="I-want-off-Mr-Golang’s-Wild-Ride"><a href="#I-want-off-Mr-Golang’s-Wild-Ride" class="headerlink" title="I want off Mr. Golang’s Wild Ride"></a><a href="https://fasterthanli.me/articles/i-want-off-mr-golangs-wild-ride" target="_blank" rel="noopener">I want off Mr. Golang’s Wild Ride</a></h3><p>這篇目測至少 1 萬字  左右，作者本來是 Go 的愛用者，而今年卻覺得 Go 不太好用。他用範例比較了 Shell Script / Go / Rust 寫起來會是怎麼樣，有什麼優缺點。如果你對 Rust / Go 有興趣，這篇是必讀之作。</p><h3 id="What-Time-Is-It-in-London"><a href="#What-Time-Is-It-in-London" class="headerlink" title="What Time Is It in London?"></a><a href="https://daringfireball.net/2020/05/what_time_is_it_in_london" target="_blank" rel="noopener">What Time Is It in London?</a></h3><p>如果你問 Siri, What time is it in London? 他會回答你多倫多的時間。你的雇主不會因為你說了一個錯誤答案就炒掉你。但公司永遠不會雇用一個沒有基本常識的員工。所有其他的服務，例如：Google、Alexa、DuckDuckGo…等等。你問他們 What time is it in London? 都會得到正確答案，只有 Siri 不會。</p><h3 id="New-grad-vs-senior-dev"><a href="#New-grad-vs-senior-dev" class="headerlink" title="New grad vs senior dev"></a><a href="https://ericlippert.com/2020/03/27/new-grad-vs-senior-dev/" target="_blank" rel="noopener">New grad vs senior dev</a></h3><p>畢業生 vs 資深工程師。本篇作者分享了自己在畢業時遇到資深工程師的反應，當時的他覺得資深工程師的回應是不禮貌的，他詳細敘述了問問題的過程，資深工程師會怎麼想，畢業生會怎麼想。最後，他用自己的經驗提醒自己，對新手多一點耐心。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="GitHub-Awesome-Profile-README-templates"><a href="#GitHub-Awesome-Profile-README-templates" class="headerlink" title="GitHub Awesome-Profile-README-templates"></a><a href="https://github.com/kautukkundan/Awesome-Profile-README-templates" target="_blank" rel="noopener">GitHub Awesome-Profile-README-templates</a></h3><p>前幾天 #GitHub 發布的新功能可以讓使用者建立跟自己名稱一樣的 Repository 來管理自己的 Profile, 結果馬上就有鄉民開一個 Repository 讓大家把自己的創意當成 Profile Template 放上去，這下子大家不用怕沒有靈感了 XD 趕緊一起來更新自己的 GitHub Profile 吧！</p><h3 id="Open-Distro-for-Elasticsearch-1-9-0-Release-Notes"><a href="#Open-Distro-for-Elasticsearch-1-9-0-Release-Notes" class="headerlink" title="Open Distro for Elasticsearch 1.9.0 Release Notes"></a><a href="https://github.com/opendistro-for-elasticsearch/opendistro-build/blob/master/release-notes/opendistro-for-elasticsearch-release-notes-1.9.0.md" target="_blank" rel="noopener">Open Distro for Elasticsearch 1.9.0 Release Notes</a></h3><p>WOW OpenDistro for ElasticSearch 1.9.0 總算出了，對應到官方 ElasticSearch 的版本是 7.8.0，多了不少新功能，譬如 Root Cause Analysis, 新的 Anomaly Detection Actions…等，不過自己最在意的其實沒有列在 Release Note 裡面，就是這版的 Dockerfile 總算不是自己去安裝 JDK 了，而是改成直接使用 ElasticSearch 官方綁定的版本，因此從 JDK 12 -&gt; 14，GC 模式變成使用 G1GC，對於效能上來說改善超級多的，本來使用 Docker Image 在運行的人一定要記得升級一下，會有本來是用爬的，突然跑起來的感覺 XD</p><h3 id="A-comprehensive-guide-to-managing-secrets-in-your-Terraform-code"><a href="#A-comprehensive-guide-to-managing-secrets-in-your-Terraform-code" class="headerlink" title="A comprehensive guide to managing secrets in your Terraform code"></a><a href="https://blog.gruntwork.io/a-comprehensive-guide-to-managing-secrets-in-your-terraform-code-1d586955ace1" target="_blank" rel="noopener">A comprehensive guide to managing secrets in your Terraform code</a></h3><p>Terraform 可以幫忙管理各種資源，但也因為如此，他會需要存取到各種 Credentials，那麼該如何處理這些 Createntials 會比較好呢？Gruntwork 提出了 3 種保管 Credential 的方法(但其實還有第 4 種就是… 可以試試看 Terraform Cloud XD)，並且都有附上詳細的實作內容，推薦有使用 Terraform 的人可以參考看看！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 36 期 - 我的 ElasticSearch 調校之旅</title>
      <link href="/2020/07/07/36-elastic-tuning/"/>
      <url>/2020/07/07/36-elastic-tuning/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="我的-ElasticSearch-調校之旅"><a href="#我的-ElasticSearch-調校之旅" class="headerlink" title="我的 ElasticSearch 調校之旅"></a><a href="https://medium.com/starbugs/%E6%88%91%E7%9A%84-elasticsearch-%E8%AA%BF%E6%A0%A1%E4%B9%8B%E6%97%85-89c380b5673c" target="_blank" rel="noopener">我的 ElasticSearch 調校之旅</a></h3><p>分享 MaiCoin SRE 團隊在久病成良醫的 Elastic Performance Tuning 過程中，如何在合理的系統資源下，以最佳維運方式的角度，來使用 Logstash + ElasticSearch 處理最多的 Log Event</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="How-to-Learn-a-New-Skill"><a href="#How-to-Learn-a-New-Skill" class="headerlink" title="How to Learn a New Skill"></a><a href="https://www.freecodecamp.org/news/how-to-learn-a-new-skill/" target="_blank" rel="noopener">How to Learn a New Skill</a></h3><p>想分享這篇是因為看到印象深刻的一句「Anyone can master a skill with 10,000 hours of practice.」。然後不曉得大家知不知道 steam 上的一款遊戲叫做「星露谷物語」，聽說那個遊戲是作者想要學習 C# 所做的練習作品，連續四年每天花費超過十小時的一萬小時以上練習的產物（<a href="https://buzzorange.com/techorange/2016/07/04/stardew-velley-ape/" target="_blank" rel="noopener">資料來源</a>），有人說「平庸和超凡的界線，就在於那一萬小時的練習」，想不到可以用英文看到這句話，太感人了 😭</p><h3 id="5-Things-To-Ask-About-the-Engineering-Team-to-Avoid-Taking-a-Job-From-Hell"><a href="#5-Things-To-Ask-About-the-Engineering-Team-to-Avoid-Taking-a-Job-From-Hell" class="headerlink" title="5 Things To Ask About the Engineering Team to Avoid Taking a Job From Hell"></a><a href="https://hackernoon.com/5-things-to-ask-about-the-engineering-team-to-avoid-taking-a-job-from-hell-h0453uj4" target="_blank" rel="noopener">5 Things To Ask About the Engineering Team to Avoid Taking a Job From Hell</a></h3><p>很喜歡這篇這個作者撰寫的風格，文章內容闡述了幾點團隊協作的風格，並且透過問與答讓你去發現你的團隊需要的是什麼，或是在團隊裡你想要得到的是什麼，是篇很適合思考的一篇文章。</p><h3 id="6-HTML-Bad-Coding-Habits"><a href="#6-HTML-Bad-Coding-Habits" class="headerlink" title="6 HTML Bad Coding Habits"></a><a href="https://dev.to/melnik909/6-html-bad-coding-habits-3ljj" target="_blank" rel="noopener">6 HTML Bad Coding Habits</a></h3><p>不要以為在 HTML 裡就不會有爛 Code 的風險，HTML 的每個標籤都代表著他自己的意思，瀏覽器也會針對不同的標籤去做特別的處理，作者列出了在 HTML 中 6 個不是很好的習慣，然後如果你看到第二點時感到疑惑，可以滑到下面看看第一則留言！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Kubernetes-ClusterIP-vs-NodePort-vs-LoadBalancer-Services-and-Ingress"><a href="#Kubernetes-ClusterIP-vs-NodePort-vs-LoadBalancer-Services-and-Ingress" class="headerlink" title="Kubernetes: ClusterIP vs NodePort vs LoadBalancer, Services, and Ingress"></a><a href="https://link.medium.com/DHokjaFaS7" target="_blank" rel="noopener">Kubernetes: ClusterIP vs NodePort vs LoadBalancer, Services, and Ingress</a></h3><p>Kubernetes 有四種跟網路有關的 service，分別是 ClusterIP、NodePort、LoadBalancer 跟 ExternalName，這篇文章用手繪圖的方式介紹這四種 service 分別有什麼功用，很適合像我這種剛入門 K8s 很多東西都搞不清楚的人來讀 XD</p><h3 id="Is-Deno-Secure-Fast-Lightweight-and-Better-than-Node"><a href="#Is-Deno-Secure-Fast-Lightweight-and-Better-than-Node" class="headerlink" title="Is Deno Secure, Fast, Lightweight, and Better than Node?"></a><a href="https://link.medium.com/QFeLTrObS7" target="_blank" rel="noopener">Is Deno Secure, Fast, Lightweight, and Better than Node?</a></h3><p>自從 Deno 發佈第一個版本之後，到處都可以看到勸人不要再學 Node，直接改用 Deno 的言論。但 Deno 真的又安全、又快速而且各方面都比 Node 好嗎？這篇文章我覺得滿客觀的，如果好奇 Deno 跟 Node 之間到底誰輸誰贏的話就快點進來看看吧！</p><h3 id="Git-Concepts-I-Wish-I-Knew-Years-Ago"><a href="#Git-Concepts-I-Wish-I-Knew-Years-Ago" class="headerlink" title="Git Concepts I Wish I Knew Years Ago"></a><a href="https://dev.to/g_abud/advanced-git-reference-1o9j" target="_blank" rel="noopener">Git Concepts I Wish I Knew Years Ago</a></h3><p>雖然這篇標題寫的是 Git Concepts，但他其實是在介紹一些比較少用到的 git 指令 XD，像比較新的 <code>git switch</code> 跟 <code>git restore</code> 我之前都沒有聽過，<code>.gitattributes</code> 這個檔案雖然有聽過但也從來沒有去研究怎麼用。看完這篇讓我不禁感嘆東西真的學都學不完，用 Git 這麼多年了竟然還有很多技巧不會用</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="How-I-passed-the-Solutions-Architect-Professional-with-mostly-free-content"><a href="#How-I-passed-the-Solutions-Architect-Professional-with-mostly-free-content" class="headerlink" title="How I passed the Solutions Architect Professional with mostly free content"></a><a href="https://dev.to/aws-heroes/how-i-passed-the-solutions-architect-professional-with-mostly-free-content-ine" target="_blank" rel="noopener">How I passed the Solutions Architect Professional with mostly free content</a></h3><p>文中作者依靠免費資源來考取 AWS Solutions Architect Professional 真是令人驚奇呀. 來看看他怎麼做到的，check it out!</p><h3 id="Mysql2-Ruby-Gem-for-AWS-Lambda"><a href="#Mysql2-Ruby-Gem-for-AWS-Lambda" class="headerlink" title="Mysql2 Ruby Gem for AWS Lambda"></a><a href="https://dev.to/aws-heroes/mysql2-ruby-gem-for-aws-lambda-koj" target="_blank" rel="noopener">Mysql2 Ruby Gem for AWS Lambda</a></h3><p>Mysql 出了一個給 AWS Lambda 專用的 Gem，縮小了，並且可以支援各種連線模式。這可能是要支援 Auroa API 版本的一個更方便使用的方案？不確定，先讓子彈飛一會兒。</p><h3 id="Important-CSS-Concepts-To-Learn"><a href="#Important-CSS-Concepts-To-Learn" class="headerlink" title="Important CSS Concepts To Learn"></a><a href="https://dev.to/frontenddude/important-css-concepts-to-learn-57j3" target="_blank" rel="noopener">Important CSS Concepts To Learn</a></h3><p>一些重要的 CSS 觀念，寫得很細，適合新手觀看，和老手複習。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="The-Current-State-of-Kubernetes-Threat-Modelling"><a href="#The-Current-State-of-Kubernetes-Threat-Modelling" class="headerlink" title="The Current State of Kubernetes Threat Modelling"></a><a href="https://www.marcolancini.it/2020/blog-kubernetes-threat-modelling/" target="_blank" rel="noopener">The Current State of Kubernetes Threat Modelling</a></h3><p>Kubernetes 主宰雲端市場已經是無庸置疑的一件事實了，越多人使用的技術對於攻擊者來說就越有研究的價值性，這篇文章嘗試從 NCC, CNCF 和 Kubernetes Security Audit Working Group 來分析 Kubernetes 的威脅模型總共有哪幾種，對於資訊安全日益重要的今天是一篇滿值得參考的文章</p><h3 id="10-VSCode-extensions-that-make-your-life-easier-2020"><a href="#10-VSCode-extensions-that-make-your-life-easier-2020" class="headerlink" title="10 VSCode extensions that make your life easier [2020]"></a><a href="https://dev.to/amir/10-vscode-extensions-that-make-your-life-easier-2020-114h" target="_blank" rel="noopener">10 VSCode extensions that make your life easier [2020]</a></h3><p>每過一段時間都會出現的 VSCode Extension 推薦文章XD 這次列出作者覺得 2020 年最推薦的十個 VSCode Extension，有在使用 VSCode 的人可以參考看看有沒有什麼是自己有缺的XD</p><h3 id="17-NO-CODE-TOOLS-FOR-EACH-STAGE-OF-APPLICATION-DEVELOPMENT-INFOGRAPHIC"><a href="#17-NO-CODE-TOOLS-FOR-EACH-STAGE-OF-APPLICATION-DEVELOPMENT-INFOGRAPHIC" class="headerlink" title="17 NO-CODE TOOLS FOR EACH STAGE OF APPLICATION DEVELOPMENT [INFOGRAPHIC]"></a><a href="https://www.testcraft.io/no-code-tools-application-development/" target="_blank" rel="noopener">17 NO-CODE TOOLS FOR EACH STAGE OF APPLICATION DEVELOPMENT [INFOGRAPHIC]</a></h3><p>不曉得為什麼最近好像又吹起 No Code 開發的風潮/議題，這篇文章介紹了一些想要把一個新創服務端出來，但是卻不需要寫程式的工具箱，讓不會寫程式的人也可以把想法透過這些工具組合出一個有模有樣的服務來</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 35 期 - 端午節後體重奔向天際，極速動腦消耗熱量</title>
      <link href="/2020/06/30/35-I-should-diet-after-dragon-boat-festival/"/>
      <url>/2020/06/30/35-I-should-diet-after-dragon-boat-festival/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-殺手級-IDE-—-Lens"><a href="#Kubernetes-殺手級-IDE-—-Lens" class="headerlink" title="Kubernetes 殺手級 IDE — Lens"></a><a href="https://medium.com/starbugs/kubernetes-%E6%AE%BA%E6%89%8B%E7%B4%9A-ide-lens-a43af6a481b0" target="_blank" rel="noopener">Kubernetes 殺手級 IDE — Lens</a></h3><p>以往我們在管理 Kubernetes 集群的時候，需要大量的命令列操作，需要去四處找尋需要的資訊，這些功能現在 Lens 全部幫你整合進去了。它能夠讓你快速的瀏覽你的 K8S 集群狀況，並且即時反應 K8S 集群的狀態讓你可以做相對應的反應。我們就來看看 Lens 有哪些殺手級的功能吧！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Mythbusting-Competitive-Programming-You-don’t-need-to-learn-it"><a href="#Mythbusting-Competitive-Programming-You-don’t-need-to-learn-it" class="headerlink" title="Mythbusting Competitive Programming - You don’t need to learn it"></a><a href="https://www.freecodecamp.org/news/mythbusting-competitive-programming/" target="_blank" rel="noopener">Mythbusting Competitive Programming - You don’t need to learn it</a></h3><p>Competitive Programming 是指在短時間內用演算法解題的過程，許多公司將 Competitive Programming 給放入面試的環節中，有許多人因為沒辦法通過這項考驗而喪失資格，但是他們真的沒辦法寫出良好的程式或是優秀的功能嗎？像文章中說的，世界上某些最好的介面不可能是在 30 分鐘內設計出來的，那那些公司中的人資又怎麼能在 30 分鐘內斷定你的價值呢？</p><h3 id="3-cool-CSS-tricks-to-impress-your-friends-at-parties"><a href="#3-cool-CSS-tricks-to-impress-your-friends-at-parties" class="headerlink" title="3 cool CSS tricks to impress your friends at parties"></a><a href="https://dev.to/vtrpldn/3-cool-css-tricks-to-impress-your-friends-at-parties-k19" target="_blank" rel="noopener">3 cool CSS tricks to impress your friends at parties</a></h3><p>這篇文章運用了 CSS 的特別技巧！尤其是最後的「No JS, show on click」，自從把這篇文章裡的內容都學起來後，每次考試都考一百分！就連走在路上看見喜歡的女生，直接拿出電腦 Show 一波，Line 就輕易到手。</p><h3 id="Understand-Memoization-in-5-Minutes"><a href="#Understand-Memoization-in-5-Minutes" class="headerlink" title="Understand Memoization in 5 Minutes"></a><a href="https://dev.to/nas5w/an-introduction-to-memoization-59o" target="_blank" rel="noopener">Understand Memoization in 5 Minutes</a></h3><p>這篇文章看完會有哦～的感覺，但簡單來說就是利用另一個 function 去做判斷，如果沒執行過就執行，有執行過的話就把執行結果保存到某個物件中，之後在執行時的參數如果都一樣，那就直接丟出之前執行過的結果囉！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Avoiding-CSRF-Attacks-with-API-Design"><a href="#Avoiding-CSRF-Attacks-with-API-Design" class="headerlink" title="Avoiding CSRF Attacks with API Design"></a><a href="https://www.thedreaming.org/2020/05/26/avoid-csrf-attacks-with-api-design/" target="_blank" rel="noopener">Avoiding CSRF Attacks with API Design</a></h3><p>CSRF 是很常見的 Web 攻擊手法，他可以利用後端伺服器對瀏覽器的信任進行攻擊。而防止 CSRF 攻擊也有很多種方式，包括使用正確的 HTTP method 跟 CSRF token 等等，身為 Web 開發者，如果忘記了可以趁這機會惡補一下</p><h3 id="為了瞭解原理，那就來實作一個簡易-Virtual-DOM-吧！"><a href="#為了瞭解原理，那就來實作一個簡易-Virtual-DOM-吧！" class="headerlink" title="為了瞭解原理，那就來實作一個簡易 Virtual DOM 吧！"></a><a href="https://link.medium.com/1meWudFeG7" target="_blank" rel="noopener">為了瞭解原理，那就來實作一個簡易 Virtual DOM 吧！</a></h3><p>前端兩大框架 React 跟 Vue 為了效能都有用到Virtual DOM 的技術，想知道 Virtual DOM 內部是怎麼運作的嗎？那就自己實作一個吧！如果真的不想做的話也可以直接看文末的 demo XD，應該就會有點感覺了</p><h3 id="Tips-for-Faster-Rust-Compile-Times"><a href="#Tips-for-Faster-Rust-Compile-Times" class="headerlink" title="Tips for Faster Rust Compile Times"></a><a href="https://endler.dev/2020/rust-compile-times/" target="_blank" rel="noopener">Tips for Faster Rust Compile Times</a></h3><p>眾所皆知，Rust 編譯速度真的很慢很慢，而這篇文章提供了一些可以讓速度變快的方法。如果只是要看看語法有沒有寫錯，那可以試試看 <code>cargo check</code> 而不需要 <code>cargo build</code>，若是不需要 serde 這麼多功能，也可以改用 miniserde 或是 nanoserde，希望在看完這篇文章後大家寫 Rust 能寫得更開心XD，不然光是等編譯就會等到懷疑人生</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Get-Paid-Writing-Articles-for-These-14-Companies-100-Per-Article"><a href="#Get-Paid-Writing-Articles-for-These-14-Companies-100-Per-Article" class="headerlink" title="Get Paid Writing Articles for These 14 Companies ($100+ Per Article)"></a><a href="https://dev.to/hyvortalk/10-companies-that-you-can-write-for-and-get-paid-as-a-developer-100-per-article-4dd7" target="_blank" rel="noopener">Get Paid Writing Articles for These 14 Companies ($100+ Per Article)</a></h3><p>這邊有 14 家公司如果你寫的文章被刊登上去你是可以賺稿費的，大家趕快來鍛鍊自己的寫作能力吧！在開始寫作前記得先看看每家公司的寫作指南，在重複刊登前先問問你要投稿的公司。這篇文章很完整的提供整個思路。</p><h3 id="Why-Writing-is-Important-for-Your-Developer-Career"><a href="#Why-Writing-is-Important-for-Your-Developer-Career" class="headerlink" title="Why Writing is Important for Your Developer Career"></a><a href="https://dev.to/steelwolf180/why-writing-is-important-for-your-developer-career-2of8" target="_blank" rel="noopener">Why Writing is Important for Your Developer Career</a></h3><p>為什麼寫作對你的工程師生涯非常重要？寫作能夠讓你的思考更清晰，更容易的溝通，並在社群上產生漣漪效應。</p><h3 id="How-to-do-technical-blogging"><a href="#How-to-do-technical-blogging" class="headerlink" title="How to do technical blogging"></a><a href="https://dev.to/yelluw/how-to-do-technical-blogging" target="_blank" rel="noopener">How to do technical blogging</a></h3><p>如何做技術寫作？這篇文章提供了一個技術寫作的架構，從標題，摘要，需求，介紹，多步驟解釋，範例，小秘訣，總結。架構看起來挺一般的，Tips 部分倒是提供了許多不錯的建議，KISS 原則，多讀文件，使用圖片來分解文字，不要將原始碼放在圖片內。用平淡的方式取代掉幽默的表達方式，因為讀者不一定懂你的幽默。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="AWS-IAM-Authenticator"><a href="#AWS-IAM-Authenticator" class="headerlink" title="AWS IAM Authenticator"></a><a href="https://github.com/kubernetes-sigs/aws-iam-authenticator" target="_blank" rel="noopener">AWS IAM Authenticator</a></h3><p>第一次使用 AWS EKS 感到最卡的就是那份用來管理 IAM Mapping K8S RBAC 的 Kubernetes Auth ConfigMap，因為要透過編輯它才能夠讓既有的 AWS IAM User/Role 跟 K8S 裡面的 RBAC 權限管理整合在一起，平心而論，這樣的做法在自動化和管理上並不漂亮；而這個功能其實有開源出來叫做 aws-iam-authenticator，最新版 0.5.1 已經可以使用 CRD 來管理 IAM User/Role Identity Mapping 了！這兩天測試了一下還滿好用的，猜測 EKS 在不久的將來可能也會支援，大家可以拭目以待！</p><h3 id="HashiCorp-推出滿滿的大平台-HCP"><a href="#HashiCorp-推出滿滿的大平台-HCP" class="headerlink" title="HashiCorp 推出滿滿的大平台 HCP"></a><a href="https://www.hashicorp.com/blog/announcing-cloud-platform/" target="_blank" rel="noopener">HashiCorp 推出滿滿的大平台 HCP</a></h3><p>體恤大家自己在雲端平台裡面架設和管理 Consul, Vault Cluster 要耗費很多的精神跟時間，所以 HashiCorp 推出 HCP (HashiCorp Cloud Platform) 來幫助使用者在任意的 Cloud Provider 中自動完成這些事情，目前第一版先推出的為 Consul on AWS Beta 版本，下一個會是 Vault on AWS，雖然只先點出了兩個，但官方的展望是希望未來任何的 Cloud Provider 都可以使用這個平台來幫忙託管 HashiCorp 在各大 Cloud Provider 運行的服務；除了 HCP 之外，<a href="https://www.hashicorp.com/blog/announcing-the-terraform-0-13-beta/" target="_blank" rel="noopener"><strong>Terraform 0.13</strong></a> 跟 <a href="https://www.hashicorp.com/blog/announcing-hashicorp-nomad-0-12-beta/" target="_blank" rel="noopener"><strong>Nomad 0.12</strong></a> 都推出了 Beta 版本，Terraform 更新的重點在於 Module 的 count, depends_on 和 for_each 功能新增，還有跟 Provider 比較相關的改善功能；而 Nomad 企業版支援了多個 Cluster 的部署功能，OSS 版本支援新的 Schedule 機制，還有 CNI 插件系統讓使用者可以選擇自己想要的 Container Network 組態…等</p><h3 id="The-Cool-top-Alternative-bashtop"><a href="#The-Cool-top-Alternative-bashtop" class="headerlink" title="The Cool top Alternative- bashtop"></a><a href="https://haydenjames.io/bashtop/" target="_blank" rel="noopener">The <strong>Cool</strong> top Alternative- bashtop</a></h3><p>用膩了在 Linux 系統裡面的 Top 工具了嗎？！這邊介紹一個完全用 Bash 寫成的替代工具 <a href="https://github.com/aristocratos/bashtop" target="_blank" rel="noopener">bashtop</a>，顯示出來的整個介面絢麗很多，不像預設的 Top 黑黑白白的那麼單調，而且除了 CPU 跟 Loading 之外，連 Memory 跟 Disk 都顯示在同一個頁面裡，讓系統管理員不用再另外下 <code>df -ah</code> 跟 <code>free -h</code> XD</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 34 期 - 大家 OK，我先試之超 Q 的 Deno 初體驗 🦕</title>
      <link href="/2020/06/23/34-let-me-try-Deno-first/"/>
      <url>/2020/06/23/34-let-me-try-Deno-first/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Side-Project-從無到有-大家-OK，我先試之超-Q-的-Deno-初體驗-🦕"><a href="#Side-Project-從無到有-大家-OK，我先試之超-Q-的-Deno-初體驗-🦕" class="headerlink" title="Side Project 從無到有-大家 OK，我先試之超 Q 的 Deno 初體驗 🦕"></a><a href="https://medium.com/starbugs/side-project-%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89-%E5%A4%A7%E5%AE%B6-ok-%E6%88%91%E5%85%88%E8%A9%A6%E4%B9%8B%E8%B6%85-q-%E7%9A%84-deno-%E5%88%9D%E9%AB%94%E9%A9%97-b1359ab51892" target="_blank" rel="noopener">Side Project 從無到有-大家 OK，我先試之超 Q 的 Deno 初體驗 🦕</a></h3><p>Hi！大家好，我是神 Q 超人。不知道大家記不記得上禮拜我分享了 這篇文章，然後我就說最近可能會做出第六個 Joke of the Day，雖然我挖了很多坑還沒填，但這次不就直接來了嗎 🙌！不過只是做出來真的太無聊了，想說再尬一下最近很火熱的 Deno，希望和大家一起體會 Deno 和 Node 有什麼不同！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Do-I-need-to-code-in-my-free-time-to-be-a-good-developer"><a href="#Do-I-need-to-code-in-my-free-time-to-be-a-good-developer" class="headerlink" title="Do I need to code in my free time to be a good developer?"></a><a href="https://dev.to/chechenev/do-i-need-to-code-in-my-free-time-to-be-a-good-developer-10h9" target="_blank" rel="noopener">Do I need to code in my free time to be a good developer?</a></h3><p>持續學習是工程師絕對需要的特質之一，你是否為自己做了「我要變得更好，我要繼續學習！我不能因為下班停止下來！」的設定呢？也許很多篇文章都告訴你你該這麼做，可是每個人都有自己的生活，都需要從生活中找到平衡，甚至是不需要為了自己沒有在下班時間學習而感到罪惡，因為你一天當中的三分之一已經投入在程式中了。你是對程式有熱情所以才追逐他，程式並不是讓你變得痛苦的東西。</p><p>很喜歡作者最後一句話：「Do what you love and what you are passionate about! And don’t let anyone make you feel bad about it.」</p><h3 id="Top-5-Websites-For-Design-Inspiration-Opinion"><a href="#Top-5-Websites-For-Design-Inspiration-Opinion" class="headerlink" title="Top 5 Websites For Design Inspiration [Opinion]"></a><a href="https://dev.to/memahesh/top-5-websites-for-design-inspiration-opinion-4b11" target="_blank" rel="noopener">Top 5 Websites For Design Inspiration [Opinion]</a></h3><p>可以啦！自認為沒有美感的前端工程師都看過來，還在因為「哦！畫面不要太醜就好了！」這種話而感到困擾嗎？作者提供了五個充滿許多好看頁面的網站，讓你想選擇多漂亮就多漂亮，不要猶豫，通通加進我的最愛就對了！</p><h3 id="你知道空白网页的颜色是什么吗？"><a href="#你知道空白网页的颜色是什么吗？" class="headerlink" title="你知道空白网页的颜色是什么吗？"></a><a href="https://juejin.im/post/5eed946ef265da02ce217d3a" target="_blank" rel="noopener">你知道空白网页的颜色是什么吗？</a></h3><p>意識下就直接回答是白色了，這算是超級科普文，不知道不會怎樣，但知道也不會變得不一樣 😂！至於為什麼分享這篇文章嘛…因為我覺得滿有趣的，而且看完後就能馬上去問朋友一樣的問題，然後很裝 B 地告訴對方你！答！錯！惹！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="为什么键盘以-QWER-排列，而不是-ABCD？"><a href="#为什么键盘以-QWER-排列，而不是-ABCD？" class="headerlink" title="为什么键盘以 QWER 排列，而不是 ABCD？"></a><a href="https://mp.weixin.qq.com/s/7TTvFK-bfBxgvXWoFD1_sQ" target="_blank" rel="noopener">为什么键盘以 QWER 排列，而不是 ABCD？</a></h3><p>為什麼鍵盤的最左上方是從 QWER 開始而不是 ABCD 呢？這篇跟技術沒什麼關係，但鍵盤畢竟是工程師不可或缺的工具之一，今天就一起來看看這段有趣的歷史故事吧～</p><h3 id="Terraform-Code-Quality"><a href="#Terraform-Code-Quality" class="headerlink" title="Terraform Code Quality"></a><a href="https://link.medium.com/s6qewByXu7" target="_blank" rel="noopener">Terraform Code Quality</a></h3><p>隨著用 Terraform 的人越來越多，怎麼把 TF 的設定檔寫好也越來越重要。這篇文章提供了一些工具跟方法教你怎麼寫出好的 TF 設定，雖然文有點長，但有在用 TF 的話很建議讀讀這篇。</p><h3 id="Deep-dive-into-Docker-architecture"><a href="#Deep-dive-into-Docker-architecture" class="headerlink" title="Deep dive into Docker architecture"></a><a href="https://link.medium.com/gHaBwsdYu7" target="_blank" rel="noopener">Deep dive into Docker architecture</a></h3><p>對 Docker 原理有興趣的朋友們，這篇文章帶你由淺入深慢慢了解 docker engine 。首先是講 docker daemon 跟 cli 是怎麼溝通的，再來是 docker 用了哪些 Linux kernel 的功能，最後還有補充一下 Dockerfile 是怎麼被讀進去的。雖然不知道這些還是可以把 docker 用得很好，但身為工程師還要有追根究底的精神對吧！</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="The-Top-12-YouTube-Channels-For-Programmers"><a href="#The-Top-12-YouTube-Channels-For-Programmers" class="headerlink" title="The Top 12 YouTube Channels For Programmers"></a><a href="https://codeslaw.com/blog/the-top-12-youtube-channels-for-programmers-1066535" target="_blank" rel="noopener">The Top 12 YouTube Channels For Programmers</a></h3><p> 這週來介紹程式相關的 youtube 頻道。挑這篇文中的三個來介紹。Hack，一個惡搞各種東西 youtube 頻道，突破你對技術的想像力。Google Developers，google 官方的 youtube 頻道，裡面有關於 google 的產品，google 工程師的分享，與 google 工程師的咖啡時間。DevTips，提供一些開發的技巧，幫助你的寫程式技巧。</p><h3 id="27-Programming-Youtube-channels-you-should-know"><a href="#27-Programming-Youtube-channels-you-should-know" class="headerlink" title="27 Programming Youtube channels you should know"></a><a href="https://dev.to/jasterix/27-programming-youtube-channels-you-should-know-4c39" target="_blank" rel="noopener">27 Programming Youtube channels you should know</a></h3><p>翻譯與摘錄：你可以從 Youtube 上學習任何的東西。基於 Brad Traversy 推薦的 22 個程式 youtube 頻道，這篇文章額外推薦了五個不在清單上很棒的頻道。分別是 Traversy Media 全面的覆蓋了幾乎所有的程式語言的主題。Web Dev Simplified 較小的 youtube 頻道，但是麻雀雖小五臟俱全。Programming with Mosh ，非常的直覺且容易聽懂。All Things JavaScript，另一個小 youtube 頻道，每週三放上新的影片。Crash Computer Science，這不是一個常見的清單上的頻道，談論著早期的計算機理論，讓我深深著迷。</p><h2 id="Top-Front-End-Development-YouTube-Channels"><a href="#Top-Front-End-Development-YouTube-Channels" class="headerlink" title="Top Front-End Development YouTube Channels"></a><a href="https://dev.to/gregfletcher/top-front-end-development-youtube-channels-4ihg" target="_blank" rel="noopener">Top Front-End Development YouTube Channels</a></h2><p>有很多的 coding 相關頻道在學前端，但是實在是太多不知道如何開始，這是一個不會讓你疲於奔命的 youtube 推薦清單。The Coding Traind，Daniel Shiffman 從來不會在娛樂觀眾這一方面失敗，他所採用的方法是有趣且可以達到的。我們可以在他的頻道中找到動畫與一些機器學習。Low Level Javascript，youtube 頻道中的寶石，拆解和用優雅的程式碼解釋一系列的主題。這些東西全部都是低階的東西，但你看到仍然會感覺到不知所措。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="7-Python-Mistakes-You-Don’t-Want-to-Make"><a href="#7-Python-Mistakes-You-Don’t-Want-to-Make" class="headerlink" title="7 Python Mistakes You Don’t Want to Make"></a><a href="https://towardsdatascience.com/7-python-mistakes-you-dont-want-to-make-77ac068c847" target="_blank" rel="noopener">7 Python Mistakes You Don’t Want to Make</a></h3><p>在撰寫程式的時候，總是會遇到那種表面上看起來很簡單，但卻必須要花幾個小時甚至一兩天才能找出來的問題，此篇文章列出七個 Python 開發者絕對不會想要犯下的錯誤，避免寶貴的時間被 Bug 吃掉</p><h3 id="Terraform-Code-Quality-1"><a href="#Terraform-Code-Quality-1" class="headerlink" title="Terraform Code Quality"></a><a href="https://cloudskiff.com/terraform-code-quality/" target="_blank" rel="noopener">Terraform Code Quality</a></h3><p>此篇文章是從倫敦 CNCF Meetup 翻譯而來，從 Terraform 基礎開始提起要如何提升 Terraform 的程式品質，每一個小細節都不放過，不管身為 Terraform 的初學者或是老司機，看完之後都還是可以學到不少的東西</p><h3 id="Container-technologies-at-Coinbase"><a href="#Container-technologies-at-Coinbase" class="headerlink" title="Container technologies at Coinbase"></a><a href="https://blog.coinbase.com/container-technologies-at-coinbase-d4ae118dcb6c" target="_blank" rel="noopener">Container technologies at Coinbase</a></h3><p>Coinbase 在這篇文章中描述要如何克服使用 Container 技術所帶來的一系列挑戰，避免生產環境出現故障，內容從 Container 技術的歷史開始介紹起，一步一步帶著讀者了解 Container 技術的前因後果，最後當然帶到了 Kubernetes 所面臨到的問題，還有 Knative, Fargate, Cloud Run 想要解決的事情</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 33 期 - 今天可以打羽球嗎？問問決策樹吧！</title>
      <link href="/2020/06/16/33-can-I-play-badminton-today/"/>
      <url>/2020/06/16/33-can-I-play-badminton-today/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="以數據為師，用決策樹模型判斷今天能不能打羽球"><a href="#以數據為師，用決策樹模型判斷今天能不能打羽球" class="headerlink" title="以數據為師，用決策樹模型判斷今天能不能打羽球"></a><a href="https://medium.com/starbugs/decision-tree-can-i-play-badminton-today-1a39cc03850b" target="_blank" rel="noopener">以數據為師，用決策樹模型判斷今天能不能打羽球</a></h3><p>大家好，我是 Larry，這週的專欄要跟大家分享我最近在做的 Side Project，是個用機器學習來判斷能不能打羽球的小應用。文章內容老少咸宜，不管你是對資料科學有興趣的前端工程師，或是壓根沒聽過機器學習的路人甲，都可以一起來看看～</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="The-Best-Code-Interview-Prep-Platforms-in-2020"><a href="#The-Best-Code-Interview-Prep-Platforms-in-2020" class="headerlink" title="The Best Code Interview Prep Platforms in 2020"></a><a href="https://www.freecodecamp.org/news/the-best-code-interview-prep-platforms-in-2020/" target="_blank" rel="noopener">The Best Code Interview Prep Platforms in 2020</a></h3><p>資訊領域的業界發展超級快速，以前可能只要學好資料結構或演算法就能找到一份好工作，但是現在業界會更希望每個面試者都還能擁有實務經驗，對於不斷改變的環境，面試難度也跟著增加！面對這些考驗，文章中推薦幾個可以讓你更容易準備面試的網站！</p><h3 id="How-To-Write-Unit-Tests-Elegantly"><a href="#How-To-Write-Unit-Tests-Elegantly" class="headerlink" title="How To Write Unit Tests, Elegantly"></a><a href="https://hackernoon.com/how-to-write-unit-tests-elegantly-vd3w3wo7" target="_blank" rel="noopener">How To Write Unit Tests, Elegantly</a></h3><p>如果你不想要為你的產品寫下單元測試，那你的客戶也不會想要為它測試。沒錯！誰會去試一個沒有保障的東西？尤其保障是由開發者自己或是根本就不了解產品開發的業務口中說出來的。寫下單元測試是使你的產品變得成熟的關鍵，也能夠減少將來在開發時出錯的機率。</p><h3 id="22-Things-You-Should-Give-Up-If-You-Want-To-Be-A-Successful-Developer"><a href="#22-Things-You-Should-Give-Up-If-You-Want-To-Be-A-Successful-Developer" class="headerlink" title="22 Things You Should Give Up If You Want To Be A Successful Developer"></a><a href="https://dev.to/iamdidev/22-things-you-should-give-up-if-you-want-to-be-a-successful-developer-2f0o" target="_blank" rel="noopener">22 Things You Should Give Up If You Want To Be A Successful Developer</a></h3><p>點進這篇突然有一種在看工程師版本的心靈雞湯 😂，但還是很建議大家讀一下，說不定能意外看到自己還緊緊握著的東西？雖然 22 項有點多，不過每項都是一句名言加上一些解釋，比起那些面試題目，其實看完還是滿快的，哈哈哈哈哈！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="決策樹-Decision-Tree-以及隨機森林-Random-Forest-介紹"><a href="#決策樹-Decision-Tree-以及隨機森林-Random-Forest-介紹" class="headerlink" title="決策樹(Decision Tree)以及隨機森林(Random Forest)介紹"></a><a href="https://link.medium.com/9Z9iXTQHl7" target="_blank" rel="noopener">決策樹(Decision Tree)以及隨機森林(Random Forest)介紹</a></h3><p>如果看完這週的專欄覺得實在太簡單還意猶未盡的話，可以來看看這篇對於決策樹原理的介紹。文中有簡單提到決策樹是怎麼選擇分割條件，在講完決策樹之後也有簡單介紹一下隨機森林演算法。</p><h3 id="資料視覺化-Matplotlib-Seaborn-Plotly"><a href="#資料視覺化-Matplotlib-Seaborn-Plotly" class="headerlink" title="資料視覺化(Matplotlib, Seaborn, Plotly)"></a><a href="https://link.medium.com/9bkaeUXHl7" target="_blank" rel="noopener">資料視覺化(Matplotlib, Seaborn, Plotly)</a></h3><p>將資料視覺化除了可以讓你的研究結果看起來更炫炮之外，在分析的過程中也扮演了很重要的角色。這篇文章介紹了 Matplotlib、Seaborn、Plotly 這三套 Python 的資料視覺化工具，也對他們各自的優缺點進行了分析</p><h3 id="那些做-Data-Science-的心酸血淚分享"><a href="#那些做-Data-Science-的心酸血淚分享" class="headerlink" title="那些做 Data Science 的心酸血淚分享"></a><a href="https://medium.com/@benbenbang/%E9%82%A3%E4%BA%9B%E5%81%9Adata-science%E7%9A%84%E5%BF%83%E9%85%B8%E8%A1%80%E6%B7%9A%E5%88%86%E4%BA%AB-a86c423216fb" target="_blank" rel="noopener">那些做 Data Science 的心酸血淚分享</a></h3><p>隨著這波 AI 潮流的興起，資料科學家 (Data Scientist) 也逐漸成為熱門的工作選項，但當 Data Scientist 真的這麼好嗎？如果真的想成為 Data Scientist 又該從哪裡開始呢？一起來看看這篇心酸血淚的分享吧</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Junior-Developers-Checklist-for-Landing-a-Remote-Job"><a href="#Junior-Developers-Checklist-for-Landing-a-Remote-Job" class="headerlink" title="Junior Developers Checklist for Landing a Remote Job"></a><a href="https://dev.to/ugglr/junior-developers-checklist-for-landing-a-remote-job-2ldb" target="_blank" rel="noopener">Junior Developers Checklist for Landing a Remote Job</a></h3><p>如何從初階軟體工程師轉變成一個遠端工作者。作者從硬體工程師轉直成軟體工程師，辭掉了他的工作，從 youtube 自學，經過了九個月的自學後，他得到了兩個面試機會。並且他得到了完全遠端的工作。作者整理了一份清單，他費時一年半整理出來了一份，成為遠端工作者的清單。</p><h3 id="The-Realistic-Guide-to-Remote-Work"><a href="#The-Realistic-Guide-to-Remote-Work" class="headerlink" title="The Realistic Guide to Remote Work"></a><a href="https://dev.to/stephsmithio/the-guide-to-remote-work-that-isnt-trying-to-sell-you-anything-498m" target="_blank" rel="noopener">The Realistic Guide to Remote Work</a></h3><p>Remote 工作不是你最終的目標，我摘入文中比較吸引我的觀點來討論。邊旅行邊工作可以讓你得到更多的刺激，到處旅遊會讓你新的東西讓你的生活更豐富。同時旅行中你的理念也會慢慢改變，不僅僅在文化上，也包含你的思維方式，工作方式與目標的設定。在辦公室理你的可以針對一個小盒子中思考，但是 remote 可以擴大你的眼界。最後作者放慢了旅途，將注意力回到工作上，最大程度的發揮影響，並且消除浪費。</p><h3 id="A-New-Age-Finding-Non-Tech-Remote-Jobs"><a href="#A-New-Age-Finding-Non-Tech-Remote-Jobs" class="headerlink" title="A New Age: Finding Non-Tech Remote Jobs"></a><a href="https://dev.to/stephsmithio/a-new-age-finding-non-tech-remote-jobs-1fgo" target="_blank" rel="noopener">A New Age: Finding Non-Tech Remote Jobs</a></h3><p>現在非技術型工作也出現了越來越多的 remote job，文中大部分的職缺還是管理值比較，簡單的下個評論，如果你是夠優秀的人才，Remote 工作機會還是會為你而開。不過文中的顧客成功主管，還有行銷主管，我覺得面對面還是有顯著效果。工程師這種需要也很適合獨立作業的工作，還是會是主流。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Terraform-VSCode-Extension-總算可以裝回來了-XD"><a href="#Terraform-VSCode-Extension-總算可以裝回來了-XD" class="headerlink" title="Terraform VSCode Extension 總算可以裝回來了 XD"></a><a href="https://medium.com/@smalltown/hashicorp-terraform-visual-studio-code-extension-%E7%B8%BD%E7%AE%97%E5%8F%AF%E4%BB%A5%E8%A3%9D%E5%9B%9E%E4%BE%86%E4%BA%86xd-86ba868e4a0b" target="_blank" rel="noopener">Terraform VSCode Extension 總算可以裝回來了 XD</a></h3><p>歷經了很長的一段時間 (感覺有一年了吧)，在社群很多人的努力之下 VSCode Terraform Extension 總算支援 0.12，不過我看升級上去的人都遇到不少問題 😭 而就在不久前官方決定把相關專案收歸國有，並在昨天宣布推出新版本，剛剛迫不期待把它安裝回來使用 XD 歷時一年的大改版到底更新了哪些東西呢？</p><h3 id="Open-sourcing-Kube2Hadoop-Secure-access-to-HDFS-from-Kubernetes"><a href="#Open-sourcing-Kube2Hadoop-Secure-access-to-HDFS-from-Kubernetes" class="headerlink" title="Open sourcing Kube2Hadoop: Secure access to HDFS from Kubernetes"></a><a href="https://engineering.linkedin.com/blog/2020/open-sourcing-kube2hadoop" target="_blank" rel="noopener">Open sourcing Kube2Hadoop: Secure access to HDFS from Kubernetes</a></h3><p>LinkedIn 公司內的 AI 是構築於傳統的 Hadoop/YARN 之下，其中包含的資料涵蓋了 4,500 個使用者而且是將近 500PB 的資料，在過去幾年來，K8S 在 LinkedIn 公司內 AI 相關的 Workload 都大受歡迎，而 K8S 和 Hadoop 間其實是有一道隔閡的，因為 Hadoop 的認證是使用 Kerberos，但是 K8S 是以 Certificate 為主，因此原生 K8S 是無法安全的去存取 HDFS 的，因此 LinkedIn 開發了 Kube2Hadoop 來解決這個問題</p><h3 id="25-API-Security-Tips-You’re-Probably-Not-Considering"><a href="#25-API-Security-Tips-You’re-Probably-Not-Considering" class="headerlink" title="25 API Security Tips You’re Probably Not Considering"></a><a href="https://cisoseries.com/25-api-security-tips-youre-probably-not-considering/" target="_blank" rel="noopener">25 API Security Tips You’re Probably Not Considering</a></h3><p>API 常常是通往重要資料的渠道，駭客也很清楚這一點，因此如何保護他便顯得相當的重要，這篇文章提供了 25 個小秘訣來提醒在開發跟維護 API 的時候應該要注意哪些地方</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 32 期 - 打造 10X Engineer Zsh Shell</title>
      <link href="/2020/06/09/32-10x-engineer-zsh-shell/"/>
      <url>/2020/06/09/32-10x-engineer-zsh-shell/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="打造-10X-Engineer-Zsh-Shell-SRE-討生活篇"><a href="#打造-10X-Engineer-Zsh-Shell-SRE-討生活篇" class="headerlink" title="打造 10X Engineer Zsh Shell - SRE 討生活篇"></a><a href="https://medium.com/starbugs/%E6%89%93%E9%80%A0-10x-engineer-zsh-shell-97e40db76391" target="_blank" rel="noopener">打造 10X Engineer Zsh Shell - SRE 討生活篇</a></h3><p>身為一位 SRE/DevOps 可能有一半的工作時間都必須跟 Shell 打交道，既然使用 Shell 工作的時間那麼多，正所謂工欲善其事必先利其器，有沒有什麼辦法可以讓我們使用它的時候更有效率而且還要可以符合目前的主流使用工具呢？</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="9-Javascript-project-ideas-for-beginners-that-help-you-to-build-an-amazing-coding-portfolio"><a href="#9-Javascript-project-ideas-for-beginners-that-help-you-to-build-an-amazing-coding-portfolio" class="headerlink" title="9 Javascript project ideas for beginners, that help you to build an amazing coding portfolio"></a><a href="https://www.blog.duomly.com/9-javascript-project-ideas-for-beginners-that-help-you-to-build-an-amazing-coding-portfolio" target="_blank" rel="noopener">9 Javascript project ideas for beginners, that help you to build an amazing coding portfolio</a></h3><p>9 個 JavaScript Project 的 idea！如果你是初學者，又不知道學程式的目標或者點子的話，一定要試試看文章內舉出的幾個想法！本人我最喜歡的是 Joke of the Day，說不定這幾天就會找時間做出來。 😂</p><h3 id="Why-Developers-Are-Not-Using-the-Latest-CSS-Features-In-2020"><a href="#Why-Developers-Are-Not-Using-the-Latest-CSS-Features-In-2020" class="headerlink" title="Why Developers Are Not Using the Latest CSS Features In 2020"></a><a href="https://dzone.com/articles/why-masses-are-not-using-latest-css-features-in-20" target="_blank" rel="noopener">Why Developers Are Not Using the Latest CSS Features In 2020</a></h3><p>如果沒有看到這篇文章，我還不會意識到分享了那麼多關於 JavaScript 或是 React 等等的新語法，但卻從沒分享過關於 CSS 的最新資訊，到底為什麼 CSS 那麼容易被忽略呢？他明明就很重要不是嗎？看看文章怎麼說！</p><h3 id="🚀-26-Built-in-String-Methods-JavaScript"><a href="#🚀-26-Built-in-String-Methods-JavaScript" class="headerlink" title="🚀 26 Built-in String Methods | JavaScript"></a><a href="https://dev.to/nialljoemaher/26-built-in-string-methods-javascript-56p" target="_blank" rel="noopener">🚀 26 Built-in String Methods | JavaScript</a></h3><p>雖然常用的字串處理方式就是那些，但看到這篇文章才驚覺，其實也有很多很方便的方法。大家可以先看過，對這些方法有個記憶點，今後如果遇到類似的需要，就可以直接連結到並拿出來使用！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="SSH-Tunneling-Port-Forwarding-詳解"><a href="#SSH-Tunneling-Port-Forwarding-詳解" class="headerlink" title="SSH Tunneling (Port Forwarding) 詳解"></a><a href="https://johnliu55.tw/ssh-tunnel.html" target="_blank" rel="noopener">SSH Tunneling (Port Forwarding) 詳解</a></h3><p>這篇 SSH Tunneling 詳解把原理跟每台機器扮演的角色講得非常清楚，而且也提供了幾個很實用的使用情境。雖然一開始看可能會看不太懂，但多看幾次之後會發現真的是一篇好文。</p><h3 id="RxJS-fruits"><a href="#RxJS-fruits" class="headerlink" title="RxJS-fruits"></a><a href="https://www.rxjs-fruits.com/subscribe-next" target="_blank" rel="noopener">RxJS-fruits</a></h3><p>這篇不是文章而是一個讓你練習 RxJS 的小遊戲 XD，他總共有十六關，過程中會讓你練習到很多常用的 operator，到後面幾關甚至需要把 operator 組合起來才能達成目標，真的玩完這個也差不多學會 RxJS 了。</p><h3 id="尤雨溪自述：打造-Vue-3-背后的故事"><a href="#尤雨溪自述：打造-Vue-3-背后的故事" class="headerlink" title="尤雨溪自述：打造 Vue 3 背后的故事"></a><a href="https://www.infoq.cn/article/rTS3OweiTlA8OldIidBz" target="_blank" rel="noopener">尤雨溪自述：打造 Vue 3 背后的故事</a></h3><p>Vue 雖然是前端三大框架中最晚起步的，但因為上手簡單、環境架設容易，所以現在使用者的數量也是非常龐大。而 Vue 的作者尤雨溪在今年發佈 Vue 3 之前先寫了這篇文，裡面有提到為什麼要重寫整個 Vue 還有為何要轉向 TypeScript，希望看完這篇後大家都能了解 Vue 背後的故事。</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Building-the-most-inaccessible-site-possible-with-a-perfect-Lighthouse-score"><a href="#Building-the-most-inaccessible-site-possible-with-a-perfect-Lighthouse-score" class="headerlink" title="Building the most inaccessible site possible with a perfect Lighthouse score"></a><a href="https://www.matuzo.at/blog/building-the-most-inaccessible-site-possible-with-a-perfect-lighthouse-score/" target="_blank" rel="noopener">Building the most inaccessible site possible with a perfect Lighthouse score</a></h3><p>如何建立一個百分之百有障礙，但是 Lighthouse 一百分的網頁，這個作者真是有才。</p><h3 id="Exploring-Vim"><a href="#Exploring-Vim" class="headerlink" title="Exploring Vim"></a><a href="https://dev.to/vintharas/exploring-vim-4k1i" target="_blank" rel="noopener">Exploring Vim</a></h3><p>這是一個 Vim 教學的系列文，一共由十篇組成，我覺得寫的還不錯，可以作為 Vim 從入門到放棄的第一份教材。</p><h3 id="What’s-inside-a-container"><a href="#What’s-inside-a-container" class="headerlink" title="What’s inside a container?"></a><a href="https://dev.to/gauravratnawat/what-s-inside-a-container-5g03" target="_blank" rel="noopener">What’s inside a container?</a></h3><p>Container 裡面到底有什麼東東？這篇帶你走過 Process、Namespace 還有一堆東東，這篇真的不錯，挖到寶了。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="中國不能夠使用-HashiCorp-相關軟體"><a href="#中國不能夠使用-HashiCorp-相關軟體" class="headerlink" title="中國不能夠使用 HashiCorp 相關軟體"></a><a href="https://news.ycombinator.com/item?id=23349635" target="_blank" rel="noopener">中國不能夠使用 HashiCorp 相關軟體</a></h3><p>有不少人在討論中國不能夠使用 HashiCorp 相關軟體的消息，再更近一步抽絲剝繭之下，其實是只有 <strong>Enterprise</strong> 版本不能夠在中國銷售，<strong>OSS</strong> 版本還是可以繼續自由使用的；而其中最大的問題在於做為密碼管理的 <strong>Vault</strong> 違反中國的法律，其加密演算法不符合該國家的規定，換言之要在中國賣 Enterprise 版本的話就必須要修改 Vault 程式碼，但 HashiCorp 官方不打算做這件事情，所以直接修改 TOE 讓 Enterprise 版本不能在中國販售使用，不過或許有人會納悶，那為什麼 HashiCorp 旗下另外幾個產品的 Enterprise 版本也一樣不能在該國銷售了？因為其他幾個產品假如有密碼管理需求的話，後面都是直接使用 Vault 來保管的，例如 <strong>Terraform Cloud</strong> 內儲存的第三方 DB Account/Password, API Token, AWS AK/SK…等，所以大家是不是應該要好好考慮用 Vault 來保護密碼了呢？</p><h3 id="How-we-use-HashiCorp-Nomad"><a href="#How-we-use-HashiCorp-Nomad" class="headerlink" title="How we use HashiCorp Nomad"></a><a href="https://blog.cloudflare.com/how-we-use-hashicorp-nomad/" target="_blank" rel="noopener">How we use HashiCorp Nomad</a></h3><p>難得有 <strong>HashiCorp Nomad</strong> 相關的分享文章，在此文中，Cloudflare 介紹了如何維持位於全球多達 200 多個城市中運行 Edge 伺服器的可靠性模型，接著深入探討如何利用 <strong>HashiCorp Nomad</strong> 部署動態型的工作任務，好用來提高每個資料中心內運行服務的可靠性，其中涵蓋了要如何克服部署 Nomad 面臨的挑戰，也展示了目前內部是如何使用 Nomad，最後提到了對於未來繼續使用 Nomad 的相關規劃</p><h3 id="Identifying-and-monitoring-key-metrics-for-your-hosts-and-systems"><a href="#Identifying-and-monitoring-key-metrics-for-your-hosts-and-systems" class="headerlink" title="Identifying and monitoring key metrics for your hosts and systems"></a><a href="https://www.elastic.co/blog/identifying-and-monitoring-key-metrics-for-your-hosts-and-systems" target="_blank" rel="noopener">Identifying and monitoring key metrics for your hosts and systems</a></h3><p>這是 Elastic 官方出的監控系列文章，旨在分享如何有效地監控組織內維運的整個生態系統內的各種系統和機器，而第一篇文章是先從距離大家最近的個人電腦開始談起，內容主要是在討論當要監控自己使用的電腦時，會有哪一些重要的數據必須要被收集起來，雖然最後一定又是要賣自己產品，但其中一些內容還是可以稍微借鏡一下</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 31 期 - 梅雨季節沒下雨就是開心啦</title>
      <link href="/2020/06/02/31-good-weather-make-me-happy/"/>
      <url>/2020/06/02/31-good-weather-make-me-happy/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="tpm-—-套件管理工具-，讓你的-tmux-更好用"><a href="#tpm-—-套件管理工具-，讓你的-tmux-更好用" class="headerlink" title="tpm — 套件管理工具 ，讓你的 tmux 更好用"></a><a href="https://medium.com/starbugs/95ecd924c9d" target="_blank" rel="noopener">tpm — 套件管理工具 ，讓你的 tmux 更好用</a></h3><p>最近因為工作上需要用到開很多個視窗的情景，研究了一下如何把 tmux 變得更具有生產力。一個螢幕當三個螢幕用，用起來又有點 Geek 感，讚！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="5-Things-I-Wish-I-Knew-When-Learning-to-Code"><a href="#5-Things-I-Wish-I-Knew-When-Learning-to-Code" class="headerlink" title="5 Things I Wish I Knew When Learning to Code"></a><a href="https://hackernoon.com/5-things-i-wish-i-knew-when-learning-to-code-l1ai3z37" target="_blank" rel="noopener">5 Things I Wish I Knew When Learning to Code</a></h3><p>學程式需要什麼特別的條件嗎？是不是與眾不同的人才能學，不是哦！文章中五件事來說明學習程式希望你知道的事情，而就我自己而言當初開始學程式就是覺得程式可以做到任何事情，讓我的生活變得更方便，特別是當我擁有什麼想法的時候，我的能力是有辦法讓我實踐他的！</p><h3 id="Free-Software-vs-Open-Source-vs-Freeware-What’s-the-Difference"><a href="#Free-Software-vs-Open-Source-vs-Freeware-What’s-the-Difference" class="headerlink" title="Free Software vs Open Source vs Freeware: What’s the Difference?"></a><a href="https://dzone.com/articles/free-software-vs-open-source-vs-freeware-whats-the" target="_blank" rel="noopener">Free Software vs Open Source vs Freeware: What’s the Difference?</a></h3><p>這篇文章沒有任何技術含量，但算是資訊界必備的小知識文章。開源專案內的標準先不說，就以大方向而言，各位知道「自由軟體」、「開源專案」和「免費軟體」這三者間的不同嗎？</p><h3 id="How-to-Choose-and-Care-for-a-Secure-Open-Source-Project"><a href="#How-to-Choose-and-Care-for-a-Secure-Open-Source-Project" class="headerlink" title="How to Choose and Care for a Secure Open Source Project"></a><a href="https://www.freecodecamp.org/news/how-to-choose-and-care-for-a-secure-open-source-project/" target="_blank" rel="noopener">How to Choose and Care for a Secure Open Source Project</a></h3><p>大家都提倡要對開源界做出貢獻，不只是對自己的學習程式語言很好，也對職涯發展有相當的幫助，但是開源專案百百種，該怎麼選擇及做出貢獻好好照顧他呢？</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="What’s-the-difference-between-a-Rust-char-and-a-Go-rune"><a href="#What’s-the-difference-between-a-Rust-char-and-a-Go-rune" class="headerlink" title="What’s the difference between a Rust char and a Go rune?"></a><a href="https://www.christianfscott.com/rust-chars-vs-go-runes/" target="_blank" rel="noopener">What’s the difference between a Rust char and a Go rune?</a></h3><p>Rust 跟 Go 內部處理字元的方式非常相似，基本上都是存 Unicode。但 Rust 的 char 存的是 Unicode Scalar Value 而 Go 的 rune 是 Unicode Code Point，雖然不知道好像也沒什麼關係XD，但如果想更了解 Unicode 的話很推薦這篇</p><h3 id="Better-git-diffs-with-FZF"><a href="#Better-git-diffs-with-FZF" class="headerlink" title="Better git diffs with FZF"></a><a href="https://link.medium.com/eCLM10b7V6" target="_blank" rel="noopener">Better git diffs with FZF</a></h3><p>每次下 <code>git diff</code> 指令時都會看到落落長的一大串，總是要花很多時間往下才能看到想要找的東西，但搭配上 fzf preview 就完全不一樣了，用起來就像是IDE 裡面的功能一樣</p><h3 id="Go-and-CPU-Caches"><a href="#Go-and-CPU-Caches" class="headerlink" title="Go and CPU Caches"></a><a href="https://link.medium.com/VRvUcJg7V6" target="_blank" rel="noopener">Go and CPU Caches</a></h3><p>平常在開發時不太會需要去了解 CPU cache line 是怎麼運作的，因為編譯器跟直譯器會負責幫你最佳化。但如果是要做特定運算譬如說矩陣加法那就是另一回事了，因為有時不同的讀取記憶體順序可能會導致好幾倍的效能差異，所以在寫底層的 library 給別人用時一定要注意一下</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="How-to-get-hired-by-a-remote-first-company-🏝️"><a href="#How-to-get-hired-by-a-remote-first-company-🏝️" class="headerlink" title="How to get hired by a remote-first company 🏝️"></a><a href="https://dev.to/willemwijnans/how-to-get-hired-by-a-remote-first-company-2h0n" target="_blank" rel="noopener">How to get hired by a remote-first company 🏝️</a></h3><p>如何找到一份遠端工作？在開始之前，有些事情你需要了解到，選擇遠端工作，你需要意識到，你的競爭者會來自世界各地，變得很激烈。遠端工作用文字溝通是最主要的溝通方式。你可以用一些策略來讓你的機會更多。這篇我覺得滿不錯，推薦大家一讀。</p><h3 id="How-to-make-remote-a-success"><a href="#How-to-make-remote-a-success" class="headerlink" title="How to make remote a success"></a><a href="https://dev.to/bearer/how-to-make-remote-a-success-16cl" target="_blank" rel="noopener">How to make remote a success</a></h3><p>像一等公民一樣 remote，假設當你開始家的 CTO 開始 remote 的時候，你就會開始把以前寫在白板上的東西，開始記錄、儲存下來。</p><h3 id="18-websites-where-you-can-find-a-remote-job"><a href="#18-websites-where-you-can-find-a-remote-job" class="headerlink" title="18 websites, where you can find a remote job"></a><a href="https://dev.to/duomly/18-websites-where-you-can-find-a-remote-job-3a91" target="_blank" rel="noopener">18 websites, where you can find a remote job</a></h3><p>18 個你可以找到遠端工作的網站，第一種是全職工作、簽約的類型。第二種是接外包，free lancer。最後一種是介紹屬於設計師的 remote job 工作網站。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="超級精美的-Kubernetes-架構詳細解說"><a href="#超級精美的-Kubernetes-架構詳細解說" class="headerlink" title="超級精美的 Kubernetes 架構詳細解說"></a><a href="https://dev.to/kodekloud/kubernetes-architecture-overview-1418" target="_blank" rel="noopener">超級精美的 Kubernetes 架構詳細解說</a></h3><p>大家都知道 Container 中文翻譯成容器，常常被具現化為貨櫃的圖案，而 K8S 則是用來當成 Container 載體的貨輪；不過這篇文章好屌啊～竟然把 K8S Master/Worker，底層的 etcd, scheduler, api server…等元件也都類比到貨櫃的操作上XD 推薦這篇文章給大家，尤其對初學者來說，這真的是一篇超級友善的 K8S 介紹文章！</p><h3 id="Kubernetes-十大慣犯！！"><a href="#Kubernetes-十大慣犯！！" class="headerlink" title="Kubernetes 十大慣犯！！"></a><a href="https://blog.pipetail.io/posts/2020-05-04-most-common-mistakes-k8s/" target="_blank" rel="noopener">Kubernetes 十大慣犯！！</a></h3><p>作者公司擁有多年的 K8S 使用經驗 (自駕或是託管都有 - 包含在 GCP, AWS 和 Azure 上)，而他們常常看到某一些錯誤一再的重複發生，因此撰寫這篇文章來談談這些問題，並且會提到如何修掉他們</p><h3 id="在-ssh-和-kubectl-exec-時如何達成-ZeroTrust"><a href="#在-ssh-和-kubectl-exec-時如何達成-ZeroTrust" class="headerlink" title="在 ssh 和 kubectl exec 時如何達成 ZeroTrust"></a><a href="https://gravitational.com/blog/applying-principles-of-zero-trust-to-ssh/" target="_blank" rel="noopener">在 ssh 和 kubectl exec 時如何達成 ZeroTrust</a></h3><p>常常聽到 Zero Trust 這個名詞，但是對於確切定義總是似懂非懂，這篇文章是想推廣 <a href="https://github.com/gravitational/teleport" target="_blank" rel="noopener"><strong>teleport</strong></a> 這套可以讓使用 ssh 和 kubectl exec 的組織可以達成 Zero Trust 的開源軟體，不過也花了不少篇幅點出一些 Zero Trust 的定義以及重點，最核心的概念應該就是利用 Zero Trust 來達成安全性 #並不是基於你存取資源的當下人在哪裡，#而是在於你是誰，所以整個實作方式會從以前使用圍欄式的防護手段轉換成身份認證為主，也就是說….</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 30 期 - 一寸光陰一寸金，冗長的技術文章先放一邊</title>
      <link href="/2020/05/26/30-time-is-money/"/>
      <url>/2020/05/26/30-time-is-money/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-用十分鐘對自定義-Hooks-寫個測試"><a href="#React-用十分鐘對自定義-Hooks-寫個測試" class="headerlink" title="React | 用十分鐘對自定義 Hooks 寫個測試"></a><a href="https://medium.com/starbugs/react-%E7%94%A8%E5%8D%81%E5%88%86%E9%90%98%E5%B0%8D%E8%87%AA%E5%AE%9A%E7%BE%A9-hooks-%E5%AF%AB%E5%80%8B%E6%B8%AC%E8%A9%A6-d0b8a6c66c40" target="_blank" rel="noopener">React | 用十分鐘對自定義 Hooks 寫個測試</a></h3><p> Hooks 推出很久很久了（其實也才去年初 😂），也把測試 Hooks 放到學習清單中，但都很懶的沒有去碰，直到今天才把清單中的這項給打勾。相信有很多人已經學習過，也著手開始寫關於 Hooks 的測試，甚至遇到過各種情況或是問題，歡迎和我分享寶貴的經驗 😃。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="A-Practical-Guide-to-TypeScript-How-to-Build-a-Pokedex-App-Using-HTML-CSS-and-TypeScript"><a href="#A-Practical-Guide-to-TypeScript-How-to-Build-a-Pokedex-App-Using-HTML-CSS-and-TypeScript" class="headerlink" title="A Practical Guide to TypeScript - How to Build a Pokedex App Using HTML, CSS, and TypeScript"></a><a href="https://www.freecodecamp.org/news/a-practical-guide-to-typescript-how-to-build-a-pokedex-app-using-html-css-and-typescript/" target="_blank" rel="noopener">A Practical Guide to TypeScript - How to Build a Pokedex App Using HTML, CSS, and TypeScript</a></h3><p>我一直相信想要學習一個新技術或是有動力去完成一個新作品，就是要選擇自己喜歡的事情，以這篇推薦文章為例，你覺得 TypeScript 很難嗎？其實不會啊！就一篇文章就可以搞定了，再加上 Pokemon API，甚至能馬上變成一個小作品。要愛上自己在做的事情太難了，不如直接選擇自己所愛的！</p><h3 id="不知道怎么封装代码？看看这几种设计模式吧！"><a href="#不知道怎么封装代码？看看这几种设计模式吧！" class="headerlink" title="不知道怎么封装代码？看看这几种设计模式吧！"></a><a href="https://juejin.im/post/5ec737b36fb9a04799583002" target="_blank" rel="noopener">不知道怎么封装代码？看看这几种设计模式吧！</a></h3><p>設計模式一直是耳熟能詳的名詞，但又不知道到底該不該學他，或是學了以後會有什麼幫助，事實上我認為設計模式是為了解決程式碼中某些常見的問題而誕生，就像是圍棋中的棋譜，遇到相似的狀況就該怎麼應對下一步，設計模式也是如此，它就是前人的智慧，每種設計模式都是為了讓程式碼變得更容易閱讀或修改。</p><h3 id="14-Developers-to-Follow-on-Twitter"><a href="#14-Developers-to-Follow-on-Twitter" class="headerlink" title="14 Developers to Follow on Twitter"></a><a href="https://dev.to/adriantwarog/14-developers-to-follow-on-twitter-570h" target="_blank" rel="noopener">14 Developers to Follow on Twitter</a></h3><p>前一陣子 Luka 介紹了值得訂閱的 Podcaster，此篇文章也整理了再 Twitter 上可以追蹤的開發者！他們都會在 Twitter 上分享自己學習程式的大小事情，再看的過程中也可以當作練習英文，真是一舉兩得 😂</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Things-I-hate-about-Rust"><a href="#Things-I-hate-about-Rust" class="headerlink" title="Things I hate about Rust"></a><a href="https://blog.yossarian.net/2020/05/20/Things-I-hate-about-rust" target="_blank" rel="noopener">Things I hate about Rust</a></h3><p>看到這篇真的深有同感，我自己寫 Rust 也好一陣子了，但到現在還是分不太清楚 <code>&amp;str</code>、<code>String</code>、<code>OsString</code> 這幾種字串到底誰是誰、彼此間要怎麼轉換。每次也都要跟編譯器奮戰好久才能過關，真心覺得那些用 Rust 開發大型應用的人超厲害</p><h3 id="Faking-stdin-and-stdout-in-Go"><a href="#Faking-stdin-and-stdout-in-Go" class="headerlink" title="Faking stdin and stdout in Go"></a><a href="https://eli.thegreenplace.net/2020/faking-stdin-and-stdout-in-go/" target="_blank" rel="noopener">Faking stdin and stdout in Go</a></h3><p>在 Go 裡面，有時會需要對某些從 stdin/stdout 進行輸入輸出的 function 進行測試，但因為從 stdin/stdout 很難用程式化的方式來測，所以可以把 stdin/stdout 進行轉向，這樣就不用再手動用終端機做測試了～</p><h3 id="From-Node-to-Deno"><a href="#From-Node-to-Deno" class="headerlink" title="From Node to Deno"></a><a href="https://dev.to/aralroca/from-node-to-deno-5gpn" target="_blank" rel="noopener">From Node to Deno</a></h3><p>雖然 Deno 看起來很多地方都設計得比 Node 好，但因為 Node 在經過日積月累之後生態圈已經很成熟了，而 Deno 卻是剛起步而已，所以就算真的要用 Deno 開發應用也很可能面臨找不到 package 可用的囧境。而這篇文章就是在說如果你打算從 Node 換到 Deno，那該用哪些 Deno package 來做到類似 express、pm2、nodemon 等等 Node package 的功能，不用連很多基本的功能都要自己刻一遍</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Interviewed-with-Triplebyte-Your-profile-is-about-to-become-public"><a href="#Interviewed-with-Triplebyte-Your-profile-is-about-to-become-public" class="headerlink" title="Interviewed with Triplebyte? Your profile is about to become public"></a><a href="https://news.ycombinator.com/item?id=23279837" target="_blank" rel="noopener">Interviewed with Triplebyte? Your profile is about to become public</a></h3><p>Triplebyte 是一家線上考試平台，提供面試者做題目，並讓企業參考。本篇作者用 Triplebyte 面試過後一陣子，突然收到一封 CEO 的信，Triplebyte 宣布一個很令人興奮的消息，讓你的個人資訊變成展示案例！讓你的個人資訊公開在網路上。這個不尊重隱私的作法立刻受到 HN 上鄉民的撻伐。</p><h3 id="Ikea-swaps-its-brand-typeface-to-Google-and-Monotype’s-Noto"><a href="#Ikea-swaps-its-brand-typeface-to-Google-and-Monotype’s-Noto" class="headerlink" title="Ikea swaps its brand typeface to Google and Monotype’s Noto"></a><a href="https://www.itsnicethat.com/news/ikea-changes-typeface-to-noto-monotype-google-graphic-design-210819" target="_blank" rel="noopener">Ikea swaps its brand typeface to Google and Monotype’s Noto</a></h3><p>Ikea 將字型從原本一直在使用的 Ikea Sans 換成了 <a href="https://www.itsnicethat.com/news/google-monotype-noto-type-family-061016" target="_blank" rel="noopener">Noto</a>，Noto 字型家族屬於 Monotype and Google。來看看使用了 10 年的 Ikea Sans 跟新的 Noto 呈現出來的感覺有什麼差別吧！第一次分享設計的文章感覺很不錯，以後要多多分享才是。</p><h3 id="Kubetab-kubectl-plugin-to-deploy-intercepting-proxies-to-K8s-Services"><a href="#Kubetab-kubectl-plugin-to-deploy-intercepting-proxies-to-K8s-Services" class="headerlink" title="Kubetab - kubectl plugin to deploy intercepting proxies to K8s Services"></a><a href="https://soluble-ai.github.io/kubetap/" target="_blank" rel="noopener">Kubetab - kubectl plugin to deploy intercepting proxies to K8s Services</a></h3><p>Kubetab，圖案是一杯生啤和一個水龍頭，然後一堆手繪圖案。我還以為是來搞笑的，沒想到看完影片後感覺很好用。Kubetab 是一個 kubectl plugin，可以讓你的瀏覽器攔截 Kubernetes Proxy，在瀏覽器中就可以顯示 K8S 的服務。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Grafana-也來到-7-0-啦～"><a href="#Grafana-也來到-7-0-啦～" class="headerlink" title="Grafana 也來到 7.0 啦～"></a><a href="https://grafana.com/blog/2020/05/18/grafana-v7.0-released-new-plugin-architecture-visualizations-transformations-native-trace-support-and-more/" target="_blank" rel="noopener">Grafana 也來到 7.0 啦～</a></h3><p>感覺這一年來 Grafana 的開發力道相當的驚人，譬如意圖想要取代 ELK 的 Loki, 以及用來儲存 Time Serier Metric 的 Cortex，不過其最招牌的當然還是 Grafana，這次的發布相當驚人@@ 多了好多恐怖又實用的功能，讓我們來瞧瞧看有什麼吧！</p><ul><li><p>UX Enhancements and Unified Data Model: 加強了使用者體驗跟視覺化設定的選項，例如多了新的 Table Panel，Grid Layout，而且也改善了編輯 Panel 時的體驗；在資料視覺化的方面，改良過的 Data Model 使其擁有更一致性的設定方式，讓資料的各種格式設定不再散落於各處</p></li><li><p>Plugins Platform: 新的套件平台讓使用者可以更快且有效率的新增 Plugin</p></li><li><p>Tracing: 透過使用 Jaeger 當成資料來源便可以支援 Tracing 功能</p></li><li><p>Transformations: 這是滿多使用者要求的功能之一，現在使用者可以把非時間序列的資料轉換到 Table 中 (例如外部資料庫或是既有的 Panel)， 除此之外還可以將這些非時間序列的資料結合存在於 Grafana 裡面的任何資料，並且透過 join, pivot, filter, re-name 來取得你想要的結果，用以客製化 Panel</p></li><li><p>Inspect and Export: 透過新的 Panel Inspector 可以讓使用者把整理完的資料給輸出成 CSV 檔案</p></li><li><p>AWS CloudWatch Logs: 一直以來都有支援 AWS CloudWatch，沒有想到現在連 AWS CloudWatch Logs 都吃下來了 </p></li><li><p>Usage Analytics and Presence: 這個 Enterprise 的功能幫助大型公司得知大家使用 Grafana 的情況，譬如得知大家最常看哪個 Dashboard，誰最常用…等</p></li></ul><h3 id="Terraform-0-13-準備在下個月釋出啦！"><a href="#Terraform-0-13-準備在下個月釋出啦！" class="headerlink" title="Terraform 0.13 準備在下個月釋出啦！"></a><a href="https://github.com/hashicorp/terraform/issues/25016" target="_blank" rel="noopener">Terraform 0.13 準備在下個月釋出啦！</a></h3><p>最近看到同事分享 Terraform 0.13 準備在下個月釋出的消息，目前自己公司內部是正在慢慢 Refactory 並且升級到 0.12 當中，0.13 提到兩個我個人也覺得滿重要的更新</p><ul><li>Provider 的安裝來源可以自訂，不用一定需要從官方來的 (這點滿重要的，因為有時候官方的 Provider 其實不太符合自己的組織需求，或是開發的太慢；就可以自己客製化)</li><li>Module 這邊很多為人詬病的問題可能都可以獲得解決，例如有 count 跟 for_each，而我自己覺得最重要的 depends_on 目前官方開發團隊正在趕工中，並且期望可以一起在 0.13 一起完成</li></ul><p>這樣一來大家從 0.11 往上升級的意願應該會在高一些了吧XD</p><h3 id="15-testing-methods-all-developers-should-know"><a href="#15-testing-methods-all-developers-should-know" class="headerlink" title="15 testing methods all developers should know"></a><a href="https://circleci.com/blog/testing-methods-all-developers-should-know/" target="_blank" rel="noopener">15 testing methods all developers should know</a></h3><p>在軟體業界工作時可以發現，有時候某些技術術語在不同的公司明明是指同一件事情，但卻可能使用不同的名字來稱呼，測試領域就常常會發生這樣的事情XD 而隨著越來越多的公司在實踐 DevOps 的過程中，對軟體測試跟測試自動化的重視程度也越來越高，為了不要讓大家迷失在不同的專業術語中，circleci 這篇文章嘗試將軟體測試常見的類型給列了出來</p><ol><li>Unit testing: 測試邏輯的完整性，測出每一段程式碼應該要做的事情</li><li>Integration testing: 測試在不同元件或是模組間彼此關係和資料流程的完整性</li><li>End-to-End testing (E2E, System): 確保整個應用程式或是系統運作符合預期</li><li>Acceptance testing: 驗證產品跟功能是否有根據客戶所提出的規格來進行開發</li><li>White box testing (structural, clear box): 在軟體詳的細資訊和內部工作方式是已知的情況下來進行測試</li><li>Black box testing (functional, behavioral, closed box): 在軟體詳的細資訊和內部工作方式是未知的情況下來進行測試</li><li>Gray box testing: 因為黑箱跟白箱測試可能會導致某些重要的功能沒有測試到，所以有了灰箱測試，既可以輕鬆地實現黑箱測試 (輸入-&gt;輸出)，並且又可以針對特定的程式碼進行白箱測試</li><li>Manual testing: 手動測試當然就是使用者手動輸入東西並且跟系統進行互動，最後也是由使用者來評斷測試的結果</li><li>Static testing: 不真的去執行程式碼的測試方式，就像手動測試一樣會比較緩慢，但可以提早發現問題，例如有些公司會有 Code Review 的機制</li><li>Dynamic testing: 實際執行代碼的測試方式，其實上面提到的測試方式，大部分都算是在此類別中，除了手動和某些 acceptance tseting</li><li>UI/Visual testing (browser testing): 針對使用者介面操作行為的測試方式</li><li>Smoke testing: 相對小的測試案例集合，用來驗證系統是否可以正常運作</li><li>Regression testing: 用來驗證先前可以正常使用的功能是否都還可以運行無誤</li><li>Load testing: 測試應用程式在工作量增加的情況下會如何回應</li><li>Penetration testing: 滲透測試為一種安全測試，用來驗證應用程式的安全穩定性</li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 29 期 - 用 Git 這麼久了，你知道 commit 是可以偽造的嗎？</title>
      <link href="/2020/05/19/29-fake-git-commit/"/>
      <url>/2020/05/19/29-fake-git-commit/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-Git-這麼久了，你知道-commit-是可以偽造的嗎"><a href="#用-Git-這麼久了，你知道-commit-是可以偽造的嗎" class="headerlink" title="用 Git 這麼久了，你知道 commit 是可以偽造的嗎"></a><a href="https://medium.com/starbugs/how-to-fake-the-author-of-git-commit-f44453b70afc" target="_blank" rel="noopener">用 Git 這麼久了，你知道 commit 是可以偽造的嗎</a></h3><p>身為一個開發者，不管你寫的是什麼語言、用的是什麼框架，一定多少會用到 Git 版本控制系統，但你知道 git commit 的作者是可以偽造的嗎？本週的專欄從如何偽造別人的 commit 開始談起，也教你如何使用 GPG 數位簽章證明你就是本人，推薦有在使用 Git 跟 Github 的開發者都來看看～</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="The-most-successful-developers-share-more-than-they-take"><a href="#The-most-successful-developers-share-more-than-they-take" class="headerlink" title="The most successful developers share more than they take"></a><a href="https://stackoverflow.blog/2020/05/14/the-most-successful-developers-share-more-than-they-take/" target="_blank" rel="noopener">The most successful developers share more than they take</a></h3><p>「It’s not enough to share your successful projects and knowledge, but additionally to bring the humility to share your learning and failures.」分享知識及成功的專案是遠遠不夠的，比那些更重要的是抱持謙虛及珍惜失敗的經歷。這篇文章雖然很短，但是句句的是金言，可以在通勤或是吃早餐的時候順便看一下。😂</p><h3 id="How-to-Stay-Motivated-to-Keep-Learning-to-Code"><a href="#How-to-Stay-Motivated-to-Keep-Learning-to-Code" class="headerlink" title="How to Stay Motivated to Keep Learning to Code"></a><a href="https://www.freecodecamp.org/news/how-to-stay-motivated-to-keep-learning-to-code/" target="_blank" rel="noopener">How to Stay Motivated to Keep Learning to Code</a></h3><p>大家都是如何刺激自己繼續學習的，畢竟程式根本就沒學完的一天，很喜歡作者提到的第一點「5 minutes of Learning」，五分鐘看起來什麼事情都做不了，但真正重要的是讓你開始學習，你不需要想說每天都要花幾個小時讀書或學習，也許你只需要五分鐘，然後回神時就過了五十分鐘 😃</p><h3 id="How-to-SEO-your-website-in-10-minutes"><a href="#How-to-SEO-your-website-in-10-minutes" class="headerlink" title="How to SEO your website in 10 minutes"></a><a href="https://dev.to/christiankastner/how-to-seo-your-website-in-10-minutes-6mk" target="_blank" rel="noopener">How to SEO your website in 10 minutes</a></h3><p>來學習一些簡單的 SEO 吧！大家有想過會被 Google 或其他瀏覽器的瀏覽顯示出來的資料需要放在網站中的哪裡嗎？如果想要更容易的被尋找到該如何放在 HTML 裡的哪個標籤呢？來看看最入門的簡單解說！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="為你自己學-Git-高見龍"><a href="#為你自己學-Git-高見龍" class="headerlink" title="為你自己學 Git | 高見龍"></a><a href="https://gitbook.tw/#git--1" target="_blank" rel="noopener">為你自己學 Git | 高見龍</a></h3><p>這週是 Git 相關的主題，那就順便來推一下龍哥寫的〈為你自己學 Git〉。這本書真的是我看過最好的 Git 教材，不僅把每個指令的原理都講到了，甚至還有對 Git 內部物件的解析。雖然有少部分的內容需要付費才能解鎖（其實也不貴，我就有買），但絕大部分的內容都是免費、公開的，如果你有打算認真學 Git 的話真的超推這本書</p><h3 id="CS-Visualized-Useful-Git-Commands"><a href="#CS-Visualized-Useful-Git-Commands" class="headerlink" title="CS Visualized: Useful Git Commands"></a><a href="https://dev.to/lydiahallie/cs-visualized-useful-git-commands-37p1" target="_blank" rel="noopener">CS Visualized: Useful Git Commands</a></h3><p>常常搞混 Git 指令的工程師們有福了～這篇文章把 Git 的很多指令如 merge、reset、rebase 做成很療癒的動畫，讓你看了一目瞭然，以後就不會再搞混了</p><h3 id="The-anatomy-of-a-Git-commit"><a href="#The-anatomy-of-a-Git-commit" class="headerlink" title="The anatomy of a Git commit"></a><a href="https://blog.thoughtram.io/git/2014/11/18/the-anatomy-of-a-git-commit.html" target="_blank" rel="noopener">The anatomy of a Git commit</a></h3><p>一個 Git commit 內部到底長什麼樣子？每個 Git commit 的 ID 又是根據哪些屬性產生出來？雖然不知道好像也沒關係，但當作冷知識增廣見聞一下也是不錯～</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Learn-Deno-Chat-app"><a href="#Learn-Deno-Chat-app" class="headerlink" title="Learn Deno: Chat app"></a><a href="https://dev.to/aralroca/learn-deno-chat-app-37f0" target="_blank" rel="noopener">Learn Deno: Chat app</a></h3><p>呼應一下樓上 Q 超人的 Deno 1.0 釋出，短短幾天內已經獲得大量的關注。我來推薦一篇熱騰騰的 5/13 剛剛寫出的文章「用 Deno 寫聊天 APP」。這篇文章從 hello world 到 debug，並使用 websocket 來開發聊天軟體，很充實，獲得很多迴響。私心認為 deno 的賣點是 logo 太可愛了啦。</p><h3 id="PushBullet：Let’s-Guess-What-Google-Requires-In-14-Days-Or-They-Kill-Our-Extension"><a href="#PushBullet：Let’s-Guess-What-Google-Requires-In-14-Days-Or-They-Kill-Our-Extension" class="headerlink" title="PushBullet：Let’s Guess What Google Requires In 14 Days Or They Kill Our Extension"></a><a href="https://blog.pushbullet.com/2020/05/13/lets-guess-what-google-requires-in-14-days-or-they-kill-our-extension/" target="_blank" rel="noopener">PushBullet：Let’s Guess What Google Requires In 14 Days Or They Kill Our Extension</a></h3><p>PushBullet 是一款可以將 Chrome 的訊息推送到手機上的 Chrome Extension. Google 最近要求 Pushbullet 改善權限問題否則要在 14 天後下架 PushBullet 的 chrome extension. 為此 PushBullet 感到非常的不爽。而這篇文章就是 PushBullet 說明了用了哪些權限來做什麼事情。雖然 PushBullet 很不爽，我個人覺得 Google 做的好，你一個推送訊息的 app 要求使用的 copy paste 的權限幹嘛？</p><h3 id="TSMC-Announces-Intention-to-Build-and-Operate-an-Advanced-Semiconductor-Fab-in-the-United-States"><a href="#TSMC-Announces-Intention-to-Build-and-Operate-an-Advanced-Semiconductor-Fab-in-the-United-States" class="headerlink" title="TSMC Announces Intention to Build and Operate an Advanced Semiconductor Fab in the United States"></a><a href="https://www.tsmc.com/tsmcdotcom/PRListingNewsAction.do?action=detail&language=E&newsid=THGOANPGTH" target="_blank" rel="noopener">TSMC Announces Intention to Build and Operate an Advanced Semiconductor Fab in the United States</a></h3><p>台積電有意在美國設先進的半導體廠，沒寫清楚是什麼原因，這是台積電準備在美國設的第二個廠，這個新聞是在 5/15 發佈的，美國目前的疫情可以工作嘛？抱持好奇態度。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Top-10-must-know-Kubernetes-design-patterns"><a href="#Top-10-must-know-Kubernetes-design-patterns" class="headerlink" title="Top 10 must-know Kubernetes design patterns"></a><a href="https://developers.redhat.com/blog/2020/05/11/top-10-must-know-kubernetes-design-patterns/" target="_blank" rel="noopener">Top 10 must-know Kubernetes design patterns</a></h3><p>十個 K8S 初學者一定要知道的 Design Pattern！除了可以透過瞭解這些 Pattern 來更熟悉 K8S 底層的概念之外，當你在設計 K8S 相關的應用程式時也可以幫上忙</p><ul><li>Foundational patterns<ul><li>Health Probe pattern: 每一個 Container 都必須要實作特定的 API 讓 K8S 透過此來觀察和管理應用程式，盡可能讓其保持最健康的狀態</li><li>Predictable Demands pattern: 每一個 Container 都必須要定義好會使用到多少的資源，這樣 K8S 底層才能夠在一個共享的環境中來成功的部署和管理應用程式</li><li>Automated Placement patterns: 了解 K8S 如何將 Workload 分散在多個節點的叢集中</li></ul></li><li>Structural patterns<ul><li>Init Container pattern: Init Container 獨立於主要應用程式運行的 Container，讓他可以先幫主要應用程式進行初始化環境所需要的任務</li><li>Sidecar patterns: 如何拓展和加強既有的應用程式 Container，但是卻不需要改變它</li></ul></li><li>Behavioral patterns<ul><li>Batch Job patterns: 在分散系的系統中如何運行獨立且單一的工作</li><li>Stateful Service patterns: 如何在 K8S 中運行 Stateful 應用程式，例如使用到的永久性磁碟空間，特殊的網路設定…等</li><li>Service Discovery pattern: Client 如何去存取和發現運行在 K8S 裡面的服務端點</li></ul></li><li>Higher-level patterns<ul><li>Controller pattern: 如何監控和維護一系列的 K8S 資源維持在希望的狀態中</li><li>Operator pattern: 如何使用 CustomResourceDefinitions 來將日常操作和維護應用服務的動作封裝起來</li></ul></li></ul><h3 id="Top-10-Courses-to-Learn-Linux-Command-Line-in-2020-—-Best-and-FREE"><a href="#Top-10-Courses-to-Learn-Linux-Command-Line-in-2020-—-Best-and-FREE" class="headerlink" title="Top 10 Courses to Learn Linux Command Line in 2020 — Best and FREE"></a><a href="https://medium.com/javarevisited/top-10-courses-to-learn-linux-command-line-in-2020-best-and-free-f3ee4a78d0c0" target="_blank" rel="noopener">Top 10 Courses to Learn Linux Command Line in 2020 — Best and FREE</a></h3><p>即使已經有數以百計對於人類來說相對友善的 GUI 可以用來管理系統，但是為什麼 Command Line 仍然還是一直在被使用呢？我想每個工程師應該都會同意其實 Command Line 比 GUI 介面強太多了；而目前 Linux 也是運行應用服務最主流的作業系統，因此身為一位程式設計師，IT 專業人員，或是研發工程師，其實都逃不了去學習跟了解 Liunx，當然還有用來管理他的 Command Line，因此這篇文章推薦了 10 堂最棒的 Linux 線上訓練課程</p><ol><li><a href="https://www.udemy.com/course/introduction-to-linux-centos-7/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-sw4jr3M94ge0NCAZfEn9MQ" target="_blank" rel="noopener">Introduction To Linux</a></li><li><a href="https://www.udemy.com/course/linux-command-line-volume1/?ranMID=39197&ranEAID=JVFxdTr9V80&ranSiteID=JVFxdTr9V80-a4Y05gxWjTXwLpspifvP9g&LSNPUBID=JVFxdTr9V80" target="_blank" rel="noopener">Linux Command Line Basics</a></li><li><a href="https://www.udemy.com/course/vim-commands-cheat-sheet/?ranMID=39197&ranEAID=JVFxdTr9V80&ranSiteID=JVFxdTr9V80-BoEjAQC8JlwiWklRZ5EvQg&LSNPUBID=JVFxdTr9V80" target="_blank" rel="noopener">Vim Masterclass</a></li><li><a href="https://www.educative.io/courses/bash-for-programmers?authorName=Educative?affiliate_id=5073518643380224" target="_blank" rel="noopener">Bash for Programmers</a></li><li><a href="https://www.udemy.com/course/command-line/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-LlQcd2gIrhD0xD6L0YD3OQ" target="_blank" rel="noopener">Learn The Linux Command Line: Basic Commands</a></li><li><a href="https://www.udemy.com/course/red-hat-enterprise-linux-technical-overview/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-Pa9nwMQS9HhzX.tfP4wSQw" target="_blank" rel="noopener">Red Hat Enterprise Linux Technical Overview</a></li><li><a href="https://www.udemy.com/course/linux-tutorials/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-9k2paW4CKhrDxaDJPwX0JQ" target="_blank" rel="noopener">Linux Tutorials and Projects (Free)</a></li><li><a href="https://www.udemy.com/course/learn-linux-on-a-mac/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-BxtBII8ebR3KkgxUwCqUVQ" target="_blank" rel="noopener">Learn Linux on a MAC or Windows</a></li><li><a href="https://www.udemy.com/course/linux-academy-linux-operating-system-fundamentals/?LSNPUBID=JVFxdTr9V80&ranEAID=JVFxdTr9V80&ranMID=39197&ranSiteID=JVFxdTr9V80-25M8qANGGKP4HCuyTBqECw" target="_blank" rel="noopener">Linux Operating System Fundamentals</a></li><li><a href="https://www.udemy.com/course/linux-administration-bootcamp/?ranMID=39197&ranEAID=JVFxdTr9V80&ranSiteID=JVFxdTr9V80-KLsjHew85D5uY5hcbnMa1Q&LSNPUBID=JVFxdTr9V80" target="_blank" rel="noopener">Linux Administration Bootcamp: Go from Beginner to Advanced</a></li></ol><h3 id="xxh"><a href="#xxh" class="headerlink" title="xxh"></a><a href="https://github.com/xxh/xxh" target="_blank" rel="noopener">xxh</a></h3><p>在這邊要推薦一個叫做 xxh 的好用工具，身為一位 DevOps/SRE 一定避免不了登入到非工作環境的機器中去查找問題，自己日常在本地端 Terminal 一定會設定很多好用的 Alias, 工具或是顯示顏色，但是一旦 ssh 連線到其他的機器中時，這些設定都不復存在，你就像是一個手無寸鐵的嬰兒一般 XD 而 xxh 的功能就是可以把你最喜愛的 shell 給帶到遠端的機器去，而且不需要 root 權限跟在系統安裝東西！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 28 期 - 使用 cert-manager 管理 K8S TLS 憑證</title>
      <link href="/2020/05/12/28-cert-manager/"/>
      <url>/2020/05/12/28-cert-manager/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="使用-cert-manager-管理-K8S-TLS-憑證"><a href="#使用-cert-manager-管理-K8S-TLS-憑證" class="headerlink" title="使用 cert-manager 管理 K8S TLS 憑證"></a><a href="https://medium.com/starbugs/%E4%BD%BF%E7%94%A8-cert-manager-%E7%AE%A1%E7%90%86-k8s-tls-%E6%86%91%E8%AD%89-ab6258af9195" target="_blank" rel="noopener">使用 cert-manager 管理 K8S TLS 憑證</a></h3><p>在這個對資訊安全越來越要求的時代，想要架設一個線上服務時，透過 HTTPS 協定來傳輸資料是再正常不過的了！不過當手上有一堆 TLS 憑證時要怎麼管理呢？！本週專欄將介紹如何透過 cert-manager 來自動化管理在 K8S 中使用到的 TLS Certificate</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="How-I-Landed-Multiple-Software-Engineer-Interviews-After-Being-Laid-Off"><a href="#How-I-Landed-Multiple-Software-Engineer-Interviews-After-Being-Laid-Off" class="headerlink" title="How I Landed Multiple Software Engineer Interviews After Being Laid Off"></a><a href="https://www.freecodecamp.org/news/how-i-was-landing-software-engineer-interviews-after-being-laid-off-2/" target="_blank" rel="noopener">How I Landed Multiple Software Engineer Interviews After Being Laid Off</a></h3><p>「I was recently laid off for the first time in my life. I realized this meant there was something bigger and more exciting out there for me.」解僱並未說明著一切結束了，而是另一段更讓人興奮的開始！很喜歡作者面對未來的態度，雖然他也許一般人相同，在文章中確實地列出了自己的恐懼，但是在另一面的積極性更值得我們去學習！</p><h3 id="围观-GitHub-重磅推出的四大新功能"><a href="#围观-GitHub-重磅推出的四大新功能" class="headerlink" title="围观 GitHub 重磅推出的四大新功能"></a><a href="https://juejin.im/post/5eb4287a5188255fd54de601" target="_blank" rel="noopener">围观 GitHub 重磅推出的四大新功能</a></h3><p>GitHub 不只在前些時候推出了 APP，現在又要繼續推出新的功能啦！我最喜歡的新功能是 GitHub Discussions！讓全球的工程師能夠有更適合的地方以及更多選擇能無壓力的參與開源！</p><h3 id="今天刻什麼？-—-華麗側邊欄"><a href="#今天刻什麼？-—-華麗側邊欄" class="headerlink" title="今天刻什麼？ — 華麗側邊欄"></a><a href="https://medium.com/@Whien/%E4%BB%8A%E5%A4%A9%E5%88%BB%E4%BB%80%E9%BA%BC-%E8%8F%AF%E9%BA%97%E5%81%B4%E9%82%8A%E6%AC%84-55d76ef321e9" target="_blank" rel="noopener">今天刻什麼？ — 華麗側邊欄</a></h3><p>「相信對一個網頁前端工程師來說，側邊欄是常見的對手，而一般的側邊欄（Sidebar）已經對我們來說漸漸的越來越無感（作者把我想講的話講完了，哈哈哈）」接著說，但有時候面對一些 UI 設計稿，還是會讓人想破頭不知道該如何是好，這篇文章完美的詮釋了想破頭的過程 XD</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Deno-1-0-What-you-need-to-know"><a href="#Deno-1-0-What-you-need-to-know" class="headerlink" title="Deno 1.0: What you need to know"></a><a href="https://blog.logrocket.com/deno-1-0-what-you-need-to-know/" target="_blank" rel="noopener">Deno 1.0: What you need to know</a></h3><p>萬眾矚目的 Deno 總算是要發佈 1.0 版了！作為 Node 的進化版，Deno 強化了對於存取權限的控制、支援 TypeScript 跟 ES Module，而且也提供了很多好用的內建工具，究竟 Deno 會不會就此一炮而紅呢？</p><h3 id="How-I’m-organizing-my-Go-applications"><a href="#How-I’m-organizing-my-Go-applications" class="headerlink" title="How I’m organizing my Go applications"></a><a href="https://link.medium.com/ttcRnLGen6" target="_blank" rel="noopener">How I’m organizing my Go applications</a></h3><p>這篇的作者分享了他都怎麼組織 Go 的程式碼、還有在寫扣時怎麼把邏輯拆分清楚。雖然程式碼怎麼樣才算乾淨這問題見仁見智，但多看看別人都是怎麼做的，有時會有一些意想不到的收穫～</p><h3 id="Design-Pattern-In-React-Component-—-Compound-component-複合元件"><a href="#Design-Pattern-In-React-Component-—-Compound-component-複合元件" class="headerlink" title="Design Pattern In React Component — Compound component (複合元件)"></a><a href="https://link.medium.com/l7j8YaQen6" target="_blank" rel="noopener">Design Pattern In React Component — Compound component (複合元件)</a></h3><p>近年來隨著前端應用越來越複雜，前端工程師也不能只是會刻畫面，還要懂一些基本的 design pattern 才行。這篇用了幾個例子告訴你使用 Compound Component 有什麼好處、什麼時候該用還有該怎麼用，推薦給 React 的開發者們</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Storybook-說說元件的故事吧！"><a href="#Storybook-說說元件的故事吧！" class="headerlink" title="Storybook | 說說元件的故事吧！"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/storybook-tutorial-90189a4d0275" target="_blank" rel="noopener">Storybook | 說說元件的故事吧！</a></h3><p>初次見到 Storybook 是在 ios 的開發上面，沒想到 storybook 也可以運用在前端上了。元件這麼多，怎麼知道哪種元件用在哪些地方？用 Story Book 來說說元件的故事。(標題下的好呀!)</p><h3 id="學習成為不焦慮的PM：我如何克服低潮與倦怠"><a href="#學習成為不焦慮的PM：我如何克服低潮與倦怠" class="headerlink" title="學習成為不焦慮的PM：我如何克服低潮與倦怠"></a><a href="https://medium.com/3pm-lab/how-to-overcome-negative-emotions-and-avoid-burnout-2a0c0c01c78a" target="_blank" rel="noopener">學習成為不焦慮的PM：我如何克服低潮與倦怠</a></h3><p>今天帶來三 PM 實驗室 nana 的文章。在搬來荷蘭之前，我在新加坡的新創工作，大家都知道在新創文化中，員工加入團隊常常不只是工作，而是也對公司願景有信仰，總是盡心盡力的在愛護產品和使用者，加上新加坡的「怕輸」文化，某種程度上也造就了大家有一點工作狂的傾向。職業倦怠像是那些時有時無的頭痛，容易被忽視，卻又在不知不覺中一步步影響我們的生活。</p><h3 id="棄用-Keybase-Zoom-買下-Keybase-的新聞"><a href="#棄用-Keybase-Zoom-買下-Keybase-的新聞" class="headerlink" title="棄用 Keybase (Zoom 買下 Keybase 的新聞)"></a><a href="https://blog.gslin.org/archives/2020/05/10/9520/%E6%A3%84%E7%94%A8-keybase-zoom-%E8%B2%B7%E4%B8%8B-keybase-%E7%9A%84%E6%96%B0%E8%81%9E/" target="_blank" rel="noopener">棄用 Keybase (Zoom 買下 Keybase 的新聞)</a></h3><p>節錄：現有的團隊有 2500 人，裡面的技術團隊沒辦法搞定 end-to-end encryption，ok 沒關係，那現在的 CTO Brendan Ittelson 應該可以建一個團隊吧？所以我翻了一下他的 LinkedIn 看了一下他的經歷，對不起我錯了，我瞬間不知道怎麼寫下去了，我豆頁痛…</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Classic-Mistakes-That-Every-Developer-Has-Made"><a href="#Classic-Mistakes-That-Every-Developer-Has-Made" class="headerlink" title="Classic Mistakes That Every Developer Has Made"></a><a href="https://levelup.gitconnected.com/classic-mistakes-that-every-developer-has-made-b0ed0bc5e087" target="_blank" rel="noopener">Classic Mistakes That Every Developer Has Made</a></h3><p>文章中列出工程師常犯的典型錯誤有哪些，並且點出該怎麼做比較好，看完之後發現自己也犯了好幾條XD 要好好檢討檢討了 T_T</p><ol><li>Commit Code 到錯誤的 Branch</li><li>為求快速而使用很髒的解法</li><li>為求炫技寫出華而不實的程式</li><li>低估工作量</li><li>自以為不用測試自己的程式碼</li><li>沒有 Commit 到正確的檔案</li><li>因為知識的不足，導致重造輪子</li><li>缺乏練習</li><li>繼承所有的事情</li><li>太過有自信</li></ol><h3 id="Attacking-and-Auditing-Docker-Containers-and-Kubernetes-Clusters"><a href="#Attacking-and-Auditing-Docker-Containers-and-Kubernetes-Clusters" class="headerlink" title="Attacking and Auditing Docker Containers and Kubernetes Clusters"></a><a href="https://github.com/appsecco/attacking-and-auditing-docker-containers-and-kubernetes-clusters" target="_blank" rel="noopener">Attacking and Auditing Docker Containers and Kubernetes Clusters</a></h3><p>因為 COVID19 的關係導致很多的 Secrutiy Training 都無法進行，因此 Appsecco 決定將 資安訓練課程給開源出來，讓大家一起來學習，課程的重點主要專注於 Kubernetes 內的容器和叢集管理方面，而大概的重點會擺在以下幾個部分：</p><ul><li>聚焦於應用程式和容器架構的資安方面</li><li>學會如何使用常見的工具和技巧來攻擊運行在容器化環境中的應用程式</li><li>如何攻擊運行在 Kubernetes 中的應用程式</li><li>學會如何使用工具和一些客製化的腳本來進行資安集合的最佳守則</li></ul><h3 id="A-Beginners-Guide-to-Basic-Indexing"><a href="#A-Beginners-Guide-to-Basic-Indexing" class="headerlink" title="A Beginners Guide to Basic Indexing"></a><a href="https://bannister.me/blog/a-beginners-guide-to-basic-indexing/" target="_blank" rel="noopener">A Beginners Guide to Basic Indexing</a></h3><p>大家應該或多或少知道在使用 Database 的時候，透過 Indexing 可以增加查詢的速度，不過具體來說應該要怎麼做呢？這邊文章從搜尋的語法開始介紹起，並且點出哪些搜尋的方式是不好的；接著開始說明要如何做出對的 Indexing 抉擇，以及各種 Scan 的分析，是一篇滿淺顯易懂的入門文章</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 27 期 - 我是一個工程師，晚上的我搖身一變，變成一個加班的工程師</title>
      <link href="/2020/05/05/27-maredevil/"/>
      <url>/2020/05/05/27-maredevil/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Unit-Test-中的替身：搞不清楚的Dummy-、Stub、Spy、Mock、Fake"><a href="#Unit-Test-中的替身：搞不清楚的Dummy-、Stub、Spy、Mock、Fake" class="headerlink" title="Unit Test 中的替身：搞不清楚的Dummy 、Stub、Spy、Mock、Fake"></a><a href="https://medium.com/starbugs/unit-test-%E4%B8%AD%E7%9A%84%E6%9B%BF%E8%BA%AB-%E6%90%9E%E4%B8%8D%E6%B8%85%E6%A5%9A%E7%9A%84dummy-stub-spy-mock-fake-cc4d23c53fcf" target="_blank" rel="noopener">Unit Test 中的替身：搞不清楚的Dummy 、Stub、Spy、Mock、Fake</a></h3><p>最近開始接觸單元測試，一堆名詞看不懂，來狠狠地 K 一下。而單元測試中的最佳男配角，就是替身 Double。藉由寫一篇文章的方式來讓自己更了解單元測試中的重要部分。一起來學測試，Go Go !!</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="What-is-Testing-in-Software-—-The-Three-Main-Types-of-Testing-Explained-in-Simple-English"><a href="#What-is-Testing-in-Software-—-The-Three-Main-Types-of-Testing-Explained-in-Simple-English" class="headerlink" title="What is Testing in Software? — The Three Main Types of Testing Explained in Simple English"></a><a href="https://levelup.gitconnected.com/what-is-testing-in-software-the-three-main-types-of-testing-explained-in-simple-english-da0fec7ae5d6" target="_blank" rel="noopener">What is Testing in Software? — The Three Main Types of Testing Explained in Simple English</a></h3><p>如果你還不曉得為什麼要做測試，甚至是困惑說「我都寫完程式了？我還要另外寫程式來確認他沒有問題？」那你應該要看一下這篇文章，作者很循序漸進的告訴你為什麼需要做測試。最後的結論也分享了我很感同身受的一段話「If you’re still a developer that doesn’t write tests for your code, you’re missing out on a lot of these benefits.」是寫過測試才能懂的。</p><h3 id="CSS-Background-Image-Size-Tutorial-–-How-to-Code-a-Full-Page-Background-Image"><a href="#CSS-Background-Image-Size-Tutorial-–-How-to-Code-a-Full-Page-Background-Image" class="headerlink" title="CSS Background Image Size Tutorial – How to Code a Full Page Background Image"></a><a href="https://www.freecodecamp.org/news/css-full-page-background-image-tutorial/" target="_blank" rel="noopener">CSS Background Image Size Tutorial – How to Code a Full Page Background Image</a></h3><p>自認為處理圖片的擺放一直是我的罩門之一，現在都用同一種方法把圖片放到 <code>div</code> 的 <code>background</code> 上，但一直都沒有去好好了解為什麼 😭，但這篇文章逐步告訴你為什麼需要設定那些屬性，能對和我一樣對圖片苦手的人來說幫助很大！</p><h3 id="51-Most-popular-JS-repositories-on-GitHub-in-March-and-April-2020-during-quarantine"><a href="#51-Most-popular-JS-repositories-on-GitHub-in-March-and-April-2020-during-quarantine" class="headerlink" title="51 Most popular JS repositories on GitHub in March and April 2020 (during quarantine)"></a><a href="https://dev.to/iriskatastic/51-most-popular-js-repositories-on-github-in-march-and-april-2020-during-quarantine-1h1l" target="_blank" rel="noopener">51 Most popular JS repositories on GitHub in March and April 2020 (during quarantine)</a></h3><p>GitHub 上在 2020 年的 3, 4月最受歡迎的 51 個 repositories！因為剛好受到病毒肆虐，導致許多人都在家工作，所以這段時間各個 epositories 的變化剛好體現了目前遠端工作的趨勢，也可以幫助預測未來五月份的走向。</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="為了瞭解原理，那就來實作一個-Redux-Saga-吧！"><a href="#為了瞭解原理，那就來實作一個-Redux-Saga-吧！" class="headerlink" title="為了瞭解原理，那就來實作一個 Redux-Saga 吧！"></a><a href="https://link.medium.com/y4lyWF4Fb6" target="_blank" rel="noopener">為了瞭解原理，那就來實作一個 Redux-Saga 吧！</a></h3><p>想了解 Redux-Saga 的原理有很多種方法，其中最 hardcore 的就是自己手刻一個。雖然這篇文章有點長，但看完真的會完全了解 Redux-Saga 內部是怎麼做的</p><h3 id="Rust-and-Node-js-A-match-made-in-heaven"><a href="#Rust-and-Node-js-A-match-made-in-heaven" class="headerlink" title="Rust and Node.js: A match made in heaven"></a><a href="https://blog.logrocket.com/rust-and-node-js-a-match-made-in-heaven/" target="_blank" rel="noopener">Rust and Node.js: A match made in heaven</a></h3><p>程式語言之間不一定總是競爭關係，反而還有可能是合作，這篇文章就完美示範了如何把 Rust 程式碼編譯成 addon，並且在 Nodejs 使用 N-API 把 addon 載入進去。如此一來就可以把兩者的優點結合起來，平常用 JS 開發速度快，需要高效能的地方則用 Rust 進行處理</p><h3 id="Best-Practices-for-Bash-Scripts"><a href="#Best-Practices-for-Bash-Scripts" class="headerlink" title="Best Practices for Bash Scripts"></a><a href="https://link.medium.com/UEtk22FHb6" target="_blank" rel="noopener">Best Practices for Bash Scripts</a></h3><p>Shell Script 是工程師的好朋友，但你真的了解他嗎？快來看看 Shell Script 的 best practice 還有一些小技巧，看完這篇感覺功力又更強了</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="搶救茶壺大作戰：418-I-am-a-teapot"><a href="#搶救茶壺大作戰：418-I-am-a-teapot" class="headerlink" title="搶救茶壺大作戰：418 I am a teapot"></a><a href="https://blog.huli.tw/2019/06/14/http-status-code-418-teapot/" target="_blank" rel="noopener">搶救茶壺大作戰：418 I am a teapot</a></h3><p>這太好笑了，原來有個 HTTP Status Code 狀態碼 418，當你呼叫它的時候，它會回應你：我是個茶壺，你幹嘛拿我來泡咖啡阿蛤？github 上從 2017 年開始論戰，到底應不應該保留茶壺呢？</p><h3 id="👨🏻‍💻-How-to-solve-the-Z-index-issue-Within-1-minute😲😲"><a href="#👨🏻‍💻-How-to-solve-the-Z-index-issue-Within-1-minute😲😲" class="headerlink" title="👨🏻‍💻 How to solve the Z-index issue Within 1 minute😲😲"></a><a href="https://dev.to/sharmakushal/how-to-solve-the-z-index-issue-within-1-minute-4pn9" target="_blank" rel="noopener">👨🏻‍💻 How to solve the Z-index issue Within 1 minute😲😲</a></h3><p>如何用一分鐘的時間解決 z-index 問題？當你遇到 z-index 問題時，深吸一口氣，不要驚慌，緩緩的打開你的瀏覽器 … 。</p><h3 id="Don’t-Mock-What-You-Don’t-Own"><a href="#Don’t-Mock-What-You-Don’t-Own" class="headerlink" title="Don’t Mock What You Don’t Own"></a><a href="https://dev.to/satansdeer/dont-mock-what-you-dont-own-cd6" target="_blank" rel="noopener">Don’t Mock What You Don’t Own</a></h3><p>不要 Mock 你不知道的東西。在你不知道這個物件代表什麼意思的時候，如果你去 Mock 它會發生很恐怖的事情。因為 unit test 不僅僅代表是測試，而是代表一種設計。Mock 外部的相依函式庫可以幫助你設計更好的程式。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Celebrating-Helm’s-CNCF-Graduation"><a href="#Celebrating-Helm’s-CNCF-Graduation" class="headerlink" title="Celebrating Helm’s CNCF Graduation"></a><a href="https://helm.sh/blog/celebrating-helms-cncf-graduation/" target="_blank" rel="noopener">Celebrating Helm’s CNCF Graduation</a></h3><p>哇！就在即將邁入五月之前，Helm 從 CNCF 畢業了！相當年 Helm 只是 Deis 的一個小小的黑客松專案而已，在歷經五年之後，主要維護者學提到很多關於撰寫程式，社群和組織政治的相關知識，而目前 Helm 被將近 70 % 的 Kubernetes 使用者所使用著；那麼 Helm 將來會發生什麼樣的變化呢？在開發流程方面將不會有什麼改變，新版的 Helm 將會繼續往穩定性和兼容性前進，而且主要維護者已經開始在對 Helm 4 要開發什麼樣的新功能在調查中，就讓我們拭目以待吧！</p><h3 id="Grafana-7-0-sneak-peek-Query-history-in-Explore"><a href="#Grafana-7-0-sneak-peek-Query-history-in-Explore" class="headerlink" title="Grafana 7.0 sneak peek: Query history in Explore"></a><a href="https://grafana.com/blog/2020/04/30/grafana-7.0-sneak-peek-query-history-in-explore/" target="_blank" rel="noopener">Grafana 7.0 sneak peek: Query history in Explore</a></h3><p>Grafana 7.0 即將發佈，這次多了可以檢閱歷史查詢的功能，而從過去歷史撈出來的搜尋紀錄可以做什麼呢？簡而言之就是可以把常用的搜尋紀錄記下來，方便使用者可以重複利用，詳細功能如下：</p><ul><li>再執行一次此搜尋</li><li>建立或是修改註解</li><li>把搜尋紀錄複製到剪貼簿內</li><li>把擁有這個搜尋的網址複製到剪貼簿中</li><li>將此搜尋紀錄標上星星</li></ul><h3 id="Getting-Started-With-Pulumi-Go-SDK"><a href="#Getting-Started-With-Pulumi-Go-SDK" class="headerlink" title="Getting Started With Pulumi Go SDK"></a><a href="https://itnext.io/getting-started-with-pulumi-sdk-22dc0b7ab83f" target="_blank" rel="noopener">Getting Started With Pulumi Go SDK</a></h3><p>IaC 的領域競爭越來越白熱化，相對於 Terraform 來說，Pulumi 可能會更接近撰寫一班程式的感覺，而今天這篇文章，便是帶著大家學習如何使用 Pulumi Go SDK 來撰寫程式管理雲端資源！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 26 期 - 讓瀏覽器自己說話原來那麼簡單！</title>
      <link href="/2020/04/28/26-let-webpage-speak/"/>
      <url>/2020/04/28/26-let-webpage-speak/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Side-Project-從無到有-讓網頁自己說話！"><a href="#Side-Project-從無到有-讓網頁自己說話！" class="headerlink" title="Side Project 從無到有-讓網頁自己說話！"></a><a href="https://medium.com/starbugs/side-project-%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89-%E8%AE%93%E7%B6%B2%E9%A0%81%E8%87%AA%E5%B7%B1%E8%AA%AA%E8%A9%B1-785bc67f6c3b" target="_blank" rel="noopener">Side Project 從無到有-讓網頁自己說話！</a></h3><p>目標是讓瀏覽器能夠閱讀 Time for kids 的文章內容，這個部分利用了 Chrome extension 來獲取網頁中的內容，說話的部分也有 JavaScript 的原生方法，SpeechSynthesisUtterance 和 SpeechSynthesis 可以使用，是個簡單好上手的 Project！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="【無障礙網頁祕技】前端切版前要注意什麼細節呢？"><a href="#【無障礙網頁祕技】前端切版前要注意什麼細節呢？" class="headerlink" title="【無障礙網頁祕技】前端切版前要注意什麼細節呢？"></a><a href="https://medium.com/@ru.hsu916/%E7%84%A1%E9%9A%9C%E7%A4%99%E7%B6%B2%E9%A0%81%E7%A5%95%E6%8A%80-%E5%89%8D%E7%AB%AF%E5%88%87%E7%89%88%E5%89%8D%E8%A6%81%E6%B3%A8%E6%84%8F%E4%BB%80%E9%BA%BC%E7%B4%B0%E7%AF%80%E5%91%A2-f1b5715a2c06" target="_blank" rel="noopener">【無障礙網頁祕技】前端切版前要注意什麼細節呢？</a></h3><p>無障礙網頁主要是要讓「視覺障礙者」或「聽覺障礙者」可以使用其他替代方式獲得網頁的資訊內容，為了讓他們能夠更方便地閱讀網站，切版時需要注意哪些事情呢？本篇文章用了一些網站為範本來講解無障礙網站的特色。</p><p>如果對無障礙有更深的興趣，也非常推薦第 11 屆鐵人賽的得獎作品「<a href="https://ithelp.ithome.com.tw/users/20108045/ironman/2454" target="_blank" rel="noopener">實踐無障礙網頁設計（Web Accessibility）</a>」</p><h3 id="10-Best-of-Javascript-Games"><a href="#10-Best-of-Javascript-Games" class="headerlink" title="10+ Best of Javascript Games"></a><a href="https://dev.to/gscode/10-best-of-javascript-games-3mjj" target="_blank" rel="noopener">10+ Best of Javascript Games</a></h3><p>如果你既是個前端工程師也喜歡遊戲，那絕對不能錯過這 10 個有趣的 JavaScript 遊戲！只是第一個和最後一個我實在是捉摸不定他們的玩法 😭</p><h3 id="How-to-Build-a-Simple-Pokemon-Web-App-with-React-Hooks-and-the-Context-API"><a href="#How-to-Build-a-Simple-Pokemon-Web-App-with-React-Hooks-and-the-Context-API" class="headerlink" title="How to Build a Simple Pokémon Web App with React Hooks and the Context API"></a><a href="https://www.freecodecamp.org/news/building-a-simple-pokemon-web-app-with-react-hooks-and-context-api/" target="_blank" rel="noopener">How to Build a Simple Pokémon Web App with React Hooks and the Context API</a></h3><p>這是個很有愛的 Side Project 😂，讓我想到之前也曾經因為無聊做了一個<a href="https://ms314006.github.io/team-of-pokemon/dist/" target="_blank" rel="noopener">神奇寶貝背包</a>，雖然在文章中是用 React 完成的，但因為作者有把思考的一切都用文字清楚地表達出來，所以不妨可以用自己的做法重新跟著做一遍（無聊的話啦 😂），或是想一下要是你會如何去解決碰到的問題！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="What-is-the-toJSON-Function-in-JavaScript"><a href="#What-is-the-toJSON-Function-in-JavaScript" class="headerlink" title="What is the toJSON() Function in JavaScript?"></a><a href="http://thecodebarbarian.com/what-is-the-tojson-function-in-javascript.html" target="_blank" rel="noopener">What is the <code>toJSON()</code> Function in JavaScript?</a></h3><p>在 JS 中，當你嘗試把一個物件進行 <code>JSON.stringify</code> 時他會呼叫物件的 <code>toJSON</code> method，所以可以透過自己實作 <code>toJSON</code> 讓那些複雜的物件只顯示出比較重要的資訊，滿實用的一個小技巧</p><h3 id="How-to-Manage-Database-Timeouts-and-Cancellations-in-Go"><a href="#How-to-Manage-Database-Timeouts-and-Cancellations-in-Go" class="headerlink" title="How to Manage Database Timeouts and Cancellations in Go"></a><a href="https://www.alexedwards.net/blog/how-to-manage-database-timeouts-and-cancellations-in-go" target="_blank" rel="noopener">How to Manage Database Timeouts and Cancellations in Go</a></h3><p>在開發後端 API 時有時會遇到 SELECT 操作超時，或是資料還沒撈出來但請求已經被取消了，這時就可以用 Go 的 context 優雅的取消資料庫的操作，避免那些需要跑很久的指令把資料庫卡死</p><h3 id="How-Netflix-brings-safer-and-faster-streaming-experiences-to-the-living-room-on-crowded-networks-using-TLS-1-3"><a href="#How-Netflix-brings-safer-and-faster-streaming-experiences-to-the-living-room-on-crowded-networks-using-TLS-1-3" class="headerlink" title="How Netflix brings safer and faster streaming experiences to the living room on crowded networks using TLS 1.3"></a><a href="https://netflixtechblog.com/how-netflix-brings-safer-and-faster-streaming-experience-to-the-living-room-on-crowded-networks-78b8de7f758c" target="_blank" rel="noopener">How Netflix brings safer and faster streaming experiences to the living room on crowded networks using TLS 1.3</a></h3><p>Netflix 最近為了提升使用者體驗開始採用 TLS 1.3，而這篇文章大概介紹了 TLS 是什麼，以及 TLS 1.3 跟舊版比起來有什麼特別厲害之處。雖然 TLS 不是應用層協定所以一般人不太會接觸到，但文章本身不難可以當作增廣見聞看看</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="7-amazing-CSS-properties-you-may-not-know-yet"><a href="#7-amazing-CSS-properties-you-may-not-know-yet" class="headerlink" title="7 amazing CSS properties you may not know (yet)"></a><a href="https://dev.to/mustapha/7-amazing-css-properties-you-may-not-know-yet-eej" target="_blank" rel="noopener">7 amazing CSS properties you may not know (yet)</a></h3><p>你可能沒看過的 7 個令人驚艷的 CSS 屬性。極度炫炮的 7 個 CSS 屬性，原來還可以這樣喔？嗯嗯嗯嗯阿阿嗯嗯阿。</p><h3 id="TDD-Changed-My-Life"><a href="#TDD-Changed-My-Life" class="headerlink" title="TDD Changed My Life"></a><a href="https://medium.com/javascript-scene/tdd-changed-my-life-5af0ce099f80" target="_blank" rel="noopener">TDD Changed My Life</a></h3><p>TDD 改變了我的生活。學 TDD 有什麼好處？可以學到軟體的經濟學。可以學到五個寫 unit test 必須問自己的問題。可測試的程式碼帶來更好的軟體架構。如何使用更多的 pure funtion？測試 React.js 的元件。</p><h3 id="Building-a-Rails-App-With-Multiple-Subdomains"><a href="#Building-a-Rails-App-With-Multiple-Subdomains" class="headerlink" title="Building a Rails App With Multiple Subdomains"></a><a href="https://dev.to/appsignal/building-a-rails-app-with-multiple-subdomains-g05" target="_blank" rel="noopener">Building a Rails App With Multiple Subdomains</a></h3><p>Ruby on Rails 中如何實作 subdomain 呢？看這篇就對了！即使你使用的框架不是 Rails，也可以借此觀念思考看看，你使用的框架該如何實作 subdomain 的功能。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="來瞧瞧看-Kubernetes-Cluster-API-v1alpha3-多了什麼樣的新功能吧！"><a href="#來瞧瞧看-Kubernetes-Cluster-API-v1alpha3-多了什麼樣的新功能吧！" class="headerlink" title="來瞧瞧看 Kubernetes Cluster API v1alpha3 多了什麼樣的新功能吧！"></a><a href="https://kubernetes.io/blog/2020/04/21/cluster-api-v1alpha3-delivers-new-features-and-an-improved-user-experience/" target="_blank" rel="noopener">來瞧瞧看 Kubernetes Cluster API v1alpha3 多了什麼樣的新功能吧！</a></h3><p>Cluster API 是一個 Kubernetes 的專案，希望可以使用宣告式而且類似於 K8S 風格的 API 來新增，設定組態跟管理叢集，而在 v1alpha3 多了不少實用的功能！</p><ul><li><p>Declarative Control Plane Management: 提供 API 讓使用者可以 Deploy 跟 Scale K8S 的 Control Plane (包含 etcd)，這個是很多 Cluster API 使用者很想要的功能，因為現在要做到這些事情，尤其是 etcd 的管理，其實都是有點手工在進行操作的</p></li><li><p>Support for Distributing Control Plane Nodes Across Failure Domains To Reduce Risk: Cluster API 使用者可以把 Control Plane 節點分成多群的概念，要是今天有某一群的 Control Plane 節點壞掉了也不用擔心，可以切到另外一群去做使用</p></li><li><p>Automated Replacement of Unhealthy Nodes: 讓一個 K8S 的節點壞掉的原因可能有很多種，新的 Cluster API 現在包含 MachineHealthCheck 這個資源，並且還多了一個 Controller 來監控節點的健康情況，要是今天某一個節點出問題了，就會被自動移除掉；而且可以在 Controller 中設定移除掉的條件，例如要等多久，最多只能移除幾個節點…等</p></li><li><p>Support for Infrastructure-Managed Node Groups: 假如使用者維護很大的 Cluster，所以可能會需要一次新增或是刪除數以百計的節點，雖然 Public Cloud 可以乘載很大量的節點，但是針對每一個 Node 的管理都要透過分開的 API 請求去達成，這樣的做法太沒有效率跟擴展性了；所以假如 Public Cloud 有提供節點的分群機制，例如 AWS Auto Scaling Grup，Azure Machine Scale Set, GCP Managed Instance Group…等，透過 Infrastructure Providers 整合來支援這個新的 Cluster API 的話，使用者就可以直接 Deploy 整群的節點</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 25 期 - 面對威脅，資安也需要超前部署！</title>
      <link href="/2020/04/21/25-prepare-for-security-in-advance/"/>
      <url>/2020/04/21/25-prepare-for-security-in-advance/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="聽說不能用明文存密碼，那到底該怎麼存？"><a href="#聽說不能用明文存密碼，那到底該怎麼存？" class="headerlink" title="聽說不能用明文存密碼，那到底該怎麼存？"></a><a href="https://medium.com/starbugs/how-to-store-password-in-database-sefely-6b20f48def92" target="_blank" rel="noopener">聽說不能用明文存密碼，那到底該怎麼存？</a></h3><p>不管資料庫再怎麼安全，還是有可能會有被入侵的一天。所以這篇文章要教大家怎麼超前部署，從最簡單的編碼開始探討各種儲存密碼的方式，看看要怎麼做到即使資料庫被駭了，使用者的密碼也不會洩漏出去</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="How-to-Inject-JavaScript-Code-to-Manipulate-Websites-Automatically"><a href="#How-to-Inject-JavaScript-Code-to-Manipulate-Websites-Automatically" class="headerlink" title="How to Inject JavaScript Code to Manipulate Websites Automatically"></a><a href="https://www.freecodecamp.org/news/how-to-inject-javascript-code-to-manipulate-websites-automatically/" target="_blank" rel="noopener">How to Inject JavaScript Code to Manipulate Websites Automatically</a></h3><p>「知己知彼，百戰百勝！」，如果想要知道該怎麼預防自己的網站被注入 JavaScript 的程式碼，就得先看看該怎麼在別人的網頁中使用 JavaScript！</p><h3 id="🍥-9-张看面试题也写不出来的-CSS-图案！"><a href="#🍥-9-张看面试题也写不出来的-CSS-图案！" class="headerlink" title="🍥 9 张看面试题也写不出来的 CSS 图案！"></a><a href="https://juejin.im/post/5e983158f265da480e68e658" target="_blank" rel="noopener">🍥 9 张看面试题也写不出来的 CSS 图案！</a></h3><p>看完這篇文章真的對 CSS 的思考又向上突破一個層級 XD，雖然現實生活中可能不會做到那麼精細的動畫，但仍然覺得作者對動畫的思路有夠 Amazing</p><h3 id="React-window-與-IntersectionObserver-API-實現無限捲動-Dcard-文章閱讀器之心得紀錄"><a href="#React-window-與-IntersectionObserver-API-實現無限捲動-Dcard-文章閱讀器之心得紀錄" class="headerlink" title="React window 與 IntersectionObserver API 實現無限捲動 Dcard 文章閱讀器之心得紀錄"></a><a href="https://medium.com/@oldmo860617/react-window-%E8%88%87-intersectionobserver-api-%E5%AF%A6%E7%8F%BE%E7%84%A1%E9%99%90%E6%8D%B2%E5%8B%95-dcard-%E6%96%87%E7%AB%A0%E9%96%B1%E8%AE%80%E5%99%A8%E4%B9%8B%E5%BF%83%E5%BE%97%E7%B4%80%E9%8C%84-97bc1c3faa07" target="_blank" rel="noopener">React window 與 IntersectionObserver API 實現無限捲動 Dcard 文章閱讀器之心得紀錄</a></h3><p>用常見的網站來當作練習前端的技巧非常有趣，作者參考 Dcard 為自己列了一些挑戰項目（基本要求就是無限滾動，然後 call API 載入更多文章）和加分條件！並且試著去實現它，然後撰寫一篇文章分享！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Testing-Go-Better-How-To-Create-Testable-Go-Code"><a href="#Testing-Go-Better-How-To-Create-Testable-Go-Code" class="headerlink" title="Testing Go Better - How To Create Testable Go Code"></a><a href="https://engineering.kablamo.com.au/posts/2020/testing-go" target="_blank" rel="noopener">Testing Go Better - How To Create Testable Go Code</a></h3><p>大家都知道 pure function 是最好測試的，因為給相同的輸入就會得到相同的輸出。但實務上不可能所有 function 都是 pure 的，多少會需要做 I/O，所以這篇要教你要怎麼設計 Go 的 function，才能做到即便不是 pure 也能方便測試</p><h3 id="旋轉拍賣-Carousell-Transactional-Service-之產品架構演進"><a href="#旋轉拍賣-Carousell-Transactional-Service-之產品架構演進" class="headerlink" title="旋轉拍賣 Carousell Transactional Service 之產品架構演進"></a><a href="https://link.medium.com/ZSyVxvh0P5" target="_blank" rel="noopener">旋轉拍賣 Carousell Transactional Service 之產品架構演進</a></h3><p>一直以來都很喜歡看這種架構演進的文章，因為架構不可能一開始就是完美的，隨著不同時期的不同需求一定會有所變化，就這樣慢慢進化到現在的樣子</p><h3 id="Clean-Code-無瑕的程式碼-閱讀筆記"><a href="#Clean-Code-無瑕的程式碼-閱讀筆記" class="headerlink" title="Clean Code 無瑕的程式碼 | 閱讀筆記"></a><a href="https://medium.com/@airwaves/clean-code-index-51e209cc47db" target="_blank" rel="noopener">Clean Code 無瑕的程式碼 | 閱讀筆記</a></h3><p>無意間看到這一系列 Clean Code 的筆記，作者目前已經寫到第十篇。推薦給沒時間的大忙人，沒時間看書來看看別人的筆記也是不錯的 XD</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Zoombot-–-Automated-Video-Meeting-AI"><a href="#Zoombot-–-Automated-Video-Meeting-AI" class="headerlink" title="Zoombot – Automated Video Meeting AI"></a><a href="https://redpepper.land/blog/zoombot/" target="_blank" rel="noopener">Zoombot – Automated Video Meeting AI</a></h3><p>WFH 在家工作但是不想坐在電腦前面怎麼辦？Zoombot 幫你自動回覆視訊會議，保證同事傻眼。</p><h3 id="Amazon-to-add-75-000-jobs-as-online-orders-surge-during-lockdowns"><a href="#Amazon-to-add-75-000-jobs-as-online-orders-surge-during-lockdowns" class="headerlink" title="Amazon to add 75,000 jobs as online orders surge during lockdowns"></a><a href="https://www.reuters.com/article/us-health-coronavirus-amazon-com/amazon-to-add-75000-more-jobs-amid-coronavirus-pandemic-idUSKCN21V1DK" target="_blank" rel="noopener">Amazon to add 75,000 jobs as online orders surge during lockdowns</a></h3><p>Amazon 多雇用了 75000 個員工來應對線上訂單的襲捲而來，讓你好好待在家裡，不用出門，以免遭遇病毒的風險。</p><h3 id="Thinking-in-React-The-2020-version"><a href="#Thinking-in-React-The-2020-version" class="headerlink" title="Thinking in React: The 2020 version"></a><a href="https://dev.to/lukeshiru/thinking-in-react-the-2020-version-4c18" target="_blank" rel="noopener">Thinking in React: The 2020 version</a></h3><p>原始的 <a href="https://reactjs.org/docs/thinking-in-react.html" target="_blank" rel="noopener">Thinking in React</a> 還在使用 class 的版本，是時候該更新一下版本了。透過五個簡單的步驟，掌握 React.js 的基本觀念。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="How-to-configure-a-production-grade-CICD-workflow-for-infrastructure-code"><a href="#How-to-configure-a-production-grade-CICD-workflow-for-infrastructure-code" class="headerlink" title="How to configure a production-grade CICD workflow for infrastructure code"></a><a href="https://gruntwork.io/guides/automations/how-to-configure-a-production-grade-ci-cd-setup-for-apps-and-infrastructure-code/" target="_blank" rel="noopener">How to configure a production-grade CICD workflow for infrastructure code</a></h3><p>採用了 Terraform 之後就什麼事都沒有了嗎？答案當然是否定的，IaC 就跟一般的程式碼沒兩樣，採用 Terraform 之後的 CI/CD 流程跟管理都還有很大的學問在，之前有兩條路可以選，分別是官方的 TerraformCloud，以及本來開源但是後來被納入官方底下的 Atlantis，而在最近 Gruntwork 推出了 Gruntwork Pipelines，運用 AWS ECS 來當成運行 Terraform CI/CD Job 的 Runner，讓 Terraform 的 CI/CD 整合解決方案又再多了一個，而且官方還有給出超級詳細的 Production 設定教學，整個設計理念也都涵蓋在其中</p><h3 id="Introducing-Gruntwork’s-AWS-Landing-Zone-Solution"><a href="#Introducing-Gruntwork’s-AWS-Landing-Zone-Solution" class="headerlink" title="Introducing Gruntwork’s AWS Landing Zone Solution"></a><a href="https://blog.gruntwork.io/introducing-gruntworks-aws-landing-zone-solution-fe581b7c7f71" target="_blank" rel="noopener">Introducing Gruntwork’s AWS Landing Zone Solution</a></h3><p>要設定一個 Production 等級的 AWS 管理環境其實是很累的，因為有很多的 AWS Account 需要設定，每個 Account 要有對應的管理權限，稽核日誌設定…等，所以 Gruntwork 這邊推出了 AWS Landing Zone Solution，把這些東西都包成了 Terraform Module，讓需要使用的人可以馬上站在巨人的肩膀上！利用 Terraform 迅速建立完美的多重 AWS 帳號管理架構</p><h3 id="npm-has-joined-GitHub"><a href="#npm-has-joined-GitHub" class="headerlink" title="npm has joined GitHub"></a><a href="https://github.blog/2020-04-15-npm-has-joined-github/" target="_blank" rel="noopener">npm has joined GitHub</a></h3><p>之前就已經有宣布 npm 要被 GitHub 收購的消息，而在上週 2020/04/15 時，收購作業總算是完成，GitHub 這邊給出承諾之後 Public npm registry 會繼續存活著，而且免費的給所有的開發者使用，而在合併完之後，將馬上會針對以下三個領域聚焦投入資源</p><ul><li>參與社群</li><li>投資資源到 registry 使用到的架構和平台</li><li>改善主要的使用體驗</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 24 期 - Terraform Cloud V.S. 開源版拼裝車</title>
      <link href="/2020/04/14/24-terraform-cloud/"/>
      <url>/2020/04/14/24-terraform-cloud/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Terraform-Cloud-V-S-開源版拼裝車"><a href="#Terraform-Cloud-V-S-開源版拼裝車" class="headerlink" title="Terraform Cloud V.S. 開源版拼裝車"></a><a href="https://medium.com/starbugs/terraform-cloud-v-s-%E9%96%8B%E6%BA%90%E7%89%88%E6%8B%BC%E8%A3%9D%E8%BB%8A-6ce9a5822a26" target="_blank" rel="noopener">Terraform Cloud V.S. 開源版拼裝車</a></h3><p>要把 Terraform 開源版本的最佳實踐守則全部弄完，其實需要不少的時間，但假如今天只是個小團隊沒有那麼多的閒功夫花在 Terraform 生態環境的建置與維護上，有沒有什麼辦法可以讓團隊馬上無痛使用 Terraform 開發？有的，就是今天要介紹的 Terraform Cloud！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="The-Best-Way-to-Learn-Front-End-Web-Development"><a href="#The-Best-Way-to-Learn-Front-End-Web-Development" class="headerlink" title="The Best Way to Learn Front End Web Development"></a><a href="https://www.freecodecamp.org/news/learn-frontend-web-development/" target="_blank" rel="noopener">The Best Way to Learn Front End Web Development</a></h3><p>看到「The web is vast - start small and keep it small」的時候，就決定要分享這篇文章了。工程師的學習之路真的不會有盡頭，因此不要想太多，重要的是必須要好好掌握語言或是框架的特性，這麼一來不論什麼時候生態圈又發生變化，才不會輕易容易被捲得昏頭轉向。</p><h3 id="CSS-Grid-剛學會怎麼用-Grid，那就來畫個-TV-檢驗圖練練手吧！"><a href="#CSS-Grid-剛學會怎麼用-Grid，那就來畫個-TV-檢驗圖練練手吧！" class="headerlink" title="CSS Grid | 剛學會怎麼用 Grid，那就來畫個 TV 檢驗圖練練手吧！"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/using-css-grid-to-draw-test-card-7ed24d3559ab" target="_blank" rel="noopener">CSS Grid | 剛學會怎麼用 Grid，那就來畫個 TV 檢驗圖練練手吧！</a></h3><p>CSS 的 Grid 和 Flex 絕對是前端工程師的排版利器！如果還在猶豫或是不曉得該不該學習，就看看其他人使用 Grid 可以做到什麼程度來考慮吧！</p><h3 id="新手向：如何给大型前端开源项目贡献源码"><a href="#新手向：如何给大型前端开源项目贡献源码" class="headerlink" title="新手向：如何给大型前端开源项目贡献源码"></a><a href="https://zhuanlan.zhihu.com/p/129036259" target="_blank" rel="noopener">新手向：如何给大型前端开源项目贡献源码</a></h3><p>我曾經聽過一個故事，那就是有個前端工程師一直在幫某個大型專案做 PR 修 Bug，到最後直接變成該公司的首席工程師 😂，但是重點不是這個！而是大部分人都會覺得自己的能力還不足，或是怕自己的 PR 被拒絕等等理由，一直害怕去嘗試踏入開源，我認為這是一件很可惜的事情（包括我自己也是XD），文中非常棒的把一些開源要注意的事情講解的很清楚，想踏出第一步的大家可以看看！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="How-an-anti-ad-blocker-works-Reverse-engineering-BlockAdBlock"><a href="#How-an-anti-ad-blocker-works-Reverse-engineering-BlockAdBlock" class="headerlink" title="How an anti ad-blocker works: Reverse-engineering BlockAdBlock"></a><a href="https://xy2.dev/article/re-bab/" target="_blank" rel="noopener">How an anti ad-blocker works: Reverse-engineering BlockAdBlock</a></h3><p>在這個人人都在用 AdBlocker 的年代，BlockAdBlock 這個反 AdBlocker 的工具也應運而生。如果偵測到使用者有裝 AdBlocker，BlockAdBlock 就會讓整個網站停止運作，直到你關掉 AdBlocker 才能繼續使用網站，但 BlockAdBlock 究竟是根據什麼來判斷使用者有沒有裝 AdBlocker 呢？只好把 BlockAdBlock 的原始碼翻出來看看了！</p><h3 id="爬蟲實戰：怎樣爬到-Instagram-的資料"><a href="#爬蟲實戰：怎樣爬到-Instagram-的資料" class="headerlink" title="爬蟲實戰：怎樣爬到 Instagram 的資料"></a><a href="https://link.medium.com/QapHkIQVA5" target="_blank" rel="noopener">爬蟲實戰：怎樣爬到 Instagram 的資料</a></h3><p>這是一篇爬蟲實戰文，看作者用 Chrome Devtool 抽絲剝繭找到關鍵的線索、爬到想要的資料真的很好玩，而且文中也提到一些找線索的技巧，很有趣的一篇文章</p><h3 id="Good-and-Bad-Practices-of-Coding-in-Python"><a href="#Good-and-Bad-Practices-of-Coding-in-Python" class="headerlink" title="Good and Bad Practices of Coding in Python"></a><a href="https://dev.to/duomly/the-best-practices-of-coding-in-python-and-what-to-avoid-3c65" target="_blank" rel="noopener">Good and Bad Practices of Coding in Python</a></h3><p>最近對於資料分析有點興趣，於是開始寫 Python。但因爲我對 Python 沒有很熟，所以上網找了一些文章看怎麼把扣寫得更 pythonic，然後就看到這篇在講 Python 的 Good and Bad practices，我自己看完覺得很受用，如果你也剛開始寫 Python 的話真的必須讀一下</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Pure-Function－單純的幸福"><a href="#Pure-Function－單純的幸福" class="headerlink" title="Pure Function－單純的幸福"></a><a href="https://jigsawye.gitbooks.io/mostly-adequate-guide/content/ch3.html" target="_blank" rel="noopener">Pure Function－單純的幸福</a></h3><p>首先，我們要釐清 pure function 的概念。Pure function 意指相同的輸入，永遠會得到相同的輸出，而且沒有任何顯著的副作用。為何說 slice 是 pure，因為對於相同的輸入它能保證回傳的輸出是相同的。但 splice 卻會嚼爛呼叫它的陣列，然後吐出來；這產生了顯著的副作用，即這個陣列被永久改變了。</p><h3 id="XState-簡介"><a href="#XState-簡介" class="headerlink" title="XState 簡介"></a><a href="https://blog.jerry-hong.com/posts/xstate-introduction/" target="_blank" rel="noopener">XState 簡介</a></h3><p>為什麼需要 XState? 缺乏清晰的狀態描述、過於自由的狀態轉換、難以與工程師之外的人討論。XState 有什麼優勢？程式碼即 UI Spec、寫更少的測試、更快速的路徑優化。by Jerry</p><h3 id="譯-理解-React-Hooks"><a href="#譯-理解-React-Hooks" class="headerlink" title="[譯] 理解 React Hooks"></a><a href="https://andyyou.github.io/2019/07/29/making-sence-of-react-hooks/" target="_blank" rel="noopener">[譯] 理解 React Hooks</a></h3><p>Hooks 在元件內套用了 React 的哲學（明確定義資料流和可組合的特性），而且不僅僅是組件之間。這也是為什麼 Hooks 可以很自然套用在 React 元件上。不像其他設計模式例如 render props 或 high-order 元件，Hooks 不會在整個元件樹結構中加入多餘的元件結構，也沒有 mixins 的缺點。by Andyou</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Useful-Interactive-Terminal-and-Graphical-UI-Tools-for-Kubernetes"><a href="#Useful-Interactive-Terminal-and-Graphical-UI-Tools-for-Kubernetes" class="headerlink" title="Useful Interactive Terminal and Graphical UI Tools for Kubernetes"></a><a href="https://www.virtuallyghetto.com/2020/04/useful-interactive-terminal-and-graphical-ui-tools-for-kubernetes.html" target="_blank" rel="noopener">Useful Interactive Terminal and Graphical UI Tools for Kubernetes</a></h3><p>本篇文章的作者分享了幾種可以視覺化 K8S 內部資源的工具，大家還有其他推薦的管理工具嗎？(雖然我自己只有用 kubectl 就是了XD)</p><ul><li>Octant</li><li>Lens</li><li>Kubevious</li><li>kubelive</li><li>K9s</li></ul><h3 id="Docker-我還活著喔-lt-￣3￣-y·ξ-而且成立開源社群來開發-Compose"><a href="#Docker-我還活著喔-lt-￣3￣-y·ξ-而且成立開源社群來開發-Compose" class="headerlink" title="Docker: 我還活著喔 &lt;(￣3￣)y·ξ 而且成立開源社群來開發 Compose"></a><a href="https://www.docker.com/blog/announcing-the-compose-specification/" target="_blank" rel="noopener">Docker: 我還活著喔 &lt;(￣3￣)y·ξ 而且成立開源社群來開發 Compose</a></h3><p>其實 Docker Compose 真的滿好用的，可以很迅速地在本地端啟動一個 multi-container 應用服務的開發測試環境，而且他跟雲端環境是獨立的，所以可以幫助大家節省超級多的寶貴時間，這次 Docker 希望透過這個新成立的社群跟 AWS, Microsoft 還有其他的開源社群來擴展 Compose，讓 Docker Compose 可以更彈性的支援 Cloud Native 平台，例如 Kubernetes, Amazon Elastic Container Service…等</p><h3 id="Vault-1-4-新版這次最亮眼的功能是…"><a href="#Vault-1-4-新版這次最亮眼的功能是…" class="headerlink" title="Vault 1.4 新版這次最亮眼的功能是…"></a><a href="https://www.hashicorp.com/blog/vault-1-4/" target="_blank" rel="noopener">Vault 1.4 新版這次最亮眼的功能是…</a></h3><p>以前 Vault 假如要達成 HA，其實是不能夠使用 Local Storage 的，因為資料散佈在多個 Node 中，並無法達成同步，所以官方都是推薦使用其他的 Storage Backend，例如：Consul, AWS Dynamodb (這我自己推薦XD)…等</p><p>而在最新版推出 Integrated Storage 這個新功能，讓使用者不需要使用第三方的 Storage Backend，只要用 Local Storage 就可以達成 HA, Backup, Recovery (透過 Raft Consensus Algorithm)，讓使用者設定 Vault 的時候少一個第三方依賴，增加獨立性，因為每次存取資料不再需要透過網路連到第三方的 Storage Backend</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 23 期 - 三日不出門，在家裡聽 Podcast！</title>
      <link href="/2020/04/07/23-podcast-is-great/"/>
      <url>/2020/04/07/23-podcast-is-great/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="工程師必聽的-Podcast-頻道，矽谷、荷蘭、澳洲、日本生活通通有"><a href="#工程師必聽的-Podcast-頻道，矽谷、荷蘭、澳洲、日本生活通通有" class="headerlink" title="工程師必聽的 Podcast 頻道，矽谷、荷蘭、澳洲、日本生活通通有"></a><a href="https://medium.com/starbugs/ff8edc847f4d" target="_blank" rel="noopener">工程師必聽的 Podcast 頻道，矽谷、荷蘭、澳洲、日本生活通通有</a></h3><p>這兩年來有一件滿棒的風氣，台灣的開發者，特別是海外的開發者，開始錄起了 Podcast。用聲音作為媒介，來傳達與分享自己的生活。所以今天特別蒐集了一系列由台灣的開發者製作的 Podcast 頻道。並且蒐集了許多有意思的主題，跟大家分享。內容包含了各國生活的分享與攻略，矽谷、荷蘭、澳洲、日本生活通通有。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Why-You-Should-Refactor-Your-Code"><a href="#Why-You-Should-Refactor-Your-Code" class="headerlink" title="Why You Should Refactor Your Code"></a><a href="https://www.freecodecamp.org/news/why-you-should-refactor-your-code/" target="_blank" rel="noopener">Why You Should Refactor Your Code</a></h3><p>文章點出了幾個在 coding 時常會遇到的程式碼品質，以及技術債的問題，這兩個是導致我們需要做重構的最大原因，但是重構到底是什麼？重構時需要遵守那些原則？看看作者怎麼說！</p><h3 id="Build-an-Array-from-Scratch-in-Javascript"><a href="#Build-an-Array-from-Scratch-in-Javascript" class="headerlink" title="Build an Array from Scratch in Javascript"></a><a href="https://hackernoon.com/build-an-array-from-scratch-in-javascript-uc4s3yqw" target="_blank" rel="noopener">Build an Array from Scratch in Javascript</a></h3><p>Array 在 JavaScript 裡一直都是個很方便的資料結構，也擁有許多方便的原生 Method，但大家知道 Array 背後到底怎麼實現的嗎？作者直接帶你從無到有時做起來！</p><h3 id="译-JSON-stringify-的-5-个秘密特性"><a href="#译-JSON-stringify-的-5-个秘密特性" class="headerlink" title="[译] JSON.stringify() 的 5 个秘密特性"></a><a href="https://juejin.im/post/5e842da76fb9a03c854610c7" target="_blank" rel="noopener">[译] JSON.stringify() 的 5 个秘密特性</a></h3><p>還記得上一刊提到可以用 <code>JSON.stringify()</code> 和 <code>JSON.parse()</code> 搭配，在 console 中印出正確的 <code>Object</code> 值，但值得一提的是 <code>JSON.stringify()</code> 比想像中的還猛！如果你只是想確認某些值是否發生變化，善用文中提到的技巧，也許就不用每次都在搭配 <code>JSON.parse()</code> 印出落落長的資料了！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Go-What-Does-a-Goroutine-Switch-Actually-Involve"><a href="#Go-What-Does-a-Goroutine-Switch-Actually-Involve" class="headerlink" title="Go: What Does a Goroutine Switch Actually Involve?"></a><a href="https://medium.com/a-journey-with-go/go-what-does-a-goroutine-switch-actually-involve-394c202dddb7" target="_blank" rel="noopener">Go: What Does a Goroutine Switch Actually Involve?</a></h3><p>Go 裡面的 goroutine 非常輕量，因此不管是要建立或是切換 goroutine 都非常迅速，而這篇文章就是在介紹當 Go scheduler 真的要切換 goroutine 時會發生什麼事，滿有趣的</p><blockquote><p>PS: 如果沒辦法看 Medium 付費牆的文章，可以試試 <a href="https://github.com/manojVivek/medium-unlimited" target="_blank" rel="noopener">medium-unlimited</a> 這個 extension，Chrome 跟 Firefox 都有支援</p></blockquote><h3 id="Optimizing-a-Golang-service-to-reduce-over-40-CPU"><a href="#Optimizing-a-Golang-service-to-reduce-over-40-CPU" class="headerlink" title="Optimizing a Golang service to reduce over 40% CPU"></a><a href="https://medium.com/coralogix-engineering/optimizing-a-golang-service-to-reduce-over-40-cpu-366b67c67ef9" target="_blank" rel="noopener">Optimizing a Golang service to reduce over 40% CPU</a></h3><p>這篇是 Coralogix 的技術團隊在使用 Go 後發現在 production 環境的 CPU 使用率太高，於是他們用了 pprof 檢查到底是誰在佔用 CPU，結果發現是因為 Go 太常進行 GC 了，所以導致很多不必要的浪費，後來他們把 GC 的頻率調低之後就成功解決了～</p><h3 id="Zero-cost-abstractions-in-Rust"><a href="#Zero-cost-abstractions-in-Rust" class="headerlink" title="Zero-cost abstractions in Rust"></a><a href="https://carette.xyz/posts/zero_cost_abstraction/" target="_blank" rel="noopener">Zero-cost abstractions in Rust</a></h3><p>Rust 最廣為人知的就是他的零成本抽象化，但到底怎麼樣算是抽象化，Rust 又是怎麼做到零成本？這篇文章用了幾個範例來介紹，並且比較了他們的執行時間跟編譯時間</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Twitter-Direct-Message-Caching-and-Firefox"><a href="#Twitter-Direct-Message-Caching-and-Firefox" class="headerlink" title="Twitter Direct Message Caching and Firefox"></a><a href="https://hacks.mozilla.org/2020/04/twitter-direct-message-caching-and-firefox/" target="_blank" rel="noopener">Twitter Direct Message Caching and Firefox</a></h3><p>Twitter 發表了一份<a href="https://privacy.twitter.com/en/blog/2020/data-cache-firefox" target="_blank" rel="noopener">聲明</a>，如果你在公用電腦中使用 firefox 的話，你在發訊息時的媒體或訊息，會被 Cache 在 firefox 瀏覽器中，即使你登出了，也不會被刪除。而其他瀏覽器則沒有這個問題。讓我們來看看這個問題究竟是這麼回事。</p><h3 id="How-SEO-Ruined-the-Internet"><a href="#How-SEO-Ruined-the-Internet" class="headerlink" title="How SEO Ruined the Internet"></a><a href="https://www.superhighway98.com/seo" target="_blank" rel="noopener">How SEO Ruined the Internet</a></h3><p>SEO 是如何毀掉 Internet 的？重寫歷史、擦掉文章的軌跡、SEO 的最佳實踐毀了讀者的體驗、一堆專做內容的公司搶占著 Google 搜尋頁面的前幾頁。SEO 是一個零和遊戲，每個遊戲有贏家也有輸家，不可否認的是 SEO 很大的影響了文章的呈現方式，讓我們的文章變得添加了許多調味料。</p><h3 id="Start-all-of-your-commands-with-a-comma"><a href="#Start-all-of-your-commands-with-a-comma" class="headerlink" title="Start all of your commands with a comma"></a><a href="https://rhodesmill.org/brandon/2009/commands-with-comma/" target="_blank" rel="noopener">Start all of your commands with a comma</a></h3><p>如果你有一些自定的指令，你想用一個最懶惰、最快速的方式呼叫他們，你會這麼做？這老兄想出了一個非常天才的方法，加個逗號😂😂😂。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Cortex-v1-0-released-The-highly-scalable-fast-Prometheus-implementation-is-generally-available-for-production-use"><a href="#Cortex-v1-0-released-The-highly-scalable-fast-Prometheus-implementation-is-generally-available-for-production-use" class="headerlink" title="Cortex v1.0 released: The highly scalable, fast Prometheus implementation is generally available for production use"></a><a href="https://grafana.com/blog/2020/04/02/cortex-v1.0-released-the-highly-scalable-fast-prometheus-implementation-is-generally-available-for-production-use/" target="_blank" rel="noopener">Cortex v1.0 released: The highly scalable, fast Prometheus implementation is generally available for production use</a></h3><p>Prometheus 雖然好用，但是在擴展性方面一直為人所詬病，因此很多第三方的解決方案應運而生，例如 Uber 的 M3, Thanos…等，不過官方其實也有注意到這個問題，因此開始投資研發資源在 Cortex 上，而最近 1.0 總算發佈了，宣稱可以讓 Prometheus 在 Production 達成高擴展性，這在一版的文件中有特別詳細說明如何設定好 Production Ready 的 Cortex，Grafana Dashboards 和 Proemtheus Alert 的設定…等</p><h3 id="All-things-Kubernetes-What-you’re-missing-at-KubeCon-this-week"><a href="#All-things-Kubernetes-What-you’re-missing-at-KubeCon-this-week" class="headerlink" title="All things Kubernetes: What you’re missing at KubeCon this week"></a><a href="https://siliconangle.com/2020/03/29/things-kubernetes-missing-kubecon-week/" target="_blank" rel="noopener">All things Kubernetes: What you’re missing at KubeCon this week</a></h3><p>雖然本來 KubeCon + CloudNativeCon 要辦在歐洲的活動已經早就宣告延期到七月或是八月再說了，但是此篇文章的作者還是想要分享一些他覺得這個活動的要點，例如：完整的託管 Data Cloud - Aiven, Container Image 弱點掃描工具 - Anchore…等</p><h3 id="HashiCorp-Joins-the-CNCF"><a href="#HashiCorp-Joins-the-CNCF" class="headerlink" title="HashiCorp Joins the CNCF"></a><a href="https://www.hashicorp.com/blog/hashicorp-joins-the-cncf/" target="_blank" rel="noopener">HashiCorp Joins the CNCF</a></h3><p>為了進一步將 HashiCorp 產品與 Cloud Native Computing Foundation（CNCF）項目整合在一起，並且讓社群彼此更加緊密地合作，HashiCorp 宣布加入了 CNCF。這意味著HashiCorp 將以各種形式更頻繁地出現在 CNCF 的社群中。而且 HashiCpro 也計畫參加更多的 CNCF 活動並且擴大相關的業務範圍，用以確保 HashiCorp 官方可以幫助 CNCF 的技術使用者可以更成功地使用其公司的工具</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 22 期 - 簡單的事交給電腦處理，這樣才有更多時間可以一起去 High 🕺</title>
      <link href="/2020/03/31/22-time-should-be-spent-to-things-of-happy/"/>
      <url>/2020/03/31/22-time-should-be-spent-to-things-of-happy/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Travis-CI-簡單事情就交給電腦去做之CI-CD-初體驗，讓-GitHub-Pages-自動更新！"><a href="#Travis-CI-簡單事情就交給電腦去做之CI-CD-初體驗，讓-GitHub-Pages-自動更新！" class="headerlink" title="Travis CI| 簡單事情就交給電腦去做之CI/CD 初體驗，讓 GitHub Pages 自動更新！"></a><a href="https://medium.com/starbugs/travis-ci-%E7%B0%A1%E5%96%AE%E4%BA%8B%E6%83%85%E5%B0%B1%E4%BA%A4%E7%B5%A6%E9%9B%BB%E8%85%A6%E5%8E%BB%E5%81%9A%E4%B9%8Bci-cd-%E5%88%9D%E9%AB%94%E9%A9%97-%E8%AE%93-github-pages-%E8%87%AA%E5%8B%95%E6%9B%B4%E6%96%B0-7647be30eb1c" target="_blank" rel="noopener">Travis CI| 簡單事情就交給電腦去做之CI/CD 初體驗，讓 GitHub Pages 自動更新！</a></h3><p>每次每次在處理完 issue 或加上 feature 後，都要再重新 build 過並部署到 server，但珍貴的時間就應該要拿來做珍貴的事情，不是浪費在這種無聊的重複指令上。於是利用一點時間研究 CI/CD，好讓專案可以在 Push 到 GitHub 的同時自動部署！像這樣把簡單的事情交給電腦處理，才有更多時間可以一起去 High 🕺</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="A-letter-to-myself-as-a-fresh-software-engineer"><a href="#A-letter-to-myself-as-a-fresh-software-engineer" class="headerlink" title="A letter to myself as a fresh software engineer"></a><a href="https://www.freecodecamp.org/news/a-letter-to-myself-as-a-fresh-software-engineer/" target="_blank" rel="noopener">A letter to myself as a fresh software engineer</a></h3><p>我總是很容易被這種感性的標題吸引 😂，但說真的有時候看這種經驗類型的文章，總是會不小心被撥到幾條心弦，尤其是剛開始成為工程師的時候，就是認為工程師要爆肝到不行，所以就貫徹自己在公司的價值，每天都加加加加加到不行，一直到有天突然驚覺，然後在午夜十一點從辦公室的椅子上摔下來，坐在地上思考「這真的是我理想的工程師嗎？」，於是之後就瞬間成為準時下班一族了。</p><p>但這不代表我沒有將工作的事情處理好，也不代表我沒那麼喜歡寫程式，我仍然做好我在公司的角色，也在下班時繼續用程式學習，並做一些自己喜愛的 Project，這才是我享受生活、享受程式的態度 😎！</p><h3 id="你需要注意的-console-log-問題"><a href="#你需要注意的-console-log-問題" class="headerlink" title="你需要注意的 console.log 問題"></a><a href="https://blog.huli.tw/2020/03/23/console-log-bug/?fbclid=IwAR0bAUvbNN7jULJjca4lqfn5X37P-hYwj_Mp7jw6-IZ6wuCZqsMvEc_qCfE" target="_blank" rel="noopener">你需要注意的 console.log 問題</a></h3><p>一開始在寫 JavaScript 常常被傳來傳去的 Object 搞得很混亂，尤其是連 <code>console.log</code> 出來的值和預期的不同就會開始懷疑人生，因此後來要看 Object 的時候都會特別用 <code>JSON.parse</code> 和 <code>JSON.stringify</code> 大法處理他 XD。而文章中把這個雷點解釋得非常清楚，推薦大家花點時間把它看完！</p><h3 id="5-Great-JavaScript-Projects-to-Code-During-Quarantine"><a href="#5-Great-JavaScript-Projects-to-Code-During-Quarantine" class="headerlink" title="5 Great JavaScript Projects to Code During Quarantine"></a><a href="https://hackernoon.com/5-great-javascript-projects-to-code-during-quarantine-np103y26" target="_blank" rel="noopener">5 Great JavaScript Projects to Code During Quarantine</a></h3><p>雖然標題上是說在隔離期間可以做的幾個小 Project，但我認為對於新手、學生、想要學習程式或每天都苦惱著可以做什麼當作品的人來說，都是不錯的選擇，尤其是最後一個本人覺得超酷！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Rust-编译模型之殇"><a href="#Rust-编译模型之殇" class="headerlink" title="Rust 编译模型之殇"></a><a href="https://zhuanlan.zhihu.com/p/110379613" target="_blank" rel="noopener">Rust 编译模型之殇</a></h3><p>不少人都聽說過 Rust 編譯的速度很慢，慢到由 Rust 實作的 TiKV 資料庫一天只有 24 次編譯機會，用一次少一次。但到底為什麼會慢成這樣，可以看看由 TiDB 團隊對於 Rust 編譯模型的深入分析</p><h3 id="HTTP-2-從零到一"><a href="#HTTP-2-從零到一" class="headerlink" title="HTTP/2 從零到一"></a><a href="https://link.medium.com/14VGAc44e5" target="_blank" rel="noopener">HTTP/2 從零到一</a></h3><p>近年來 HTTP 2 越來越普及，那他究竟比 HTTP 1 好在哪？如果還不太知道的話可以趕快看這篇文惡補一下，文末也有提供在 Nodejs 中使用 HTTP 2 的範例可以跟著做做看</p><h3 id="10-React-mini-patterns"><a href="#10-React-mini-patterns" class="headerlink" title="10 React mini-patterns"></a><a href="https://link.medium.com/pNSTZkT5e5" target="_blank" rel="noopener">10 React mini-patterns</a></h3><p>這篇文講了很多在寫前端時可能會遇到的需求，並且提供了幾個簡單的 React pattern 教你怎麼優雅的完成這些功能、同時保持程式碼的簡單明瞭，很值得一讀</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Throwaway-Code"><a href="#Throwaway-Code" class="headerlink" title="Throwaway Code"></a><a href="https://blog.bencope.land/throwaway-code" target="_blank" rel="noopener">Throwaway Code</a></h3><p>有時候你嘗試性寫的程式碼，突然間要變成產品。那麼這段程式碼會難以維護，該如何是好？本文提供了一個很實際的方法：「不管這個這段程式碼是不是已經被使用，或是已經可以運作了，只要人類無法讀懂，那他是無法維護的程式碼，應該要被重寫。」</p><h3 id="When-a-founder-is-already-wealthy-why-would-they-need-or-want-venture-capital-for-a-new-startup"><a href="#When-a-founder-is-already-wealthy-why-would-they-need-or-want-venture-capital-for-a-new-startup" class="headerlink" title="When a founder is already wealthy, why would they need or want venture capital for a new startup?"></a><a href="https://www.quora.com/When-a-founder-is-already-wealthy-why-would-they-need-or-want-venture-capital-for-a-new-startup/answer/Marc-Andreessen?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website" target="_blank" rel="noopener">When a founder is already wealthy, why would they need or want venture capital for a new startup?</a></h3><p>為什麼在創辦人已經很富有的情況下，他們還會想要風險投資來創立一個新創公司？第一個原因是讓錢的使用的紀律是一家真實的公司來運作，而不是自己的錢包想怎麼用就怎麼用。第二個原因是讓更多獨立觀點與知識淵博的人一同交流意見。第三個原因是可以藉由這樣的方式來獲得更多優秀的人才、獲取更多顧客、與得到重要夥伴。</p><h3 id="Consume-less-create-more"><a href="#Consume-less-create-more" class="headerlink" title="Consume less, create more"></a><a href="https://tjcx.me/posts/consumption-distraction/?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website" target="_blank" rel="noopener">Consume less, create more</a></h3><p>(本篇文章有點長，來練習閱讀英文長文。)大多數的時候你都在消化外界資訊，例如：閱讀網路文章、讀書、逛臉書 … 等等。你不自覺的會產生這樣的行為，「被動的」接收這些資訊。當你停下來，想一想，別人寫了多少東西，你也可以試試看自己能夠寫多少東西。多創造一點，少吸收一點，會有更多「屬於你的東西」出現。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="如何-Work-From-Home…但是在有小孩的情況下XD"><a href="#如何-Work-From-Home…但是在有小孩的情況下XD" class="headerlink" title="如何 Work From Home…但是在有小孩的情況下XD"></a><a href="https://grafana.com/blog/2020/03/17/how-to-work-from-home-with-kids-more-tips-from-the-remote-first-grafana-labs-team/" target="_blank" rel="noopener">如何 Work From Home…但是在有小孩的情況下XD</a></h3><p>最近很多人都分享了如何有效率的 WFH，但在疫情比較嚴重的地區，可能連托嬰中心，幼稚園…等這些讓小孩在大人上班時可以待的地方也都關掉了，那在這樣的情況之下該怎麼辦呢？#GrafanaLab 特地寫了一篇要如何與 小朋 (ㄇㄛˊ) 友 (ㄍㄨㄟˇ）一起 WFH 的文章XD</p><h3 id="Navi-–-An-Interactive-Commandline-Cheatsheet-Tool"><a href="#Navi-–-An-Interactive-Commandline-Cheatsheet-Tool" class="headerlink" title="Navi – An Interactive Commandline Cheatsheet Tool"></a><a href="https://www.ostechnix.com/navi-an-interactive-commandline-cheatsheet-tool/" target="_blank" rel="noopener">Navi – An Interactive Commandline Cheatsheet Tool</a></h3><p>Navi 是用 Rust 編寫的 Commandline Cheatsheet 工具。就像 Bro Pages, Cheat, Tldr 等工具一樣，而且 Navi 還提供了想要執行命令的整個列表一次顯示出來，獻給不想要離開 Terminal 的各位工程師!</p><h3 id="14-Kubernetes-interview-questions-For-hiring-managers-and-job-seekers"><a href="#14-Kubernetes-interview-questions-For-hiring-managers-and-job-seekers" class="headerlink" title="14 Kubernetes interview questions: For hiring managers and job seekers"></a><a href="https://enterprisersproject.com/article/2020/3/14-kubernetes-interview-questions" target="_blank" rel="noopener">14 Kubernetes interview questions: For hiring managers and job seekers</a></h3><p>記得最近有一篇文章提到要是企業若不擁抱 K8S，將被多雲環境淘汰?! 我自己不敢說不用的公司會被淘汰，但是還滿肯定以後 IT 圈子的工作職缺都會要求要有使用過 K8S 的經驗，所以趕緊來看看 14 個 K8S 的面試問題吧！</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 21 期 - 學完密碼學，還是記不住自己的密碼</title>
      <link href="/2020/03/24/21-still-forget-password-after-learning-cryptography/"/>
      <url>/2020/03/24/21-still-forget-password-after-learning-cryptography/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash"><a href="#一次搞懂密碼學中的三兄弟-—-Encode、Encrypt-跟-Hash" class="headerlink" title="一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash"></a><a href="https://medium.com/starbugs/what-are-encoding-encrypt-and-hashing-4b03d40e7b0c" target="_blank" rel="noopener">一次搞懂密碼學中的三兄弟 — Encode、Encrypt 跟 Hash</a></h3><p>今天就要來說說密碼學中大家很容易搞混的三個東西：編碼（Encode）、加密（Encrypt）跟雜湊（Hash），雖然他們三者的比較已經很多人寫過了，但還是有些人搞不清楚，所以這篇決定換個方式：不提太多理論，而是舉大量的例子跟實際應用，如果這些例子你都能看懂，那自然就會知道三者的差別</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="😷🦠-COVID-19-Self-Isolation-Work-From-Home-and-Developers-👩🏻‍💻👩🏽‍⚕️"><a href="#😷🦠-COVID-19-Self-Isolation-Work-From-Home-and-Developers-👩🏻‍💻👩🏽‍⚕️" class="headerlink" title="😷🦠 COVID-19, Self-Isolation, Work From Home and Developers 👩🏻‍💻👩🏽‍⚕️"></a><a href="https://dev.to/teamxenox/covid-19-self-isolation-work-from-home-and-developers-22kd" target="_blank" rel="noopener">😷🦠 COVID-19, Self-Isolation, Work From Home and Developers 👩🏻‍💻👩🏽‍⚕️</a></h3><p>COVID-19 間接推動了 Work From Home 的興起，文中提到了幾點在家或是遠距工作，該注意哪些事情才能使自身強大的生產力不會因為工作型態的改變而降低。</p><h3 id="How-to-Get-a-Developer-Job-with-No-Experience-Like-I-Did"><a href="#How-to-Get-a-Developer-Job-with-No-Experience-Like-I-Did" class="headerlink" title="How to Get a Developer Job with No Experience (Like I Did)"></a><a href="https://hackernoon.com/how-to-get-a-developer-job-with-no-experience-like-i-did-db2e32zz" target="_blank" rel="noopener">How to Get a Developer Job with No Experience (Like I Did)</a></h3><p>作者分享了一些如何在沒有相關工作經驗的狀況下，得到成為開發人員的第一份工作，裡面看到最有感觸的話就是「So stop agonizing about when you should start applying. You’ll never feel ready」，不要去想什麼時候開始可以找工作，因為你永遠不會有準備好的一天！寫好履歷，投就對了！</p><h3 id="HTML6-is-Coming-–-What’s-new-in-HTML6"><a href="#HTML6-is-Coming-–-What’s-new-in-HTML6" class="headerlink" title="HTML6 is Coming – What’s new in HTML6"></a><a href="https://morioh.com/p/6d422fc49bd2?f=5c21fb01c16e2556b555ab32&fbclid=IwAR0NSOEEmoz5vPUByFtXuN20bdOqlA_vAtiDoYPMe-y8lOFkHUUDnsOU2wU" target="_blank" rel="noopener">HTML6 is Coming – What’s new in HTML6</a></h3><p>除了每年都在增加新語法的 JavaScript 之外，HTML6 也要準備橫空出世了！雖然還不曉得最後會出現哪些炫砲的功能，但是文中還是列出了一些在 HTML6 中有可能會出現的變化，及已經確定的新規範！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="5-Recommended-Tools-for-Optimizing-Performance-in-ReactJS"><a href="#5-Recommended-Tools-for-Optimizing-Performance-in-ReactJS" class="headerlink" title="5 Recommended Tools for Optimizing Performance in ReactJS"></a><a href="https://link.medium.com/2kckvbTS34" target="_blank" rel="noopener">5 Recommended Tools for Optimizing Performance in ReactJS</a></h3><p>網站的效能一直以來都是前端開發者關心的重點之一，這篇文章介紹了五個用來量測、最佳化 React 網站的效能的工具，包括 Profile 跟 why-did-you-render 等等，而且這篇用了超多圖，幾乎是手把手教你用這些工具，拯救網站的效能就靠這篇了</p><h3 id="Illustrated-Tales-of-Go-Runtime-Scheduler"><a href="#Illustrated-Tales-of-Go-Runtime-Scheduler" class="headerlink" title="Illustrated Tales of Go Runtime Scheduler"></a><a href="https://medium.com/@ankur_anand/illustrated-tales-of-go-runtime-scheduler-74809ef6d19b" target="_blank" rel="noopener">Illustrated Tales of Go Runtime Scheduler</a></h3><p>之前我讀到講解 Go runtime scheduler 的文章大部分都很生硬，因為這原本就不是個很容易講清楚的東西，但是這篇很特別，他整篇文章有將近二十張圖片，很多重要概念也都用圖解的方式呈現，想了解 Go scheduler 的人我非常推薦這篇</p><h3 id="What-is-SSH"><a href="#What-is-SSH" class="headerlink" title="What is SSH?"></a><a href="https://link.medium.com/DMuIDbyT34" target="_blank" rel="noopener">What is SSH?</a></h3><p>這篇的標題是「What is SSH?」，但他可不是在教你怎麼使用 ssh，而是在講 ssh 這個 protocol 是怎麼傳輸資料的、又是使用加密跟雜湊保證數據的安全性，如果你讀完這週的專欄想更深入了解他們的應用的話，推薦你可以讀讀這篇</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Like-console-log-But-Better"><a href="#Like-console-log-But-Better" class="headerlink" title="Like console.log But Better"></a><a href="https://dev.to/leirasanchez/like-console-log-but-better-nhm" target="_blank" rel="noopener">Like <code>console.log</code> But Better</a></h3><p>喜歡使用 Console.log，這樣還不夠，還有更好用的 <code>console.table</code>、<code>console.table()</code>、<code>console.asseet()</code>… 等等。今天選的這篇文章讓大家 debug 更有效率，眼睛不會看到拖窗。</p><h3 id="6-Months-of-Working-Remotely-Taught-Me-a-Thing-or-Ten"><a href="#6-Months-of-Working-Remotely-Taught-Me-a-Thing-or-Ten" class="headerlink" title="6 Months of Working Remotely Taught Me a Thing or Ten"></a><a href="https://dev.to/peteranglea/6-months-of-working-remotely-taught-me-a-thing-orten" target="_blank" rel="noopener">6 Months of Working Remotely Taught Me a Thing or Ten</a></h3><p>六個月的遠端工作告訴我的十件事：出去走走，過的像個人。給自己一個舒適又高效能的環境。還有最重要的一件事情，記得穿上褲子、剪好你的頭髮，用正式的態度迎接上班。</p><h3 id="How-to-Contribute-to-Open-Source-Software"><a href="#How-to-Contribute-to-Open-Source-Software" class="headerlink" title="How to Contribute to Open Source Software"></a><a href="https://dev.to/integerman/how-to-contribute-to-open-source-software-4pbl" target="_blank" rel="noopener">How to Contribute to Open Source Software</a></h3><p>如何貢獻 Open Source 原始碼？這篇文章帶給我們具體的建議。第一步是找到你想要貢獻的專案、選一個看起來不錯的 Issue，接著了解這個 Issue 的含意。Fork 與 Clone 這個專案、了解團隊的工作流程、 定位自己在專案中的位置。做出修正並且上測試，發 Pull Request，恭喜你，你以踏出貢獻開源專案的第一步 :D</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="默默地-Kubernetes-1-18-即將發佈了…"><a href="#默默地-Kubernetes-1-18-即將發佈了…" class="headerlink" title="默默地 Kubernetes 1.18 即將發佈了…"></a><a href="https://sysdig.com/blog/whats-new-kubernetes-1-18/" target="_blank" rel="noopener">默默地 Kubernetes 1.18 即將發佈了…</a></h3><p>跟 1.17 比起來這次 1.18 加新功能比較多一些，底下是 Sysdig 覺得比較值得關注的新增功能</p><ul><li><p>OIDC discovery for service account token issuer<br>讓 K8S Service Account Token 更好用一些，允許在 Cluster 外面的服務使用他來當作一般的 Authentication 方式，而且不會對 API Server 造成過大的負擔；為了達成這個功能，API Server 提供在 OpenID Connect (OIDC) Discovery Document 的資料中會再多出 Token 的 Public Key，如此一來，既有的 OIDC Authenticator 便可以使用這些 Key 來驗證 K8S Service Account Token</p></li><li><p>CertificateSigningRequest API<br>每個 K8S Cluster 都有一張 Root Certificate Authority 用來確保核心模組間溝通的資料傳輸安全性，現在他終於也可以幫忙準備 Certificate 給一般的服務使用</p></li><li><p>kubectl debug<br>kubectl 增加了 Debug Subcommand，這個 Command 可以產生暫時性的 Container 在已經運行的 Pod 中 (聽起來對於線上查找問題很有幫助)</p></li><li><p>Implement RuntimeClass on Windows<br>使用 RuntimeClass 來定義在 K8S Cluster 中不同種類的 Node，如此一來便可以利用它來指定 Pod 應該要被部署到哪一中 Node，這個功能在 1.12 就被提出來了，並且在 1.14 有做一些大改動，這次主要是加強對 Windows Node 的支援性，譬如指定 Pod 只可以部署到某個版本的 Windows Server</p></li><li><p>Support CRI-ContainerD on Windows<br>讓 Windows 可以使用 ContainerD 1.3 來當作 Container Runtime Interface (CRI)</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 20 期 - YAML Engineer 的愛恨情仇</title>
      <link href="/2020/03/17/20-kubernetes-package-manager/"/>
      <url>/2020/03/17/20-kubernetes-package-manager/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Helm-3-踹踹看-—-YAML-Engineer-的愛恨情仇"><a href="#Helm-3-踹踹看-—-YAML-Engineer-的愛恨情仇" class="headerlink" title="Helm 3 踹踹看 — YAML Engineer 的愛恨情仇"></a><a href="https://medium.com/starbugs/helm-3-%E8%B8%B9%E8%B8%B9%E7%9C%8B-9e7c443fbd7a" target="_blank" rel="noopener">Helm 3 踹踹看 — YAML Engineer 的愛恨情仇</a></h3><p>雖然使用 K8S 會讓人變成充滿怨念的 YAML Engineer，不過我想這也是他可以變成主流 Container Orchestration 的原因之ㄧ，因為不管是開發或是維運人員，只要將運行在 K8S 內的應用服務使用 YAML 檔案格式定義好就可以一起使用，這一週想要分享如何把 Helm2 升級到 Helm3，除此之外也會介紹自己常用的 Helmfile</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Storybook-addons-與他的快樂夥伴"><a href="#Storybook-addons-與他的快樂夥伴" class="headerlink" title="Storybook | addons 與他的快樂夥伴"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/storybook-addons-aa56601aed9a" target="_blank" rel="noopener">Storybook | addons 與他的快樂夥伴</a></h3><p>好不容易寫好了一個自己相當滿意的 Component，但又對再另外花時間描述該 Component 的使用方法感到疲憊，有時候又很難以文字表現出該 Component 的行為或操作方法，而 Storybook 拯救了這一切！它可以記錄你所建構的元件擁有什麼樣的功能，就像一本故事書一樣，描述著屬於該 Component 的故事：）</p><h3 id="The-Best-Developer-Communities-to-Join-in-2020"><a href="#The-Best-Developer-Communities-to-Join-in-2020" class="headerlink" title="The Best Developer Communities to Join in 2020"></a><a href="https://www.freecodecamp.org/news/best-developer-communities-to-be-part-of-in-2020/" target="_blank" rel="noopener">The Best Developer Communities to Join in 2020</a></h3><p>在 2020 年，開發者絕不能錯過這 20 個最讚的技術社群，一起吸收這世界都在用程式討論哪些事情！當然除了他們以外也別忘了還有 StarBugs 陪著大家 😉。</p><h3 id="YouTube-怎麼禁止手機使用者背景播放的？透過-Chrome-開發者工具-深度尋訪-YouTube-的前端程式碼"><a href="#YouTube-怎麼禁止手機使用者背景播放的？透過-Chrome-開發者工具-深度尋訪-YouTube-的前端程式碼" class="headerlink" title="YouTube 怎麼禁止手機使用者背景播放的？透過 Chrome 開發者工具 深度尋訪 YouTube 的前端程式碼"></a><a href="https://medium.com/@realdennis/youtube-%E6%80%8E%E9%BA%BC%E7%A6%81%E6%AD%A2%E6%89%8B%E6%A9%9F%E4%BD%BF%E7%94%A8%E8%80%85%E8%83%8C%E6%99%AF%E6%92%AD%E6%94%BE%E7%9A%84-%E6%B7%B1%E5%BA%A6%E5%B0%8B%E8%A8%AA-youtube-%E7%9A%84%E5%89%8D%E7%AB%AF%E7%A8%8B%E5%BC%8F%E7%A2%BC-2551e0941f75" target="_blank" rel="noopener">YouTube 怎麼禁止手機使用者背景播放的？透過 Chrome 開發者工具 深度尋訪 YouTube 的前端程式碼</a></h3><p>很喜歡作者說「YouTube 的 Front-end Engineer 也不是用魔法在寫 code ，所以勢必是透過 JavaScript 、 Browser 的 API 所賦予的能力」，任何在網頁上面看見的東西、酷炫的技巧等等，都有辦法被你創造出來（除了動畫啦 😂）！就從這篇文章開始當個偵探，以後看見喜歡的神奇功能時，就能試著瞧瞧他們是怎麼做到的！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Database-basics-writing-a-SQL-database-from-scratch-in-Go"><a href="#Database-basics-writing-a-SQL-database-from-scratch-in-Go" class="headerlink" title="Database basics: writing a SQL database from scratch in Go"></a><a href="http://notes.eatonphil.com/database-basics.html" target="_blank" rel="noopener">Database basics: writing a SQL database from scratch in Go</a></h3><p>這篇教你怎麼用 Go 從無到有寫出一個簡單的 DB，並且提供 <code>CREATE</code>、<code>SELECT</code> 跟 <code>INSERT</code> 指令，如果你對 DB 的內部構造有興趣的話，這篇文章很適合你讀</p><h3 id="Elixir-Style-Actors-in-Go"><a href="#Elixir-Style-Actors-in-Go" class="headerlink" title="Elixir-Style Actors in Go"></a><a href="https://preslav.me/2020/03/07/elixir-style-actors-in-golang/" target="_blank" rel="noopener">Elixir-Style Actors in Go</a></h3><p>Go 原本的併發模型是 CSP(Communicating Sequential Processes)，也就是透過輕量的 thread(goroutine) 來做到併發，thread 之間的溝通則是使用 channel。但透過把 goroutine 當成一個有狀態的 actor，並且以 channel 來傳遞 message，可以在 Go 裡面實現類似 Elixir 的 Actor model，挺有趣的</p><h3 id="Early-Impressions-of-Go-from-a-Rust-Programmer"><a href="#Early-Impressions-of-Go-from-a-Rust-Programmer" class="headerlink" title="Early Impressions of Go from a Rust Programmer"></a><a href="https://pingcap.com/blog/early-impressions-of-go-from-a-rust-programmer/" target="_blank" rel="noopener">Early Impressions of Go from a Rust Programmer</a></h3><p>這是一篇 Rust 開發者去學 Go 之後寫的心得文，也是我看過最平衡的比較文，Rust 跟 Go 其實可以是好朋友，不需要再比哪個語言比較好，找到適合自己的就可以了</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="你要的-React-面试知识点，都在这了"><a href="#你要的-React-面试知识点，都在这了" class="headerlink" title="你要的 React 面试知识点，都在这了"></a><a href="https://segmentfault.com/a/1190000019339210" target="_blank" rel="noopener">你要的 React 面试知识点，都在这了</a></h3><p>什麼是聲明式語言？聲明式語言是一種語言範式，它關注的是你要做什麼，而不是如何做。它表達邏輯而不顯式地定義步驟。這意味著我們需要根據邏輯的計算來聲明要顯示的組件。它沒有描述控制流步驟。聲明式語言的例子：HTML、SQL等</p><h3 id="React-Hooks-详解-【近-1W-字】-项目实战"><a href="#React-Hooks-详解-【近-1W-字】-项目实战" class="headerlink" title="React Hooks 详解 【近 1W 字】+ 项目实战"></a><a href="https://juejin.im/post/5dbbdbd5f265da4d4b5fe57d#heading-17" target="_blank" rel="noopener">React Hooks 详解 【近 1W 字】+ 项目实战</a></h3><p>什麼是 Hooks？React 一直都提倡使用函數元件，但是有時候需要使用 state 或者其他一些功能時，只能使用類元件，因為函數元件沒有實例，沒有生命週期函數，只有 Class 元件才有。Hooks 是 React 16.8 新增的特性，它可以讓你在不編寫 class 的情況下使用 state 以及其他的 React 特性。如果你在編寫函數元件並意識到需要向其添加一些 state，以前的做法是必須將其它轉化為 class。現在你可以直接在現有的函數元件中使用 Hooks。凡是 use 開頭的 React API 都是 Hooks。</p><h3 id="React源码解析-一-组件的实现与挂载"><a href="#React源码解析-一-组件的实现与挂载" class="headerlink" title="React源码解析(一):组件的实现与挂载"></a><a href="https://juejin.im/post/5983dfbcf265da3e2f7f32de" target="_blank" rel="noopener">React源码解析(一):组件的实现与挂载</a></h3><p>當我們能夠熟練運用React進行前端開發時，不免會對React內部機制產生濃厚的興趣。元件是什麼？是真的DOM嗎？生命週期函數的執行依據又是什麼呢？本篇，我們先來研究React組件的實現與掛載。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="來瞧瞧看-Uber-怎麼測試與開發內部的-Microservice"><a href="#來瞧瞧看-Uber-怎麼測試與開發內部的-Microservice" class="headerlink" title="來瞧瞧看 Uber 怎麼測試與開發內部的 Microservice"></a><a href="https://eng.uber.com/multitenancy-microservice-architecture" target="_blank" rel="noopener">來瞧瞧看 Uber 怎麼測試與開發內部的 Microservice</a></h3><p>Uber 工程師的績效評估來自於多快將新功能部署到 Production 環境中，在 Microservice 架構中搭配著快速地開發節奏要如何確保高 SLA 便成為不小的挑戰，而 Uber 解決問題的方式為貫徹 Multi-Tenant ！此文分享從測試，部署，開發時要注意哪些事情</p><ul><li><p><strong>測試的選擇與挑戰</strong></p><ul><li><p><strong>Parallel Testing</strong>：準備一個跟 Production 一樣的測試環境 (這應該是最常見的做法)</p><ul><li><strong>額外的建置成本</strong>：畢竟要準備另外一套完整的環境，資料庫，機器…等，都是要多燒錢的</li><li><strong>同步問題</strong>：如何確保測試環境跟 Production 環境一直保持一致性</li><li><strong>測試的不可靠性</strong>：譬如自己想要測試 Service A，但是 Service B 上了一包爛 Build 導致你不能測試…</li><li><strong>不確定的服務負載</strong>：在測試環境中作效能測試的結果要如何評估到真實環境中</li></ul></li><li><p><strong>Testing in Production</strong>：讓 Production 環境的服務具有 Multi-Tenant 的能力來允許接受來自測試和 Production 的請求</p><ul><li><strong>請求的導流</strong>：必須要可以根據請求是來自測試或是正式環境來做導流</li><li><strong>隔離性</strong>：測試和 Production 的資源要具有良好的隔離性，測試環境不能影響到正式環境</li></ul></li></ul></li><li><p><strong>部署的方式</strong></p><ul><li><p><strong>Canary Deployment</strong>：就算新版的 Build 已經過詳細的 Review 和 Testing，還是不想要一次讓所有的請求都直接使用新版本，而是在 Multi-Tenant 的架構下，將 Canary 視為一個獨立的 Tenant ，然後再根據請求的使用者屬性 (用路類型，產品類型…等) 把部分請求導流到 Canary 中</p></li><li><p><strong>Capture/Replay and Shadow Traffic</strong>：將 Production 環境中的正式流量給錄製擷取下來當作整合測試使用，其實就像上面提過的架構一樣，所以可以相對輕易地將 Production 環境的請求導流至想要測試的 Microservice</p></li></ul></li><li><p><strong>實作與開發</strong><br>在 Multi-Tenant Microservice 架構中，每個 Tenant 都被視為 First Class Object 然後根據各種靜態和請求中的動態資料來組成 Context，整個系統便是根據這些 Context 來決定請求該被導流到哪邊去</p><ul><li><p><strong>Tenancy Context</strong>：Tenancy Context 要在請求進入 Edge Gateway 時就被附加上去，而且在其生命週期中都不再會被改變</p></li><li><p><strong>Context Propagation</strong>：必須讓請求發出時同時傳遞 Context，而大部分的服務可能不需要查看 Context，但是某些可能會需要透過評估 Context 來決定要不要繞過某些業務邏輯，譬如某些跟金流相關的請求，假如是發生在測試請求時，就不需要真的跟銀行要求轉移資金之類的，而且請求的 Context 有時也需要被傳遞到靜態跟動態的資料物件中</p></li><li><p><strong>Tenancy-Based Routing</strong>：一旦系統有能力可以把請求 Tag 成某一個 Tenancy，那就可以決定要將其導流到測試環境，上面提到用來做整合測試的錄製流量，Canary Deployment…等，一般來說在服務的 egress 和 ingress 都可以把 Tenancy-Based Routing 給實作進去，而且在選擇解決方案還滿重要的，目前有一些 Service Mesh 的開源專案，例如 Envoy 或是 Istio 就可以考慮看看，因為可以利用 Side Car 的特性來幫忙導流請求</p></li><li><p><strong>Data Isolation</strong>：必須要有辦法根據不同的 Tenancy 將 Logging, Metrics, Storage, Message Queues, Caches 跟 Configuration 給切開來</p></li></ul></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 19 期 - 用超萌的汪與喵來理解 HTTP Status Code！</title>
      <link href="/2020/03/10/19-dogs-and-cats-with-http-status-code/"/>
      <url>/2020/03/10/19-dogs-and-cats-with-http-status-code/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-教學-02-—在-Minikube-上部屬-Python-Flask-應用程式"><a href="#Kubernetes-教學-02-—在-Minikube-上部屬-Python-Flask-應用程式" class="headerlink" title="Kubernetes 教學 02 —在 Minikube 上部屬 Python Flask 應用程式"></a><a href="https://medium.com/starbugs/e7a3b9448f2c" target="_blank" rel="noopener">Kubernetes 教學 02 —在 Minikube 上部屬 Python Flask 應用程式</a></h3><p>在前一篇中我們弄懂了 K8S Cluster、Node、Pod 與 Container 的關係，並且在文章末段介紹了能夠與 kubectl -「能夠與 K8S 溝通的命令列工具」。這次我們用實際的操作，來認識容器化的實際過程，並把它部屬到本地的 Kubernetes 上面。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Dear-New-Front-End-Developer"><a href="#Dear-New-Front-End-Developer" class="headerlink" title="Dear New Front-End Developer"></a><a href="https://dev.to/lasertuskey/dear-new-front-end-developer-2d2c" target="_blank" rel="noopener">Dear New Front-End Developer</a></h3><p>近年來常常看到許多人想轉職為前端工程師，也有一些人因為挫敗無法繼續學習而放棄了這條路，不過我覺得就像作者說的「In your first few years, it can feel like you will NEVER catch up to your knowledgable peers. It’s scary and hard and intimidating. But you WILL get there.」。</p><p>也許剛開始會感到困惑以及害怕接下來要學習的龐大知識，但是請相信努力是不會騙人的：）</p><h3 id="How-to-Implement-Redux-in-24-Lines-of-JavaScript"><a href="#How-to-Implement-Redux-in-24-Lines-of-JavaScript" class="headerlink" title="How to Implement Redux in 24 Lines of JavaScript"></a><a href="https://www.freecodecamp.org/news/redux-in-24-lines-of-code/" target="_blank" rel="noopener">How to Implement Redux in 24 Lines of JavaScript</a></h3><p>Redux 是很棒的全域狀態管理套件，如果你曾經看過 14 行解析 <a href="https://github.com/reduxjs/redux-thunk/blob/master/src/index.js" target="_blank" rel="noopener">redux-thunk</a>，那就不能錯過這篇用 24 行實現 Redux 的原理！</p><h3 id="A-modern-‘Hello-World’-program-needs-more-than-just-code"><a href="#A-modern-‘Hello-World’-program-needs-more-than-just-code" class="headerlink" title="A modern ‘Hello, World’ program needs more than just code"></a><a href="https://stackoverflow.blog/2020/03/05/a-modern-hello-world-program-needs-more-than-just-code/" target="_blank" rel="noopener">A modern ‘Hello, World’ program needs more than just code</a></h3><p>大家有想過 <code>Hello World</code> 的背後有什麼含義嗎？其實還真的沒有（很怕當上標題黨 😂），只是 <code>Hello World</code> 其實遠遠比你想得更多，要完成 <code>Hello World</code> 不只需要那幾行 Code，還有更多的是其實你已經把一個可執行的環境建立起來了 🙌</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="初學者學演算法｜談什麼是演算法和時間複雜度"><a href="#初學者學演算法｜談什麼是演算法和時間複雜度" class="headerlink" title="初學者學演算法｜談什麼是演算法和時間複雜度"></a><a href="https://link.medium.com/d2uILKXrG4" target="_blank" rel="noopener">初學者學演算法｜談什麼是演算法和時間複雜度</a></h3><p>初學者剛開始學習演算法時常會卡在時間複雜度，搞不懂 O(1) 跟 O(n) 的速度到底差多少。這篇用租電影的例子來講什麼是演算法還有複雜度，對演算法有興趣的初學者很建議看看</p><h3 id="Want-to-know-how-Deep-Learning-works-Here’s-a-quick-guide-for-everyone"><a href="#Want-to-know-how-Deep-Learning-works-Here’s-a-quick-guide-for-everyone" class="headerlink" title="Want to know how Deep Learning works? Here’s a quick guide for everyone."></a><a href="https://link.medium.com/K3XAI8WxG4" target="_blank" rel="noopener">Want to know how Deep Learning works? Here’s a quick guide for everyone.</a></h3><p>最近很紅的 Deep Learning(DL) 跟 Machine Learning(ML) 有什麼不一樣？跟 AI(Artificial Intelligence) 又是什麼關係？這篇科普文沒有太深的技術細節，只是簡單介紹 DL、neural network 跟 cost function 的概念，不管對 AI 有沒有興趣都可以看一看長知識</p><h3 id="Cheap-tricks-for-high-performance-Rust"><a href="#Cheap-tricks-for-high-performance-Rust" class="headerlink" title="Cheap tricks for high-performance Rust"></a><a href="https://deterministic.space/high-performance-rust.html" target="_blank" rel="noopener">Cheap tricks for high-performance Rust</a></h3><p>覺得你寫的 Rust 程式跑起來還不夠快嗎？這邊有幾個在 release 時可以設定的 option，包括最佳化 link time、降低 codegen unit 等等，雖然可能會讓原本就已經夠慢的編譯變得更慢，但也可以讓你編譯出來的程式跑得更快哦～</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="The-Complete-Guide-to-Status-Codes-for-Meaningful-ReST-APIs-Let’s-start"><a href="#The-Complete-Guide-to-Status-Codes-for-Meaningful-ReST-APIs-Let’s-start" class="headerlink" title="The Complete Guide to Status Codes for Meaningful ReST APIs - Let’s start!"></a><a href="https://dev.to/khaosdoctor/the-complete-guide-to-status-codes-for-meaningful-rest-apis-1-5c5" target="_blank" rel="noopener">The Complete Guide to Status Codes for Meaningful ReST APIs - Let’s start!</a></h3><p>用最生動的方式，教你如何使用適合的 Status Code 用在 REST API 上。內有貓咪與小狗的圖片，太萌、太好笑了，趕緊來學習！</p><h3 id="Coffee-chat-with-CTO"><a href="#Coffee-chat-with-CTO" class="headerlink" title="Coffee chat with CTO"></a><a href="https://medium.com/tds-note/coffee-with-cto-7c790b3aa59" target="_blank" rel="noopener">Coffee chat with CTO</a></h3><p>跟 CTO 喝杯咖啡。文章開始：昨天有機會和一位前輩喝咖啡，他目前是一間新加坡軟體開發公司的 CTO，和我分享了許多工作、學習上的想法與經驗。 在見面之前，我嘗試上網搜尋該公司的相關資料，發現幾乎找不到，而公司的網站首頁是個 console，應該說，長得像 console 的頁面，想要看到任何資料都需要下 command line 的指令，非常 geek（這裡我想表達的是稱讚的意味）</p><h3 id="A-Guide-for-Everyone-Who-Wants-to-Give-Technical-Presentations"><a href="#A-Guide-for-Everyone-Who-Wants-to-Give-Technical-Presentations" class="headerlink" title="A Guide for Everyone Who Wants to Give Technical Presentations"></a><a href="https://dev.to/azure/a-guide-for-everyone-who-wants-to-give-technical-presentations-53bo" target="_blank" rel="noopener">A Guide for Everyone Who Wants to Give Technical Presentations</a></h3><p>今天來分享一份乾貨，如何練習技術型的演講。為什麼要演講？如何選擇地方發表你的技術演講？如何做一個好的技術演講的投稿。時候到了，你上台了，該注意些什麼？很完整的文章系列，很棒。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Spotify-Open-Sources-Terraform-Module-for-Kubeflow-ML-Pipelines"><a href="#Spotify-Open-Sources-Terraform-Module-for-Kubeflow-ML-Pipelines" class="headerlink" title="Spotify Open-Sources Terraform Module for Kubeflow ML Pipelines"></a><a href="https://www.infoq.com/news/2020/03/spotify-terraform-kubeflow/" target="_blank" rel="noopener">Spotify Open-Sources Terraform Module for Kubeflow ML Pipelines</a></h3><p>Spotify 開源了他們用來運行 Ｍachine-Ｌearning Pipeline 的 Terraform，而且分享如何透過 Kubeflow 讓運算結果可以更快讓 Production 環境使用，甚至可以比以前多做七十幾倍的試驗@@</p><h3 id="The-10-Best-IP-Address-Management-Tools-for-Linux"><a href="#The-10-Best-IP-Address-Management-Tools-for-Linux" class="headerlink" title="The 10 Best IP Address Management Tools for Linux"></a><a href="https://www.ubuntupit.com/best-ip-address-management-tools-for-linux/" target="_blank" rel="noopener">The 10 Best IP Address Management Tools for Linux</a></h3><p>十個好用的 Linux IP 管理工具：<br>01. Solarwinds IPAM<br>02. ManageEngine OpUtils<br>03. GestióIP IPAM<br>04. Infoblox DDI<br>05. BlueCat DDI<br>06. IPplan<br>07. LightMesh IPAM<br>08. phpIPAM<br>09. NetBox<br>10. TeemIp</p><h3 id="How-We’re-Ab-using-Hashicorp’s-Consul-at-Grafana-Labs"><a href="#How-We’re-Ab-using-Hashicorp’s-Consul-at-Grafana-Labs" class="headerlink" title="How We’re (Ab)using Hashicorp’s Consul at Grafana Labs"></a><a href="https://grafana.com/blog/2020/02/11/how-were-abusing-hashicorps-consul-at-grafana-labs/" target="_blank" rel="noopener">How We’re (Ab)using Hashicorp’s Consul at Grafana Labs</a></h3><p>Cortex 利用 Consul 儲存 Key/Value 來分享資訊給其他的元件，一開始一切都運行的很美好，但是隨著使用量的上升，問題也接踵而來，來看看 Grafana 如何解決問題來讓效率提升，並且有更好的擴展性</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 18 期 - 學新技術霧裡看花，我整個就不爽了！</title>
      <link href="/2020/03/03/18-do-not-understand-the-principle-I-pisses-me-off/"/>
      <url>/2020/03/03/18-do-not-understand-the-principle-I-pisses-me-off/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="React-用實作了解-Server-Side-Rendering-的運作原理"><a href="#React-用實作了解-Server-Side-Rendering-的運作原理" class="headerlink" title="React | 用實作了解 Server-Side Rendering 的運作原理"></a><a href="https://medium.com/@GQSM/react-%E7%94%A8%E5%AF%A6%E4%BD%9C%E4%BA%86%E8%A7%A3-server-side-rendering-%E7%9A%84%E9%81%8B%E4%BD%9C%E5%8E%9F%E7%90%86-c6133d9fb30d" target="_blank" rel="noopener">React | 用實作了解 Server-Side Rendering 的運作原理</a></h3><p>SSR 一直都是我滿想要了解的技術之一，於是在過年的時候我就找了幾天來玩一下 React 的 SSR 框架 Next.js，一開始覺得很有趣，但做到一半的時候我整個就不爽了！難道說使用 SSR 就一定得靠 Next.js 嗎？這樣就算把教學文件全都看完，我也還是不曉得 SSR 是怎麼辦到的，我的 SSR 裡面沒有靈魂。所以就想說，不如再多花一點時間，重頭了解在 React 中如何實現 SSR！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Need-a-hug-There’s-a-bot-for-that"><a href="#Need-a-hug-There’s-a-bot-for-that" class="headerlink" title="Need a hug? There’s a bot for that!"></a><a href="https://dev.to/yechielk/need-a-hug-there-s-a-bot-for-that-4bim" target="_blank" rel="noopener">Need a hug? There’s a bot for that!</a></h3><p>Side Project 不需要是能夠拯救世界或毀天滅地的想法，暖暖的一個擁抱，也會是很棒的 Side Project：）</p><h3 id="4-attributes-of-a-good-programmer"><a href="#4-attributes-of-a-good-programmer" class="headerlink" title="4 attributes of a good programmer"></a><a href="https://anjandutta.com/attributes-of-a-good-programmer/?fbclid=IwAR23iVILbEdspFS-xJdaWNuGbJ099oaF8c8diki0HHIDuPjwrZQr7-Aa8Ho" target="_blank" rel="noopener">4 attributes of a good programmer</a></h3><p>與其說這是優秀的工程師才有的四個屬性，不如說這是為了成為優秀的工程師我們該學習的，這四個方法分別對應了一些開發上的問題，推薦花一點時間閱讀它！</p><h3 id="How-to-become-super-saiyan-with-code-用程式變成超級賽亞人）"><a href="#How-to-become-super-saiyan-with-code-用程式變成超級賽亞人）" class="headerlink" title="How to become super saiyan with code? (用程式變成超級賽亞人）"></a><a href="https://www.youtube.com/watch?v=QUgSKepY0Us&fbclid=IwAR0cGEh-fGn-bgYNvyv-_SQk3uChK25tC_zIZmznQzrArmFm98pob5K0SgY" target="_blank" rel="noopener">How to become super saiyan with code? (用程式變成超級賽亞人）</a></h3><p>雖然這則推薦是影片，但拜託求求你們一定要看一下。一開始會覺得很搞笑，但作者在影片最後講到說「也許我們小時候都夢想過某些事情，然後長大了聽到只會覺得是瘋了，但我們仍然可以用其它方式達成不可能的夢想。也許還是會有人說你瘋了，但至少你享受這個過程」，為什麼可以那麼平凡地說出那麼感動的話 😭</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="如何学会所有的编程语言？"><a href="#如何学会所有的编程语言？" class="headerlink" title="如何学会所有的编程语言？"></a><a href="https://www.infoq.cn/article/8STbPDW9M9xVGVc2eVIP" target="_blank" rel="noopener">如何学会所有的编程语言？</a></h3><p>文中有一段以汽車來比喻程式語言我覺得很妙：「這世界上有很多牌子的車：有些車小但動力十足，有些車則是笨重而且慢，不同牌子的車有不同的駕駛體驗。但如果你知道怎麼開其中一種車，也就知道怎麼開其他大部分的車，儘管他們的牌子不一樣」，所以重點不在於你會哪些語言的語法，而是你有沒有掌握語法背後的概念，並且能快速學習新的語言</p><h3 id="HTTPS-原理分析——带着疑问层层深入"><a href="#HTTPS-原理分析——带着疑问层层深入" class="headerlink" title="HTTPS 原理分析——带着疑问层层深入"></a><a href="https://blog.leapmie.com/archives/418/" target="_blank" rel="noopener">HTTPS 原理分析——带着疑问层层深入</a></h3><p>這篇 HTTPS 原理有別於大部分教科書式的教學，他用 QA 的方式讓你知道為什麼 HTTPS 要設計成這個樣子，理解之後就不需要再硬背</p><h3 id="Rust-parallelism-for-non-C-C-developers"><a href="#Rust-parallelism-for-non-C-C-developers" class="headerlink" title="Rust parallelism for non-C/C++ developers"></a><a href="https://link.medium.com/tqTM0lh2u4" target="_blank" rel="noopener">Rust parallelism for non-C/C++ developers</a></h3><p>因為 Rust 有滿多概念如 pointer、reference、namespace 都跟 C/C++ 很像，所以寫過 C/C++ 的人會比較容易上手 Rust，雖然如此，其他語言的開發者也不用太擔心，這邊就有一篇寫給非 C/C++ 開發者的指南，教你怎麼在 Rust 中寫出 parallel 的程式</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="待在-LINE-Fukuoka-兩年間的二十七歲"><a href="#待在-LINE-Fukuoka-兩年間的二十七歲" class="headerlink" title="待在 LINE Fukuoka 兩年間的二十七歲"></a><a href="https://medium.com/the-bayesian-trap/line-fukuoka-front-end-engineer-3ee361f7137c" target="_blank" rel="noopener">待在 LINE Fukuoka 兩年間的二十七歲</a></h3><p>本週推薦文章，Denny 分享 LINE 福岡的生活。為什麼要來 LINE 福岡？面試該準備和注意什麼？剛到日本時的不適應，辦公室內的一天，辦公室以外的生活，來日本的優缺點 … 等日本職涯的體驗分享。</p><h3 id="Chrome-80-後針對第三方-Cookie-的規則調整-default-SameSite-Lax"><a href="#Chrome-80-後針對第三方-Cookie-的規則調整-default-SameSite-Lax" class="headerlink" title="Chrome 80 後針對第三方 Cookie 的規則調整 (default SameSite=Lax)"></a><a href="https://medium.com/@azure820529/chrome-80-%E5%BE%8C%E9%87%9D%E5%B0%8D%E7%AC%AC%E4%B8%89%E6%96%B9-cookie-%E7%9A%84%E8%A6%8F%E5%89%87%E8%AA%BF%E6%95%B4-default-samesite-lax-aaba0bc785a3" target="_blank" rel="noopener">Chrome 80 後針對第三方 Cookie 的規則調整 (default SameSite=Lax)</a></h3><p>TL;DR: Chrome 80 (released in Feb, 2020) 將針對 cookie 的發送機制有一些新的調整，將影響現有網站上仰賴第三方 cookie 實作的功能與使用者體驗。本篇文章將解釋規則調整的技術細節(SameSite)，造成的影響以及建議的修正方向。 by Ian Hung.</p><h3 id="Myth-of-Structured-Data-—-description"><a href="#Myth-of-Structured-Data-—-description" class="headerlink" title="Myth of Structured Data — description"></a><a href="https://medium.com/@meistudio/myth-of-structured-data-description-ae3a3163ca0" target="_blank" rel="noopener">Myth of Structured Data — description</a></h3><p>Paul 大師帶給我們精采的文章，如何透過 Structured Data 的注入，讓 Google 搜尋結果變得多采多姿。不僅大大的增加搜尋結果的可讀性，更讓 使用者可以透過這些資訊的呈現可以快速的了解該搜尋結果是否為自己所需要的資訊。對於整體的搜尋體驗來說有著絕對的加分效果。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="13-Web-Design-Trends-to-Watch-in-2020"><a href="#13-Web-Design-Trends-to-Watch-in-2020" class="headerlink" title="13 Web Design Trends to Watch in 2020"></a><a href="https://www.shopify.com/partners/blog/web-design-trends" target="_blank" rel="noopener">13 Web Design Trends to Watch in 2020</a></h3><p>電子商務平台 Shopify 覺得在 2020 的 Web Design 會有底下 13 個趨勢，不知道在這短短的一年內會被他們猜中幾個呢？！</p><ol><li>Algorithmic design</li><li>Speculative design</li><li>Machine learning in the browser</li><li>Make websites respond to the user’s situation</li><li>Design for sustainability</li><li>Design for immediacy and the rise of user research</li><li>Accessibility goes mainstream</li><li>Design with cognitive differences in mind</li><li>Privacy protection</li><li>Less JavaScript</li><li>Static sites</li><li>Headless architecture</li><li>Interaction with big tech</li></ol><h3 id="Terrier-An-Open-Source-Tool-for-Identifying-and-Analyzing-Container-and-Image-Components"><a href="#Terrier-An-Open-Source-Tool-for-Identifying-and-Analyzing-Container-and-Image-Components" class="headerlink" title="Terrier: An Open-Source Tool for Identifying and Analyzing Container and Image Components"></a><a href="https://blog.heroku.com/terrier-open-source-identifying-analyzing-containers" target="_blank" rel="noopener">Terrier: An Open-Source Tool for Identifying and Analyzing Container and Image Components</a></h3><p><strong>Ｈeroku</strong> 在日前釋出針對 Container 的弱掃工具 <strong>Terrier</strong>，他可以識別出 OCI Image 中的特定檔案，藉此來查找有問題的檔案，除此之外同時也能找出運行中 Container 有問題的檔案，並且可以將其和 CI/CD Pipeline 整合在一起，如此便可以在 Container 一開始建置的時候就發現有問題的地方，避免供應鏈式的攻擊手法</p><h3 id="EC2-Instances-2-0-Time-to-Update-Your-Toolbox"><a href="#EC2-Instances-2-0-Time-to-Update-Your-Toolbox" class="headerlink" title="EC2 Instances 2.0 - Time to Update Your Toolbox"></a><a href="https://cloudonaut.io/ec2-instances-2-0-time-to-update-your-toolbox/" target="_blank" rel="noopener">EC2 Instances 2.0 - Time to Update Your Toolbox</a></h3><p>AWS EC2 這個服務已經陪伴 IT 人度過 13 個年頭了，在這期間中，他也一直在進化著，這篇文章想要分享的是如何管理 Mutable 的 EC2 Instance，提到的重點有…</p><ul><li>Patching</li><li>Backup and Restore</li><li>Remote Access</li><li>Software Deployments</li><li>Monitoring</li><li>Logs</li><li>Single Point of Failure</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 17 期 - 跑了 git blame 才發現爛 code 是自己寫的</title>
      <link href="/2020/02/27/17-bad-code-was-written-by-myself/"/>
      <url>/2020/02/27/17-bad-code-was-written-by-myself/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="下面一位～以-Rust-為例，聊聊-Iterator-Pattern"><a href="#下面一位～以-Rust-為例，聊聊-Iterator-Pattern" class="headerlink" title="下面一位～以 Rust 為例，聊聊 Iterator Pattern"></a><a href="https://medium.com/starbugs/talk-about-iterator-pattern-in-rust-33ed822bdea7" target="_blank" rel="noopener">下面一位～以 Rust 為例，聊聊 Iterator Pattern</a></h3><p>在適當的時機使用對的設計模式，可以讓你的程式碼更簡潔易懂。為了讓大家寫出更好的 code，不要只是會動就好，本週的專欄要來講講什麼是 Iterator Pattern。雖然是以 Rust 為例，但範例都很簡單，沒寫過 Rust 也可以讀</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="25-Free-Productivity-Tools-for-Developers"><a href="#25-Free-Productivity-Tools-for-Developers" class="headerlink" title="25+ Free Productivity Tools for Developers"></a><a href="https://dev.to/creativetim_official/25-free-productivity-tools-for-developers-3dif" target="_blank" rel="noopener">25+ Free Productivity Tools for Developers</a></h3><p>在這個數據大轟炸的時代，每次在找問題的時候，都會不小心被某些新的技術或名詞所吸引，然後又花費了一大堆時間XD，因此了解自己在工作上的專注力非常重要，而文章中就介紹了 25 個免費的生產力工具可以 support，選對工具還能讓你具有更好的自我管理能力。</p><h3 id="How-to-Improve-Your-Programming-Skills"><a href="#How-to-Improve-Your-Programming-Skills" class="headerlink" title="How to Improve Your Programming Skills?"></a><a href="https://www.decipherzone.com/blog-detail/how-improve-programming-skills" target="_blank" rel="noopener">How to Improve Your Programming Skills?</a></h3><p>該怎麼讓自己在程式之路中不斷精進，變成更好的工程師？文中提供了 15 個方式，可以使我們持續進步 😃。</p><h3 id="Trying-to-find-your-first-dev-job-Here’s-what-employers-are-actually-looking-for"><a href="#Trying-to-find-your-first-dev-job-Here’s-what-employers-are-actually-looking-for" class="headerlink" title="Trying to find your first dev job? Here’s what employers are actually looking for."></a><a href="https://stackoverflow.blog/2020/02/18/trying-to-find-your-first-dev-job-heres-what-employers-are-actually-looking-for/" target="_blank" rel="noopener">Trying to find your first dev job? Here’s what employers are actually looking for.</a></h3><p>在面試的時候，雇主看著你到底都在想什麼事情？我該是什麼樣子才有機會獲得這次的機會？本篇文章的作者是 <a href="https://flatironschool.com/?utm_source=coursereport&utm_medium=schoolpage" target="_blank" rel="noopener">Flatiron School</a> 的創辦者，在過去的日子他已經協助了 10,000 以上的人面試就業了！也在文章中指出了招聘團隊想在你身上弄懂的 3 件事情，一起看看他怎麼說！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="從-V8-bytecode-探討-let-與-var-的效能問題"><a href="#從-V8-bytecode-探討-let-與-var-的效能問題" class="headerlink" title="從 V8 bytecode 探討 let 與 var 的效能問題"></a><a href="https://blog.huli.tw/2020/02/20/let-vs-var-bytecode/" target="_blank" rel="noopener">從 V8 bytecode 探討 let 與 var 的效能問題</a></h3><p>這篇是隔壁 TechBridge 週刊的本週專欄，在看到這篇之前我從沒想過可以看到 JS 轉出來的 bytecode，也不知道 let 跟 var 到底是怎麼實作的，雖然看完之後不見得會讓你 JS 寫得更好，但這種追根究底的精神還是很令人敬佩！</p><h3 id="Docker-anti-patterns"><a href="#Docker-anti-patterns" class="headerlink" title="Docker anti-patterns"></a><a href="https://codefresh.io/containers/docker-anti-patterns/" target="_blank" rel="noopener">Docker anti-patterns</a></h3><p>你是不是曾經把 docker 當成 VM 在用呢？又或是直接把 secret 跟設定檔 hardcode 在 docker image 裡面？這篇文列出了十個使用 docker 的 anti-pattern，並且告訴你應該要怎麼改會比較好</p><h3 id="A-guide-to-understanding-database-scaling-patterns"><a href="#A-guide-to-understanding-database-scaling-patterns" class="headerlink" title="A guide to understanding database scaling patterns"></a><a href="https://www.freecodecamp.org/news/understanding-database-scaling-patterns/" target="_blank" rel="noopener">A guide to understanding database scaling patterns</a></h3><p>網路上有很多文章都是在講如何擴展 (scaling) 你的資料庫，但大多沒有情境跟範例，所以看完之後還是不知道該怎麼從眾多方法中選出一個。但這篇文章正好相反，他裡面講了好幾個擴展的 pattern 之外還舉了時間的例子，並告訴你各個方法有什麼優缺點</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="JavaScript-Ruby-and-C-are-not-call-by-reference"><a href="#JavaScript-Ruby-and-C-are-not-call-by-reference" class="headerlink" title="JavaScript, Ruby and C are not call by reference"></a><a href="https://dev.to/xpbytes/javascript-ruby-and-c-are-not-call-by-reference-23f7" target="_blank" rel="noopener">JavaScript, Ruby and C are not call by reference</a></h3><p>這次來比較 javascript、Ruby 和 C 三個語言是不是 call by reference。更加釐清 call by reference、call by value 與 call by sharing 的不同之處。</p><h3 id="Idiomatic-Ruby-writing-beautiful-code"><a href="#Idiomatic-Ruby-writing-beautiful-code" class="headerlink" title="Idiomatic Ruby: writing beautiful code"></a><a href="https://dev.to/teekay/idiomatic-ruby-writing-beautiful-code-56ef" target="_blank" rel="noopener">Idiomatic Ruby: writing beautiful code</a></h3><p>來看看經典的、慣用的 Ruby 寫法，如何寫出漂亮的程式碼，如果你是 Rubyist 會喜歡這篇文章的:D如果你是 JS 開發者，也有許多 Library 寫法很相似，可交互參考。</p><h3 id="Ruby-on-Rails-API-with-Vue-js"><a href="#Ruby-on-Rails-API-with-Vue-js" class="headerlink" title="Ruby on Rails API with Vue.js"></a><a href="https://dev.to/justalever/ruby-on-rails-api-with-vue-js-46k8" target="_blank" rel="noopener">Ruby on Rails API with Vue.js</a></h3><p>Ruby on Rails 如何跟 Vue.js 做結合，這篇很全面、範例豐富。如果你有前後端分離的需要，這篇的邏輯滿清晰，適合入門。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="到底要把全部的應用服務放到少數幾個-Kubernetes-Cluster-中，還是要分成很多個呢？！"><a href="#到底要把全部的應用服務放到少數幾個-Kubernetes-Cluster-中，還是要分成很多個呢？！" class="headerlink" title="到底要把全部的應用服務放到少數幾個 Kubernetes Cluster 中，還是要分成很多個呢？！"></a><a href="https://learnk8s.io/how-many-clusters" target="_blank" rel="noopener">到底要把全部的應用服務放到少數幾個 Kubernetes Cluster 中，還是要分成很多個呢？！</a></h3><p>假如有在負責建構 K8S 環境的人應該總是會遭遇到 Cluster 要如何安排的問題，例如：該有多少的 Cluster 才夠用？Cluster 要多大的才夠撐得住應用服務？每個 Cluster 裡面該含有哪一些應用服務？這篇分享文章覺得可能會有以下的分法，並提出 Pros and Cons 讓大家在思考的時候比較有個概念</p><p>💡 一個很大的 Cluster 給大家一起用<br>👍 資源最有效利用<br>👍 便宜<br>👍 只需要管理一個 Cluster<br>👎 單點失敗<br>👎 沒有隔離性 = 不安全<br>👎 自己的應用程式會被其他人影響到<br>👎 要管理很多使用者<br>👎 單一 Cluster 不可能無限擴張</p><p>💡 根據環境 X 應用服務拆分成很多小 Cluster<br>👍 假如 Cluster 壞掉了，影響的範圍有限<br>👍 隔離性佳 = 安全<br>👍 單一 Cluster 管理較少的使用者<br>👎 資源利用率低落<br>👎 成本高<br>👎 要管理多個 Cluster</p><p>💡 把單一個應用服務的所有環境塞進一個 Cluster<br>👍 Cluster 可以根據應用服務去特製化<br>👎 開發環境的應用服務可能會影響到 Production 環境</p><p>💡 每個開發環境只有一個 Cluster：<br>👍 Production 環境不會被其他環境影響到<br>👍 Cluster 可以根據環境去做特製化<br>👍 Production 可以嚴格限縮存取權限<br>👎 應用服務間的隔離性差造成互相影響<br>👎 比較沒有辦法幫特定應用服務做 Cluster 層級的特製化</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 16 期 - 這麼好睡的天氣，要是服務出問題我也睡死了該怎麼辦？！</title>
      <link href="/2020/02/18/16-take-care-monitoring-system/"/>
      <url>/2020/02/18/16-take-care-monitoring-system/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="照顧-Prometheus-的生活起居-一段把屎把尿的故事"><a href="#照顧-Prometheus-的生活起居-一段把屎把尿的故事" class="headerlink" title="照顧 Prometheus 的生活起居 - 一段把屎把尿的故事"></a><a href="https://medium.com/starbugs/%E7%85%A7%E9%A1%A7-prometheus-%E7%9A%84%E7%94%9F%E6%B4%BB%E8%B5%B7%E5%B1%85-e2d7a8997b86" target="_blank" rel="noopener">照顧 Prometheus 的生活起居 - 一段把屎把尿的故事</a></h3><p>本週專欄想要來探討每天維運 Prometheus 的小小經驗，到底該怎麼好好地照顧 Prometheus，才能讓系統發生不預期的事件時，他會乖乖地發出通知呢？在此篇分享文章中會談到的主題如下：</p><ul><li>Prometheus Storage &amp; Scalability</li><li>Incident Management</li><li>Architecture in Production Environment</li><li>Who Monitor Prometheus?</li></ul><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="UI-UX｜下次主管問你為什麼-UI-要用圓角的時候"><a href="#UI-UX｜下次主管問你為什麼-UI-要用圓角的時候" class="headerlink" title="UI/UX｜下次主管問你為什麼 UI 要用圓角的時候"></a><a href="https://medium.com/as-a-product-designer/ui-ux-%E4%B8%8B%E6%AC%A1%E4%B8%BB%E7%AE%A1%E5%95%8F%E4%BD%A0%E7%82%BA%E4%BB%80%E9%BA%BC-ui-%E8%A6%81%E7%94%A8%E5%9C%93%E8%A7%92%E7%9A%84%E6%99%82%E5%80%99-a5bf52cfdc1c" target="_blank" rel="noopener">UI/UX｜下次主管問你為什麼 UI 要用圓角的時候</a></h3><p>各位有想過為什麼前端框架，包含 Bootstrap、Material-ui 或是 Antd 通常都將 Button 或是 Input 等角角都是設計圓的嗎？身為一個前端設計師或工程師，如果從來沒想過這件事情，那趕緊朝聖這篇文章，一起來看看到底是什麼原理，讓大家都這麼做 🙌</p><h3 id="I-Built-a-Game-in-Vanilla-JS-And-I-Don’t-Know-How-to-Code-3-Months-Ago"><a href="#I-Built-a-Game-in-Vanilla-JS-And-I-Don’t-Know-How-to-Code-3-Months-Ago" class="headerlink" title="I Built a Game in Vanilla JS And I Don’t Know How to Code 3 Months Ago"></a><a href="https://hackernoon.com/i-built-a-game-in-vanilla-js-and-i-dont-know-how-to-code-3-months-ago-pi3136ik" target="_blank" rel="noopener">I Built a Game in Vanilla JS And I Don’t Know How to Code 3 Months Ago</a></h3><p>寫程式最大的成就感除了能夠幫助到人外，就是經從無到有，一步步將他們創造出來的這個過程，其實自己身為前端工程師在切版時一直有這種感覺，每一次加上一些 Code 都能夠讓整個網站變得更完整或是特別，這種手作的感動（好文青XD）就如同作者最後提到的「In the past, I created a few webpages, but all of them where using Wordpress and the sensation is not the same. This is a thousand times more exciting!」，建議大家可以看看這篇文章，找回初學的感動XD</p><h3 id="10-Tips-For-Writing-Better-Tests"><a href="#10-Tips-For-Writing-Better-Tests" class="headerlink" title="10 Tips For Writing Better Tests"></a><a href="https://dev.to/maxpou/10-tips-for-writing-better-tests-95j" target="_blank" rel="noopener">10 Tips For Writing Better Tests</a></h3><p>如果有玩過單元測試，並覺得測試在前端非常非常難寫且容易出錯，那也許是不小心踩到單元測試的誤區了，文章中講解了 10 個可以讓單元測試變得更好的技巧！更棒的是作者在每一個技巧都有加上為什麼要這麼做，文章也不會很長，非常值得一看！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="淺談-DevOps-心得及應用工具"><a href="#淺談-DevOps-心得及應用工具" class="headerlink" title="淺談 DevOps 心得及應用工具"></a><a href="https://link.medium.com/DYBJtqrz73" target="_blank" rel="noopener">淺談 DevOps 心得及應用工具</a></h3><p>近幾年來 DevOps 這個領域越來越紅，但我們為什麼需要 DevOps？知道目的之後又該如何達到？這篇文章把這兩個問題回答得很清楚，不管你是已經熟悉 DevOps、想入門或是根本沒聽過 DevOps，這篇文章都很適合你讀</p><h3 id="Gradually-using-TypeScript-in-Your-React-Project"><a href="#Gradually-using-TypeScript-in-Your-React-Project" class="headerlink" title="Gradually using TypeScript in Your React Project"></a><a href="https://link.medium.com/3Ri6xFCy73" target="_blank" rel="noopener">Gradually using TypeScript in Your React Project</a></h3><p>跟 JavaScript 比起來，強型別的 TypeScript 可以幫你找出型別寫錯的低級錯誤，而且也提供 interface 跟 module 語法讓你更好設計大型應用，所以現在很多前端應用也開始用 TypeScript 寫。如果你最近正好想把 JS 寫的 React 專案換到 TS，可以參考看看這篇文章的做法</p><h3 id="Building-a-Continuous-Integration-amp-Deployment-Pipeline-Using-Docker"><a href="#Building-a-Continuous-Integration-amp-Deployment-Pipeline-Using-Docker" class="headerlink" title="Building a Continuous Integration &amp; Deployment Pipeline Using Docker"></a><a href="https://www.taniarascia.com/continuous-integration-pipeline-docker/" target="_blank" rel="noopener">Building a Continuous Integration &amp; Deployment Pipeline Using Docker</a></h3><p>雲端平台除了 AWS 跟 GCP 之外，最近也越來越多人開始用 DigitalOcean，這篇文章就教你怎麼從零開始建一個 pipeline，讓你的應用經過 TravisCI 測試之後自動部署到 DigitalOcean，如果你也是 DO 的使用者的話可以跟著做做看</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Netflix-Android-應用程式現可用AV1格式串流影片"><a href="#Netflix-Android-應用程式現可用AV1格式串流影片" class="headerlink" title="Netflix Android 應用程式現可用AV1格式串流影片"></a><a href="https://www.ithome.com.tw/news/135689" target="_blank" rel="noopener">Netflix Android 應用程式現可用AV1格式串流影片</a></h3><p>Netflix 現在於 Android 應用程式，開始以 AV1 格式串流影片，AV1 是一個由 Netflix、Google、Apple、Facebook 和 Microsoft 等開放媒體聯盟所發佈的開放格式，追求的更少的頻寬跟更告的品質。AV1 壓縮率提高了 20%，更適合行動裝置。</p><h3 id="CS50’s-Web-Programming-with-Python-and-JavaScript-2020-—-Review-JavaScript-SPA-and-CSS-animation"><a href="#CS50’s-Web-Programming-with-Python-and-JavaScript-2020-—-Review-JavaScript-SPA-and-CSS-animation" class="headerlink" title="CS50’s Web Programming with Python and JavaScript 2020 — Review JavaScript, SPA, and CSS animation"></a><a href="https://medium.com/a-layman/cs50s-web-programming-with-python-and-javascript-2020-review-javascript-spa-and-css-animation-7f098fdf7419" target="_blank" rel="noopener">CS50’s Web Programming with Python and JavaScript 2020 — Review JavaScript, SPA, and CSS animation</a></h3><p>CS50 網路程式課程 2020 版由 Python + JS 所組成，看了一下，這篇是筆記 JS、SPA、與 CSS 動畫的筆記，光是 JS 就講的好詳細好多基礎知識，好像應該要來上一下。</p><h3 id="Closing-the-Kubernetes-Skills-Gap-with-Developer-First-Learning"><a href="#Closing-the-Kubernetes-Skills-Gap-with-Developer-First-Learning" class="headerlink" title="Closing the Kubernetes Skills Gap with Developer-First Learning"></a><a href="https://dev.to/digitalocean/closing-the-kubernetes-skills-gap-with-developer-first-learning-5aa7" target="_blank" rel="noopener">Closing the Kubernetes Skills Gap with Developer-First Learning</a></h3><p>你該如何開始學習 Kubernetes 呢？對於 2018 年開始提供 Kubernetes 的產品的 DigitalOcean，這是必要的。在 DigitalOcean 的<a href="https://www.digitalocean.com/currents/june-2018/" target="_blank" rel="noopener">研究報告</a>中，2018 年用 Kubernetes 的開發者，只佔使用容器開發者的 42% 。因此 DO 想要提供更直覺的教學與社群，讓大家快速上手 Kubernetes。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Prometheus-很棒，但是…"><a href="#Prometheus-很棒，但是…" class="headerlink" title="Prometheus 很棒，但是…"></a><a href="https://timber.io/blog/promql-for-humans/" target="_blank" rel="noopener">Prometheus 很棒，但是…</a></h3><p><strong>PromQL</strong> 沒有那麼地輕易上手，所以最近官方又特別發文來介紹一下，包含 Data Types，Labels, Metric Types, Functions 跟 Operators，不過看一看，還是覺得 Timber 在 PromQL for Humans 文內的 PromQL Cheatsheet 最明瞭易懂！分享給正準備探索 Prometheus 的人！最後也在順便加碼由社群大大 <a href="https://www.facebook.com/kkcliu" target="_blank" rel="noopener"><strong>Kakashi Liu</strong></a> 所分享有關於 <a href="https://awesome-prometheus-alerts.grep.to/rules.html" target="_blank" rel="noopener"><strong>Alert Rule 的好文</strong></a></p><h3 id="連-Kubernetes-Cluster-的-Provision-都直接採用-GitOps-Pattern-了！"><a href="#連-Kubernetes-Cluster-的-Provision-都直接採用-GitOps-Pattern-了！" class="headerlink" title="連 Kubernetes Cluster 的 Provision 都直接採用 GitOps Pattern 了！"></a><a href="https://www.infoq.com/news/2020/02/wksctl-kubernetes-gitops/" target="_blank" rel="noopener">連 Kubernetes Cluster 的 Provision 都直接採用 GitOps Pattern 了！</a></h3><ul><li><p><strong>WKSctl</strong> 為 <strong>Weaveworks</strong> 的新開源專案，透過 SSH 來幫忙設定跟管理 K8S Cluster 還有其各種 Add-Ons，他把 Cluster API (#CAPI) 與 GitOps 結合再起，可以將 K8S Cluster 的各種組態以 YAML 檔案來定義，然後 WKSctl 就可以根據每次的 Git Push 來幫忙設定 K8S Cluster，既然已經把一切都定義成 YAML 檔案了，所以也可以很輕鬆的隨時重複建立新的 K8S Cluster (自己感覺有點像是 #Ansible 在 Provision 機器一樣XD)</p></li><li><p>WKSctl 是 <a href="https://cluster-api.sigs.k8s.io/" target="_blank" rel="noopener"><strong>CAPI</strong></a> 的開源實作專案，而不是一種 K8S Distribution，他也不會幫忙 Provision 機器，他只負責安裝和設定 K8S Cluster；WKSctl 一開始會先透過 CLI 建立 K8S Cluster 中的第一個節點，接著安裝 WKSctl Controller 來幫忙搞定剩下的 Master 和 Worker 節點</p></li><li><p>達成 GitOps 的方式主要是靠兩個 Controller 1) <strong>Flux Controller</strong> 會一直去監看 Git Repository，一旦有任何的變化，就會將其同步到 ETCD 中 2) WKSctl Controller 負責監看 ETCD 的狀況有任何變化時幫忙施行，其實就像是 K8S 裡面 Replication Controller 的行為一樣</p></li><li><p>為什麼會有這個工具的誕生，是因為其實有很多測試或是開發環境的 K8S Cluster 需要隨時被建立起來，但用完又需要馬上被砍掉；除此之外，他們看到很多的大企業客戶，因為權限和安全考量，都不傾向只使用一個大 K8S Cluster，而是根據不同的需求開很多比較小的 K8S Cluster，而且要水平擴展多個 Cluster，比建立一個大 Cluster 要來得簡單許多</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 15 期 - 值得紀念的時刻，全台最大的口罩駭客松，Respect!</title>
      <link href="/2020/02/11/15-mask-hackathon/"/>
      <url>/2020/02/11/15-mask-hackathon/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-教學-一-概念與架構-為什麼該學-K8S-？Pod？Node？搞的我好亂呀"><a href="#Kubernetes-教學-一-概念與架構-為什麼該學-K8S-？Pod？Node？搞的我好亂呀" class="headerlink" title="Kubernetes 教學 (一) 概念與架構 - 為什麼該學 K8S ？Pod？Node？搞的我好亂呀"></a><a href="https://medium.com/starbugs/kubernetes-%E6%95%99%E5%AD%B8-%E4%B8%80-%E6%A6%82%E5%BF%B5%E8%88%87%E6%9E%B6%E6%A7%8B-954caa9b1558" target="_blank" rel="noopener">Kubernetes 教學 (一) 概念與架構 - 為什麼該學 K8S ？Pod？Node？搞的我好亂呀</a></h3><p>為什麼該用 Kubernetes? 使用 K8S 的概念可以有哪些好處？真的值得我們一用嘛？好，我們知道為什麼要用了，那接下來，開從哪裡開始，我們從 K8S 的架構開始認識，了解一些重要名詞，開始我們的 K8S 之旅。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Improve-Your-Algorithms-with-this-Simple-Equation"><a href="#Improve-Your-Algorithms-with-this-Simple-Equation" class="headerlink" title="Improve Your Algorithms with this Simple Equation"></a><a href="https://dev.to/nielsenjared/improve-your-algorithms-with-this-simple-equation-3g1c" target="_blank" rel="noopener">Improve Your Algorithms with this Simple Equation</a></h3><p>這篇是關於如何改進演算法的文章，一開始看作者的解說可能會不知道他在講什麼，但是看完第一則回覆的內容後，整個人突然恍然大悟 XD，在重看一次以後覺得相當精彩！推薦各位可以看看文章裡作者如何思考問題：）</p><h3 id="How-to-get-your-first-job-as-a-self-taught-developer"><a href="#How-to-get-your-first-job-as-a-self-taught-developer" class="headerlink" title="How to get your first job as a self-taught developer"></a><a href="https://www.freecodecamp.org/news/how-to-get-your-first-job-in-tech/amp/" target="_blank" rel="noopener">How to get your first job as a self-taught developer</a></h3><p>文章中有給出幾個自學程式的夥伴該如何找到第一份工作？其中比較深刻的是第三點提到的「Start interviewing as soon as possible」，有許多剛開始學習程式的工程師，會對自己感到沒有方向以及徬徨，不曉得到底要到什麼時候才夠格開始投履歷面試，但其實如果你從未投出履歷，並且開始第一次面試，這個問題才會永遠得不到答案。</p><h3 id="How-does-your-code-sound"><a href="#How-does-your-code-sound" class="headerlink" title="How does your code sound?"></a><a href="https://hackernoon.com/how-does-your-code-sound-em45338j" target="_blank" rel="noopener">How does your code sound?</a></h3><p>姑且不論 Coding 時的狀態如何，但你曾經想過自己創造的 Code 有什麼樣的聲音嗎？雖然文章中沒有太仔細描述這個 Side Project 是如何產生的（文中有附 GitHub），但是我第一眼就覺得太有趣，直接迷上！大家快一起去看你們的 Code 聽起來是快樂還悲傷！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="語音通訊軟體-Discord-開發語言以-Rust-代替-Go"><a href="#語音通訊軟體-Discord-開發語言以-Rust-代替-Go" class="headerlink" title="語音通訊軟體 Discord 開發語言以 Rust 代替 Go"></a><a href="https://www.ithome.com.tw/news/135659" target="_blank" rel="noopener">語音通訊軟體 Discord 開發語言以 Rust 代替 Go</a></h3><p>最近很熱門的語音通訊軟體 Discord 把內部的一些服務從 Go 換到 Rust，原因是 Go 的垃圾收集器會造成一些延遲，而 Rust 用所有權的方式來管理記憶體所以沒有這個問題<br>身為這兩個語言的愛好者，我覺得 Discord 這麼做並不代表 Rust 比 Go 更好，Rust 在記憶體管理方面確實略勝一籌，但 Rust 也因此變得難學，間接導致了生態系不如 Go 豐富。所以真要說的話每個語言都有他的優缺點，不需要去戰語言，找到最適合自己的那個就可以了</p><h3 id="發佈-npm-套件-從手動到自動-系列"><a href="#發佈-npm-套件-從手動到自動-系列" class="headerlink" title="發佈 npm 套件 - 從手動到自動 系列"></a><a href="https://pjchender.blogspot.com/2020/02/guide-npm-0.html" target="_blank" rel="noopener">發佈 npm 套件 - 從手動到自動 系列</a></h3><p>這一系列文章目前已經寫到第四篇，他從頭教你怎麼發佈 npm package，並  且一步一步把很多事情都自動化掉。內容包括 rollupjs、自動化測試、Travis CI 等等，如果你對於 CI 有興趣的話我覺得這一系列很不錯</p><h3 id="Performance-Best-Practices-Query-Patterns-and-Profiling"><a href="#Performance-Best-Practices-Query-Patterns-and-Profiling" class="headerlink" title="Performance Best Practices: Query Patterns and Profiling"></a><a href="https://www.mongodb.com/blog/post/performance-best-practices-query-patterns-and-profiling" target="_blank" rel="noopener">Performance Best Practices: Query Patterns and Profiling</a></h3><p>近年來使用 mongoDB 的專案越來越多，但很多人可能不知道怎麼用好他，這邊分享一篇官方發佈的 best practice，如果你也有在用 mongoDB 的話一定要讀一讀</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="100-days-practicing-TDD"><a href="#100-days-practicing-TDD" class="headerlink" title="100 days practicing TDD"></a><a href="https://dev.to/gonedark/100-days-practicing-tdd-4d5m?utm_source=additional_box&utm_medium=internal&utm_campaign=regular&booster_org=" target="_blank" rel="noopener">100 days practicing TDD</a></h3><p>用一百天的時間來練習 TTD。出於尊敬 TDD 的三個法則之下，這裡是我的幾個建議 1. 你不需要測試任何的東西 2. 你可以寫多個測試錯誤的案例 3. 你不需要在你看不見錯誤的狀況下練習 TDD。還有更多內容是想要寫出好的程式碼的你會想要看的。</p><h3 id="Learn-Kubernetes-Part-I-Basics-Deployment-and-Minikube"><a href="#Learn-Kubernetes-Part-I-Basics-Deployment-and-Minikube" class="headerlink" title="Learn Kubernetes, Part I, Basics, Deployment and Minikube"></a><a href="https://dev.to/azure/kubernetes-from-the-beginning-part-i-4ifd" target="_blank" rel="noopener">Learn Kubernetes, Part I, Basics, Deployment and Minikube</a></h3><p>這是一個 K8S 教學的系列文，從基礎開始，逐一介紹各種概念與實作演練。</p><h3 id="電影欣賞《OAuth-2-0-and-OpenID-Connect-in-plain-English-》"><a href="#電影欣賞《OAuth-2-0-and-OpenID-Connect-in-plain-English-》" class="headerlink" title="電影欣賞《OAuth 2.0 and OpenID Connect (in plain English)》"></a><a href="https://medium.com/@qrtt1/%E9%9B%BB%E5%BD%B1%E6%AC%A3%E8%B3%9E-oauth-2-0-and-openid-connect-in-plain-english-787d0937e442" target="_blank" rel="noopener">電影欣賞《OAuth 2.0 and OpenID Connect (in plain English)》</a></h3><p>Oauth 大家很常用，但是真的懂了嘛，今天 qrtt1 帶來一段非常好的 Oauth 解說影片，並且將影片內容摘要成一篇文章。推！</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="被-RedHat-收購後神隱多時的-CoreOS-的第一個消息是…"><a href="#被-RedHat-收購後神隱多時的-CoreOS-的第一個消息是…" class="headerlink" title="被 RedHat 收購後神隱多時的 CoreOS 的第一個消息是…"></a><a href="https://coreos.com/os/eol/" target="_blank" rel="noopener">被 RedHat 收購後神隱多時的 CoreOS 的第一個消息是…</a></h3><p><strong>正式宣佈 CoreOS 要 EOL 了XD</strong> 時間點會是在 2020/05/26，所以有用的人可以準備改成使用 Fedora CoreOS 了！自從被收購之後 CoreOS 跟以前在社群的活躍程度差好多喔，感覺有點可惜…</p><h3 id="Packer-支援-HCL-了！"><a href="#Packer-支援-HCL-了！" class="headerlink" title="Packer 支援 HCL 了！"></a><a href="https://www.hashicorp.com/blog/announcing-hashicorp-packer-1-5-with-hcl2-support/" target="_blank" rel="noopener">Packer 支援 HCL 了！</a></h3><p>這次 Packer 1.5 真的是大改版，主要的兩個大更新如下：</p><ul><li><p><strong>總算支援 HCL</strong>: 此格式一開始主要是 Terraform 在使用的，Packer 這邊一直是使用 JSON 格式，現在總算也可以用 HCL 來撰寫了，這樣寫起來順手很多，不知道之後所有的 HashiCorp 工具是不是都會往這個方向發展；不過這算是大改，所以官方希望大家先當成 Beta Feature 就好，因為 Packer 目前總共支援 33 builders, 21 provisioners, 和 20 post-processors 所以不可能一次到位，應該需要一點時間讓社群反應與發酵</p></li><li><p><strong>變數的傳遞方式</strong>：變數可以在 Builder 和 Provisioner 間共享了，目前支援的變數有: ID, Host, Port, User, Password, ConnType, PackerRunUUID, SSHPublicKey, 和 SSHPrivateKey，假如還是不夠用的話，可以到官方的 GitHub 開個 Feature Request</p></li></ul><h3 id="Microservices-的缺點是什麼"><a href="#Microservices-的缺點是什麼" class="headerlink" title="Microservices 的缺點是什麼?!"></a><a href="https://kelda.io/blog/the-dark-side-of-microservices/" target="_blank" rel="noopener">Microservices 的缺點是什麼?!</a></h3><p>近年來有很多的部落格文章，白皮書，投影片，傳教士都在宣揚微服務有多好，用了之後就會有多麼的敏捷，服務多容易擴展，只要一把架構轉換成微服務，就會有工程師來敲門說要應徵工作XD 在某些情況下，它的確有其優點，特別是在大型組織而且團隊數目眾多時，然而微服務並不是萬靈丹，它也有一些嚴重的缺點…</p><ul><li><p><strong>分散式系統其實不容易…</strong></p><ul><li><strong>Consensus</strong>: 所有分散式系統研究都嘗試在解決共識性的問題，例如: Paxos, Raft, Vector Clocks, ACID, Eventual Consistency, Map Reduce, Spark, Spanner…等，而所有解決方案都嘗試在共識性與效能間作取捨</li><li><strong>Partial Failure</strong>: 在單體式服務的架構下，假如今天一個 HTTP 請求失敗了，要嘛是這個服務有 Bug 或是 硬體壞掉之類的，導致這個服務有問題；不過假如當 HTTP 請求的背後是一個微服務架構，此請求將會在多個服務間傳遞，那假如在中間某個服務失敗了，那要怎麼辦？</li></ul></li><li><p><strong>更多有的沒的要注意…</strong></p><ul><li><strong>Development</strong>: 單體是服務可以很簡單的在本地端運行起來，不過假如是微服務的話，就要使用一堆工具來跑一堆東西才可以開始開發，例如 docker-compose 跟 minikube</li><li><strong>Debugging</strong>: 對於微服務來說，一個小小的請求也可能會牽涉到很多不同的服務，要除錯的時候就會很麻煩，雖然可以使用類似 Jaeger 的工具來幫忙，不過還是很煩XD</li><li><strong>Logging</strong>: 一定要有 ELK 或是 Splunk 這種 Log Management 系統，不然根本沒有戲唱</li><li><strong>Monitoring</strong>: 一堆東西要監控，上一個世代的監控工具，例如: Nagios 已經不敷使用，所以要改採用新一代的監控工具，例如：Prometheus, Datadog, Sysdig… 等</li><li><strong>Deployment</strong>: Chef 跟 Puppet 對於單體式架構來說還滿好用的，不過以微服務來說，可能就要使用 Kubernetes 來管理會比較明智一些</li><li><strong>Networking</strong>: 微服務有一大堆的 Endpiont，每一個都需要 Load Balancing, Service Discovery, Consistent Security Policy…等，光想到頭是不是就很大了XD 目前的趨勢是使用 Service Mesh 來解決類似的問題，不過好像還有一段路要走</li></ul></li></ul><p>所以從某些技術觀點來說，微服務比單體式服務來得難解決，不過從人類的觀點來看，微服務可以增進大型組織的效率，允許大公司的不同團隊可以獨立部署各自的服務；不過就像所有在資訊工程領域的事物都會有 tradeoffs 一樣，有時候你必須在組織效率和技術挑戰之間做選擇，而且最好很清楚，當你想要組織具有效率時，所面臨的技術挑戰是值得的</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 14 期 - 一起擺脫開工倦怠期</title>
      <link href="/2020/02/04/14-performance-of-react/"/>
      <url>/2020/02/04/14-performance-of-react/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Kubernetes-教學-一-概念與架構-為什麼該學-K8S-？Pod？Node？搞的我好亂呀"><a href="#Kubernetes-教學-一-概念與架構-為什麼該學-K8S-？Pod？Node？搞的我好亂呀" class="headerlink" title="Kubernetes 教學 (一) 概念與架構 - 為什麼該學 K8S ？Pod？Node？搞的我好亂呀"></a><a href="https://medium.com/starbugs/kubernetes-%E6%95%99%E5%AD%B8-%E4%B8%80-%E6%A6%82%E5%BF%B5%E8%88%87%E6%9E%B6%E6%A7%8B-954caa9b1558" target="_blank" rel="noopener">Kubernetes 教學 (一) 概念與架構 - 為什麼該學 K8S ？Pod？Node？搞的我好亂呀</a></h3><p>為什麼該用 Kubernetes? 使用 K8S 的概念可以有哪些好處？真的值得我們一用嘛？好，我們知道為什麼要用了，那接下來，開從哪裡開始，我們從 K8S 的架構開始認識，了解一些重要名詞，開始我們的 K8S 之旅。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="如果你想成為產品經理，我的8個建議"><a href="#如果你想成為產品經理，我的8個建議" class="headerlink" title="如果你想成為產品經理，我的8個建議"></a><a href="https://medium.com/how-gipi-learn/8-suggestions-about-product-manager-552f613641fa" target="_blank" rel="noopener">如果你想成為產品經理，我的8個建議</a></h3><p>在職涯規劃中，要不要轉為 PM 一直都是工程師選擇的路之一，但是誰也不曉得這個決定到底是不是正確的，如果各位朋友在新的一年中，也剛好想嘗試看看自己是否踏上「產品經理」這層階梯，但又對這職位感到高度沒安全感，不如先看看文章內給出的幾點建議。</p><h3 id="A-JavaScript-interview-question-asked-at-Google"><a href="#A-JavaScript-interview-question-asked-at-Google" class="headerlink" title="A JavaScript interview question asked at Google"></a><a href="https://dev.to/coderbyte/a-javascript-interview-question-asked-at-google-19f1" target="_blank" rel="noopener">A JavaScript interview question asked at Google</a></h3><p>我很喜歡看一些面試題，尤其是剛好看見之前被問過的題目，那就更棒了！這篇文章中分享的問題是如何以 JavaScrip 實現類似 Listener 功能的 Class，大家也不妨照著文章一開始描述的題目內容試著實作一遍吧！</p><h3 id="How-to-Write-Beautiful-and-Meaningful-README-md"><a href="#How-to-Write-Beautiful-and-Meaningful-README-md" class="headerlink" title="How to Write Beautiful and Meaningful README.md"></a><a href="https://blog.bitsrc.io/how-to-write-beautiful-and-meaningful-readme-md-for-your-next-project-897045e3f991" target="_blank" rel="noopener">How to Write Beautiful and Meaningful README.md</a></h3><p>製作一個 SideProject 雖然很困難，但是要寫出漂亮的 README.md 更讓人傷透腦筋，就像文章內提到的「有些開發者會花一個小時來調整按鈕的邊距，但卻無法用十五分鐘好好描述這個 Project 的內容」，如果你也有相同的困擾，或是 README.md 上永遠都只有 Project 的名稱，立馬一起學學 🙌</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="瀏覽器的時光機—歷史堆疊、-pushState-與-replaceState-API"><a href="#瀏覽器的時光機—歷史堆疊、-pushState-與-replaceState-API" class="headerlink" title="瀏覽器的時光機—歷史堆疊、 pushState 與 replaceState API"></a><a href="https://medium.com/@moojing/%E7%80%8F%E8%A6%BD%E5%99%A8%E7%9A%84%E6%99%82%E5%85%89%E6%A9%9F-pushstate-replacestate-api-fa1d909c82b0" target="_blank" rel="noopener">瀏覽器的時光機—歷史堆疊、 pushState 與 replaceState API</a></h3><p>隨著現在的前端日漸複雜、前端也有自己的路由系統，有時候瀏覽器預設的上一頁、下一頁功能不見得是開發者想要的，為了讓上下頁能達到預期的效果，這時候只好用 <code>pushState</code> 跟 <code>replaceState</code> 來操作歷史紀錄</p><h3 id="多想三分鐘，你可以少欠很多技術債"><a href="#多想三分鐘，你可以少欠很多技術債" class="headerlink" title="多想三分鐘，你可以少欠很多技術債"></a><a href="https://link.medium.com/Oe3xv9HLI3" target="_blank" rel="noopener">多想三分鐘，你可以少欠很多技術債</a></h3><p>在進行軟體開發時難免都會產生技術債，不可能完全避免，但如果能在事前做好規劃就能少欠很多債，這篇文章用實際例子教你怎麼分析系統，讓你的系統往一個正確的方向前進</p><h3 id="React-Performance-Fixes-on-Airbnb-Listing-Pages"><a href="#React-Performance-Fixes-on-Airbnb-Listing-Pages" class="headerlink" title="React Performance Fixes on Airbnb Listing Pages"></a><a href="https://link.medium.com/nr5bopHMI3" target="_blank" rel="noopener">React Performance Fixes on Airbnb Listing Pages</a></h3><p>Airbnb 的前端是出名的強，這篇是由他們團隊分享怎麼做 React 的效能測試、還有講解怎麼看火焰圖，讀完這篇保證可以讓你變成更強的 React developer</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="REST-API-Guide"><a href="#REST-API-Guide" class="headerlink" title="REST API Guide"></a><a href="https://dev.to/drminnaar/rest-api-guide-14n2" target="_blank" rel="noopener">REST API Guide</a></h3><p>深度了解 REST API 指南，非常完整到位解釋了 REST 的重點。為什麼要使用 REST？ 六個 REST 架構的限制分別是哪些？又為什麼要設計這些限制？ 理查德森成熟度模型又是什麼？怎麼實踐 REST？然後還附上範例，真是太補了。</p><h3 id="71-Python-Code-Snippets-for-Everyday-Problems"><a href="#71-Python-Code-Snippets-for-Everyday-Problems" class="headerlink" title="71 Python Code Snippets for Everyday Problems"></a><a href="https://dev.to/renegadecoder94/71-python-code-snippets-for-everyday-problems-1mep" target="_blank" rel="noopener">71 Python Code Snippets for Everyday Problems</a></h3><p>用問題來分類，用 16 個分類，分類各種需要處理的情況，71 個程式碼片段，來幫助你高效率的腳絕 Python 問題。真實用，作者的網站經營的也很出色，值得一看。</p><h3 id="Top-10-errors-from-1000-Ruby-on-Rails-projects"><a href="#Top-10-errors-from-1000-Ruby-on-Rails-projects" class="headerlink" title="Top 10 errors from 1000+ Ruby on Rails projects"></a><a href="https://dev.to/philnash/top-10-errors-from-1000-ruby-on-rails-projects-and-how-to-avoid-them-24m" target="_blank" rel="noopener">Top 10 errors from 1000+ Ruby on Rails projects</a></h3><p>10 個最常見的 Ruby on Rails 錯誤與解決他們的方法。雖然在 2020 年 Ruby on Rails 又死了一次，但是還是可以藉由這篇來幫助還沒有死掉的 Rails 專案更快速的除錯。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Kubernetes-Pod-的-Resource-Request-amp-Limit-到底要怎麼設定？！"><a href="#Kubernetes-Pod-的-Resource-Request-amp-Limit-到底要怎麼設定？！" class="headerlink" title="Kubernetes Pod 的 Resource Request &amp; Limit 到底要怎麼設定？！"></a><a href="https://sysdig.com/blog/kubernetes-pod-evicted/" target="_blank" rel="noopener">Kubernetes Pod 的 Resource Request &amp; Limit 到底要怎麼設定？！</a></h3><p>常常會被問這個問題，但其實自己無法回答，當然不是因為很小氣不肯說XD 而是因為每個人所撰寫出來的應用程式所需要的 CPU 和 Memory 最低限度需要多少必須要經過壓測才有辦法得知，也才有信心知道自己的應用程式在目前的資源底下可以服務多少的使用者，這篇文章就 K8S Pod 設定 Limit &amp; Request 時可能會被怎樣對待給出清楚的說明</p><ul><li><p>首先將 Pod 分成三種類型</p><ul><li>Guaranteed: Pod 裡面的所有 Container 都有設定 Request &amp; Limit，而且值都一樣</li><li>Burstable: 沒有任何一個 Container 在 Pod 裡面的 CPU 或是 Memory 設定為 Guaranteed</li><li>Best Effort: Pod 沒有設定 Request 或是 Limit</li></ul></li><li><p>K8S Cluster 就是根據設定的 Request &amp; Limit 來將 Pod 分配到適合的 Node 中，所以假如某一個 Pod 設定的 Request 大於目前 Node 可以承擔的資源時，那這個 Pod 就會找不到 Node 可以去，導致一直處於 Pending 的狀態；當 Request 設定的值太大時將無法被分配到任何的 Node，除此之外也可能會導致被霸佔但沒有使用到的資源無法被其他的 Pod 使用，這時候管理 K8S Cluster 的同事可能會站到你座位的後面看著你…</p></li><li><p>K8S Cluster 在分配 Pod 到適宜的 Node 上時，並不是那麼地直覺，是以底下這兩個值的較大值為主：</p><ul><li>Pod 裡面所有 Container Request 的總和</li><li>Pod 裡面任一個 Init Container 的 Request</li></ul></li><li><p>當 K8S Cluster 資源不敷使用時，Kubelet 便會變成劊子手，開始將一些 Pod 給砍掉，而砍掉的順序會是如何呢？</p><ul><li>首先砍掉已經死掉的 Pod，沒有在用的 Container Image 將 Disk 空間給釋放出來</li><li>接下來就是把沒有設定 Request 或是 Limit 的 Best Effort Pod 給砍掉</li><li>然後把使用到的資源比 Request 來得多的 Burstable Pod 給砍掉</li><li>最後再把使用到的資源比 Request 來得少的 Burstable Pod 給砍掉</li></ul></li><li><p>所以可以得知，假如某個 Pod 相當重要的話，那就一定要將其設定成 Guaranteed Pod，避免它在 Node 資源不充足的時候被砍掉；不過有一個例外，就是當 K8S 本身的系統服務需要更多運算資源才得以正常運行時，這種情況之下 Guaranteed Pod 才會被 Kubelet 給砍掉</p></li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 13 期 - 恭喜呀恭喜～發呀發大財～</title>
      <link href="/2020/01/28/13-congratulate-and-wish-you-wealth/"/>
      <url>/2020/01/28/13-congratulate-and-wish-you-wealth/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="站在-Docker-的肩膀上，部署任何語言的-Web-應用到-Heroku"><a href="#站在-Docker-的肩膀上，部署任何語言的-Web-應用到-Heroku" class="headerlink" title="站在 Docker 的肩膀上，部署任何語言的 Web 應用到 Heroku"></a><a href="https://medium.com/@larry850806/deploy-any-web-application-to-heroku-with-docker-b64b9b0eb93" target="_blank" rel="noopener">站在 Docker 的肩膀上，部署任何語言的 Web 應用到 Heroku</a></h3><p>Docker 跟 K8s 在這幾年迅速竄紅，許多服務也是直接建立在 Docker 之上。但因為要學的東西太多了，很多人可能根本不知道怎麼入門。這週的專欄從 Docker 的基本概念開始講起，帶大家把 Node.js 應用打包成 Docker Image，並且部署到 Heroku 雲端平台，如果你最近剛好想學 Docker 的話這篇很適合新手入門</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="The-React-Cheatsheet-for-2020-real-world-examples"><a href="#The-React-Cheatsheet-for-2020-real-world-examples" class="headerlink" title="The React Cheatsheet for 2020 (+ real-world examples)"></a><a href="https://www.freecodecamp.org/news/the-react-cheatsheet-for-2020/amp/" target="_blank" rel="noopener">The React Cheatsheet for 2020 (+ real-world examples)</a></h3><p>新年假期的最後一天是該收心了，但如果你身為 React 的開發者，而又還不曉得如何帶著萬全的準備回到職場上，請閱讀這篇文章，作者整理了在 2020 年你不可不知的開發技巧，讀完後不管是溫故了知新或是換然一新，都準備返回辦公室 Coding 爆全場！</p><h3 id="12-JavaScript-Concepts-That-Will-Level-Up-Your-Development-Skills"><a href="#12-JavaScript-Concepts-That-Will-Level-Up-Your-Development-Skills" class="headerlink" title="12 JavaScript Concepts That Will Level Up Your Development Skills"></a><a href="https://hackernoon.com/12-javascript-concepts-that-will-level-up-your-development-skills-ha1a364w" target="_blank" rel="noopener">12 JavaScript Concepts That Will Level Up Your Development Skills</a></h3><p>千萬別想說如果不會 React 就只能失落的等待收假，這不就出現了 12 個提高你開發技能的小概念嗎？也許你已經在無數個文章中吸收並且瞭解了這些概念，但好的事情，總是值得你一再回味。</p><h3 id="How-to-Make-Programming-a-Daily-Habit"><a href="#How-to-Make-Programming-a-Daily-Habit" class="headerlink" title="How to Make Programming a Daily Habit"></a><a href="https://dev.to/gaelthomas/how-to-make-programming-a-daily-habit-4kol" target="_blank" rel="noopener">How to Make Programming a Daily Habit</a></h3><p>身為工程師持續進步真的是很重要的，所以額外的程式練習或是思考閱讀學習就會變成一件要利用下班時間來做的事情，但是打程式潛意識來說都會被認為是「工作」的一部份而對它感到抗拒，但反過來說，差距也是從這裡出現的，之前聽到一句讓人感到畏懼的話是「世上最可怕的事情是，比你厲害的人還比你更努力！」，於是為了能夠和那些很厲害的大神拉近一點距離，不如在 2020 年開始，試著讓 Coding 成為日常習慣之一吧！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="为什么-Go-语言没有泛型"><a href="#为什么-Go-语言没有泛型" class="headerlink" title="为什么 Go 语言没有泛型"></a><a href="https://draveness.me/whys-the-design-go-generics" target="_blank" rel="noopener">为什么 Go 语言没有泛型</a></h3><p>關於 Go 語言需不需要泛型（generics）從十年前就開始不斷被討論，但一直還沒有個確定的做法，泛型的各種實現方式也各有優缺。這篇文章分析了為什麼 Go 不趕快實現泛型，泛型的實作上又有什麼難題，很推薦對程式語言發展有興趣的人看看</p><h3 id="Introducing-Yarn-2"><a href="#Introducing-Yarn-2" class="headerlink" title="Introducing Yarn 2 !"></a><a href="https://dev.to/arcanis/introducing-yarn-2-4eh1" target="_blank" rel="noopener">Introducing Yarn 2 !</a></h3><p>前幾年 Yarn 靠著超快的下載速度轟動了 JS 圈，當時我也跟著放棄 npm 改用 yarn，但後來 npm 的速度也不輸給 yarn 了。如今 Yarn 發佈了第二個版本，除了加強訊息的可讀性之外還改了不少東西，想嚐鮮的朋友們可以照他們的 Migration Guide 試試看</p><h3 id="Anonymous-Web-Scraping-with-Node-js-Tor-Puppeteer-and-cheerio"><a href="#Anonymous-Web-Scraping-with-Node-js-Tor-Puppeteer-and-cheerio" class="headerlink" title="Anonymous Web Scraping with Node.js, Tor, Puppeteer and cheerio"></a><a href="https://link.medium.com/6PQU63Z1w3" target="_blank" rel="noopener">Anonymous Web Scraping with Node.js, Tor, Puppeteer and cheerio</a></h3><p>Tor 是一個用於匿名通訊的瀏覽器，除此之外也可以當作 Proxy 來用，這篇文章教你用 Node.js 跟 Tor 做一個匿名的爬蟲，不用再擔心 IP 被擋掉</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="英國-T1-簽證申請經驗分享-by-Stan-Lo"><a href="#英國-T1-簽證申請經驗分享-by-Stan-Lo" class="headerlink" title="英國 T1 簽證申請經驗分享 by Stan Lo"></a><a href="https://medium.com/@st0012/16f8f1fca067" target="_blank" rel="noopener">英國 T1 簽證申請經驗分享 by Stan Lo</a></h3><p>恭喜 Stan Lo 順利拿到英國 T1 簽證，英國 T1 簽證拿到之後在英國待滿三年即享有英國永居權，還可以自己開公司！是一個很強的簽證，Stan 在文中詳細分享了 T1 工作簽證的申請經驗，是不是很想要得到？趕快入內觀看需要具備什麼條件。</p><h3 id="Good-and-Bad-Practices-of-Coding-in-Python"><a href="#Good-and-Bad-Practices-of-Coding-in-Python" class="headerlink" title="Good and Bad Practices of Coding in Python"></a><a href="https://dev.to/duomly/the-best-practices-of-coding-in-python-and-what-to-avoid-3c65" target="_blank" rel="noopener">Good and Bad Practices of Coding in Python</a></h3><p>寫 Python 好的實踐與壞的實踐。本篇文章蒐集了 10 幾個範例，阿，我沒有仔細算過，也許有 20 個，滿滿的範例，讓你對照一下你是否有命中其中不好的實踐？</p><h3 id="Top-10-Web-Development-Trends-That-will-be-in-Demand-in-2020"><a href="#Top-10-Web-Development-Trends-That-will-be-in-Demand-in-2020" class="headerlink" title="Top 10 Web Development Trends That will be in Demand in 2020"></a><a href="https://www.decipherzone.com/blog-detail/top-10-web-development-trends-in-2020" target="_blank" rel="noopener">Top 10 Web Development Trends That will be in Demand in 2020</a></h3><p>2020 年十大 Web 趨勢揭曉，分別是：AI、自動化測試、JS 框架、無伺服器框架、Google 推出的功能詞語片段、手機裝置流量，擴充套件、PWA、語音搜尋、Cybersecurity。為什麼這十個會是趨勢呢？來看看原文的分析。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="過完年要找-DevOps-Engineer-的話，面試時該問什麼啊？！"><a href="#過完年要找-DevOps-Engineer-的話，面試時該問什麼啊？！" class="headerlink" title="過完年要找 DevOps Engineer 的話，面試時該問什麼啊？！"></a><a href="https://enterprisersproject.com/article/2020/1/devops-engineer-interview-questions-2020" target="_blank" rel="noopener">過完年要找 DevOps Engineer 的話，面試時該問什麼啊？！</a></h3><p>好的 DevOps Engineer 其實真的不好找 (不只是台灣，應該全球都有這個狀況)，目前在職缺排行榜上一直名列前茅，而且平均薪資也滿高的，通常 DevOps Engineer 都具有系統管理或是軟體開發的相關經驗，而且除了技術背景之外，善於跟不同團隊合作也很重要；而雖然有些人不喜歡這個職缺名稱，但不可諱言，DevOps 社群正是因為這群人才得以凝聚在一起，那麼假如要面試 DevOps Engineer 有什麼樣的問題可以問呢？此篇文章提供一些我看起來比較屬於軟性的情境面試問題，至於要怎麼回答，就請參考原文了 = =+</p><ol><li><p>請問你如何將 Security 這個要素嵌合進去組織內的 DevOps 流程？你曾經幫助過團隊建立起 Security 意識嗎？</p></li><li><p>可以舉出一些例子來說明哪些工作任務會被你自動化，哪些不會？除此之外，請告訴我自動化什麼樣的流程對你來說是很有挑戰性的？</p></li><li><p>請試著描述對於 DevOps 團隊來說，你覺得最理想的工作環境應該是什麼樣子的？從過往和維運團隊的合作中你學到了哪些事情？</p></li><li><p>告訴我一些你曾經開發過而且對於成功達成 DevOps 很重要的自動化腳本</p></li><li><p>在你過去的經驗中，當一個線上服務發佈新版本時，你如何得知它出事情了？而且你會做什麼事情保持服務的穩定性？而從這次的事件中你學到了什麼樣的經驗？</p></li><li><p>對於你自己以至於整個 DevOps 團隊來說，你如何衡量事情已經完成或是成功了？</p></li><li><p>告訴我你最喜歡哪一些 DevOps 工具，並且解釋是什麼樣的原因讓你選擇了他們？而最近又有哪一些新的工具或是技術還不在你的使用清單中，但你覺得應該要去好好研究的？</p></li></ol><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 12 期 - 有錢沒錢，發摟 StarBugs 好過年！</title>
      <link href="/2020/01/21/12-manage-your-credentials/"/>
      <url>/2020/01/21/12-manage-your-credentials/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="密碼都放-Vault-裡了，然後呢？！"><a href="#密碼都放-Vault-裡了，然後呢？！" class="headerlink" title="密碼都放 Vault 裡了，然後呢？！"></a><a href="https://medium.com/starbugs/%E5%AF%86%E7%A2%BC%E9%83%BD%E6%94%BE-vault-%E8%A3%A1%E4%BA%86-%E7%84%B6%E5%BE%8C%E5%91%A2-97c7832d59f" target="_blank" rel="noopener">密碼都放 Vault 裡了，然後呢？！</a></h3><p>HashiCorp 推廣 Vault 一直不餘遺力，自己也從兩年多前用到現在，畢竟撇開企業方案不談，開源專案好像也只有 Vault 可以用；而這塊市場自己覺得目前還算是在推廣階段吧，依然處於積極建立大家對於 Credential 保管應該要有的觀念和危機意識；所以網路上可以看到的教學都是把 Vault 用最危險的 Dev 模式跑起來，然後把重點擺在如何讓應用程式可以取得帳號，密碼或是 API Token…等敏感資料，但是對於 Vault 要如何管理跟保護的教學好像就不太常見了，所以此篇文章來野人獻曝自己兩年多來維運 Vault 的一些小經驗，分別從<strong>網路</strong>，<strong>日常維運</strong>，<strong>監控</strong>，<strong>日誌</strong>等不同層面來討論，但最後當然不免俗還是會提一下如何跟應用程式做結合</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="探討單元測試和整合測試的涵蓋範圍"><a href="#探討單元測試和整合測試的涵蓋範圍" class="headerlink" title="探討單元測試和整合測試的涵蓋範圍"></a><a href="https://ithelp.ithome.com.tw/articles/10229734" target="_blank" rel="noopener">探討單元測試和整合測試的涵蓋範圍</a></h3><p>剛開始接觸前端測試的時候，常常搞不清楚整合測試和單元測試的差別在哪裡，尤其是單元測試中對單一行為的描寫，更是讓人感到模糊，難到只要測試案例跨了類別就不算單元測試嗎？一起看看文章怎麼解釋這兩者之間的差異。</p><h3 id="A-Series-of-My-Unfortunate-Mistakes-When-Writing-Tests"><a href="#A-Series-of-My-Unfortunate-Mistakes-When-Writing-Tests" class="headerlink" title="A Series of My Unfortunate Mistakes (When Writing Tests)"></a><a href="https://dev.to/briwa/a-series-of-my-unfortunate-mistakes-when-writing-tests-h8m?utm_source=additional_box&utm_medium=internal&utm_campaign=regular&booster_org&fbclid=IwAR2Q7c_QmqYv6GXot_sR7yKCIyIgOwznwlIlo7nYBlG_zToibS7bFZk1Hhs" target="_blank" rel="noopener">A Series of My Unfortunate Mistakes (When Writing Tests)</a></h3><p>在做單元測試的時候，最怕寫出糟糕又脆弱的測試，導入測試已經要花上一筆時間了，如果又因為測試案例增加開發的成本那就太得不償失了，本篇文章用實戰的方式，一步一步告訴大家什麼 5 點不正確的單元測試。</p><h3 id="The-Best-Whiteboard-Interview-Advice-I-Ever-Received"><a href="#The-Best-Whiteboard-Interview-Advice-I-Ever-Received" class="headerlink" title="The Best Whiteboard Interview Advice I Ever Received"></a><a href="https://hackernoon.com/the-best-whiteboard-interview-advice-i-ever-received-3ebbfa72e4a" target="_blank" rel="noopener">The Best Whiteboard Interview Advice I Ever Received</a></h3><p>不曉得大家在各種面試的關卡中，都會如何應對白板題？也許你會緊張到不知所措（像我一樣），或是一時間腦袋空白不知道該如何是好（這也是我 😂），但除了尷尬地站在白板和面試官中間用力地在腦中思考外，你還能做更多的事情！本篇文章的作者給了幾點對於面對白板題的建議！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Speed-Up-JavaScript-Array-Processing"><a href="#Speed-Up-JavaScript-Array-Processing" class="headerlink" title="Speed Up JavaScript Array Processing"></a><a href="https://link.medium.com/6KbO4bpGl3" target="_blank" rel="noopener">Speed Up JavaScript Array Processing</a></h3><p>雖然原生 JS 提供的 <code>map</code>、<code>filter</code> 等等 method 很好用，但在 Array 太大時可能會造成效能大幅降低，如果不想降低可讀性但又想寫出高效能的程式碼，可以考慮用 RxJS 把 Array 轉成 Observable，再用 RxJS 的 method 來進行處理</p><h3 id="Go-tcha-When-nil-nil"><a href="#Go-tcha-When-nil-nil" class="headerlink" title="Go-tcha: When nil != nil"></a><a href="https://dev.to/pauljlucas/go-tcha-when-nil--nil-hic" target="_blank" rel="noopener">Go-tcha: When nil != nil</a></h3><p>這是我在 Golang 的 Telegram 群組看到的，想不到 Go 裡面的 <code>nil</code> 有可能不等於 <code>nil</code>，而且 <code>nil</code> 竟然還有分型別，這 feature(bug) 真的是很神奇</p><h3 id="Your-first-CLI-tool-with-Rust"><a href="#Your-first-CLI-tool-with-Rust" class="headerlink" title="Your first CLI tool with Rust"></a><a href="https://www.demainilpleut.fr/your-first-cli-tool-with-rust/" target="_blank" rel="noopener">Your first CLI tool with Rust</a></h3><p>Rust 是一個系統級的程式語言，本身沒有太過肥大的 runtime，所以很適合用來寫 command line tool。作者在這篇文章中用 Rust 寫了一個 <code>cat</code> 指令，想學 Rust 的話很建議看看，比看官方的語法教學有趣多了</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Code-it-Notes-Create-Your-Own"><a href="#Code-it-Notes-Create-Your-Own" class="headerlink" title="Code-it Notes: Create Your Own!"></a><a href="https://dev.to/danielharding/code-it-notes-create-your-own-1hj4" target="_blank" rel="noopener">Code-it Notes: Create Your Own!</a></h3><p>來建造你自己的 Code-it 程式小抄！幾個月前打造了一個原型，來幫助自己更好的理解一些我永遠會忘記的 JS 方法。這個概念很簡單，如果我需要他，我就會創造一個 Code-it 的小抄。用自己的話寫下來，可以讓你更了解程式內部是如何運作的。</p><h3 id="The-dangers-of-async-await"><a href="#The-dangers-of-async-await" class="headerlink" title="The dangers of async/await"></a><a href="https://dev.to/christopherkade/the-dangers-of-async-await-3p5g" target="_blank" rel="noopener">The dangers of async/await</a></h3><p>async / await 的危險。在幾個月前，我作為一個顧問，在重寫大型系統的時候，我體會到 <code>async / await</code> 事實上常常被很多不必要的非同步和和平行運算上，舉例來說這是一個 Vue Code Snipet …。</p><h3 id="Django-Admin-Dashboards-Open-Source-and-Free"><a href="#Django-Admin-Dashboards-Open-Source-and-Free" class="headerlink" title="Django Admin Dashboards - Open-Source and Free"></a><a href="https://dev.to/sm0ke/django-admin-dashboards-open-source-and-free-1o80" target="_blank" rel="noopener">Django Admin Dashboards - Open-Source and Free</a></h3><p>在這篇文章中我會展示一大堆的由自動化工具與 Django 所打造的免費 Web App。工作流程已經在我以前的文章提到。如果你是初次看到這篇文章，我用簡單的方式來說明這個 workflow …。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="YAML-工程師們！你還在用-Helm-產生-YAML-檔案嗎？！"><a href="#YAML-工程師們！你還在用-Helm-產生-YAML-檔案嗎？！" class="headerlink" title="YAML 工程師們！你還在用 Helm 產生 YAML 檔案嗎？！"></a><a href="https://learnk8s.io/templating-yaml-with-code" target="_blank" rel="noopener">YAML 工程師們！你還在用 Helm 產生 YAML 檔案嗎？！</a></h3><p>工程師們！你還在用 <strong>Helm</strong> 產生 YAML 檔案嗎？！此篇文章勸大家不要再使用 Helm 來產生管理 K8S 資源的 YAML 檔案，因為它只是借用 Go Templating Engine 來建立 YAML 檔案，所以產生的檔案是不是正確的，其實它不知道也完全不負責任，應該要另外用其他的工具來管理部署 K8S 應用程式的 YAML 檔案才對，大家覺得呢？！</p><ul><li>使用 sed (展示用，也不建議)</li><li>使用 yq</li><li>使用 Kustomize</li><li>直接寫程式碼引用 K8S 的相關函式庫產生</li><li>使用如 Cue, jk, jsonnet Dhall, Skycfg 等工具</li></ul><h3 id="給你滿滿的-Prometheus-大平台"><a href="#給你滿滿的-Prometheus-大平台" class="headerlink" title="給你滿滿的 Prometheus 大平台"></a><a href="https://monitoring2.substack.com/p/big-prometheus" target="_blank" rel="noopener">給你滿滿的 Prometheus 大平台</a></h3><p>根據 Google 日前的研究指出大型組織正面臨處理爆炸性數據量的問題，可以將其歸類為 Reporting 和 Dashboard 跟 Time Series Monitoring…等，而在處理這方面問題的開源專案中，又以 Prometheus 最為有名，而假如只是要將其部署在一個 K8S Cluster 內的話相當的簡單，可以使用 Prometheus Operator 就輕鬆辦到，但假如像是 Cloudflare 這種在 2017 年就運行了 177 個的情況，那管理起來就不太好玩了，所以要如何管理大規模的 Prometheus 呢？！這篇文章介紹了四個解決方案：</p><ul><li><strong>Thanos</strong> &amp; <strong>Cortex</strong>: 在解決問題的面向上，這兩個還滿雷同的，Cortex 的行為比較像一般傳統的 SaaS 監控系統將所有的資料往同一個地方丟；而 Thanos 則比較沒那麼集中化，主要是在幫忙每一個 Prometheus 去做資料處理，這兩種不同的做法會導致在查詢的時候必須要使用不同的技術實作方式，比較有趣的是這兩個解決方案都利用 Cloud Provider 提供的服務來儲存長期的資料 (Thanos 可以用  Amazon S3, Azure Blob Storage 跟 Google Cloud Storage…等，Cortex 則是使用比較昂貴的 NoSQL 服務如 AWS DynamoDB 或是 Google BigTable)</li><li><strong>M3DB</strong>: 架構上比較像是 Thanos，不過根據 Uber 的說明，他們頻繁地需要去抓取比較舊的歷史資料，在採用 Thanos 的情況下，去 object-store 拉取資料的速度太慢了，而且資料在 Public Cloud 跟他們的 Private Cloud 傳輸的過程中產生的成本也相當驚人，所以才會有這個專案的誕生，使用它來儲存 Prometheus 的資料</li><li><strong>VictoriaMetrics</strong>: 就像前面幾個解決方案一樣，VictoriaMetrics 的創造者一樣面臨了成本與效能問題，而這個解決方案的靈感來自於  ClickHouse (一個新的資料庫系統，擁有厲害到令人印象深刻的效能表現)，根據 VictoriaMetrics 團隊的 FAQ 可以發現，他們提供了低運行成本與良好的開發維運體驗，而且似乎有某些 Cloud Service 採用其服務</li></ul><h3 id="多麼痛的領悟～-從-Backend-轉成-Frontend-工程師"><a href="#多麼痛的領悟～-從-Backend-轉成-Frontend-工程師" class="headerlink" title="多麼痛的領悟～ 從 Backend 轉成 Frontend 工程師"></a><a href="https://blog.bitsrc.io/what-i-learned-by-transitioning-from-backend-to-frontend-development-2fc15ead30fe" target="_blank" rel="noopener">多麼痛的領悟～ 從 Backend 轉成 Frontend 工程師</a></h3><p>腦中有聽到歌聲的代表有一定年紀了👴👵😂 此篇文章的作者分享自己從很純的 Backend 轉職成 Frontend 的心路歷程 💪 🔥👊</p><ul><li>不像後端工程師聚焦在資料結構，資料庫的結構和效能，程式碼架構，強大的 API；而是會去注意使用者介面，衡量使用者體驗，嘗試去設計和改善 App 的流程來改善體驗</li><li>UI First！變成先從 UI 的層面去考量，譬如使用者會去按哪些按鍵，並且如何跟 UI 元件互動，然後再根據這些想法去設計合適的 Backend 結構和資料庫</li><li>開始思考 UI 開發的重複利用性，譬如有一些元件可以在多個頁面重複使用，推薦可以使用 <a href="https://bit.dev/" target="_blank" rel="noopener">https://bit.dev/</a></li><li>學會如何把想法轉換成 mockups</li><li>瀏覽器和 Client 端的效能調校，學會如何使用暫存，譬如：localStorage，最佳化 JavaScript 的壓縮，是要使用 webpack 或是動態載入 script</li><li>學會如何建立 Responsive 的網頁好讓在各種不同尺寸的裝置上顯示</li><li>體會到 SEO 的重要性</li><li>要把 CSS 學好，不然應該很難存活</li><li>不要過度依賴前端框架避免程式碼到後來很難維護</li><li>開始想要多學一點關於設計師的技能，譬如 Adobe Photoshop</li></ul><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>第 11 期 - 訂閱星巴哥，祝你尾牙中大獎！</title>
      <link href="/2020/01/14/11-you-subscribe-you-will-earn-a-big-prize/"/>
      <url>/2020/01/14/11-you-subscribe-you-will-earn-a-big-prize/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從零開始學-DevOps-—-那就選擇最簡單的-Drone-CI-開始吧！"><a href="#從零開始學-DevOps-—-那就選擇最簡單的-Drone-CI-開始吧！" class="headerlink" title="從零開始學 DevOps — 那就選擇最簡單的 Drone CI 開始吧！"></a><a href="https://medium.com/starbugs/%E5%BE%9E%E9%9B%B6%E9%96%8B%E5%A7%8B%E5%AD%B8-devops-%E9%82%A3%E5%B0%B1%E9%81%B8%E6%93%87%E6%9C%80%E7%B0%A1%E5%96%AE%E7%9A%84-drone-ci-%E9%96%8B%E5%A7%8B%E5%90%A7-931126671139" target="_blank" rel="noopener">從零開始學 DevOps — 那就選擇最簡單的 Drone CI 開始吧！</a></h3><p>目前 DevOps 已經是 Backend 或 Frontend 多多少少都會碰到的部份。而 Drone，正可以讓開發者專心開發自己的專案，每個專案獨立設定需要的 CI / CD 流程，解放前端、後端工程師的戰鬥力，將測試與部屬結合在開發流程中，降低手動測試需要的時間。話不多說，趕快開始架設第一個 Drone CI 伺服器吧。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="前端工程師應該知道的-—-將組件截圖的小技巧"><a href="#前端工程師應該知道的-—-將組件截圖的小技巧" class="headerlink" title="前端工程師應該知道的 — 將組件截圖的小技巧"></a><a href="https://medium.com/@realdennis/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%B8%AB%E6%87%89%E8%A9%B2%E7%9F%A5%E9%81%93%E7%9A%84-%E5%B0%87%E7%B5%84%E4%BB%B6%E6%88%AA%E5%9C%96%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7-4074bd132c8b" target="_blank" rel="noopener">前端工程師應該知道的 — 將組件截圖的小技巧</a></h3><p>有時候我們會不曉得該怎麼只截下網頁上某個 Element，再不然就是螢幕根本不夠高，每次都要分好幾次才能截出一整個畫面，但你知道 Chrome 的瀏覽器有個祕技能夠協助你更方便做到這些事嗎？</p><h3 id="8-HTML-tags-you-need-to-be-using-and-5-to-avoid"><a href="#8-HTML-tags-you-need-to-be-using-and-5-to-avoid" class="headerlink" title="8 HTML tags you need to be using (and 5 to avoid)"></a><a href="https://www.creativebloq.com/amp/advice/html-tags" target="_blank" rel="noopener">8 HTML tags you need to be using (and 5 to avoid)</a></h3><p>HTML5 擁有許多新的 Tag 可以使用，但因為種類真的太多，要全部記起來可不是一件簡單的事情，只好先來看看值得擁抱的 8 個 Tag，以及你該避免的 5 個 Tag。</p><h3 id="5-Things-I-Learned-From-Coding-with-Other-People-My-First-Web-Development-Team-Project"><a href="#5-Things-I-Learned-From-Coding-with-Other-People-My-First-Web-Development-Team-Project" class="headerlink" title="5 Things I Learned From Coding with Other People: My First Web Development Team Project"></a><a href="https://dev.to/sophia_wyl/5-things-i-learned-from-coding-with-other-people-my-first-web-development-team-project-48fk" target="_blank" rel="noopener">5 Things I Learned From Coding with Other People: My First Web Development Team Project</a></h3><p>文中講述了在第一個團隊裡學到的五件事情，其中最讓我感受深刻的是第五點的「Surround yourself with motivated and supportive people」，與有上進心的人一起工作真的是很棒的事情！經過互相討論解決出現在眼前的阻礙，並在這個過程中學習到解決問題的方法，是非常非常幸運的機會。如果你今天只有一個人，就是以加法變強，但若是有一群優秀的伙伴們一起，那會是乘法的變強！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Streams-and-Buffers-in-Node-js"><a href="#Streams-and-Buffers-in-Node-js" class="headerlink" title="Streams and Buffers in Node.js"></a><a href="https://link.medium.com/qRj12riCb3" target="_blank" rel="noopener">Streams and Buffers in Node.js</a></h3><p>平常用 Node.js 寫 API server 比較少有機會碰到 Stream 跟 Buffer，但也許有一天你會需要用到他來做處理影像、或是傳輸大檔案，所以趕快趁這個機會來了解一下 Stream 的概念吧！</p><h3 id="從被問到問人，那些我常問的面試問題"><a href="#從被問到問人，那些我常問的面試問題" class="headerlink" title="從被問到問人，那些我常問的面試問題"></a><a href="https://blog.niclin.tw/2020/01/07/interview-tips/" target="_blank" rel="noopener">從被問到問人，那些我常問的面試問題</a></h3><p>「我們很常被面試，但當角色轉換時，要如何成為那個自己不討厭的面試官呢？」。作者分享了自己的找人標準、面試流程、還有常問的題目，不管你是要去面試還是面試人，都可以參考看看</p><h3 id="PressPlay從AWS搬家到GCP一年的心得"><a href="#PressPlay從AWS搬家到GCP一年的心得" class="headerlink" title="PressPlay從AWS搬家到GCP一年的心得"></a><a href="https://link.medium.com/EFFAG9DGb3" target="_blank" rel="noopener">PressPlay從AWS搬家到GCP一年的心得</a></h3><p>老牌的 AWS 服務比較多，但 GCP 價格比較親民，所以也不一定哪個比較好。如果你有一個新專案還在考慮要用 AWS 還是 GCP 的話，可以先看看 PressPlay 搬家的原因，看看適不適合自己的專案</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="5-Kubernetes-trends-to-watch-in-2020"><a href="#5-Kubernetes-trends-to-watch-in-2020" class="headerlink" title="5 Kubernetes trends to watch in 2020"></a><a href="https://enterprisersproject.com/article/2020/1/kubernetes-trends-watch-2020" target="_blank" rel="noopener">5 Kubernetes trends to watch in 2020</a></h3><p>Kubernetes 的採用逐漸再升高當中，而且隨著 IT 領域使用 Container 的人越來越多，可以預期 K8S 在今年將會繼續大紅大紫，所以就讓我們來看看 2020 K8S 的五大趨勢是什麼？！</p><ol><li>越來越多 K8S 的原生軟體</li><li>Federation 在今年或許有機會到 Beta 階段或是 GA</li><li>K8S 的 Security 相關議題會持續被高度關注</li><li>擁有 K8S 的相關技術的人員短缺</li><li>隨著 K8S 運行的成本越來越低，類似於邊緣運算的相關領域將會有越來越多的使用案例</li></ol><h3 id="Jenkins-Happy-New-Year-2019-2020-edition"><a href="#Jenkins-Happy-New-Year-2019-2020-edition" class="headerlink" title="Jenkins: Happy New Year! 2019/2020 edition"></a><a href="https://jenkins.io/blog/2020/01/07/happy-new-year/" target="_blank" rel="noopener">Jenkins: Happy New Year! 2019/2020 edition</a></h3><p>2019 剛過，Jenkins 官方發表文章來回顧這一年來他們完成了什麼事情</p><ul><li>Jenkins 老爺爺歡慶 15 歲</li><li>擁有第一個治理委員會與選舉</li><li>Jenkins 專案加入 CDF (Continuous Delivery Foundation)</li><li>Jenkins 支援 Java 11</li><li>Jenkins X 從 Jenkins 的子專案獨立出來變成一個全新的專案加入到 CDF 中</li><li>貢獻者數量達到新高峰，在 2019 十月時有 915 個獨立的貢獻者，而且其中有 124 位是初次貢獻者</li><li>為了改善文件和使用者體驗成立新的族群</li><li>特別增加文件管理者這個新職位來強調文件在此專案中的重要性</li><li>運行多達 12 個受訓計畫</li></ul><h3 id="Falco-leaves-sandbox-steps-into-CNCF-Incubator"><a href="#Falco-leaves-sandbox-steps-into-CNCF-Incubator" class="headerlink" title="Falco leaves sandbox, steps into CNCF Incubator"></a><a href="https://devclass.com/2020/01/08/falco-leaves-sandbox-steps-into-cncf-incubator/" target="_blank" rel="noopener">Falco leaves sandbox, steps into CNCF Incubator</a></h3><p>Falco 是一個 Runtime Security 開源專案，他可以在應用程式運行時即時監控異常行為，並且透過通知來降低意外事件的風險，他是 Sysdig 所釋出的專案，而該公司目前仍然是主要推動者，該專案於在 2018 年十月加入 CNCF Sandbox，在歷經一年多後總算跑到 Incubator 中，官方對於這個專案寄與厚望，希望 Falco 可以成為一個加強 Security 的標準化組件，並且希望與 OPA (Open Policy Agent) 等預防工具，甚至是 Kubernetes RBAC 等授權機制整合，讓 Falco 變成一個 Cloud Native 的 Security 專案，並且預期在大家的採用之下，能夠讓團隊持續增加貢獻在這個專案的力量</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#10 第十期 - 新的一年，從香草 JS 的單元測試開始</title>
      <link href="/2020/01/07/10-unit-test-of-vanilla-js/"/>
      <url>/2020/01/07/10-unit-test-of-vanilla-js/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Unit-Test-香草-JS-的單元測試-feat-testing-library-dom"><a href="#Unit-Test-香草-JS-的單元測試-feat-testing-library-dom" class="headerlink" title="Unit Test | 香草 JS 的單元測試 feat. @testing-library/dom"></a><a href="https://medium.com/@GQSM/unit-test-%E9%A6%99%E8%8D%89-js-%E7%9A%84%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6-feat-testing-library-dom-f8539137bec9" target="_blank" rel="noopener">Unit Test | 香草 JS 的單元測試 feat. @testing-library/dom</a></h3><p>相信大家應該都聽過單元測試，但如果把單元測試放到前端來，就會因為各種前端框架的關係，讓測試的寫法產生差異，例如寫 Vue 的話可能會使用 @vue/test-utils，React 的朋友們大概是 react-testing-library、enzyme，但如果不使用前端框架呢？在沒使用前端框架的情況下，就沒辦法直接載入 component 搞定一切，這時候該如何將對應的 HTML 載入為 JavaScript 進行測試？</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="70-JavaScript-Interview-Questions"><a href="#70-JavaScript-Interview-Questions" class="headerlink" title="70 JavaScript Interview Questions"></a><a href="https://dev.to/macmacky/70-javascript-interview-questions-5gfi" target="_blank" rel="noopener">70 JavaScript Interview Questions</a></h3><p>每年中最讓人蠢蠢欲動的跳槽期又要來了，但是準備面試不管過了多久都是一件很麻煩的事情，特別是對於 JavaScript 這種獨特性非常高的語言來說，能考的面試題更是千奇百怪，如果你還沒有方向該如何開始準備，那絕對不能錯過本篇文章挑選的 JavaScript 精選 70 題。</p><h3 id="暸解單元測試"><a href="#暸解單元測試" class="headerlink" title="暸解單元測試"></a><a href="http://otischou.tw/2019/08/02/unit-test.html" target="_blank" rel="noopener">暸解單元測試</a></h3><p>如果各位讀者覺得學習測試的文章都太過分散，很難有一篇可以從「為什麼我們要寫測試？」、「如何思考怎麼寫測試案例？」、「好的測試案例長什麼樣子？」到各種測試的方法解說，導致測試學習門檻太高無法消化。但是現在！非常幸運的這裡剛好就有一篇精華大匯集，能夠成為各位迷途時的最佳指南！</p><h3 id="Redux-VS-React-Context-Which-one-should-you-choose"><a href="#Redux-VS-React-Context-Which-one-should-you-choose" class="headerlink" title="Redux VS React Context: Which one should you choose?"></a><a href="https://dev.to/ibrahima92/redux-vs-react-context-which-one-should-you-choose-2hhh" target="_blank" rel="noopener">Redux VS React Context: Which one should you choose?</a></h3><p>這是一個從年初被提到年尾的議題，在去年隨著 Hooks 申裝上 React，讓 React Context 變得更方便使用的同時，到底該如何在 Redux 和 React Context 間做選擇？再客觀的做出抉擇前！我們得先來了解 React Context 和 Hooks 使用的正確姿勢！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Moving-beyond-console-log-—-8-Console-Methods-You-Should-Use-When-Debugging-JavaScript-and-Node"><a href="#Moving-beyond-console-log-—-8-Console-Methods-You-Should-Use-When-Debugging-JavaScript-and-Node" class="headerlink" title="Moving beyond console.log() — 8 Console Methods You Should Use When Debugging JavaScript and Node"></a><a href="https://levelup.gitconnected.com/moving-beyond-console-log-8-console-methods-you-should-use-when-debugging-javascript-and-node-25f6ac840ada" target="_blank" rel="noopener">Moving beyond console.log() — 8 Console Methods You Should Use When Debugging JavaScript and Node</a></h3><p>還在傻傻的用 <code>console.log</code> 找 bug 嗎？除了 log 之外其實 console 模組還有提供很多不同的 method，像是 <code>console.assert</code>、<code>console.table</code> 等等，善用這些 method 才能讓你事半功倍</p><h3 id="How-programming-languages-got-their-names"><a href="#How-programming-languages-got-their-names" class="headerlink" title="How programming languages got their names"></a><a href="https://dev.to/scottydocs/how-programming-languages-got-their-names-207e" target="_blank" rel="noopener">How programming languages got their names</a></h3><p>今天看到一篇很有趣的文章，在講 Python、Ruby、Perl 等等程式語言的名字是怎麼來的，沒什麼技術含量，當作冷知識來看看還不錯XD</p><h3 id="設計模式其實是程式語言的缺陷？"><a href="#設計模式其實是程式語言的缺陷？" class="headerlink" title="設計模式其實是程式語言的缺陷？"></a><a href="https://link.medium.com/dbnTOLK6Z2" target="_blank" rel="noopener">設計模式其實是程式語言的缺陷？</a></h3><p>設計模式是程式語言的缺陷嗎？每個人的想法可能不太一樣，但不管你認不認同都可以來讀讀這篇文章，裡面舉了一些例子在講不同模式在不同語言中的實作差異，很值得一讀</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="JavaScript-Visualized-the-JavaScript-Engine"><a href="#JavaScript-Visualized-the-JavaScript-Engine" class="headerlink" title="JavaScript Visualized: the JavaScript Engine"></a><a href="https://dev.to/lydiahallie/javascript-visualized-the-javascript-engine-4cdf" target="_blank" rel="noopener">JavaScript Visualized: the JavaScript Engine</a></h3><p>使用動畫的方式來解釋 JS 內部引擎的實作，Byte Stream 是什麼？Token 是什麼？Interpreter 如何走訪 AST 樹，並且產生 byte code。用看動畫的方式來學習感覺好清楚呀！</p><h3 id="JavaScript-Map-Method-Explained-by-Going-On-a-Hike"><a href="#JavaScript-Map-Method-Explained-by-Going-On-a-Hike" class="headerlink" title="JavaScript Map() Method Explained by Going On a Hike"></a><a href="https://dev.to/kbk0125/javascript-map-method-explained-by-going-on-a-hike--537i" target="_blank" rel="noopener">JavaScript Map() Method Explained by Going On a Hike</a></h3><p>用「遠足」來解釋 JS 中的 Map 方法，太有創意了！😆</p><h3 id="Vue-Testing-Crash-Course"><a href="#Vue-Testing-Crash-Course" class="headerlink" title="Vue Testing Crash Course"></a><a href="https://dev.to/blacksonic/vue-testing-crash-course-59kl" target="_blank" rel="noopener">Vue Testing Crash Course</a></h3><p>用十個範例入門 Vue.js 測試，從單元測試，到整合測試，到端對端測試 (E2E Test) 通通都有。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Chaos-Mesh-Cloud-Native-Chaos-Engineering-Platform"><a href="#Chaos-Mesh-Cloud-Native-Chaos-Engineering-Platform" class="headerlink" title="Chaos Mesh - Cloud Native Chaos Engineering Platform"></a><a href="https://github.com/pingcap/chaos-mesh" target="_blank" rel="noopener">Chaos Mesh - Cloud Native Chaos Engineering Platform</a></h3><p>Chaos Mesh 是一個 Cloud Native 的開源 Chaos Engineering 平台，主要是用來測試 Kubernetes 環境，開發到目前主要有兩個元件：</p><ul><li><p>Chaos Operator：為 Chaos Mesh 的主要核心元件，他會在可管理範圍內幫忙注入 Chaos 在 Application 和 K8S 內，主要透過 Controller-manager, Chaos-daemon 和 Sidecar 這三個元件的互相配合來達成在系統中製造 Chaos 的目標</p></li><li><p>Chaos Dashboard：用來呈現在 Chaos 實驗中，線上服務所受到的影響</p></li></ul><h3 id="Injecting-Vault-Secrets-into-Kubernetes-Pods-via-a-Sidecar-amp-Dynamic-Database-Credentials-with-Vault-and-Kubernetes"><a href="#Injecting-Vault-Secrets-into-Kubernetes-Pods-via-a-Sidecar-amp-Dynamic-Database-Credentials-with-Vault-and-Kubernetes" class="headerlink" title="Injecting Vault Secrets into Kubernetes Pods via a Sidecar &amp; Dynamic Database Credentials with Vault and Kubernetes"></a><a href="https://www.hashicorp.com/blog/injecting-vault-secrets-into-kubernetes-pods-via-a-sidecar/" target="_blank" rel="noopener">Injecting Vault Secrets into Kubernetes Pods via a Sidecar</a> &amp; <a href="https://www.hashicorp.com/blog/dynamic-database-credentials-with-vault-and-kubernetes/" target="_blank" rel="noopener">Dynamic Database Credentials with Vault and Kubernetes</a></h3><p>HashiCorp 在 2019 年底的時候發出了兩篇如何使用 Vault 來管理 Kubernetes 的文章，這次比較不一樣的地方在於，HashiCorp 開源了一個叫做 <a href="https://github.com/hashicorp/vault-k8s" target="_blank" rel="noopener">vault-k8s</a> 的專案，透過<a href="https://www.vaultproject.io/docs/platform/k8s/injector/index.html" target="_blank" rel="noopener">官方文件</a> 可以很清楚的看到它其實是透過 Kubernetes Mutation Webhook Controller 來協助作業，當 Pod 裡面的 annotation 帶有 <code>vault.hashicorp.com/agent-inject: true</code> 時，他就會根據使用者定義的其他 annotation 來更改這個 Pod (當然就是要如何將 Credentials 給注入進來)；這樣的做法其實在 K8S 的世界是目前很流行的正規方式，而且也不需要 Application 去改動到什麼邏輯，所以還在煩惱自己在 K8S 中的 Application 該怎麼整合 Vault 的話，趕緊來試試看 vault-k8s 就對了</p><h3 id="AWS-Open-Source-blog-in-review-2019"><a href="#AWS-Open-Source-blog-in-review-2019" class="headerlink" title="AWS Open Source blog in review: 2019"></a><a href="https://aws.amazon.com/blogs/opensource/open-source-blog-review-2019/" target="_blank" rel="noopener">AWS Open Source blog in review: 2019</a></h3><p>最近 AWS 與開源軟體圈好像越鬧越<a href="https://www.ithome.com.tw/news/134923" target="_blank" rel="noopener">不愉快</a>，不過 AWS 的態度跟立場都還滿強硬的，一直都透過公司的 PR 在表明他們做法的正確性，也在跨完年後，把自己對於 Open Source 的貢獻再次條列一番，尤其是把 2019 下半年爭議最大的 Open Distro for ElasticSearch 特別高光，真是看得心驚膽跳…</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#9 第九期 - 今年的最後一天，星巴哥裡有你有我</title>
      <link href="/2019/12/31/09-starbugs-is-around-us/"/>
      <url>/2019/12/31/09-starbugs-is-around-us/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="從-IEEE-754-標準來看為什麼浮點誤差是無法避免的"><a href="#從-IEEE-754-標準來看為什麼浮點誤差是無法避免的" class="headerlink" title="從 IEEE 754 標準來看為什麼浮點誤差是無法避免的"></a><a href="https://medium.com/@larry850806/see-why-floating-point-error-can-not-be-avoided-from-ieee-754-809720b32175" target="_blank" rel="noopener">從 IEEE 754 標準來看為什麼浮點誤差是無法避免的</a></h3><p>為什麼浮點數運算會產生誤差而整數不會呢？ 如果誤差是無可避免的，那又該怎麼跟浮點誤差共處？<br>這週的專欄帶大家從 IEEE 754（二進位浮點數運算標準）出發，看看為什麼在小小 32 bit 的空間內有辦法表示那麼大範圍的浮點數，而浮點誤差又是從哪裡來的</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="【密技】台灣軟體業業界現況詳解、軟體工程師指南"><a href="#【密技】台灣軟體業業界現況詳解、軟體工程師指南" class="headerlink" title="【密技】台灣軟體業業界現況詳解、軟體工程師指南"></a><a href="https://m.gamer.com.tw/forum/C.php?bsn=60076&page=&snA=5444020&last=" target="_blank" rel="noopener">【密技】台灣軟體業業界現況詳解、軟體工程師指南</a></h3><p>又到了一整年的尾巴了，不曉得大家有沒有在考慮轉職？轉職一直是一件令人既期待又害怕的事情，常常好不容易下定決心，但又踏不出那一步，撇除掉同事問題，考慮的大概都會是「不曉得新公司文化適不適合我？」面對這個問題到底該怎麼辦？有沒有什麼經驗談？有的！本篇文章整理了台灣軟體業各種公司的現況，並將它們分成幾種種類加以說明！還有其他身為工程師該具備的重要能力！</p><h3 id="Why-amp-How-I-built-css-gg-A-life-story"><a href="#Why-amp-How-I-built-css-gg-A-life-story" class="headerlink" title="Why &amp; How I built css.gg - A life story."></a><a href="https://dev.to/astrit/why-how-did-i-build-500-css-only-icons-library-a-life-story-34on" target="_blank" rel="noopener">Why &amp; How I built css.gg - A life story.</a></h3><p>本篇文章講述完成一個 Project 背後的故事，作者因為喜歡，所以去做。他不會認為自己做的是很猛的東西，甚至認為這麼做是愚蠢的，但仍然完成了 <a href="https://css.gg/" target="_blank" rel="noopener">css.gg</a>，而且還發佈了文章向我們分享，為什麼？因為他真的很喜歡：）</p><p>有時候我們會慢慢變的像在被工作追著跑，然後忘記當初成為了這個職業的我們感到有多幸運，就像這篇文章吸引我的並不是 Project，而是作者熱愛 CSS 的精神，我很喜歡作者說的「I am trying to express how I felt on the beginning of the year and where I am now on the best just HAPPY」，瞬間起了一堆雞皮疙瘩！希望明年後年或大後年，我都仍然熱愛 JavaScript 技術！</p><h3 id="展望-JavaScript-的未來-2020-值得關注的-6-個新特性"><a href="#展望-JavaScript-的未來-2020-值得關注的-6-個新特性" class="headerlink" title="展望 JavaScript 的未來 - 2020 值得關注的 6 個新特性"></a><a href="https://www.linkedin.com/pulse/展望javascript的未來-2020值得關注的新特性-mike-huang-" target="_blank" rel="noopener">展望 JavaScript 的未來 - 2020 值得關注的 6 個新特性</a></h3><p>2020 年就要到了！一起來看看 JavaScript 會在明年釋出的版本中加入什麼樣的語法！不得不說，才看到第一個 Optional Chaining 就深深覺得可以省下很多判斷的功夫了 XD</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="一個資淺工程師年末的自我省視"><a href="#一個資淺工程師年末的自我省視" class="headerlink" title="一個資淺工程師年末的自我省視"></a><a href="https://blog.techbridge.cc/2016/12/31/review-2016/" target="_blank" rel="noopener">一個資淺工程師年末的自我省視</a></h3><p>不知不覺又到了年底，雖然已經是三年前的文章，但再看一次還是覺得很棒。新的一年，技術的廣度跟深度哪個重要？小公司跟大公司又該怎麼選？如果你也正在猶豫該往什麼方向前進的話，可以參考看看這篇文章的想法</p><h3 id="Stack-Overflow-Developer-Survey-2019"><a href="#Stack-Overflow-Developer-Survey-2019" class="headerlink" title="Stack Overflow Developer Survey 2019"></a><a href="https://insights.stackoverflow.com/survey/2019" target="_blank" rel="noopener">Stack Overflow Developer Survey 2019</a></h3><p>新的一年不知道該學什麼新技術嗎，快來看看 Stack Overflow 在今年做的調查：最熱門的語言是 JS、最受喜愛的語言是 Rust、最受喜愛的前端框架是 React，選個大家喜歡的學下去就對了</p><h3 id="A-Closer-Look-at-Go’s-sync-Package"><a href="#A-Closer-Look-at-Go’s-sync-Package" class="headerlink" title="A Closer Look at Go’s sync Package"></a><a href="https://link.medium.com/OPbIs9Q9P2" target="_blank" rel="noopener">A Closer Look at Go’s sync Package</a></h3><p>Goroutine 是 Go 最好用的 feature 之一，雖然用起來很方便，但只要 goroutine 一多就需要互相同步、溝通，這篇文章詳細介紹了 sync package 裡面的各種同步方式，包括 Mutex、WaitGroup 跟 Once 等等</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="A-Tour-of-the-Kubernetes-Source-Code-Part-One-From-kubectl-to-API-Server"><a href="#A-Tour-of-the-Kubernetes-Source-Code-Part-One-From-kubectl-to-API-Server" class="headerlink" title="A Tour of the Kubernetes Source Code Part One: From kubectl to API Server"></a><a href="https://developer.ibm.com/opentech/2017/06/21/tour-kubernetes-source-code-part-one-kubectl-api-server/" target="_blank" rel="noopener">A Tour of the Kubernetes Source Code Part One: From kubectl to API Server</a></h3><p>K8S 原始碼之旅第一部分，從 kubectl 到 API Server。 跑一個基本的 kubectl 指令，接著來追 kubectl 指令在 K8S 的原始碼如何實現作為起點，開始你的原始碼閱讀之旅。文中介紹了三個小技巧來追 K8S 原始碼，趕快來學習一下。</p><h3 id="Learning-Programming-Languages-with-Code-Challenges"><a href="#Learning-Programming-Languages-with-Code-Challenges" class="headerlink" title="Learning Programming Languages with Code Challenges"></a><a href="https://dev.to/jorge_rockr/learning-programming-languages-with-code-challenges-2gp4" target="_blank" rel="noopener">Learning Programming Languages with Code Challenges</a></h3><p>用  程式挑戰學程式語言，遵守五個原則：1. 選擇不是太簡單的挑戰。2. 使用 Cal Poly 的虛擬碼標準來寫下你的解法。3.用各種語言寫一遍。4.  上測試！用各種語言寫下單元測試。5. 解釋你學到了什麼。</p><h3 id="Computer-Science-from-the-Bottom-Up"><a href="#Computer-Science-from-the-Bottom-Up" class="headerlink" title="Computer Science from the Bottom Up"></a><a href="https://www.bottomupcs.com/index.xhtml" target="_blank" rel="noopener">Computer Science from the Bottom Up</a></h3><p>自下而上學計算機科學，一步一步學好滿滿的基礎知識。從二進位、計算機架構到作業系統。接著還有執行緒、記憶體、程式碼的編譯、在執行緒背後的知識 ，滿滿計算機科學知識的一本書，是不是應該收藏一下呢。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="How-Machine-Learning-Is-Used-by-Famous-Companies"><a href="#How-Machine-Learning-Is-Used-by-Famous-Companies" class="headerlink" title="How Machine Learning Is Used by Famous Companies?"></a><a href="https://www.geeksforgeeks.org/how-machine-learning-is-used-by-famous-companies/" target="_blank" rel="noopener">How Machine Learning Is Used by Famous Companies?</a></h3><p>Machine Learning 是當今炙手可熱的技術，甚至有人宣稱世界將因為他而毀滅，其他人則相信他可以讓生活更加的便利，而且不意外幾乎所有的公司都想要利用它來吸引更多的顧客，而事實上在過去四年採用 ML 的公司數目成長達到 270 %，而且不諱言只有科技公司有大量的資源來投資跟研究 ML 或是 AI，所以這篇文章主要想要聚焦於介紹如 Google，Facebook，Twitter，Baidu 跟 Pinterest 這類的大公司如何使用 ML</p><h3 id="4-DevOps-trends-to-watch-in-2020"><a href="#4-DevOps-trends-to-watch-in-2020" class="headerlink" title="4 DevOps trends to watch in 2020"></a><a href="https://enterprisersproject.com/article/2019/12/devops-trends-watch-2020" target="_blank" rel="noopener">4 DevOps trends to watch in 2020</a></h3><p>不管你才剛開始  往 DevOps 邁進或是已經是個老司機都無所謂，畢竟 DevOps 強調的就是持續的改善，所以趕緊來看看 2020 的 DevOps 四大趨勢吧！1) Cloud-Native 相關工具的採用 2) IT 領域的領導階層將會重新檢視 DevOps 的關鍵成功指標 3) DevOps 與 Security 間的關係將會越來越緊密 4) IT 領域的領導階層要去思考已經採用 DevOps 組織要如何再次進化</p><h3 id="Three-ways-to-reduce-the-costs-of-your-HTTP-S-API-on-AWS"><a href="#Three-ways-to-reduce-the-costs-of-your-HTTP-S-API-on-AWS" class="headerlink" title="Three ways to reduce the costs of your HTTP(S) API on AWS"></a><a href="https://gameanalytics.com/blog/reduce-costs-https-api-aws.html" target="_blank" rel="noopener">Three ways to reduce the costs of your HTTP(S) API on AWS</a></h3><p>三個可以幫助開發者節省運行在 AWS 內的 API 服務的小秘訣！1) 減少 HTTP Header 2) 減少 TLS Handshake 3) 檢查你的 Certificates，趕緊參考詳細文章來看看要怎麼實作與達成</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，一個先衝再說的男人。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#8 第八期 - 我的 ElasticSearch 進化之旅</title>
      <link href="/2019/12/24/08-elastic-evolution/"/>
      <url>/2019/12/24/08-elastic-evolution/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="我的-ElasticSearch-進化之旅"><a href="#我的-ElasticSearch-進化之旅" class="headerlink" title="我的 ElasticSearch 進化之旅"></a><a href="https://medium.com/starbugs/%E6%88%91%E7%9A%84-elasticsearch-log-%E6%94%B6%E9%9B%86%E4%B9%8B%E6%97%85-39016c3b9a29" target="_blank" rel="noopener">我的 ElasticSearch 進化之旅</a></h3><p>自己第一次接觸到 ElasticSearch 好像是六七年前了(遠目) 一路走來一直都是使用它來儲存 Log，畢竟 ELK 可是窮人版的 Splunk，這幾年來好像也沒有可以跟它匹敵的對手出現 (最近好像有個新的挑戰者受到不小的關注程度叫做 Grafana Loki)，而對他的印象從一開始到現在都沒有變過，就是…它相當地吃資源，不管是在 CPU, Memory 或是 Disk 上，而且隨著 Log 量級的成長會需要一直去升級和調整它，不然它一發起脾氣來可是很恐怖的，而今天這篇文章主要想要分享從我一開始架設 ElasticSearch 到目前為止的心得，並且會花比較多的篇幅講解目前的架設方式，總共有四個階段，用一句話來總結就是如何讓花費越來越低</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Make-Your-Own-create-react-app-Templates"><a href="#Make-Your-Own-create-react-app-Templates" class="headerlink" title="Make Your Own create-react-app Templates"></a><a href="https://dev.to/pallymore/make-your-own-create-react-app-templates-feo" target="_blank" rel="noopener">Make Your Own create-react-app Templates</a></h3><p>不曉得大家都怎麼創建一個新的 React 專案，以筆者來說都會先建立一個基本的專案，裡面有 package.json 和 webpack.config.js 等等，可以在 <code>npm i</code> 後直接 run 起來的那種，但每次也都還要再刪刪改改，把多餘的依賴 library 拿掉。而這些都只是過去式了！新版的 create-react-app 增加了 template 的功能！透過 template 的設置，你可以定義出自己的模板，還可以用 <code>publish</code> 和全世界分享你出色的 template！</p><h3 id="GraphQL-vs-REST-a-vending-machine-example"><a href="#GraphQL-vs-REST-a-vending-machine-example" class="headerlink" title="GraphQL vs REST - a vending machine example"></a><a href="https://dev.to/graphqleditor/graphql-vs-rest-a-vending-machine-example-1894" target="_blank" rel="noopener">GraphQL vs REST - a vending machine example</a></h3><p>記得兩個禮拜前的那篇 Gatsby 專欄嗎？在文章中有簡單解釋 GraphQL 是什麼和它的用法，如果大家覺得意猶未盡或是對 GraphQL 產生了什麼特別的情愫，那就可以參考這篇文章，看看如何從自動販賣機的使用角度解釋 GraphQL 和 REST 之間的不同！</p><h3 id="CSS-Grid-Layout-vs-CSS-Frameworks-When-To-Use-What"><a href="#CSS-Grid-Layout-vs-CSS-Frameworks-When-To-Use-What" class="headerlink" title="CSS Grid Layout vs CSS Frameworks: When To Use What"></a><a href="https://dzone.com/articles/css-grid-layout-vs-css-frameworks-when-to-use-what" target="_blank" rel="noopener">CSS Grid Layout vs CSS Frameworks: When To Use What</a></h3><p>Grid 的降臨，讓許多人都產生了「該不該繼續使用 CSS 的 Frameworks（例如：bootstrap）」的疑惑，因為撰寫原生的 CSS 能更將網頁玩轉在自己手裡，也不需要在使用上受限於 Frameworks 的 12 或 24 格，但是在放手之前又很捨不得 Frameworks 帶來的那些美好時光，到底要怎麼在兩者之間作出抉擇呢？</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Design-patterns-in-modern-JavaScript-development"><a href="#Design-patterns-in-modern-JavaScript-development" class="headerlink" title="Design patterns in modern JavaScript development"></a><a href="https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca" target="_blank" rel="noopener">Design patterns in modern JavaScript development</a></h3><p>隨著程式越寫越久、專案越寫越大，一定都會遇到程式碼難以管理的情況，尤其身為團隊的一份子又要常常要接手同事的扣，這時候就需要 Design Pattern 了，這篇用圖解介紹了 Single、Observer、Facade 三種 pattern，因為設計模式這東西是不分語言的，所以即便不寫 JS 還是可以看看～</p><h3 id="Why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array"><a href="#Why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" class="headerlink" title="Why is processing a sorted array faster than processing an unsorted array?"></a><a href="https://stackoverflow.com/questions/11227809/why-is-processing-a-sorted-array-faster-than-processing-an-unsorted-array" target="_blank" rel="noopener">Why is processing a sorted array faster than processing an unsorted array?</a></h3><p>這篇 StackOverflow 上的回答講 Branch Prediction 講得超好！非常值得一讀。原發問者的問題是他寫了一個程式用來把 array 中大於 128 的數字加總，但他發現把陣列排序過後加總速度會快上許多，超神奇 der</p><h3 id="「管理開源專案最難的不是技術而是人。」Homebrew-十年開發故事"><a href="#「管理開源專案最難的不是技術而是人。」Homebrew-十年開發故事" class="headerlink" title="「管理開源專案最難的不是技術而是人。」Homebrew 十年開發故事"></a><a href="https://link.medium.com/EWBDrM69B2" target="_blank" rel="noopener">「管理開源專案最難的不是技術而是人。」Homebrew 十年開發故事</a></h3><p>如果你也是用 Mac 進行開發的話，一定有用過 Homebrew 這個 package manager，而且它也曾經是 Github 上貢獻者最多的專案，一起來看看 Homebrew 這十年是怎麼走過來的吧</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Node-js-是如何和-libuv-以及-v8-一起合作的"><a href="#Node-js-是如何和-libuv-以及-v8-一起合作的" class="headerlink" title="Node.js 是如何和 libuv 以及 v8 一起合作的"></a><a href="https://juejin.im/post/5dd0b1fff265da0bae519ed4" target="_blank" rel="noopener">Node.js 是如何和 libuv 以及 v8 一起合作的</a></h3><p>該文章當前使用的nodejs版本是 v13.1.0 (網上那些分析 nodejs 源碼的文章不寫清基於的版本都是耍流氓)，非常幹貨的一篇文章，請耐心閱讀，否則建議收藏。</p><h3 id="讀-Koa2-源碼後的一些思考與實現"><a href="#讀-Koa2-源碼後的一些思考與實現" class="headerlink" title="讀 Koa2 源碼後的一些思考與實現"></a><a href="https://juejin.im/post/5decf130f265da339565d40e" target="_blank" rel="noopener">讀 Koa2 源碼後的一些思考與實現</a></h3><p>本文目的主要是讓大家學到一個 koa2 的基本流程，簡單實現 koa2，再去讀源碼有一個清晰的思路。實際源碼中還有很多優秀的值得我們學習的點。</p><h3 id="What’s-New-for-Node-js-in-2020"><a href="#What’s-New-for-Node-js-in-2020" class="headerlink" title="What’s New for Node.js in 2020"></a><a href="https://juejin.im/post/5df7665ee51d455819022a17" target="_blank" rel="noopener">What’s New for Node.js in 2020</a></h3><p>NodeJS 13版本有哪些新東西? 一些亮點：ECMAScript模塊、WebAssembly支持、Diagnostic report 診斷報告、對日期, 時間, 數字與貨幣格式的完全本地化支持、QUIC協議支持、V8 JavaScript引擎性能更新。在我們一頭紮進這些特性的細節之前, 讓我們先從NodeJS的release計劃中看看有什麽值得期待的.</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="8-great-pytest-plugins"><a href="#8-great-pytest-plugins" class="headerlink" title="8 great pytest plugins"></a><a href="https://opensource.com/article/18/6/pytest-plugins" target="_blank" rel="noopener">8 great pytest plugins</a></h3><p>相信應該有不少人會使用 pytest 來撰寫自動化測試，本篇文章介紹八大好用的 Plugin，1) pytest-sugar 2) pytest-cov 3) pytest-picked 4) pytest-instafail 5) pytest-tldr 6) pytest-xdist 7) pytest-django 8) django-test-plus，有興趣的人趕緊點開來看詳細介紹！</p><h3 id="docker-compose-vim"><a href="#docker-compose-vim" class="headerlink" title="docker-compose.vim"></a><a href="https://github.com/skanehira/docker-compose.vim" target="_blank" rel="noopener">docker-compose.vim</a></h3><p>一個有趣的小專案，讓 vim 可以直接管理 docker compose 的 plubin，僅獻給離不開 vim 的開發人員們XD</p><h3 id="Deduping-HA-Prometheus-Samples-in-Cortex"><a href="#Deduping-HA-Prometheus-Samples-in-Cortex" class="headerlink" title="Deduping HA Prometheus Samples in Cortex"></a><a href="https://grafana.com/blog/2019/10/03/deduping-ha-prometheus-samples-in-cortex/" target="_blank" rel="noopener">Deduping HA Prometheus Samples in Cortex</a></h3><p>應該有不少人都有在使用 Prometheus，以往常常會被問到，假如監控者本身也掛掉那該怎麼辦呢？！所以監控者本身的 HA 也是不可忽視的，此篇文章介紹如何利用 Cortex 來讓 Prometheus 達成 HA</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，蹲得越久，腳就越酸。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#7 第七期 - 開源專案的名模生死鬥</title>
      <link href="/2019/12/17/07-open-source-projects-fighting/"/>
      <url>/2019/12/17/07-open-source-projects-fighting/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="用-Harbor-架設-Private-Docker-Registry"><a href="#用-Harbor-架設-Private-Docker-Registry" class="headerlink" title="用 Harbor 架設 Private Docker Registry"></a><a href="https://medium.com/starbugs/4b8d9b57c824" target="_blank" rel="noopener">用 Harbor 架設 Private Docker Registry</a></h3><p>什麼是 Docker Registry ？ 顧名思義就是用來儲存鏡像檔 (Image) 的地方。例如：DockerHub 就是 Docker 官方提供的 Docker Registry，你可以把你自己編寫的 Dockerfile 編譯之後上傳到 Dockerhub ，讓網路上的其他人自由的下載，讓大家站在你的肩膀上寫程式。而 Harbor 可以讓你在公司內部自行架設</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="I-Built-A-Successful-Blog-In-One-Year-And-You-Can-Too-7-Tips-For-Enhancing-Readership"><a href="#I-Built-A-Successful-Blog-In-One-Year-And-You-Can-Too-7-Tips-For-Enhancing-Readership" class="headerlink" title="I Built A Successful Blog In One Year, And You Can Too; 7 Tips For Enhancing Readership"></a><a href="https://dev.to/emmawedekind/i-built-a-successful-blog-in-one-year-and-you-can-too-7-tips-for-enhancing-readership-5f8b" target="_blank" rel="noopener">I Built A Successful Blog In One Year, And You Can Too; 7 Tips For Enhancing Readership</a></h3><p>在資訊界走跳，每天都在接觸不同的東西，踩著不一樣的雷，填起一個個遇到的坑，是否會在某個時刻想要把自己的學習過程記錄下來，然後想著是不是有一天也能夠幫助到別人？但到底經營技術部落到底是一個什麼樣的感覺？或該怎麼做？如果你抱持著這些疑惑，那非常推薦閱讀這篇文章！我最喜歡裡面的一句「CREATE CONTENT YOU LOVE, NOT CONTENT YOU THINK OTHERS WANT TO ABSORB.」，那你們呢？快來告訴我：）</p><h3 id="Why-Your-Team-Needs-to-Start-Unit-Testing-Right-Now"><a href="#Why-Your-Team-Needs-to-Start-Unit-Testing-Right-Now" class="headerlink" title="Why Your Team Needs to Start Unit Testing Right Now"></a><a href="https://dzone.com/articles/why-your-team-needs-to-start-unit-testing-right-no" target="_blank" rel="noopener">Why Your Team Needs to Start Unit Testing Right Now</a></h3><p>為什麼需要替程式寫單元測試？不但要多花時間，而且就算不學也可以把事情做好，不是嗎？本篇作者不談程式，反而以一些生活上的簡單例子來點出為什麼該進行單元測試，很適合還在評估或是猶豫的朋友可以看一下！</p><h3 id="A-better-approach-for-testing-your-Redux-code"><a href="#A-better-approach-for-testing-your-Redux-code" class="headerlink" title="A better approach for testing your Redux code"></a><a href="https://blog-henriquebarcelos-dev.cdn.ampproject.org/c/s/blog.henriquebarcelos.dev/amp/a-better-approach-for-testing-your-redux-code-ck3dnpqnu00uro4s178b8aw3e" target="_blank" rel="noopener">A better approach for testing your Redux code</a></h3><p>該怎麼劃分一個單元的測試一直是很困擾人的問題，以 Redux 為例，要更新 store 內的資料就能劃分為 action 和 reducer 兩種，但是分別對 action 和 reducer 各自做測試並不會讓測試顯得有價值，還會導致每一個單元測試的內容都太破碎，完全無法透過閱讀單元測試發現錯誤在哪，以及如何使用或出錯。好的，那測試到底該怎麼做才好，一起來看看作者怎麼說！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="How-a-Go-Program-Compiles-down-to-Machine-Code"><a href="#How-a-Go-Program-Compiles-down-to-Machine-Code" class="headerlink" title="How a Go Program Compiles down to Machine Code"></a><a href="https://medium.com/better-programming/how-a-go-program-compiles-down-to-machine-code-e4532dc8b8ca" target="_blank" rel="noopener">How a Go Program Compiles down to Machine Code</a></h3><p>我幾乎不會推薦 Medium 付費牆上的文章，因為這樣很像在幫作者業配 XD，但這篇真的寫得太好了不得不推一下。這篇詳細講解了你寫的 Go 程式碼是怎麼被編譯成 machine code，過程包含切成 token、組成 AST、產生 SSA 等等步驟，而且還有範例可以跟著做，對於編譯器技術有興趣的朋友們真的不能不讀</p><h3 id="How-Medium-does-progressive-image-loading"><a href="#How-Medium-does-progressive-image-loading" class="headerlink" title="How Medium does progressive image loading"></a><a href="https://jmperezperez.com/medium-image-progressive-loading-placeholder/" target="_blank" rel="noopener">How Medium does progressive image loading</a></h3><p>如果你有常在看 Medium 上的文章，應該就會發現圖片都是漸進式的載入：先呈現一張模糊的圖片，接著等大圖下載好了再換成高解析度的圖，這樣就能給使用者一種圖片載入很快的錯覺，而 Google 跟 Facebook 也是用了類似的方法在加快圖片載入，滿有趣的</p><h3 id="The-Slowest-Quicksort"><a href="#The-Slowest-Quicksort" class="headerlink" title="The Slowest Quicksort"></a><a href="https://chasewilson.dev/blog/slowest-quicksort/" target="_blank" rel="noopener">The Slowest Quicksort</a></h3><p>作者先用 Rust 簡單寫了個 Quicksort，然後嘗試用 Box(Indirection)、Arc(Mutex)、Thread 等等進階技巧想辦法讓他變得超～級～慢，當然這個 Quicksort 是不可能真的拿來用的，只是藉這個例子告訴大家哪些功能不要亂用，除非你真的知道為什麼需要他</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Why-and-How-to-make-a-Requirements-txt"><a href="#Why-and-How-to-make-a-Requirements-txt" class="headerlink" title="Why and How to make a Requirements.txt"></a><a href="https://medium.com/@boscacci/why-and-how-to-make-a-requirements-txt-f329c685181e" target="_blank" rel="noopener">Why and How to make a Requirements.txt</a></h3><p>為什麼我們要使用 Requirements.txt，又該怎麼用呢？ 現在有了 <a href="https://pipenv.readthedocs.io/en/latest/" target="_blank" rel="noopener">Pipenv</a> 來管理開發環境很方便，但還是很想了解 Python 的各種歷史演進，因此本週就帶來一篇介紹 Requirements.txt 的文章。</p><h3 id="Computer-Science-vs-Software-Engineering-Which-Major-Is-Best-For-You"><a href="#Computer-Science-vs-Software-Engineering-Which-Major-Is-Best-For-You" class="headerlink" title="Computer Science vs. Software Engineering: Which Major Is Best For You?"></a><a href="https://medium.com/better-programming/computer-science-vs-software-engineering-which-one-is-a-better-major-88482c38446b" target="_blank" rel="noopener">Computer Science vs. Software Engineering: Which Major Is Best For You?</a></h3><p>資料科學和軟體開發，哪個一個更適合你呢？本文從工作前景、需要進修的課程…等等的角度，來探討你到底適合你一種呢？</p><h3 id="Understanding-Promises-in-JavaScript"><a href="#Understanding-Promises-in-JavaScript" class="headerlink" title="Understanding Promises in JavaScript"></a><a href="https://medium.com/better-programming/understanding-promises-in-javascript-13d99df067c1" target="_blank" rel="noopener">Understanding Promises in JavaScript</a></h3><p>史上最完整探討 JS 中的 Promise，從了解 Promise 開始，用圖片呈現 Promise 狀態的改變，並有多個範例解釋 Promise.All、Promise.race。最後歸納出幾個規則來使用 Promises，真是太豐富啦！</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Dev】開源專案的名模生死鬥"><a href="#【Dev】開源專案的名模生死鬥" class="headerlink" title="【Dev】開源專案的名模生死鬥"></a>【Dev】開源專案的名模生死鬥</h3><p>年終將近，越來越多的 2019 回顧或是 2020 展望的文章逐漸出爐，今天要來看的是十年來八大最糟，和 2019 年度九大開源專案，沒有想到 Ubuntu 就這樣被提了三次XD</p><p>★ 十年來最糟的八大開源專案：</p><ol><li>The Steam Machine</li><li>Ubuntu Unity</li><li>Ubuntu Phone</li><li>Ubuntu Edge</li><li>Apartheid Linux</li><li>Diaspora</li><li>RethinkDB</li><li>Samsung DeX for Linux</li></ol><p>★ 2019 年度九大開源專案：</p><ol><li>Kubernetes</li><li>Docker</li><li>System76 and coreboot</li><li>Linux phone</li><li>CentOS 8 and CentOS Stream</li><li>Debian 10</li><li>Migrate Android to the mainline Linux kernel</li><li>Linux Kernel 5.4</li><li>Microsoft Edge browser</li></ol><p>▍原文連結 1：<a href="https://www.techrepublic.com/article/8-of-the-worst-open-source-innovations-of-the-decade/" target="_blank" rel="noopener">https://www.techrepublic.com/article/8-of-the-worst-open-source-innovations-of-the-decade/</a><br>▍原文連結 2：<a href="https://www.techrepublic.com/article/9-of-the-biggest-open-source-stories-in-2019/" target="_blank" rel="noopener">https://www.techrepublic.com/article/9-of-the-biggest-open-source-stories-in-2019/</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，蹲得越久，腳就越酸。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#6 第六期 - 不是木村拓哉也能玩轉 Gatsby</title>
      <link href="/2019/12/10/06-this-gatsby-is-not-gatsby/"/>
      <url>/2019/12/10/06-this-gatsby-is-not-gatsby/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Gatsby-不是木村拓哉也能玩轉-Gatsby-—-feat-GitHub-Pages"><a href="#Gatsby-不是木村拓哉也能玩轉-Gatsby-—-feat-GitHub-Pages" class="headerlink" title="Gatsby | 不是木村拓哉也能玩轉 Gatsby — feat. GitHub Pages"></a><a href="https://medium.com/starbugs/gatsby-%E4%B8%8D%E6%98%AF%E6%9C%A8%E6%9D%91%E6%8B%93%E5%93%89%E4%B9%9F%E8%83%BD%E7%8E%A9%E8%BD%89-gatsby-feat-github-pages-fe2318a2e50d" target="_blank" rel="noopener">Gatsby | 不是木村拓哉也能玩轉 Gatsby — feat. GitHub Pages</a></h3><p>今天要介紹的 Gatsby 是一個網站的建構工具，不只是 React 的官網，還有其他多達七百多種的網站都是用 Gatsby 開發，而且更讓人興奮的是，這之中還包含兩百多個開源專案，Gatsby 到底擁有什麼魔力？就讓我開箱一波吧！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Oh-the-Suspense"><a href="#Oh-the-Suspense" class="headerlink" title="Oh, the Suspense!"></a><a href="https://react.christmas/2019/4" target="_blank" rel="noopener">Oh, the Suspense!</a></h3><p>記得上禮拜說的 Suspense 嗎？隨著時間不斷推移，在 <a href="https://www.youtube.com/playlist?list=PLPxbbTqCLbGHPxZpw4xj_Wwg8-fdNxJRh" target="_blank" rel="noopener">React Conf 2019</a> 結束後每過一天，就更是期待它的出現！國外也有許多開發者開始研究、了解，甚至是分享 Suspense 的基礎知識，趁現在浪還沒衝到沙灘，大家快跟上啊！</p><h3 id="CSS-flexbox-cheat-sheet-with-examples"><a href="#CSS-flexbox-cheat-sheet-with-examples" class="headerlink" title="CSS flexbox cheat sheet (with examples)"></a><a href="https://dev.to/ibrahima92/css-flexbox-cheat-sheet-with-examples-3j20" target="_blank" rel="noopener">CSS flexbox cheat sheet (with examples)</a></h3><p>在一開始接觸前端的時候，切版和 RWD 真的是心中永遠的痛，但讓我浮誇又不失真誠地說一句，自從學了 Flex 後，前端技能樹就像簽了金手指，手起刀落就是一個版！最後加碼一個人人都愛的 <a href="https://flexboxfroggy.com/#zh-tw" target="_blank" rel="noopener">青蛙遊戲</a> 和 <a href="https://www.hexschool.com/" target="_blank" rel="noopener">六角學院</a> 學員所製作的 <a href="https://hexschool.github.io/flexbox-pirate/index.html?fbclid=IwAR1f4YqcyjubPKQpvsKpGqJ_j0qV_tpiQ0FGSam9TooOPyS_O4h9IDVbd1A#/" target="_blank" rel="noopener">Flex Pirate</a> 讓大家小試 Flex！</p><h3 id="💻⚒-Productivity-and-tracking-extensions-for-Visual-Studio-Code-⚒💻"><a href="#💻⚒-Productivity-and-tracking-extensions-for-Visual-Studio-Code-⚒💻" class="headerlink" title="💻⚒ Productivity and tracking extensions for Visual Studio Code ⚒💻"></a><a href="https://dev.to/lampewebdev/productivity-and-tracking-extensions-for-visual-studio-code-1h84" target="_blank" rel="noopener">💻⚒ Productivity and tracking extensions for Visual Studio Code ⚒💻</a></h3><p>不曉得大家在 coding 的時候，有沒有注意過自己的「生產力」？什麼時候會是自己精神最集中的時候，或是過了多久時間後注意力會開始渙散，文中推薦了幾個 VS Code 的擴充套件，讓你能夠認知到自己一天下來的「生產力」為何，並用更有效率的方式運用開發時間！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="为什么-Redis-选择单线程模型"><a href="#为什么-Redis-选择单线程模型" class="headerlink" title="为什么 Redis 选择单线程模型"></a><a href="https://draveness.me/whys-the-design-redis-single-thread" target="_blank" rel="noopener">为什么 Redis 选择单线程模型</a></h3><p>Redis 是一個廣為人知的 in-memory 資料庫，只要說到 cache 第一時間都是想到他。雖然 Redis 真的跑很快，但其實 Redis 在大部分時候都只用 Single Thread 在處理指令，而這篇文章就是在探討為什麼 Redis 根本不需要 Multi Thread，滿有趣的分析</p><h3 id="Don’t-use-Go’s-default-HTTP-client"><a href="#Don’t-use-Go’s-default-HTTP-client" class="headerlink" title="Don’t use Go’s default HTTP client"></a><a href="https://link.medium.com/fMcDU2Brf2" target="_blank" rel="noopener">Don’t use Go’s default HTTP client</a></h3><p>雖然 Go 預設的 HTTP client 很好用，但因為他沒有預設的 timeout，所以不建議使用在 Production 上，真的要發 HTTP 請求給外部服務的話還是建議自己建一個有 timeout 的 Client</p><h3 id="What’s-New-for-Node-js-in-2020"><a href="#What’s-New-for-Node-js-in-2020" class="headerlink" title="What’s New for Node.js in 2020"></a><a href="https://developer.okta.com/blog/2019/12/04/whats-new-nodejs-2020" target="_blank" rel="noopener">What’s New for Node.js in 2020</a></h3><p>今年 2019 是 Node.js 的十歲生日，這十年來 Node.js 以飛快的速度成長，npm 上的模組數量也已經突破一百萬。而在接下來的 2020 年 Node.js 也要繼續帶來新的 feature，包括正式支援 ES Module、Web Assembly、QUIC protocol 等等，身為 Node.js 的愛好者真的超期待的～</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Python-at-Netflix"><a href="#Python-at-Netflix" class="headerlink" title="Python at Netflix"></a><a href="https://medium.com/netflix-techblog/python-at-netflix-bba45dae649e" target="_blank" rel="noopener">Python at Netflix</a></h3><p>Python 在 Netflix 裡面扮演什麼樣的角色？CDN？監控系統？還是機器學習？讓我們來一探究竟！</p><h3 id="34-Amazing-Python-Open-Source-Libraries-for-the-Past-Year-v-2019"><a href="#34-Amazing-Python-Open-Source-Libraries-for-the-Past-Year-v-2019" class="headerlink" title="34 Amazing Python Open Source Libraries for the Past Year (v.2019)"></a><a href="https://medium.mybridge.co/34-amazing-python-open-source-libraries-for-the-past-year-v-2019-93d6ee11aceb" target="_blank" rel="noopener">34 Amazing Python Open Source Libraries for the Past Year (v.2019)</a></h3><p>本文比較了一萬個 Python 的開源專案，並且挑選出了 34 個最實用的工具（平均星星數 3293 個）來幫助你更有效率的開發。</p><h3 id="Intro-to-Threads-and-Processes-in-Python"><a href="#Intro-to-Threads-and-Processes-in-Python" class="headerlink" title="Intro to Threads and Processes in Python"></a><a href="https://medium.com/@bfortuner/python-multithreading-vs-multiprocessing-73072ce5600b" target="_blank" rel="noopener">Intro to Threads and Processes in Python</a></h3><p>Python 中的 Thread 和 Process 到底是怎麼回事？跟 CPU 密集與 IO 密集又有什麼關係？趕緊來惡補一下。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Security】雖然已經有點年紀，但還是很流行且危險度高的-SQL-Injection"><a href="#【Security】雖然已經有點年紀，但還是很流行且危險度高的-SQL-Injection" class="headerlink" title="【Security】雖然已經有點年紀，但還是很流行且危險度高的 SQL Injection"></a>【Security】雖然已經有點年紀，但還是很流行且危險度高的 SQL Injection</h3><p>★ SQL 是設計用來管理儲存在 RDBMS 的資料，因此它可以用來存取，修改以及刪除資料，而且 RDBMS 也能夠從 SQL Statement 執行作業系統指令；所以一旦攻擊者成功地 SQL Injection，他將能夠忽略認證甚至是假裝成特定的使用者，偷偷修改資料，刪除資料，而且有些資料庫會設定成可以執行作業系統指令，如此一來攻擊者便獲得一台可以無視防火牆去存取內部網路其他服務的跳板</p><p>★ SQL Injection 要成功必須要滿足兩個條件 1) 一個使用 SQL 的關聯式資料庫，2) 讓使用者可以自行輸入 SQL 查詢的地方 (這不是廢話嗎XD)，在開發的過程中，錯誤資訊對於開發者很有幫助，同理可證，攻擊者也可以透過這些錯誤資訊獲得資料庫的結構，在某些情況下甚至能藉其將整個資料庫給摸透，因此記得在正式環境要將資料庫顯示錯誤資訊的功能關掉；另一個常見的技巧則是透過 UNION 去結合兩個或是多個 SELECT 語法將許多的搜尋結果合併成一個，會介紹這篇文章當然不是想要大家去攻擊別人的網站，而是希望在開發或是設定的時候可以避免掉這些問題的發生</p><p>★ 底下將會使用簡單的例子把各種基本技巧演示一次，這邊僅列出大標題，詳細範例可以參考原文</p><ul><li>BLIND SQL INJECTION (THE HARDER PART)</li><li>BLIND SQL INJECTION</li><li>TEST IF SUBSELECT WORKS</li><li>CHECK TABLE AND COLUMN NAMES</li><li>EXTRACT DATA FROM DATABASE</li></ul><p>▍原文連結：<a href="https://headleaks.com/2019/08/16/sql-injection-tutorial-for-beginners-aTROdTZIS05DSXVlYzlLS0lIZlEvZz09" target="_blank" rel="noopener">https://headleaks.com/2019/08/16/sql-injection-tutorial-for-beginners-aTROdTZIS05DSXVlYzlLS0lIZlEvZz09</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - Hi！我是神 Q 超人，蹲得越久，腳就越酸。</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#5 第五期 - 聽隔壁同事說 DDD 是 Deadline Driven Development 的意思</title>
      <link href="/2019/12/03/05-deadline-driven-development/"/>
      <url>/2019/12/03/05-deadline-driven-development/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="為什麼你應該幫-Rust-Vector-加上初始容量"><a href="#為什麼你應該幫-Rust-Vector-加上初始容量" class="headerlink" title="為什麼你應該幫 Rust Vector 加上初始容量"></a><a href="https://medium.com/starbugs/why-you-should-set-initial-capacity-for-rust-vector-4d68a9127abd" target="_blank" rel="noopener">為什麼你應該幫 Rust Vector 加上初始容量</a></h3><p>在比較高階的程式語言中通常都會提供 Growable Array 的型別，像 Rust 的 Vector、Go 的 Slice 還有 Java 的 ArrayList 就是很好的例子，這禮拜的文章會透過分析 Rust Vector 的擴充機制來告訴你為什麼應該要幫 Vector 加上初始容量。因為各個語言這種 Growable Array 的機制都差不多，所以就算你不是寫 Rust 的開發者還是可以來了解一下</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="理解-React-的下一步：Concurrent-Mode-與-Suspense"><a href="#理解-React-的下一步：Concurrent-Mode-與-Suspense" class="headerlink" title="理解 React 的下一步：Concurrent Mode 與 Suspense"></a><a href="https://medium.com/@chentsulin/%E7%90%86%E8%A7%A3-react-%E7%9A%84%E4%B8%8B%E4%B8%80%E6%AD%A5-concurrent-mode-%E8%88%87-suspense-327b8a3df0fe" target="_blank" rel="noopener">理解 React 的下一步：Concurrent Mode 與 Suspense</a></h3><p>作者精心整理了在 <a href="https://www.youtube.com/playlist?list=PLPxbbTqCLbGHPxZpw4xj_Wwg8-fdNxJRh" target="_blank" rel="noopener">React Conf 2019</a> 裡提到的許多未來會增加的功能！身為同是 React 的開發者，真的越看越興奮，就像去年期待 Hooks 發佈一樣，這次我最喜歡 Suspense 的使用，看完文章後快來告訴我你們最期待的是什麼！如果各位真的等不及，也可以先安裝 <a href="https://reactjs.org/docs/concurrent-mode-adoption.html" target="_blank" rel="noopener">experimental</a> 版本來玩玩看！</p><h3 id="React-SWR-取得遠端資料的殺手級函式庫"><a href="#React-SWR-取得遠端資料的殺手級函式庫" class="headerlink" title="React SWR | 取得遠端資料的殺手級函式庫"></a><a href="https://medium.com/%E6%89%8B%E5%AF%AB%E7%AD%86%E8%A8%98/react-swr-485b8e41ef78" target="_blank" rel="noopener">React SWR | 取得遠端資料的殺手級函式庫</a></h3><p>你也期待 Suspense 嗎？雖然 React 團隊還沒將它放進正式版（被歸納為實驗性質），但你仍然可以透過 <a href="https://swr.now.sh/" target="_blank" rel="noopener">SWR</a> 來搶先體會這強大的功能！SWR 是一個 Hooks，用來呼叫 API 來獲得資料。它能夠再 Render 時先從緩存取出舊資料顯示，並等 API 拿到最新的資料後更新畫面！簡單來說獲取到的資料就會先填好填滿，頁面不再經過等待 API 回應的空白，人生也從此跟著擁有色彩：）</p><h3 id="11-Best-JavaScript-Unit-Testing-Framework-and-Tools"><a href="#11-Best-JavaScript-Unit-Testing-Framework-and-Tools" class="headerlink" title="11 Best JavaScript Unit Testing Framework and Tools"></a><a href="https://geekflare.com/javascript-unit-testing/" target="_blank" rel="noopener">11 Best JavaScript Unit Testing Framework and Tools</a></h3><p>前端框架百百種，其中用來做測試的框架也不少，但該怎麼知道哪些測試框架用來做什麼？哪些又適合你目前需要的？作者精選出了 11 個最好的測試框架來介紹一番，看完後不管是喜歡功能或單純 Logo 的部分（本人覺得 <a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">Puppeteer</a> 的 Logo 滿 Q 的 XD），相信一定能選出適合讓你捧在手心的 Library. Right！</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Go-語言使用-Select-四大用法-AppleBOY"><a href="#Go-語言使用-Select-四大用法-AppleBOY" class="headerlink" title="Go 語言使用 Select 四大用法 | AppleBOY"></a><a href="https://blog.wu-boy.com/2019/11/four-tips-with-select-in-golang/" target="_blank" rel="noopener">Go 語言使用 Select 四大用法 | AppleBOY</a></h3><p>select 是 Go 裡面用來選取 channel 的語法，他可以用來做到隨機選取、超時處理等等功能，如果你是 Golang 初學者的話不妨來看看這些 select 的小技巧</p><h3 id="Announcing-core-Node-js-support-for-ECMAScript-modules"><a href="#Announcing-core-Node-js-support-for-ECMAScript-modules" class="headerlink" title="Announcing core Node.js support for ECMAScript modules"></a><a href="https://medium.com/@nodejs/announcing-core-node-js-support-for-ecmascript-modules-c5d6dc29b663" target="_blank" rel="noopener">Announcing core Node.js support for ECMAScript modules</a></h3><p>以前若要在 Node.js 裡面使用 ES module 的話要加上 <code>--experimental-module</code> flag 才行，而且副檔名還必須是 <code>.mjs</code>，用起來很不順手。但從 Node 13.2.0 開始終於正式支援 ES Module 了，而且還支援以 <code>.js</code> 作為副檔名，這代表前後端的 JS 模組系統終於要統一了，而曾經紅極一時的的 Common JS 也將慢慢走入歷史</p><h3 id="My-Favorite-Algorithm-Linear-Time-Median-Finding"><a href="#My-Favorite-Algorithm-Linear-Time-Median-Finding" class="headerlink" title="My Favorite Algorithm: Linear Time Median Finding"></a><a href="https://rcoh.me/posts/linear-time-median-finding/" target="_blank" rel="noopener">My Favorite Algorithm: Linear Time Median Finding</a></h3><p>很多人求中位數的方法應該都是把 Array 排序之後選中間的那個 element，這樣做的時間複雜度是 O(nlogn) 也不算差，但其實善用 Divide and Conquer 的話可以做到 O(n)，如果有天你需要求一個巨大 Array 的中位數可能就會用到這個演算法</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="DevOps-Is-Dead-Long-Live-NoOps"><a href="#DevOps-Is-Dead-Long-Live-NoOps" class="headerlink" title="DevOps Is Dead, Long Live NoOps"></a><a href="https://medium.com/better-programming/devop-noops-difference-504dfc4e9faa" target="_blank" rel="noopener">DevOps Is Dead, Long Live NoOps</a></h3><p>DevOps 已死，NoOps 長存。DevOps 和 NoOps 有什麼不一樣？DevOps 意思是開發人員和運維人員合作，從設計到交付，定義服務的生命週期。而 NoOps 意思是沒有運維。它的哲學「去除所有平台的管理」和「減少在開發者和架構中」的摩擦 – 節錄翻譯自原文。</p><h3 id="AsyncIO-for-the-Working-Python-Developer"><a href="#AsyncIO-for-the-Working-Python-Developer" class="headerlink" title="AsyncIO for the Working Python Developer"></a><a href="https://hackernoon.com/asyncio-for-the-working-python-developer-5c468e6e2e8e" target="_blank" rel="noopener">AsyncIO for the Working Python Developer</a></h3><p>asyncio 是在 Python 3.4 中被介紹的新併發 (concurrency) 模組。它設計用於協程 (coroutines) 和 Python 中的 futures，以簡化非同步的程式碼，讓非同步的程式碼也可以像同步的程式碼一樣可讀 – 節錄翻譯自原文。</p><h3 id="What-the-mock-—-A-cheatsheet-for-mocking-in-Python"><a href="#What-the-mock-—-A-cheatsheet-for-mocking-in-Python" class="headerlink" title="What the mock? — A cheatsheet for mocking in Python"></a><a href="https://medium.com/@yeraydiazdiaz/what-the-mock-cheatsheet-mocking-in-python-6a71db997832" target="_blank" rel="noopener">What the mock? — A cheatsheet for mocking in Python</a></h3><p>測試中 Mock 是不可或缺的一部分，那麼在 Python 中的 Mock 又該如何寫呢？來看看這篇豐富的小抄吧。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Kubernetes】Service-Catalog-是什麼？它可以吃嗎？"><a href="#【Kubernetes】Service-Catalog-是什麼？它可以吃嗎？" class="headerlink" title="【Kubernetes】Service Catalog 是什麼？它可以吃嗎？"></a>【Kubernetes】Service Catalog 是什麼？它可以吃嗎？</h3><p>★ 身為 K8S 的使用者或是維護人員，常常必須要負責在整個架構中配置各式各樣的資源，雖然已經使用了像是 Service, ConfigMap 和 Secret…等 K8S 內部資源，但是有時候需要使用到由 Cloud Provider 所提供的外部服務，以 AWS 提供的 RDS 為例，他讓使用者可以抽象地存取關聯式資料庫服務，但是當想要把 RDS 整合到既有的 K8S 叢集中，讓他可以像是 K8S 內部資源一樣來使用的話，還是有不少的手工需要完成，例如怎麼把 Authentication 搞定…</p><p>★ 而 Service Catalog 用一句話來說，就是一個讓在叢集內的運行的應用程式可以簡單地去使用外部資源和應用的擴展 API，譬如幫忙去處理配置資料庫，管理 Queue 的服務或是 Object Storage…等，而且只要 Client 端的實作有符合 Open Service Broker API 就能達成；可以將 K8S Service Catalog 視為是另外一個運行在原本 K8S 中的 K8S 叢集，雖然 K8S 有很多種資源類型 (Pod, Deployment, ReplicaSet…等)，不過 K8S Service Catalog 只有四種</p><ol><li>ClusterServiceBroker：負責提供外部服務的系統</li><li>CluserServiceClass：外部系統所能提供的服務</li><li>ServiceInstance：代表外部已經配置完成的服務</li><li>ServiceBinding：一個或是多個 Pod 與 ServiceInstance 的 Binding</li></ol><p>★ 而就像剛剛提到的要將 K8S Service Catalog 視為是另外一個 K8S 叢集，他只是為了特定目的設計而成，而組成它的元件有底下三個，Controller 會一直監視 API Server，當檢查到有任何變更時 (例如添加新資源需要創建)，對應的 Service Broker 就會負責去建立跟配置此資源，Controller 本身並不會自己動手去做</p><ol><li>API Server</li><li>etcd Datastore</li><li>Controller Manager</li></ol><p>★ 講了那麼多理論，有沒有覺得可以永遠躲在 K8S 裡面，不用再管外面世界的紛紛擾擾了XD 有興趣的人可以趕緊根據文章內的 Demo 嘗試看看</p><p>▍原文連結：<a href="https://www-magalix-com.cdn.ampproject.org/v/s/www.magalix.com/blog/kubernetes-service-catalog-101?hs_amp=true&amp;usqp=mq331AQCKAE%3D&amp;amp_js_v=0.1" target="_blank" rel="noopener">https://www-magalix-com.cdn.ampproject.org/v/s/www.magalix.com/blog/kubernetes-service-catalog-101?hs_amp=true&amp;usqp=mq331AQCKAE%3D&amp;amp_js_v=0.1</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#4 第四期 - Wow 現在連 Policy 也可以寫成 Code 了！</title>
      <link href="/2019/11/26/04-policy-as-code/"/>
      <url>/2019/11/26/04-policy-as-code/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Policy-as-Code-Introduction-—-Shift-Left-Testing-Cloud-Infrastructure-StarBugs-星巴哥技術週刊"><a href="#Policy-as-Code-Introduction-—-Shift-Left-Testing-Cloud-Infrastructure-StarBugs-星巴哥技術週刊" class="headerlink" title="Policy as Code Introduction — Shift-Left Testing Cloud Infrastructure | StarBugs 星巴哥技術週刊"></a><a href="https://medium.com/starbugs/policy-as-code-introduction-43332748aa4a" target="_blank" rel="noopener">Policy as Code Introduction — Shift-Left Testing Cloud Infrastructure | StarBugs 星巴哥技術週刊</a></h3><p>常常可以看到科技新聞提到誰家的資料庫或是搜尋引擎可以被公開存取，某間大公司的 AWS S3 含有的客戶資料外洩了…等；Security 在未來的世界中所佔的重要性將越來越重要，希望透過此文章介紹在 Policy As Code 領域逐漸崛起的 Open Policy Agent，並進一步透過實際案例示範如何使用其撰寫的程式碼來測試 Cloud Infrastructure，確保企業內的應用服務遵守 Compliance Policy 和 Security Policy，並且達成最佳的維運方式！</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="軟體開發中的“無緒”"><a href="#軟體開發中的“無緒”" class="headerlink" title="軟體開發中的“無緒”"></a><a href="https://wadehuang1993.github.io/blog/2019/11/21/Cluelessness/" target="_blank" rel="noopener">軟體開發中的“無緒”</a></h3><p>看過網球王子都知道什麼叫做「無我的境界」，但當了那麼久的工程師還沒有聽過「無緒」這東西。無緒 (Cluelessness) 由 Martin Rinard 提出，指的是在開發和維護軟體系統時，應該避免讓開發人員深入了解系統！</p><h3 id="Angular-Unit-Test-學習Jasmine的使用技巧-測試異步的四種方式"><a href="#Angular-Unit-Test-學習Jasmine的使用技巧-測試異步的四種方式" class="headerlink" title="[ Angular Unit Test ] 學習Jasmine的使用技巧 + 測試異步的四種方式"></a><a href="https://jhlstudy.blogspot.com/2019/10/angular-unit-test-jasmine.html?fbclid=IwAR3AbDCVO5cAX_rLRhxEE1gMzI3x-AQWBngXXuPdsUKHjQ5i826-si0Lpuc" target="_blank" rel="noopener">[ Angular Unit Test ] 學習Jasmine的使用技巧 + 測試異步的四種方式</a></h3><p>在剛開始寫單元測試的時候，都會遇到『知道想寫哪些驗證，卻不知道要怎麼把這些驗證寫出來』，然後會開始去看官網的各式範例，但卻發現看不懂在做些什麼事，而這其實只是沒先去了解如何使用 Jasmine，讓我們和作者一起踏入前端的單元測試！</p><h3 id="11-Top-React-Developer-Tools-for-2020"><a href="#11-Top-React-Developer-Tools-for-2020" class="headerlink" title="11 Top React Developer Tools for 2020"></a><a href="https://blog.bitsrc.io/11-top-react-developer-tools-for-2020-3860f734030b" target="_blank" rel="noopener">11 Top React Developer Tools for 2020</a></h3><p>最後還是不忘本的來一個 React 的選讀XD，雖然 2019 年還沒有過完，但作者還是精選出了 2020 年推薦各位擁有的 11 個 React 頂級開發工具，千萬不要懷疑為什麼是 2020 年，只需要記得你值得擁有這一切：）</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Git-怎麼這麼難用？Git-Flow-好習慣-不再苦惱"><a href="#Git-怎麼這麼難用？Git-Flow-好習慣-不再苦惱" class="headerlink" title="Git 怎麼這麼難用？Git Flow + 好習慣 = 不再苦惱"></a><a href="https://medium.com/kuma%E8%80%81%E5%B8%AB%E7%9A%84%E8%BB%9F%E9%AB%94%E5%B7%A5%E7%A8%8B%E6%95%99%E5%AE%A4/%E5%9F%BA%E7%A4%8E-git-flow-%E5%B7%A5%E4%BD%9C%E6%B3%95-fa50b1dddc4f" target="_blank" rel="noopener">Git 怎麼這麼難用？Git Flow + 好習慣 = 不再苦惱</a></h3><p>自從 Linus Torvald 發明了新一代的版本控制工具 Git 之後，Git 就逐漸成為開發人員的標準配備。但如果你才剛開始學習 Git，你可能會覺得 Git 真的超難用，因為三不五時就 push 不上去、或是要幫同事修各種 conflict 搞得自己灰頭土臉。而這篇文章介紹了 Git Flow，告訴你什麼時後該開 branch，各種 branch 又有什麼不同的功能，很適合剛接觸 Git 的新手</p><h3 id="Clean-Architecture-in-Go"><a href="#Clean-Architecture-in-Go" class="headerlink" title="Clean Architecture in Go"></a><a href="https://medium.com/@hatajoe/clean-architecture-in-go-4030f11ec1b1" target="_blank" rel="noopener">Clean Architecture in Go</a></h3><p>如果說 <a href="https://www.tenlong.com.tw/products/9789862017050" target="_blank" rel="noopener">Clean Code</a> 是教你做出精美的磚頭，那 <a href="https://www.tenlong.com.tw/products/9789864342945" target="_blank" rel="noopener">Clean Architecture</a> 就是教你如何把房子蓋好。在 Clean Architecture 的架構中你的應用程式可以被拆分為 Entities、Use Cases 等等好幾層，其中每層都負責不同的功能。但你知道的，理論跟實務間總是有一段不小的落差，所以推薦這篇文章用實際的例子告訴你，Go 的程式應該要怎麼拆分才能符合 Clean Architecture 的精神，非常受用的一篇文章</p><h3 id="如何為自己的-podcast-寫一個網站"><a href="#如何為自己的-podcast-寫一個網站" class="headerlink" title="如何為自己的 podcast 寫一個網站"></a><a href="https://medium.com/the-bayesian-trap/intro-to-overbuild-podcast-3d3ff725beba" target="_blank" rel="noopener">如何為自己的 podcast 寫一個網站</a></h3><p>不知道大家有沒有在聽 Podcast 的習慣，我自己是滿喜歡在上學途中或是搭車時聽，用 Podcast 開啟新的一天總覺得心情特別好。這邊我要跟大家推薦最近無意間發現的新 Podcast - Overbuild 頂樓加蓋，主講人 Denny 跟 Affe 分別是工程師跟 PM，雖然 Podcast 的內容跟技術沒有很直接相關，但他們會分享一些在工作上或是人生道路上的想法，如果你也有在聽 Podcast 的話我個人很推～</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="英國／我的英國求職故事"><a href="#英國／我的英國求職故事" class="headerlink" title="英國／我的英國求職故事"></a><a href="https://bugtender.com/blog/about_find_an_engineer_job_in_uk" target="_blank" rel="noopener">英國／我的英國求職故事</a></h3><p>台灣土生土長工程師 Bugtender，1x Developer 一倍工程師，如何飄洋過海？面臨著存款一天一天的燃燒的囧境，究竟，Bugtender 是否可以找到工作呢？</p><h3 id="浪漫潛逃至歐洲工作不是一場夢"><a href="#浪漫潛逃至歐洲工作不是一場夢" class="headerlink" title="浪漫潛逃至歐洲工作不是一場夢"></a><a href="https://column.meet.jobs/how-to-work-in-europe-part1/" target="_blank" rel="noopener">浪漫潛逃至歐洲工作不是一場夢</a></h3><p>Work Life Balance 是每個人嚮往的生活，那麼到歐洲生活是不是真的有想像的這麼美好?又有哪些求職策略又有可以採用呢？讓我們繼續看下去。</p><h3 id="在英國職場文化，「After-Work-Social」是人際溝通的重要一環"><a href="#在英國職場文化，「After-Work-Social」是人際溝通的重要一環" class="headerlink" title="在英國職場文化，「After Work Social」是人際溝通的重要一環"></a><a href="https://www.thenewslens.com/article/121312" target="_blank" rel="noopener">在英國職場文化，「After Work Social」是人際溝通的重要一環</a></h3><p>英國人講話注重禮貌以不說死為原則，即便英國腔聽起來再性感，講話迂迴偶而會想把彼此都掐死。但在這邊學習到最多的，也正是因為這邊的複雜度與挑戰性。每天在有限的的工時內規劃、斡旋、執行，推銷成果，也是筆者在這邊覺得偶而充滿挫折，想買張機票飛回台灣吃滷肉飯一了百了，最後還是心甘情願吃著英國臭豬和炸魚薯條的原因。 by Wei Chen Lee</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="Welcome-to-the-Matrix"><a href="#Welcome-to-the-Matrix" class="headerlink" title="Welcome to the Matrix"></a><a href="https://jenkins.io/blog/2019/11/22/welcome-to-the-matrix/" target="_blank" rel="noopener">Welcome to the Matrix</a></h3><p>使用 Jenkins Pipeline 時覺得一樣的動作常常重複在做嗎？這意味著在 Pipeline 中必須一直複製相同的 Stage，所以假如要修改的話，複製的 Stage 通通都要改一次 T_T 維護這樣的 Pipeline 檔案是很累人的一件事情，因此在 Declarative Pipeline 1.5.0-beta1 推出了 matrix 功能，讓使用者可以列舉出一個類似陣列的變數，然後讓 stage 可以類似像是 Foreach 一樣平行執行所有的內容</p><h3 id="Loki-Reaches-GA-with-v1-0-0-Release"><a href="#Loki-Reaches-GA-with-v1-0-0-Release" class="headerlink" title="Loki Reaches GA with v1.0.0 Release"></a><a href="https://grafana.com/blog/2019/11/20/loki-reaches-ga-with-v1.0.0-release/" target="_blank" rel="noopener">Loki Reaches GA with v1.0.0 Release</a></h3><p>號稱 ELK 的最大對手 A.K.A. Loki 在日前總算推出 1.0.0 GA 版本，跟之前的版本相比，大大的增加了其穩定性，官方很有自信地表示已經在 Production 環境運行 Loki 在收集 Log，也推薦大家跑在自己的 Production 環境中 (偷笑)</p><h3 id="10-simple-Linux-tips-which-save-50-of-my-time-in-the-command-line"><a href="#10-simple-Linux-tips-which-save-50-of-my-time-in-the-command-line" class="headerlink" title="10 simple Linux tips which save 50% of my time in the command line"></a><a href="https://dev.to/javinpaul/10-simple-linux-tips-which-save-50-of-my-time-in-the-command-line-4moo" target="_blank" rel="noopener">10 simple Linux tips which save 50% of my time in the command line</a></h3><p>工作上會接觸到 Linux 環境的人，應該或多或少會使用到 Terminal 來運行指令，處理工作項目；每次看到用起來很順暢的神人同事時，是不是會一直感到很羨慕呢？這篇文章的作者推薦能夠讓他節省 50% 時間的 10 個簡單的 Linux Tips，趕快學起來，讓自己變成別人羨慕的對象！</p><h3 id="Termd"><a href="#Termd" class="headerlink" title="Termd"></a><a href="https://github.com/tj/go-termd" target="_blank" rel="noopener">Termd</a></h3><p>Termd 是一個可以讓 Terminal Render 出 Markdown 格式文件的小工具 (包含 Code Block 和 Syntax Highlighting)，推薦給離不開 Termainal 的深度中毒者 = =+</p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#3 第三期 - 歡迎進入駭客的思考領域</title>
      <link href="/2019/11/19/03-learning-hacker-thinking/"/>
      <url>/2019/11/19/03-learning-hacker-thinking/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="進入駭客的思考領域-—-從-DEVCORE-CONF-學駭客思維-StarBugs-星巴哥技術週刊"><a href="#進入駭客的思考領域-—-從-DEVCORE-CONF-學駭客思維-StarBugs-星巴哥技術週刊" class="headerlink" title="進入駭客的思考領域 — 從 DEVCORE CONF 學駭客思維 | StarBugs 星巴哥技術週刊"></a><a href="https://medium.com/@LukaTW/learn-hacker-thinking-b6bb4f189e3a" target="_blank" rel="noopener">進入駭客的思考領域 — 從 DEVCORE CONF 學駭客思維 | StarBugs 星巴哥技術週刊</a></h3><p>什麼是駭客思維？讓我們跟著 DEVCORE 舉辦的頂級資安研討會學習駭客是如何規劃攻擊，進一步提昇資訊安全的意識。</p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="如何讓自己成為失敗的軟體工程師"><a href="#如何讓自己成為失敗的軟體工程師" class="headerlink" title="如何讓自己成為失敗的軟體工程師"></a><a href="https://blog.niclin.tw/2019/08/26/how-to-be-a-bad-developer/?fbclid=IwAR2u7deyJ5exEKD_NToqhpBgUJS_Me7kyodEmC1loTzwyFK6mHbYgqkH3EE" target="_blank" rel="noopener">如何讓自己成為失敗的軟體工程師</a></h3><p>所有的文章都在告訴你如何成為一位好工程師，怎麼寫好程式碼才不造成別人的困擾，但知己知彼敗戰百勝，與其盲目追求完美的程式，不如先來確認自己有沒有不小心踩到「失敗的工程師」那條線。</p><h3 id="忍者程式碼（Ninja-Code）"><a href="#忍者程式碼（Ninja-Code）" class="headerlink" title="忍者程式碼（Ninja Code）"></a><a href="https://medium.com/@lenchen/忍者程式碼-ninja-code-cc5e4a70bafc" target="_blank" rel="noopener">忍者程式碼（Ninja Code）</a></h3><p>本篇文章的作者翻開覆蓋的魔法卡「傑出的反串之手」，以忍者為例子重新詮釋何謂程式碼，讓程式中的每一段都像真正的忍者一樣輕鬆、迅速、暢快、無負擔，最後千萬別忘了還要像秘密捲軸一樣讓人讀不懂看不明白！</p><h3 id="工程師應該放心大膽地創造技術負債"><a href="#工程師應該放心大膽地創造技術負債" class="headerlink" title="工程師應該放心大膽地創造技術負債"></a><a href="https://medium.com/@p5d12000/工程師應該放心大膽地創造技術負債-a8022d85810" target="_blank" rel="noopener">工程師應該放心大膽地創造技術負債</a></h3><p>歡迎來到本週最幹話之首，文中闡述了現今資訊業最黑暗的一面，我想只有看破一切的工程師才有辦法將技術負債闡述得如此透徹。不過記得有些人走著走著就散了，有些文章看著看著也笑一下就好，但各位身邊的環境如有雷同，就純屬巧合了！我們下週見：）</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="A-journey-from-containerization-to-orchestration-and-beyond"><a href="#A-journey-from-containerization-to-orchestration-and-beyond" class="headerlink" title="A journey from containerization to orchestration and beyond"></a><a href="https://iximiuz.com/en/posts/journey-from-containerization-to-orchestration-and-beyond/" target="_blank" rel="noopener">A journey from containerization to orchestration and beyond</a></h3><p>這幾年 container 相關的技術逐漸成熟，也越來越多公司導入 Docker 及 K8s。當然，這些技術的最底層還是 Linux 提供的基本功能：namespace 跟 cgroups，本文從這些底層的技術慢慢講到最 High Level 的容器編排，看完之後也更能了解 runc、docker、K8s 這些技術的定位</p><h3 id="用傳紙條理解-WebSocket"><a href="#用傳紙條理解-WebSocket" class="headerlink" title="用傳紙條理解 WebSocket"></a><a href="https://medium.com/dezchuang/rookie-to-learn-websocket-cfc7b172daa3" target="_blank" rel="noopener">用傳紙條理解 WebSocket</a></h3><p>一直以來都滿喜歡這種用故事來講解技術的文章，如果你不太清楚 WebSocket 相對於傳統的 Polling 有什麼優點，那這篇文章就是給你看的！而且文末也有一個 Node.js 小範例可以自己寫來玩玩看</p><h3 id="Understanding-Rust-Lifetimes"><a href="#Understanding-Rust-Lifetimes" class="headerlink" title="Understanding Rust Lifetimes"></a><a href="https://medium.com/nearprotocol/understanding-rust-lifetimes-e813bcd405fa" target="_blank" rel="noopener">Understanding Rust Lifetimes</a></h3><p>變數的生命週期是 Rust 最重要但也最複雜的 feature，我本人剛寫 Rust 時也常被他搞得暈頭轉向，所以推薦這篇文章給搞不清楚變數所有權的 Rust 苦手們，希望各位在看了之後能有如醍醐灌頂、發現 Rust 生命週期的美好</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Learn-by-Contributing"><a href="#Learn-by-Contributing" class="headerlink" title="Learn by Contributing"></a><a href="https://dev.to/agoldis/learn-by-contributing-27g6" target="_blank" rel="noopener">Learn by Contributing</a></h3><p>貢獻開源軟體可以讓你學到什麼？其中最重要的幾點分別是：你可以跟專家合作，你可以見識到專業的軟體開發方式，並且證明你的專業技術是實打實的。這篇文章提供非常具體的作法讓你跟著實踐，推薦一讀。</p><h3 id="JavaScript-The-prototype-chain-in-depth"><a href="#JavaScript-The-prototype-chain-in-depth" class="headerlink" title="JavaScript - The prototype chain in depth"></a><a href="https://www.debuggr.io/js-prototype-in-depth/" target="_blank" rel="noopener">JavaScript - The prototype chain in depth</a></h3><p>深入 JS 原型鏈 - 從 JS 原型鏈學習物件繼承的概念。</p><h3 id="Common-Node-js-mistakes-in-Lambda"><a href="#Common-Node-js-mistakes-in-Lambda" class="headerlink" title="Common Node.js mistakes in Lambda"></a><a href="https://dev.to/theburningmonk/common-node-js-mistakes-in-lambda-4a4j" target="_blank" rel="noopener">Common Node.js mistakes in Lambda</a></h3><p>在 AWS Lambda 上寫 Node.js 時，幾個常犯的錯誤。由 AWS Serverless Hero @theburningmonk 帶給大家的開發經驗談。</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Dev】究竟為什麼升級到-Python3-需要花這麼久的時間？"><a href="#【Dev】究竟為什麼升級到-Python3-需要花這麼久的時間？" class="headerlink" title="【Dev】究竟為什麼升級到 Python3 需要花這麼久的時間？"></a>【Dev】究竟為什麼升級到 Python3 需要花這麼久的時間？</h3><p>★ 在 2014 年的 Pycon，Python 的父親 Guido van Rossum 告訴大家是該時候往 Python 3 邁進了，在日常的工作中採用它 ；在經過了多年的努力之後，終於決定在 2020/01/01 停止支援 Python 2，有些公司已經升級完畢，，然而應該還有很多的公司不會馬上動手，究竟這 Python 3 到底是命運的安排，還是情感的糾結，或是另有隱情，真相到底是什麼 讓我們繼續看下去。</p><p>★ Python 3 最主要的目的是要將舊版最大的問題給移除掉 (將所有的 String Render 成 Unicode)， 開發團隊認為大家應該會馬上大刀闊斧進行升級，所以讓 Python 3 不向下相容，然而大家卻都不買單，因為認為改進的東西不多，結果導致 Python 2 還是持續地開發下去，新版的採用速度究竟有多慢呢？雖然 Python 3 主要版本在 2008 就發布了，但一直拖到現在XD</p><p>★ 在一開始有很多不要採用 Python 3 的好理由，最主要的理由當然就是其不向下相容，這點導致很多主要的 Library 都很猶豫升級，而且一開始其實要 Porting 過去也不簡單，但隨著 2016 Python 3.5 推出許多重大功能 (Matrix Multiplication, Asyncio, OrderedDict 的加速)，而且後續版本的持續推出 (Pathlib, f-string manipulation)，隨著這些改變，還有人們主要使用的 Library 也都升級，這才讓結束支援 Python 2 成為可能，</p><p>★ 雖然 Python 3 是目前的主要版本，但是根據 Package 下載數據顯示，截至 2019/09 仍然至少有 40% 的下載量來自 2.7，目前大部分 Flask 的下載都已經是 3 了，但是 botocore (AWS Python SDK) 只有 26% 下載的下載量是 3，不過雖然 2 即將結束支援，但既有的程式還是可以動，只是假如後續有資安漏洞或是有什麼 Bug 不會再繼續維護了，不過還有很多周邊的廠商也要跟著更新，所以可以預期可能還需要數年之久</p><p>★ 而究竟為什麼採用的速度會這麼的慢呢？為什麼不要等到採用率更高才停止支援 2 呢？其實大多數的大型組織，他們採用新技術的速度比你我想像的還要慢很多很多，例如許多銀行還是在使用 FORTRAN 跟 COBOL；儘管有許多公司描述他們如何升級，但有更多的公司應該會長期保留在 Python 2 上面，為什麼會這樣呢？因為升級要花很多的時間，而且這是一個高度的政治決策，再加上人都有慣性，即使是在高技術含量的公司內，例如 Facebook 為了採用 Python 3，Jason Fried 從 2014 年開始重寫服務，一路走來，他犯了很多的錯誤，也改了很多的代碼，還需要做新開發人員的培訓，後來他又跑去跟 ŁukaszLanga合作將Instagram 轉換為Python 3，花了差不多十個月；</p><p>★ 其次是安全問題，最諷刺的點在於，正在看這篇文章的你，可能會認為不升級的風險比較大，但是在較大的組織中，並不允許內部人員自己升級 Python，必須要由管理員或是安全團隊來負責推送更新，所以如果 Python 2 是安全團隊認可使用的版本，那麼可能需要做出重大的努力才能說服人們將其切換到 3，這種情況尤其可能發生在到嚴格監管和政府的環境中；Python 經歷了從 2 到 3 的漫漫長路，個人和一些新創公司都已經採用新版了，第二次的大遷移即將發生在大型企業開始遷移的時候，所以在 2020 應該可以看到剛剛提到的 40% 繼續下降，但變化應該是慢慢地遞減，而且也還會有許多的公司繼續運行 2.7 跟大家一起迎向未來</p><p>▍原文連結：<a href="https://stackoverflow.blog/2019/11/14/why-is-the-migration-to-python-3-taking-so-long/" target="_blank" rel="noopener">https://stackoverflow.blog/2019/11/14/why-is-the-migration-to-python-3-taking-so-long/</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>#2 第二期 - 還好沒有第二期就富奸</title>
      <link href="/2019/11/12/02-from-A-to-Z-side-project/"/>
      <url>/2019/11/12/02-from-A-to-Z-side-project/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="Side-Project-從無到有-Medium-轉-Markdown-feat-NodeJS-StarBugs-星巴哥技術週刊"><a href="#Side-Project-從無到有-Medium-轉-Markdown-feat-NodeJS-StarBugs-星巴哥技術週刊" class="headerlink" title="Side Project 從無到有-Medium 轉 Markdown feat. NodeJS | StarBugs 星巴哥技術週刊"></a><a href="https://medium.com/starbugs/side-project-%E5%BE%9E%E7%84%A1%E5%88%B0%E6%9C%89-medium-%E8%BD%89-markdown-feat-nodejs-732acd68a7cb" target="_blank" rel="noopener">Side Project 從無到有-Medium 轉 Markdown feat. NodeJS | StarBugs 星巴哥技術週刊</a></h3><p>Hi！大家好，我是神 Q 超人，不曉得大家都怎麼面對自己想做的 Side Project，有時候想了很久還沒開始，有時候好不容易開始了卻失敗，但就我而言無論是否開始、失敗或成功，都會在整段旅程中享受與思考的拉扯拔河，並從這個過程中感到滿足，我想工程師的生活就是那麼樸實無華且枯燥 - 本週專欄作者 <a href="https://medium.com/@GQSM" target="_blank" rel="noopener">@GQSM</a></p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Slow-down-your-code-with-goroutines"><a href="#Slow-down-your-code-with-goroutines" class="headerlink" title="Slow down your code with goroutines"></a><a href="https://appliedgo.net/concurrencyslower/" target="_blank" rel="noopener">Slow down your code with goroutines</a></h3><p>Goroutine 是 Go 最廣為人知的 feature，善用 Goroutine 可以提高程式的效能，但若不小心誤用了，也可能使你的程式比原本還慢</p><h3 id="The-Twelve-Factor-App"><a href="#The-Twelve-Factor-App" class="headerlink" title="The Twelve-Factor App"></a><a href="https://12factor.net/" target="_blank" rel="noopener">The Twelve-Factor App</a></h3><p>12-Factor App 是一種建立軟體服務的方法，裡面講到了該怎麼設計你的服務才能易於擴充、部署但又不會使你的 Codebase 太肥，我自己看完這一系列也覺得收穫很多，所以在這邊分享給大家</p><h3 id="編譯器-LLVM-淺淺玩"><a href="#編譯器-LLVM-淺淺玩" class="headerlink" title="編譯器 LLVM 淺淺玩"></a><a href="https://medium.com/@zetavg/%E7%B7%A8%E8%AD%AF%E5%99%A8-llvm-%E6%B7%BA%E6%B7%BA%E7%8E%A9-42a58c7a7309" target="_blank" rel="noopener">編譯器 LLVM 淺淺玩</a></h3><p>也許你聽過 LLVM、知道他跟編譯器有點關係，但你知道他到底在紅什麼嗎？而編譯器又是如何把程式碼 Compile 成 Machine Code？如果不知道的話快來看看這篇～惡補一下編譯器的基礎知識</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="Bulletproof-node-js-project-architecture"><a href="#Bulletproof-node-js-project-architecture" class="headerlink" title="Bulletproof node.js project architecture"></a><a href="https://dev.to/santypk4/bulletproof-node-js-project-architecture-4epf" target="_blank" rel="noopener">Bulletproof node.js project architecture</a></h3><p>Express 是個很棒的 node.js 框架，但是它沒有給你任何的線索，讓你知道如何組織你的 node.js 專案，這確實是個需要解決的問題。本文將帶給你一套可以依循的方法，讓你知道如何組織你的資料夾結構，如何使用三層架構，又如何使用服務層、發佈/訂閱層、依賴注入、單元測試…等等的方法來組織你的專案。</p><h3 id="The-perfect-architecture-flow-for-your-next-Node-js-project"><a href="#The-perfect-architecture-flow-for-your-next-Node-js-project" class="headerlink" title="The perfect architecture flow for your next Node.js project"></a><a href="https://dev.to/bnevilleoneill/the-perfect-architecture-flow-for-your-next-node-js-project-1ail" target="_blank" rel="noopener">The perfect architecture flow for your next Node.js project</a></h3><p>你的下一個 Node.js 專案可以考慮的完美的架構流程。本篇文章指出了「不好的」專案架構導致了哪些問題，並進一步的歸納出我們可以採用的開發流程，讓 Node.js 專案變得程式碼更可讀、更乾淨，能夠重複使用程式碼，避免重複，這樣我們可以更簡單地在專案中加上新的功能。聽起來是不是很棒呢 :)</p><h3 id="Everything-you-need-to-know-about-Node-js"><a href="#Everything-you-need-to-know-about-Node-js" class="headerlink" title="Everything you need to know about Node.js"></a><a href="https://dev.to/jorge_rockr/everything-you-need-to-know-about-node-js-lnc" target="_blank" rel="noopener">Everything you need to know about Node.js</a></h3><p>本文列出了幾個不錯的思考點：1. 這個世界在 Node.js 出現之前是什麼樣子？ 2. C10k  問題的探討 3. Nodejs 與 Event Loop 4. CPU 計算密集型的問題 5.Worker Threads 是什麼，能吃嘛？ (本文有很高的自 high 成分請酌量服用 XD)</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Kubernetes】Skaffold-是什麼？他可以吃嗎？"><a href="#【Kubernetes】Skaffold-是什麼？他可以吃嗎？" class="headerlink" title="【Kubernetes】Skaffold 是什麼？他可以吃嗎？"></a>【Kubernetes】Skaffold 是什麼？他可以吃嗎？</h3><p>★ Skaffold 最近 GA 了，他究竟是一個什麼樣的專案呢？在 2017 年時 Google 觀察到當開發者在開發原生 K8S 應用程式時，花了相當多的時間在建置和管理 Container Images，而且必須手動更新 K8S 的 Manifests，就算每次只改了一點點程式碼也要重新 Deploy，所以決定要開發一個工具來將這些任務給自動化，幫助開發者集中他們的注意力在撰寫和維護程式碼上，而不是深陷 “編輯-&gt;除錯-&gt;部署” 這重複性的泥淖當中，Skaffold 也因此應運而生</p><p>★ Skaffold 最主要的指令為 <code>skaffold dev</code>，他會去監視本地端的程式碼，一旦有改變被偵測到，應用程式就會自動即時的重新 Build 和 Deploy 到你的 K8S Cluster 中；而且 Skaffold 已經不再只是 Build 和 Deploy 的工具而已，他已經成為可以增加開發者速度和生產力的工具</p><p>★ 除了本地端開發之外，Skaffold 也很適合跟 CI/CD 框架整合在一起，例如單一個指令 <code>skaffold run</code> 運行在 Pipeline 中的話，就可以輕易的將應用程式 Build 跟 Deploy 完成，而其實他是由 <code>skaffold build</code> 跟 <code>skaffold deploy</code> 兩個指令所組成，有需要的人也可以分開使用；<code>skaffold render</code> 可以用來先建立應用程式的 Image 並且輸出 K8S 的 Template Manifest, 而不是真的部屬到 K8S Cluster 中，可以用來跟 GitOps 流程整合在一起</p><p>★ 他的 Profile 功能可以讓開發者使用同樣的 Skaffold 組態 Deploy 應用程式到不同的 K8S Cluster 中，而不需要修改任何的東西；另外還有一個強大的指令叫做 <code>skaffold debug</code>，除了可以持續不斷地 Build 和 Deploy 應用程式之外，還會幫忙 Forward 任何需要的 Debugging Port 到你的本地端機器，反正就是要盡可能地讓開發者省時省事專心地開發程式就對了，說了那麼多，有沒有想要心動手癢想要嘗試了呢？</p><p>▍相關連結 1：<a href="https://cloud.google.com/blog/products/application-development/kubernetes-development-simplified-skaffold-is-now-ga" target="_blank" rel="noopener">https://cloud.google.com/blog/products/application-development/kubernetes-development-simplified-skaffold-is-now-ga</a></p><p>▍相關連結 2：<a href="https://devclass.com/2019/11/08/google-releases-skaffold-to-simplify-kubernetes-app-lifecycle-management/" target="_blank" rel="noopener">https://devclass.com/2019/11/08/google-releases-skaffold-to-simplify-kubernetes-app-lifecycle-management/</a></p><p>▍相關連結 3：<a href="https://www.cbronline.com/news/skaffold-kubernetes-istio" target="_blank" rel="noopener">https://www.cbronline.com/news/skaffold-kubernetes-istio</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> AWS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>#1 創刊號 - 我就是要寫技術週刊</title>
      <link href="/2019/11/05/01-starbugs-weekly/"/>
      <url>/2019/11/05/01-starbugs-weekly/</url>
      
        <content type="html"><![CDATA[<h2 id="本週專欄"><a href="#本週專欄" class="headerlink" title="本週專欄"></a>本週專欄</h2><h3 id="WebAssembly-實戰-–-讓-Go-與-JS-在瀏覽器上共舞-StarBugs-星巴哥技術週刊"><a href="#WebAssembly-實戰-–-讓-Go-與-JS-在瀏覽器上共舞-StarBugs-星巴哥技術週刊" class="headerlink" title="WebAssembly 實戰 – 讓 Go 與 JS 在瀏覽器上共舞 | StarBugs 星巴哥技術週刊"></a><a href="https://medium.com/starbugs/run-golang-on-browser-using-wasm-c0db53d89775" target="_blank" rel="noopener">WebAssembly 實戰 – 讓 Go 與 JS 在瀏覽器上共舞 | StarBugs 星巴哥技術週刊</a></h3><p>如果你有在關注前端的話應該會聽過 WebAssembly 這東西，WebAssembly 是一種跑在瀏覽器上的低階語言，他在瀏覽器上能以接近原生應用的效能執行，所以以前受限於效能而比較難做到的那些應用（遊戲、繪圖軟體等），以後很有可能在網頁上就可以做到，光想到就覺得好興奮啊啊啊 - 本週專欄作者 <a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a></p><h2 id="神-Q-超人"><a href="#神-Q-超人" class="headerlink" title="神 Q 超人"></a>神 Q 超人</h2><h3 id="Making-your-UI-tests-resilient-to-change"><a href="#Making-your-UI-tests-resilient-to-change" class="headerlink" title="Making your UI tests resilient to change"></a><a href="https://kentcdodds.com/blog/making-your-ui-tests-resilient-to-change/?fbclid=IwAR3vvhHhFzsiwp9P9SrH7Gv-x5MdstQLR2wWUq9Ta5C1jqTUsYfhlaakl8c" target="_blank" rel="noopener">Making your UI tests resilient to change</a></h3><p>身為前端工程師，寫下單元測試一定很帥，但是如果這種帥度被客戶要求改個什麼 UI，明明行為沒變測試案例卻爆掉我就覺得不行，還在用 ClassName 或 children 找 DOM 嗎？該是時候拯救那脆弱的測試案例了！</p><h3 id="務實的react-component-unit-test"><a href="#務實的react-component-unit-test" class="headerlink" title="務實的react component unit test"></a><a href="https://www.morrisctech.com/2019/07/03/react_render_test/?fbclid=IwAR2e8ihe2Lfy9OcCNiU9Ah7XkzcgWpRZA-hieK5IAGpeFyNS1LyKm1Iieu8" target="_blank" rel="noopener">務實的react component unit test</a></h3><p>你知道 React 該怎麼做測試嗎？來來來！有些事情就是得從實務開始，寫下最務實的 Component Unit Test！</p><h3 id="Atomic-Design"><a href="#Atomic-Design" class="headerlink" title="Atomic Design"></a><a href="http://atomicdesign.bradfrost.com/table-of-contents/" target="_blank" rel="noopener">Atomic Design</a></h3><p>雖然 Luka 說要推薦文章，但我無法控制我的手貼上這本「Atomic Design（原子設計）」，因為我只給大家最好的。本書的作者利用「原子」來提設計，意思是將每個元素切割成原子，並透過不同的原子互相組合成分子、物件、模板一直到建構出整個頁面，是一種以分層的方式創建介面的設計方法。不學不會怎樣，學了很不一樣。</p><h2 id="Larry-Lu"><a href="#Larry-Lu" class="headerlink" title="Larry Lu"></a>Larry Lu</h2><h3 id="Understanding-Worker-Threads-in-Node-js"><a href="#Understanding-Worker-Threads-in-Node-js" class="headerlink" title="Understanding Worker Threads in Node.js"></a><a href="https://nodesource.com/blog/worker-threads-nodejs/" target="_blank" rel="noopener">Understanding Worker Threads in Node.js</a></h3><p>Node.js 從 v10.5 開始支援 Worker Thread，也就是說 Node.js 終於可以寫多核心程式，以後再也不能嘴 Node.js 只能跑 Single Thread 了</p><h3 id="Kubernetes-Comic"><a href="#Kubernetes-Comic" class="headerlink" title="Kubernetes Comic"></a><a href="https://cloud.google.com/kubernetes-engine/kubernetes-comic/" target="_blank" rel="noopener">Kubernetes Comic</a></h3><p>常常聽到 Kubernetes(K8s) 但卻不知道那是什麼嗎，那不妨看看這篇漫畫，裡面有講到 k8s 的設計理念和目標，看完之後應該會比較知道 K8s 在夯什麼</p><h3 id="VSCode-批踢踢"><a href="#VSCode-批踢踢" class="headerlink" title="VSCode 批踢踢"></a><a href="https://marketplace.visualstudio.com/items?itemName=Yukai.vscode-ptt" target="_blank" rel="noopener">VSCode 批踢踢</a></h3><p>有在用 VSCode 而且又喜歡在上班時間偷逛 PTT 的各位有福啦，VSCode PTT 能讓你直接在 VSCode 裡逛 PTT，老闆你以為我在寫扣嗎？我其實在上批踢踢啊！！</p><h2 id="LukaTW"><a href="#LukaTW" class="headerlink" title="LukaTW"></a>LukaTW</h2><h3 id="What-happened-when-I-turned-on-notifications-for-every-app-site-and-tool-for-a-month"><a href="#What-happened-when-I-turned-on-notifications-for-every-app-site-and-tool-for-a-month" class="headerlink" title="What happened when I turned on notifications for every app, site, and tool for a month"></a><a href="https://blog.rescuetime.com/notification-madness-focus-experiment/" target="_blank" rel="noopener">What happened when I turned on notifications for every app, site, and tool for a month</a></h3><p>Daniel 把手機上的所有通知關掉，進行了一個月的實驗，赫然發現手機通知不僅僅在打擾我們，同時也在摧毀我們的生產力。</p><h3 id="Killed-by-Google"><a href="#Killed-by-Google" class="headerlink" title="Killed by Google"></a><a href="https://killedbygoogle.com/" target="_blank" rel="noopener">Killed by Google</a></h3><p>多少的服務被 Google 給滅了？我們懷念它。</p><h3 id="The-next-career-step-for-Senior-Software-Engineers"><a href="#The-next-career-step-for-Senior-Software-Engineers" class="headerlink" title="The next career step for Senior Software Engineers"></a><a href="https://codewithoutrules.com/2018/10/10/beyond-senior-software-engineer/?utm_source=wanqu.co&utm_campaign=Wanqu+Daily&utm_medium=website" target="_blank" rel="noopener">The next career step for Senior Software Engineers</a></h3><p>你已經工作了好幾年，也被升職了好幾次，但此時卻不禁有點徬徨，下一步該何去何從？</p><h3 id="How-to-Build-Good-Software"><a href="#How-to-Build-Good-Software" class="headerlink" title="How to Build Good Software"></a><a href="https://www.csc.gov.sg/articles/how-to-build-good-software" target="_blank" rel="noopener">How to Build Good Software</a></h3><p>爛軟體是怎麼被做出來的？又該如何做一個好的軟體呢？三個原則：從簡單開始，持續尋找問題並解決，儘可能雇用最好的工程師。看到亮點了嘛？趕快跟你老闆講，嘿！</p><h3 id="AWS-costs-every-programmer-should-know"><a href="#AWS-costs-every-programmer-should-know" class="headerlink" title="AWS costs every programmer should know"></a><a href="https://david-codes.hatanian.com/2019/06/09/aws-costs-every-programmer-should-now.html" target="_blank" rel="noopener">AWS costs every programmer should know</a></h3><p>AWS 的計費方式很複雜對吧？David 用一個簡單易懂的方式，讓我們可以快速的估計 AWS 到底花了我們多少錢。是不是很棒呢？</p><h2 id="smalltown"><a href="#smalltown" class="headerlink" title="smalltown"></a>smalltown</h2><h3 id="【Web】HTTP3-的前世今生與未來"><a href="#【Web】HTTP3-的前世今生與未來" class="headerlink" title="【Web】HTTP3 的前世今生與未來"></a>【Web】HTTP3 的前世今生與未來</h3><p>★ 從 Cloudflare 宣布要支援 QUIC 與 HTTP/3 已經過去一年了，新的協定旨在建立更快，更可靠與更安全的網路世界，而在這一年之間，Cloudflare 與網路界的巨頭包含 Google Chrome 和 Mozilla Firefox 一起撰寫 HTTP/3 與 QUIC 的標準文件，而在一年後，Cloudflare 終於宣佈其 Edge Network 已經可以支援 QUIC 與 HTTP/3 了！接著來看看為什麼需要它！</p><p>★ HTTP/1.0 是在 1996 年出現的，它定義了今天我們所熟知的 HTTP 基礎，在 Client 與 Server 當中，每一個 HTTP 的 Request/Response 都會建立一個 TCP 連線，所以在每個請求結束之前，都必須完成 TCP 與 TLS 的 Handshakes，最慘的在於 TCP 開始傳輸資料之前會有一段暖身的時間，稱之為 Slow Start，他會避免傳輸網路所無法負載的封包，但也造成無法立即使用所有的網路頻寬</p><p>★ 幾年後 HTTP/1.1 嘗試提出 keep-alive 來解決這個問題，讓 Client 端可以重複利用 TCP 連線，不過有一好沒兩好，當多個 Request 共用相同的連線時，他們必須要排隊一個一個來；隨著 Web 技術的發展，瀏覽器發現在同一時間其需要更多的連線，而 HTTP/1.1 只允許 Client 端同一時間進行一次的 Request/Response 交換，並無法達成同一時間有多個連線</p><p>★ 因此又有了 HTTP/2，其引進了 HTTP Streams 的概念，讓 HTTP 可以在同一個 TCP 連線內實作多個不同的 HTTP 資料交換，讓瀏覽器可以更有效率地重複利用 TCP 連線，有一好沒兩好再次發生…由於網路壅塞的關係，所有共用同一個連線的請求都一起可能造成封包的遺失…</p><p>★ 所以救世主 HTTP/3 就登場了！其捨棄使用 TCP 來當作 Session 的傳輸層，而是使用一種稱為 QUIC 的新通訊協定來解決上面提到的所有問題，更詳細的內容就請參閱詳細原文了！</p><p>▍原文連結：<a href="https://blog.cloudflare.com/http3-the-past-present-and-future/" target="_blank" rel="noopener">https://blog.cloudflare.com/http3-the-past-present-and-future/</a></p><h2 id="StarBugs-Weekly"><a href="#StarBugs-Weekly" class="headerlink" title="StarBugs Weekly"></a>StarBugs Weekly</h2><p>StarBugs Weekly 由一群不寫文章就會想要亂花錢，但是又沒有那麼多錢，只好繼續寫文章的開發者所創立。<br>內容包含 Web 前端、中端、後端、DevOps、產品開發、精實創業，一切跟產品有關的知識，都是我們的守備範圍！</p><p>Curators:</p><ul><li><a href="https://medium.com/@gqsm" target="_blank" rel="noopener">@GQSM</a> - 82 年次，單純相信努力不會騙人</li><li><a href="https://medium.com/@larry850806" target="_blank" rel="noopener">@Larry850806</a> - 我是 Larry，傳說中的 0.1 倍工程師！</li><li><a href="https://medium.com/@LukaTW" target="_blank" rel="noopener">@LukaTW</a> - 一名全身都是死角的工程師。</li><li><a href="https://medium.com/@smalltown" target="_blank" rel="noopener">@smalltown</a> - 熱愛鑽研各種可以提升雲端服務品質及增進團隊開發效率的開源技術</li></ul><h2 id="Feedback"><a href="#Feedback" class="headerlink" title="Feedback"></a>Feedback</h2><p>想看什麼內容，告訴我們！ <a href="https://starbugs.typeform.com/to/mAk2Bk" target="_blank" rel="noopener">點我回饋意見</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
